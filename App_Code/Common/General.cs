using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.SqlClient;
using System.Data;
using System.Web.UI.WebControls;
using System.Security.Cryptography;
using System.Globalization;
using System.IO;
using System.Configuration;
using DataAccessLayer;
/// <summary>
/// Summary description for General
/// </summary>
public class General
{

    private SqlConnection connSqlHelper = new SqlConnection(ConfigurationManager.ConnectionStrings["TSiPASSSkils"].ConnectionString);

    Globavaribles gbp = new Globavaribles();

    DB.DB con = new DB.DB();
    DataSet ds;
    DataTable dt;
    SqlDataAdapter myDataAdapter;

    comFunctions cmf = new comFunctions();
    public string intPayamid { get; set; }
    public string BomaCode { get; set; }
    public string BomaName { get; set; }
    public string Latitude { get; set; }
    public string Longitude { get; set; }

    public string StateName { get; set; }
    public string StateCode { get; set; }
    public string sLatitude { get; set; }
    public string sLongitude { get; set; }

    public string sPopulation { get; set; }
    public string CPopulation { get; set; }
    public string PPopulation { get; set; }
    public string BPopulation { get; set; }


    public string intStateid { get; set; }
    public string CountieCode { get; set; }
    public string CountieName { get; set; }
    public string CLatitude { get; set; }
    public string CLongitude { get; set; }

    // public string intPayamid { get; set; }
    public string intCountieid { get; set; }
    public string PayamCode { get; set; }
    public string PayamName { get; set; }
    public string PLatitude { get; set; }
    public string PLongitude { get; set; }


    public string AreaofWork { get; set; }

    public string Disability { get; set; }

    public string Designation { get; set; }


    public string intAreaofWork { get; set; }
    public string WorkActivity { get; set; }

    public string Ministry { get; set; }
    public string TstName { get; set; }

    public string Address { get; set; }
    public string Email { get; set; }
    public string ContactNo { get; set; }
    public string Type { get; set; }
    public string intDesgid { get; set; }
    public string Status { get; set; }

    public string IPName { get; set; }
    public string TypeofIP { get; set; }
    public string AuthorisedPerson { get; set; }

    public string SecondaryContactNo { get; set; }

    public string Website { get; set; }
    public string SecondaryAuthorisedPerson { get; set; }


    public string intCountyAdm { get; set; }
    public string CountyAdmName { get; set; }

    public string PDCName { get; set; }
    public string Contact_No { get; set; }
    public string BDCName { get; set; }

    public General()
    {
        //
        // TODO: Add constructor logic here
        //
    }


    public DataSet GenericFillDs(string procedurename)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter(procedurename, con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetIncentives_Release_Proceedings_UnitName_searchForSLC(String SLCNo, String Dist, String UnitName, String Investmentid, String Cast)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GetIncentives_Release_Proceedings_UnitName_searchForSLC", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@SlcNo", SqlDbType.VarChar).Value = SLCNo;
            da.SelectCommand.Parameters.Add("@Distid", SqlDbType.VarChar).Value = Dist;
            da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = UnitName;
            da.SelectCommand.Parameters.Add("@Incentivetype", SqlDbType.VarChar).Value = Investmentid;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int InsertSlcspecialDetails(ReleasingProceedings objvo)
    {
        int valid = 0;

        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("[USP_Update_SlcSpecialCaseProc]", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {

            //added by chinna
            cmd.Parameters.AddWithValue("@ReleaseSlcAmount", Convert.ToString(objvo.ReleasingSlcSpeacCaseAmount));
            cmd.Parameters.AddWithValue("@ReleaseSlcSpecicaseProcedingDate", objvo.ReleasingSlcSpeacCaseDate);
            cmd.Parameters.AddWithValue("@IncentiveId", Convert.ToString(objvo.EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(objvo.MstIncentiveId));
            cmd.Parameters.AddWithValue("@GoNo", Convert.ToString(objvo.GOSpeaclCaseNo));
            cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(objvo.Remarks));
            cmd.Parameters.AddWithValue("@ActualSanctionAmount", Convert.ToString(objvo.SanctionSpecialCaseAmount));
            cmd.Parameters.AddWithValue("@PendingAmount", Convert.ToString(objvo.PendingAmount));
            cmd.Parameters.AddWithValue("@slno", Convert.ToString(objvo.slno));
            cmd.Parameters.AddWithValue("@ModifiedBy", Convert.ToString(objvo.CreatedByid));

            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }

    public DataSet GenericFillDs(string procedurename, SqlParameter[] sp)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter(procedurename, con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.AddRange(sp);
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet GetIncentiveOfficerNamesForAll(string incentiveid, string mstincentiveid, string createdby, string RoleCode, string TYPEOFTRANSACTION)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_RECOMENDATTION_LETTER_NAME", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@incentiveid", SqlDbType.VarChar).Value = incentiveid.ToString();
            da.SelectCommand.Parameters.Add("@MasterIncentiveid", SqlDbType.VarChar).Value = mstincentiveid.ToString();
            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = createdby.ToString();
            da.SelectCommand.Parameters.Add("@RoleCode", SqlDbType.VarChar).Value = RoleCode.ToString();
            da.SelectCommand.Parameters.Add("@TYPEOFTRANSACTION", SqlDbType.VarChar).Value = TYPEOFTRANSACTION.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int InsertCFOAttachement_tourismagentshops(string intQuessionaireCFOid, string intCFOEnterpid, string Uid_No, string Reg_Id, string AttachmentTypeName,
   string AttachmentFilename, string AttachmentFilePath, string Status, string Created_by, string FileDescription)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("CFOAttachmentDet_tourismagentshops", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireCFOid.Trim() == "" || intQuessionaireCFOid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireCFOid.Trim());
            }

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFOEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();
            }

            if (AttachmentTypeName.Trim() == "" || AttachmentTypeName.Trim() == null || AttachmentTypeName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = AttachmentTypeName.Trim();
            }

            if (AttachmentFilename.Trim() == "" || AttachmentFilename.Trim() == null || AttachmentFilename.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = AttachmentFilename.Trim();
            }

            if (AttachmentFilePath.Trim() == "" || AttachmentFilePath.Trim() == null || AttachmentFilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = AttachmentFilePath.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Int32.Parse(Created_by.Trim());
            }

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();
            }


            if (FileDescription.Trim() == "" || FileDescription.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }
            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }
    }
    public int InsertincentiveOfficerCommentsJDResponceAdd(List<officerRemarks> Ramarks, string IPAddress)
    {
        int valid = 0;

        foreach (officerRemarks Ramarksvo in Ramarks)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("USP_INSERT_OfficerRemarks_JDResponce_TO_Addl", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
                cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
                cmd.Parameters.AddWithValue("@GmResponce", Convert.ToString(Ramarksvo.Responce));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }

        return valid;
    }
    public void InsertIncentiveAttachmentInspReports(string incentiveid, string attachmentid, string filename, string filepath, string created_by, string Typeid, string filedesc)
    {
        try
        {
            SqlConnection connection = new SqlConnection(str);
            SqlTransaction transaction = null;
            connection.Open();
            transaction = connection.BeginTransaction();
            SqlCommand cmdEnj = new SqlCommand("[InsUpdDeltd_Incentive_Uploads_Incentives_SupportingDocs]", connection);
            cmdEnj.CommandType = CommandType.StoredProcedure;
            cmdEnj.Transaction = transaction;
            cmdEnj.Connection = connection;

            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
            cmdEnj.Parameters.AddWithValue("@IncentiveID", SqlDbType.Int).Value = Convert.ToInt64(incentiveid);
            cmdEnj.Parameters.AddWithValue("@AttachmentId", SqlDbType.Int).Value = Convert.ToInt64(attachmentid);
            cmdEnj.Parameters.AddWithValue("@FileNm", filename);
            cmdEnj.Parameters.AddWithValue("@FilePath", filepath);
            cmdEnj.Parameters.AddWithValue("@Createdby", created_by);
            cmdEnj.Parameters.AddWithValue("@MstIncentiveId", Typeid);
            cmdEnj.Parameters.AddWithValue("@DocTypedesc", filedesc);
            cmdEnj.ExecuteNonQuery();
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            // cmdEnj.Dispose();
            con.CloseConnection();
        }
    }

    public int GenericExecuteNonQuery(string procedurename, SqlParameter[] sp)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = procedurename;
        com.Parameters.AddRange(sp);
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return Convert.ToInt32(com.ExecuteNonQuery());
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetOldIncetiveDetailsApplications(string incentiveID, string ApplicationLevel, string SentFrom, string Userid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("[FETCHINC_DETAILS_ID]", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_APPLICANT_INCENTIVES_HISTORY_DPT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;
                da.SelectCommand.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom;
                da.SelectCommand.Parameters.Add("@Userid", SqlDbType.VarChar).Value = Userid;
                da.SelectCommand.CommandTimeout = 3600;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetIncentivesMISPendingReportDrill(string status, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_Incentives_MISPendencyReportDrill", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet getJDRejectedList(string incentiveid, string mstincentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_JD_REJECTED_DTLS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
            if (mstincentiveid != null && mstincentiveid != null)
            {
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = mstincentiveid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = null;
            }
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // added on 22.01.2018
    public DataSet getJDAbeyancedList(string incentiveid, string mstincentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_JD_ABEYANCED_DTLS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
            if (mstincentiveid != null && mstincentiveid != null)
            {
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = mstincentiveid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = null;
            }
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public int insertRejectIncentives(string incntVID, string QueryDesc, string usrCode, string MasterID, string IPAddress)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[usp_insertrejectIncentives]";

        if (incntVID.Trim() == "" || incntVID.Trim() == null)
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = incntVID.Trim();

        if (QueryDesc.Trim() == "" || QueryDesc.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDesc.Trim();

        if (usrCode.Trim() == "" || usrCode.Trim() == null)
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = usrCode.Trim();

        com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MasterID.Trim();
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            // return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteNonQuery());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }



    //added by chinna 09-11-2017
    public DataSet GetIncentiveSanctionMISPendencyReportDrill(string status, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INCENTIVEMISSANCTIONPENDINGREPORTDRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetCoiIncetivePOSDetailsdept(string UserId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_COI_Dashboard]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = UserId;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet CoifetchIncentivedetIPONewIncType(string intDeptid, string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("usp_GetJdForwardedApplications", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet GetIncentiveDisbursmentMISPendencyReportDrill(string status, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INCENTIVEMISRELEASEPENDINGREPORTDRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchAnalisReport(string status, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_ANALASYS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@Formdate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@Todtae", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchAnalisReportNew(string status, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_ANALASYS_CFECFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@Formdate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@Todtae", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet RetriveRejectedapprovals()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetR1DrillDownPhase3New_RejectedApproval]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncentivesPendingReport(string fromdate, string todate, string DISTRICT)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_INCENTIVEPENDINGREPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            if (DISTRICT.Trim() == "" || DISTRICT.Trim() == null || DISTRICT.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = DISTRICT.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetOldFBdatatoSend(string UidNO, string Trtype)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_Feedback_old_data", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UidNO", SqlDbType.VarChar).Value = UidNO.ToString();
            da.SelectCommand.Parameters.Add("@Trtype", SqlDbType.VarChar).Value = Trtype.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentiveslclistWorkigngListcheck(string date, string DIPCFlag, string fromdate, string todate, string WORKINGSTATUS)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_WORKING_ABSTRACT_PRINTEDDATE_Working", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@date", SqlDbType.VarChar).Value = date;
            da.SelectCommand.Parameters.Add("@DIPCFlag", SqlDbType.VarChar).Value = DIPCFlag;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate;
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate;
            da.SelectCommand.Parameters.Add("@WORKINGSTATUS", SqlDbType.VarChar).Value = WORKINGSTATUS;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getincentiveslclistWorkigngListcheckGenerated(string date, string DIPCFlag, string fromdate, string todate, string WORKINGSTATUS)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_WORKING_ABSTRACT_PRINTEDDATE_Working_Generated", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@date", SqlDbType.VarChar).Value = date;
            da.SelectCommand.Parameters.Add("@DIPCFlag", SqlDbType.VarChar).Value = DIPCFlag;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate;
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate;
            da.SelectCommand.Parameters.Add("@WORKINGSTATUS", SqlDbType.VarChar).Value = WORKINGSTATUS;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncentivesMISDisbursmentPendingReport()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_INCENTIVEMISRELEASEPENDINGREPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncentivesMISSanctionPendingReport(string DISTRICT)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_INCENTIVEMISSANCTIONPENDINGREPORT", con.GetConnection);
            if (DISTRICT.Trim() == "" || DISTRICT.Trim() == null || DISTRICT.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = DISTRICT.ToString();

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncentivesMISPendingReport(string DISTRICT)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_INCENTIVEMISPENDINGREPORT_NEW21042025", con.GetConnection);
            if (DISTRICT.Trim() == "" || DISTRICT.Trim() == null || DISTRICT.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = DISTRICT.ToString();
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int InsertImagedata(string intQuessionaireid, string intCFEid, string FileType, string FilePath, string FileName,
     string Created_by, string Created_dt, string Modified_by, string Modified_dt)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertImage", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEid.Trim() == "" || intCFEid.Trim() == null || intCFEid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = Int32.Parse(intCFEid.Trim());
            }



            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }

    public int InsertImagedataOfflineApprovals(string intQuessionaireid, string intCFEid, string FileType, string FilePath, string FileName, string FileDescription,
  string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string IntApprovalid)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("[sp_InsertImage_offlineApprovals]", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEid.Trim() == "" || intCFEid.Trim() == null || intCFEid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = Int32.Parse(intCFEid.Trim());
            }



            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (FileDescription.Trim() == "" || FileDescription.Trim() == null || FileDescription.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }

            if (bu.Trim() == "" || bu.Trim() == null || bu.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = bu.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            if (IntApprovalid == null || IntApprovalid.Trim() == "" || IntApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@IntApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@IntApprovalid", SqlDbType.VarChar).Value = IntApprovalid.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }


    public int InsertAttachmentIncQuery(string incentiveID, string FileType, string FilePath, string FileName, string FileDescription,
  string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertAttachmentIncQuery", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            myDataAdapter.SelectCommand.Parameters.Add("@incentiveID", SqlDbType.VarChar).Value = incentiveID.Trim();

            myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();

            myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();

            myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();

            myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();

            myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

            int n = Convert.ToInt32(myDataAdapter.SelectCommand.ExecuteNonQuery());

            if (n >= 1)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetRespondQueryStatusfrIncentive(string User_id)  //nikhil incentive for getting query response data (Entrprnr)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusNewIncType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = User_id.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //nikhil incentive for inserting query response data (Entrprnr)
    public int InsrtQryRespDtlsFrInc(string incID, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondRemarks, string IPAddress, string Created_by)
    {
        try
        {


            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "sp_InsrtQry_RespfrIncntv";
            con.OpenConnection();
            com.Connection = con.GetConnection;


            //SqlDataAdapter myDataAdapter;
            //myDataAdapter = new SqlDataAdapter("sp_InsrtQry_RespfrIncntv", con.GetConnection);
            //myDataAdapter.UpdateCommand.CommandType = CommandType.StoredProcedure;

            if (incID == "" || incID == null)
                com.Parameters.Add("@incID", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@incID", SqlDbType.VarChar).Value = incID.Trim();

            if (QueryAttachmentFileName == "" || QueryAttachmentFileName == null)
                com.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();


            if (QueryAttachmentFilePath == "" || QueryAttachmentFilePath == null)
                com.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            if (QueryRespondRemarks == "" || QueryRespondRemarks == null)
                com.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();



            if (IPAddress == "" || IPAddress == null)
                com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();



            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



            int n = Convert.ToInt32(com.ExecuteNonQuery());


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }

        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int InsrtQryRespDtlsFrIncQueryResponse(string incID, string QueryAttachmentFileName, string QueryAttachmentFilePath, string QueryRespondRemarks, string IPAddress, string Created_by, string MstIncentiveId, string JdOrGMflag)
    {
        try
        {


            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[sp_InsrtQry_RespfrIncntv_Query]";
            con.OpenConnection();
            com.Connection = con.GetConnection;


            //SqlDataAdapter myDataAdapter;
            //myDataAdapter = new SqlDataAdapter("sp_InsrtQry_RespfrIncntv", con.GetConnection);
            //myDataAdapter.UpdateCommand.CommandType = CommandType.StoredProcedure;

            if (incID == "" || incID == null)
                com.Parameters.Add("@incID", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@incID", SqlDbType.VarChar).Value = incID.Trim();

            if (QueryAttachmentFileName == "" || QueryAttachmentFileName == null)
                com.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();


            if (QueryAttachmentFilePath == "" || QueryAttachmentFilePath == null)
                com.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            if (QueryRespondRemarks == "" || QueryRespondRemarks == null)
                com.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();



            if (IPAddress == "" || IPAddress == null)
                com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

            if (JdOrGMflag == "" || JdOrGMflag == null)
                com.Parameters.Add("@JdOrGMflag", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@JdOrGMflag", SqlDbType.VarChar).Value = JdOrGMflag.Trim();


            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();
            com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MstIncentiveId.Trim();



            int n = Convert.ToInt32(com.ExecuteNonQuery());


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }

        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetShowEmailidandMobileNumberforIncentive(string created_by)  //nikhil, incentive
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetShowEmailidandMobileNumberNewIncType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (created_by.Trim() == "" || created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //nikhil - done - insert query for incentive.
    public int insertInctveQueryResponsedata(string incntVID, string QueryDesc, string usrCode)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_insertInctveQuery";

        if (incntVID.Trim() == "" || incntVID.Trim() == null)
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = incntVID.Trim();

        if (QueryDesc.Trim() == "" || QueryDesc.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDesc.Trim();

        if (usrCode.Trim() == "" || usrCode.Trim() == null)
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = usrCode.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            // return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteNonQuery());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public int insertInctveQueryResponsedataNew(string incntVID, string QueryDesc, string usrCode, string MasterID, string IPAddress)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[sp_insertInctveQuery_New]";

        if (incntVID.Trim() == "" || incntVID.Trim() == null)
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = incntVID.Trim();

        if (QueryDesc.Trim() == "" || QueryDesc.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDesc.Trim();

        if (usrCode.Trim() == "" || usrCode.Trim() == null)
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = usrCode.Trim();

        com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MasterID.Trim();
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            // return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteNonQuery());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }



    public DataSet sp_GetReport(string Category, string Department)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null)
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (Department.Trim() == "" || Department.Trim() == null)
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();
            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet sp_GetDepartmentNameReport(string Department, string District, string Status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetDepartmentNameReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Status.Trim() == "" || Status.Trim() == null)
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();
            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet sp_GetRejectedQuery(string Department, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetRejectedQuery", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();
            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet sp_GetDepartmentNameReportCFO(string Department, string District, string Status)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        // da = new SqlDataAdapter("sp_GetDepartmentNameReportCFO", con.GetConnection);
    //        da = new SqlDataAdapter("sp_GetDepartmentNameReportNew_CFO", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;



    //        if (Status.Trim() == "" || Status.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

    //        if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
    //            da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();
    //        if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet sp_GetDepartmentNameReportCFO(string Department, string District, string Status, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("sp_GetDepartmentNameReportCFO", con.GetConnection);
            da = new SqlDataAdapter("sp_GetDepartmentNameReportNew_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Status.Trim() == "" || Status.Trim() == null)
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();
            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public string checkMobile(string mobileNo, string emailID)  //NK
    {

        con.OpenConnection();

        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("checkMobile", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;

        cmd.Connection = con.GetConnection;
        try
        {
            cmd.Parameters.Add("@mobile", SqlDbType.VarChar).Value = mobileNo.ToString();
            cmd.Parameters.Add("@email", SqlDbType.VarChar).Value = emailID.ToString();

            string val = cmd.ExecuteScalar().ToString();
            return val;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int addnewuserregistration(UserRegistrationVo userregistrationvoobj)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("insertnewOnlineUser", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;
        try
        {
            if (userregistrationvoobj.Firstname.Trim().ToString() == "" || userregistrationvoobj.Firstname.ToString().Trim() == null)
                cmd.Parameters.Add("@Firstname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Firstname", SqlDbType.VarChar).Value = userregistrationvoobj.Firstname.Trim();

            if (userregistrationvoobj.Lastname.ToString().Trim() == "" || userregistrationvoobj.Lastname.ToString().Trim() == null)
                cmd.Parameters.Add("@Lastname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Lastname", SqlDbType.VarChar).Value = userregistrationvoobj.Lastname.Trim();

            if (userregistrationvoobj.Email.ToString().Trim() == "" || userregistrationvoobj.Email.ToString().Trim() == null)
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = userregistrationvoobj.Email.Trim();

            if (userregistrationvoobj.Address.ToString().Trim() == "" || userregistrationvoobj.Address.ToString().Trim() == null)
                cmd.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Address", SqlDbType.VarChar).Value = userregistrationvoobj.Address.Trim();


            if (userregistrationvoobj.Location == null || userregistrationvoobj.Location.ToString().Trim() == "" || userregistrationvoobj.Location.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@Location", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Location", SqlDbType.VarChar).Value = userregistrationvoobj.Location.Trim();


            if (userregistrationvoobj.PANcardno.ToString().Trim() == "" || userregistrationvoobj.PANcardno.ToString().Trim() == null)
                cmd.Parameters.Add("@PANcardno", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@PANcardno", SqlDbType.VarChar).Value = userregistrationvoobj.PANcardno.Trim();

            if (userregistrationvoobj.MobileNo.ToString().Trim() == "" || userregistrationvoobj.MobileNo.ToString().Trim() == null)
                cmd.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = userregistrationvoobj.MobileNo.Trim();

            if (userregistrationvoobj.username.ToString().Trim() == "" || userregistrationvoobj.username.ToString().Trim() == null)
                cmd.Parameters.Add("@username", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@username", SqlDbType.VarChar).Value = userregistrationvoobj.username.Trim();

            if (userregistrationvoobj.AadharNo.ToString().Trim() == "" || userregistrationvoobj.AadharNo.ToString().Trim() == null)
                cmd.Parameters.Add("@AadharNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@AadharNo", SqlDbType.VarChar).Value = userregistrationvoobj.AadharNo.Trim();


            if (userregistrationvoobj.Password.ToString().Trim() == "" || userregistrationvoobj.Password.ToString().Trim() == null)
                cmd.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Password", SqlDbType.VarChar).Value = userregistrationvoobj.Password.Trim();

            if (userregistrationvoobj.OTPMail.ToString().Trim() == "" || userregistrationvoobj.OTPMail.ToString().Trim() == null)
                cmd.Parameters.Add("@MailOTP", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MailOTP", SqlDbType.VarChar).Value = userregistrationvoobj.OTPMail.Trim();


            if (userregistrationvoobj.OTPMsg.ToString().Trim() == "" || userregistrationvoobj.OTPMsg.ToString().Trim() == null)
                cmd.Parameters.Add("@MsgOTP", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MsgOTP", SqlDbType.VarChar).Value = userregistrationvoobj.OTPMsg.Trim();

            if (userregistrationvoobj.Pwdflag.ToString().Trim() == "" || userregistrationvoobj.Pwdflag.ToString().Trim() == null)
                cmd.Parameters.Add("@Pwdflag", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Pwdflag", SqlDbType.VarChar).Value = userregistrationvoobj.Pwdflag.Trim();

            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }


    public DataSet CheckUserid1(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("CheckUserid1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = User_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }





    //Created by siva as on 28-11-2015 :: Insert,Update Bomas 
    public int insertBomas(string intBomasid, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtUpdBomas";

        if (BPopulation == "" || BPopulation == null)
            com.Parameters.Add("@Population", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Population", SqlDbType.VarChar).Value = BPopulation.Trim();

        if (intBomasid == "" || intBomasid == null)
            com.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.Trim();


        if (intPayamid == "" || intPayamid == null)
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.Trim();

        if (BomaCode == "" || BomaCode == null)
            com.Parameters.Add("@BomaCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BomaCode", SqlDbType.VarChar).Value = BomaCode.Trim();


        if (BomaName == "" || BomaName == null)
            com.Parameters.Add("@BomaName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BomaName", SqlDbType.VarChar).Value = BomaName.Trim();

        if (Latitude == "" || Latitude == null)
            com.Parameters.Add("@Latitude", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Latitude", SqlDbType.VarChar).Value = Latitude.Trim();

        if (Longitude == "" || Longitude == null)
            com.Parameters.Add("@Longitude", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Longitude", SqlDbType.VarChar).Value = Longitude.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //Created by siva as on 28-11-2015 :: Insert,Update Qualification 
    public int insrtUpdQualification(string intQualification, string QualificationName, string QualificationDescription, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtUpdQualification";

        if (intQualification == "" || intQualification == null)
            com.Parameters.Add("@intQualification", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQualification", SqlDbType.VarChar).Value = intQualification.Trim();

        if (QualificationDescription == "" || QualificationDescription == null)
            com.Parameters.Add("@QualificationDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QualificationDescription", SqlDbType.VarChar).Value = QualificationDescription.Trim();

        if (QualificationName == "" || QualificationName == null)
            com.Parameters.Add("@QualificationName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QualificationName", SqlDbType.VarChar).Value = QualificationName.Trim();



        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //Created by siva as on 28-11-2015 :: Search Qualification 
    public DataSet getQualification(string QualificationName, string QualificationDescription)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getQualification", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (QualificationName.Trim() == "" || QualificationName.Trim() == null)
                da.SelectCommand.Parameters.Add("@QualificationName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@QualificationName", SqlDbType.VarChar).Value = QualificationName.ToString();

            if (QualificationDescription.Trim() == "" || QualificationDescription.Trim() == null)
                da.SelectCommand.Parameters.Add("@QualificationDescription", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@QualificationDescription", SqlDbType.VarChar).Value = QualificationDescription.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Created by siva as on 28-11-2015 :: Search Qualification by ID
    public DataSet getQualificationbyID(string intQualification)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getQualificationbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intQualification.Trim() == "" || intQualification.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQualification", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQualification", SqlDbType.VarChar).Value = intQualification.ToString();

            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet RetriveLink(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveLinkByCFEid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet RetriveLinkForDD(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveLinkForDD", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    //Created by siva as on 28-11-2015 :: Search Validate Login
    public DataSet ValidateLogin(string UserID, String Password, string Dept)
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {

            da = new SqlDataAdapter("sp_ValidUser", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UserID.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
            }
            if (Password.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = Password.ToString();
            }

            if (Dept.ToString() == "" || Dept.ToString() == null)
            {
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();
            }

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    //Created by siva as on 28-11-2015 :: Search check Login
    //public DataSet ValidateLoginReset(string UserID, String Password)
    //{
    //    DataSet ds = new DataSet();
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    try
    //    {
    //        da = new SqlDataAdapter("sp_ValidUserReset", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        if (UserID.ToString() == "")
    //        {
    //            da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
    //        }
    //        if (Password.ToString() == "")
    //        {
    //            da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = Password.ToString();
    //        }

    //        da.Fill(ds);
    //        return ds;

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }

    //}
    public DataSet ValidateLoginReset(string UserID, String Password, string Pwdwithoutencry)
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {
            da = new SqlDataAdapter("sp_ValidUserReset", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UserID.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
            }
            if (Password.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = Password.ToString();
            }

            da.SelectCommand.Parameters.Add("@Pwdwithoutencry", SqlDbType.VarChar).Value = Pwdwithoutencry.ToString();

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    //Created by siva as on 28-11-2015 :: change Password
    public int ChangePassword(string Userid, string Password, string modifiedby)
    {
        SqlCommand Com = new SqlCommand();

        Com.CommandType = CommandType.StoredProcedure;

        Com.CommandText = "sp_ChangePwd";

        if (Userid.Trim() == "" || Userid.Trim() == null)
            Com.Parameters.Add("@Userid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            Com.Parameters.Add("@Userid", SqlDbType.VarChar).Value = Userid.Trim();

        if (Password.Trim() == "" || Password.Trim() == null)
            Com.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
        else
            Com.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();

        if (modifiedby.Trim() == "" || modifiedby.Trim() == null)
            Com.Parameters.Add("@modifiedby", SqlDbType.VarChar).Value = DBNull.Value;
        else
            Com.Parameters.Add("@modifiedby", SqlDbType.VarChar).Value = modifiedby.Trim();

        con.OpenConnection();
        Com.Connection = con.GetConnection;

        try
        {
            return Com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            Com.Dispose();
            con.CloseConnection();
        }
    }

    //Created by siva as on 28-11-2015 :: check User id
    public int chkpwd(string user_id)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "chkpwd";


        if (user_id == "" || user_id == null)
            com.Parameters.Add("@user_id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@user_id", SqlDbType.VarChar).Value = user_id.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //Created by siva as on 28-11-2015 :: To delete Qualification
    public int deleteQualification(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteQualification";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }
        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }

        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //Created by siva as on 30-11-2015 :: Get States in Dropdown
    public void getStates(DropDownList ddlState)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("sp_getStates", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddlState.DataSource = ds.Tables[0];
            ddlState.DataTextField = "StateName";
            ddlState.DataValueField = "intStateid";
            ddlState.DataBind();
            ddlState.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Created by siva as on 30-11-2015 :: Get Counties in Dropdown
    public void getCounties(DropDownList ddl, string intStateid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("sp_getCounties", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intStateid.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();
            }
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "CountieName";
            ddl.DataValueField = "intCountieid";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //Created by siva as on 30-11-2015 :: Get Payams in Dropdown
    public void getPayams(DropDownList ddl, string intCountieid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("sp_getPayams", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCountieid.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();
            }
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "PayamName";
            ddl.DataValueField = "intPayamid";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //Created by siva as on 04-1-2016 :: Get Bomas in Dropdown
    public void getBomas(DropDownList ddl, string intPayamid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("getBomas", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intPayamid.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();
            }
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "BomaName";
            ddl.DataValueField = "intBomasid";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //Created by siva as on 28-11-2015 :: Search Qualification 
    public DataSet getBomasSearch(string intStateid, string intCountieid, string intPayamid, string BomaName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getBomasSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();

            if (intPayamid.Trim() == "" || intPayamid.Trim() == null || intPayamid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();


            if (BomaName.Trim() == "" || BomaName.Trim() == null || BomaName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@BomaName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BomaName", SqlDbType.VarChar).Value = BomaName.ToString();

            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //Created by siva as on 28-11-2015 :: Search Bomas by ID
    public DataSet getBomasbyID(string intBomasid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getBomasbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBomasid.Trim() == "" || intBomasid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int deleteBomas(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteBomas";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();

        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    public DataSet getStates()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getstates", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetPW()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetPW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet GetDistrictsbystate(string intstateid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getDistrictsbystate", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intstateid.Trim() == "" || intstateid.Trim() == null || intstateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intstateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intstateid", SqlDbType.VarChar).Value = intstateid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet Getmandalsbydistrict(string intstateid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getMandalsbydistrict", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intstateid.Trim() == "" || intstateid.Trim() == null || intstateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intstateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intstateid", SqlDbType.VarChar).Value = intstateid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet GetVillagebymandal(string intstateid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getVillagebymandal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intstateid.Trim() == "" || intstateid.Trim() == null || intstateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intstateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intstateid", SqlDbType.VarChar).Value = intstateid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetPW1(string intMobilization)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetPW1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intMobilization.Trim() == "" || intMobilization.Trim() == null)
                da.SelectCommand.Parameters.Add("@intMobilization", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intMobilization", SqlDbType.VarChar).Value = intMobilization.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //Created by siva as on 4-1-2016 :: Insert,Update Work Proposal 
    public int InsertUpdWorkProposal(string intWorkid, string WorkCode, string IPid, string intPrjid, string MeetingDate, string intStateid, string intCountieid, string intPayamid, string intBomasid, string Status, string StatusDate, string PDC_ApprvDate, string Remarks, string Created_by, string TypeofMeeting)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertUpdWorkProposal";


        //,string ,string ,


        if (TypeofMeeting == "" || TypeofMeeting == null)
            com.Parameters.Add("@TypeofMeeting", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofMeeting", SqlDbType.VarChar).Value = TypeofMeeting.Trim();

        if (Remarks == "" || Remarks == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

        if (StatusDate == "" || StatusDate == null)
            com.Parameters.Add("@StatusDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@StatusDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(StatusDate.Trim());

        if (PDC_ApprvDate == "" || PDC_ApprvDate == null)
            com.Parameters.Add("@PDC_ApprvDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@PDC_ApprvDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(PDC_ApprvDate.Trim());


        if (intWorkid == "" || intWorkid == null)
            com.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = intWorkid.Trim();


        if (WorkCode == "" || WorkCode == null)
            com.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = WorkCode.Trim();

        if (IPid == "" || IPid == null)
            com.Parameters.Add("@IPid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPid", SqlDbType.VarChar).Value = IPid.Trim();

        if (intPrjid == "" || intPrjid == null)
            com.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = intPrjid.Trim();
        //, , , , , , , 

        if (MeetingDate == "" || MeetingDate == null)
            com.Parameters.Add("@MeetingDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@MeetingDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(MeetingDate.Trim());


        if (intStateid == "" || intStateid == null)
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

        if (intCountieid == "" || intCountieid == null)
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.Trim();

        if (intPayamid == "" || intPayamid == null)
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.Trim();

        if (intBomasid == "" || intBomasid == null)
            com.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.Trim();
        //


        if (Status == "" || Status == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();



        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public int bulkInsertdrNewDetails(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);

            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intWorkid", "intWorkid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("WorkName", "WorkName");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("intAreaofWork", "intAreaofWork");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("intWorkActivity", "intWorkActivity");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("EstManPower", "EstManPower");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("EstDays", "EstDays");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("EstEquipmnts", "EstEquipmnts");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("EstMaterial", "EstMaterial");
            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("EstSkilLabour", "EstSkilLabour");
            SqlBulkCopyColumnMapping mapping10 = new SqlBulkCopyColumnMapping("EstWorkStartDate", "EstWorkStartDate");
            SqlBulkCopyColumnMapping mapping11 = new SqlBulkCopyColumnMapping("EstWorkEndDate", "EstWorkEndDate");
            SqlBulkCopyColumnMapping mapping12 = new SqlBulkCopyColumnMapping("EstCost", "EstCost");
            SqlBulkCopyColumnMapping mapping13 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            SqlBulkCopyColumnMapping mapping14 = new SqlBulkCopyColumnMapping("EquipmntQuantity", "EquipmntQuantity");
            SqlBulkCopyColumnMapping mapping15 = new SqlBulkCopyColumnMapping("MaterialQuantity", "MaterialQuantity");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);

            bulkCopy.ColumnMappings.Add(mapping10);
            bulkCopy.ColumnMappings.Add(mapping11);
            bulkCopy.ColumnMappings.Add(mapping12);
            bulkCopy.ColumnMappings.Add(mapping13);

            bulkCopy.ColumnMappings.Add(mapping14);
            bulkCopy.ColumnMappings.Add(mapping15);


            bulkCopy.DestinationTableName = ("tr_ProposedWorkAct");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }

    public int DeleteWorkProposal(string intWorkActivityId)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DeleteWorkProposal";

        cmd.Parameters.Add("@intWorkActivityId", SqlDbType.Int).Value = intWorkActivityId;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //siva as on 04-1-2016
    public DataSet getWorkProposalsearch(string intStateid, string intCountieid, string intPayamid, string intBomasid, string WorkCode, string IPid, string intTSTid, string Status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getWorkProposalsearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();



            if (IPid.Trim() == "" || IPid.Trim() == null || IPid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IPid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IPid", SqlDbType.VarChar).Value = IPid.ToString();


            if (intTSTid.Trim() == "" || intTSTid.Trim() == null || intTSTid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intTSTid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTSTid", SqlDbType.VarChar).Value = intTSTid.ToString();


            if (WorkCode.Trim() == "" || WorkCode.Trim() == null || WorkCode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = WorkCode.ToString();



            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();

            if (intPayamid.Trim() == "" || intPayamid.Trim() == null || intPayamid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();


            if (intBomasid.Trim() == "" || intBomasid.Trim() == null || intBomasid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetWorkProposalByid(string intWorkid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetWorkProposalByid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intWorkid.Trim() == "" || intWorkid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = intWorkid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //Created by siva as on 30-11-2015 :: Get States in Dropdown
    public void getCouncilMems(CheckBoxList ddl, string type)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("getCouncilMems", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            myDataAdapter.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "AuthorizedPerson";
            ddl.DataValueField = "intMemid";
            ddl.DataBind();
            //ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int saveMemsInvolvedinWorksProposal(string intWorkid, string intMemid, string MemType, string Created_by)
    {
        int value = 0;

        try
        {
            con.OpenConnection();// dbu.openCon();
            SqlCommand cmd = new SqlCommand("saveMemsInvolvedinWorksProposal", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@intWorkid", intWorkid);
            cmd.Parameters.AddWithValue("@intMemid", intMemid);
            cmd.Parameters.AddWithValue("@MemType", MemType);


            cmd.Parameters.AddWithValue("@Created_by", Created_by);


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }


    public DataSet getdataofidentityCFONew(string intQuessioneryid, string deptid)
    {


        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("getdeptOrderCFOnew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessioneryid.Trim() == "" || intQuessioneryid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = intQuessioneryid.ToString();



            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

        //}



    }

    public int deleteMemInvolved(string intWorkid, string MemType)
    {
        int value = 0;

        try
        {
            con.OpenConnection();// dbu.openCon();
            SqlCommand cmd = new SqlCommand("deleteMemInvolved", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.Parameters.AddWithValue("@intWorkid", intWorkid);
            cmd.Parameters.AddWithValue("@MemType", MemType);

            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }


    public DataSet GetProjectDetbyId(string intPrjid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetProjectDetbyId", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intPrjid.Trim() == "" || intPrjid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = intPrjid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //Created by siva as on 30-11-2015 :: Get Projects in Dropdown
    public void getProjects(DropDownList ddl, string intIP)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("GetProjectsbyIP", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intIP.Trim() == "" || intIP.Trim() == null)
                myDataAdapter.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = intIP.ToString();

            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "PrjName";
            ddl.DataValueField = "intPrjid";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdWorkCode(string intWorkid, string WorkCode)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdWorkCode";




        if (intWorkid == "" || intWorkid == null)
            com.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = intWorkid.Trim();

        if (WorkCode == "" || WorkCode == null)
            com.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = WorkCode.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    //Created by siva as on 30-11-2015 :: Get States in Dropdown
    public void getIpDet(DropDownList ddl)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("getIpDet", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "IPName";
            ddl.DataValueField = "intIP";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }





    //Created by siva as on 7-1-2016 :: Funds Allocation
    public int UpdFundRaising(string intWorklId, string FundRaiseDate, string FundRaiseAmount, string Remarks, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdFundRaising";



        if (intWorklId == "" || intWorklId == null)
            com.Parameters.Add("@intWorklId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intWorklId", SqlDbType.VarChar).Value = intWorklId.Trim();


        if (FundRaiseDate == "" || FundRaiseDate == null)
            com.Parameters.Add("@FundRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@FundRaiseDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FundRaiseDate.Trim());


        if (FundRaiseAmount == "" || FundRaiseAmount == null)
            com.Parameters.Add("@FundRaiseAmount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@FundRaiseAmount", SqlDbType.Decimal).Value = FundRaiseAmount.Trim();

        if (Remarks == "" || Remarks == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();



        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }




    public int insrtStates(string intStateid, string Created_by, string NoofCounties)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtStates";


        if (NoofCounties == "" || NoofCounties == null)
            com.Parameters.Add("@NoofCounties", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofCounties", SqlDbType.VarChar).Value = NoofCounties.Trim();

        if (intStateid == "" || intStateid == null)
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();


        if (StateName == "" || StateName == null)
            com.Parameters.Add("@StateName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@StateName", SqlDbType.VarChar).Value = StateName.Trim();

        if (StateCode == "" || StateCode == null)
            com.Parameters.Add("@StateCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@StateCode", SqlDbType.VarChar).Value = StateCode.Trim();

        if (sPopulation == "" || sPopulation == null)
            com.Parameters.Add("@Population", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Population", SqlDbType.VarChar).Value = sPopulation.Trim();



        if (sLatitude == "" || sLatitude == null)
            com.Parameters.Add("@Latitude", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Latitude", SqlDbType.VarChar).Value = sLatitude.Trim();

        if (sLongitude == "" || sLongitude == null)
            com.Parameters.Add("@Longitude", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Longitude", SqlDbType.VarChar).Value = sLongitude.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }



    //Created by suresh as on 6-1-2015:: Search Qualifacation
    public DataSet getStatesSearch(string StateName, string StateCode)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getStatesSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (StateName.Trim() == "" || StateName.Trim() == null || StateName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@StateName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@StateName", SqlDbType.VarChar).Value = StateName.ToString();

            if (StateCode.Trim() == "" || StateCode.Trim() == null || StateCode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@StateCode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@StateCode", SqlDbType.VarChar).Value = StateCode.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApplicationTrackerDetailedCFOnew(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetApplicationTrackerDetailedCFOnewlat", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApplicationTrackerDetailed2newCFO(string Quesionary_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetApplicationTrackerDetailed2newlatCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Quesionary_id.Trim() == "" || Quesionary_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = Quesionary_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowDepartmentFilesIndusSearchCFE(string Deptid, string intStageid, string intDistrictid, string NameofUnit, string UIDNUmber, string District_Id, string level)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            if (level == "1")
            {
                level = "Mega,Large,Medium";

            }
            else if (level == "2")
            {
                level = "Small,Micro";


            }
            else if (level == "--Select--")
            {
                level = "Mega,Large,Medium,Small,Micro";


            }


            da = new SqlDataAdapter("GetShowDepartmentFilesSearchCFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();

            if (level.Trim() == "" || level.Trim() == null)
                da.SelectCommand.Parameters.Add("@level", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@level", SqlDbType.VarChar).Value = level.ToString();

            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (District_Id.Trim() == "" || District_Id.Trim() == null || District_Id.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District_Id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District_Id", SqlDbType.VarChar).Value = District_Id.ToString();

            if (NameofUnit.Trim() == "" || NameofUnit.Trim() == null)
                da.SelectCommand.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = "%" + NameofUnit.ToString() + "%";


            if (UIDNUmber.Trim() == "" || UIDNUmber.Trim() == null)
                da.SelectCommand.Parameters.Add("@UIDNUmber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UIDNUmber", SqlDbType.VarChar).Value = "%" + UIDNUmber.ToString() + "%";


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int deleteStates(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteStates";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    public DataSet getStatesbyID(string intStateid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getStatesbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intStateid.Trim() == "" || intStateid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getFundsDet(string intWorklId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getFundsDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intWorklId.Trim() == "" || intWorklId.Trim() == null)
                da.SelectCommand.Parameters.Add("@intWorklId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intWorklId", SqlDbType.VarChar).Value = intWorklId.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //Created by siva as on 7-1-2016 :: Fund Releasing
    public int UpdFundApproved(string intWorklId, string ApprovedDate, string PaymentMode, string TransactionNo, string PaymentDate, string PaidAmt, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdFundApproved";



        if (intWorklId == "" || intWorklId == null)
            com.Parameters.Add("@intWorklId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intWorklId", SqlDbType.VarChar).Value = intWorklId.Trim();


        if (TransactionNo == "" || TransactionNo == null)
            com.Parameters.Add("@TransactionNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TransactionNo", SqlDbType.VarChar).Value = TransactionNo.Trim();


        if (ApprovedDate == "" || ApprovedDate == null)
            com.Parameters.Add("@ApprovedDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@ApprovedDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(ApprovedDate.Trim());


        if (PaymentDate == "" || PaymentDate == null)
            com.Parameters.Add("@PaymentDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@PaymentDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(PaymentDate.Trim());


        if (PaidAmt == "" || PaidAmt == null)
            com.Parameters.Add("@PaidAmt", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@PaidAmt", SqlDbType.Decimal).Value = PaidAmt.Trim();

        if (PaymentMode == "" || PaymentMode == null)
            com.Parameters.Add("@PaymentMode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PaymentMode", SqlDbType.VarChar).Value = PaymentMode.Trim();



        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet getCountiesbyID(string intCountieid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCountiesbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intCountieid.Trim() == "" || intCountieid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }







    public int deletecounties(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deletecounties";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }
    public int insrtUpCounties(string intCountieid, string Created_by, string NoofBlocks)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtUpCounties";




        if (NoofBlocks == "" || NoofBlocks == null)
            com.Parameters.Add("@NoofBlocks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofBlocks", SqlDbType.VarChar).Value = NoofBlocks.Trim();


        if (CPopulation == "" || CPopulation == null)
            com.Parameters.Add("@Population", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Population", SqlDbType.VarChar).Value = CPopulation.Trim();


        if (intCountieid == "" || intCountieid == null)
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.Trim();


        if (intStateid == "" || intStateid == null || intStateid.Trim() == "--Select--")
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

        if (CountieCode == "" || CountieCode == null)
            com.Parameters.Add("@CountieCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CountieCode", SqlDbType.VarChar).Value = CountieCode.Trim();


        if (CountieName == "" || CountieName == null)
            com.Parameters.Add("@CountieName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CountieName", SqlDbType.VarChar).Value = CountieName.Trim();

        if (Latitude == "" || Latitude == null)
            com.Parameters.Add("@Latitude", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Latitude", SqlDbType.VarChar).Value = Latitude.Trim();

        if (Longitude == "" || Longitude == null)
            com.Parameters.Add("@Longitude", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Longitude", SqlDbType.VarChar).Value = Longitude.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet getCountieSearch(string intStateid, string CountieName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCountieSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (CountieName.Trim() == "" || CountieName.Trim() == null)
                da.SelectCommand.Parameters.Add("@CountieName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@CountieName", SqlDbType.VarChar).Value = CountieName.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }







    //Created by suresh as on 7-1-2016 :: Insert,Update payams 
    public int insrtUpdpayams(string intPayamid, string Created_by, string NoofBomas)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtUpdpayams";

        if (NoofBomas == "" || NoofBomas == null)
            com.Parameters.Add("@NoofBomas", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofBomas", SqlDbType.VarChar).Value = NoofBomas.Trim();


        if (PPopulation == "" || PPopulation == null)
            com.Parameters.Add("@Population", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Population", SqlDbType.VarChar).Value = PPopulation.Trim();


        if (intPayamid == "" || intPayamid == null)
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.Trim();


        if (intCountieid == "" || intCountieid == null || intCountieid.Trim() == "--Select--")
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.Trim();

        if (PayamCode == "" || PayamCode == null)
            com.Parameters.Add("@PayamCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PayamCode", SqlDbType.VarChar).Value = PayamCode.Trim();


        if (PayamName == "" || PayamName == null)
            com.Parameters.Add("@PayamName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PayamName", SqlDbType.VarChar).Value = PayamName.Trim();

        if (Latitude == "" || Latitude == null)
            com.Parameters.Add("@Latitude", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Latitude", SqlDbType.VarChar).Value = Latitude.Trim();

        if (Longitude == "" || Longitude == null)
            com.Parameters.Add("@Longitude", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Longitude", SqlDbType.VarChar).Value = Longitude.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //Created by suresh as on 8-1-2016 :: Search getpayamby by ID
    public DataSet getPayamsbyID(string intPayamid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getPayamsbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intPayamid.Trim() == "" || intPayamid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    //create by suresh 8-1-2016 purpose of deletepayam
    public int deletePayams(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deletePayams";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //created by suresh 9-1-2015 getpayamsSearch
    public DataSet getPayamsSearch(string intStateid, string intCountieid, string PayamName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getPayamsSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();




            if (PayamName.Trim() == "" || PayamName.Trim() == null)
                da.SelectCommand.Parameters.Add("@PayamName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@PayamName", SqlDbType.VarChar).Value = PayamName.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //create by suresh 8-1-2016 purpose of area of work getdata
    public DataSet getAreaofWorkbyID(string intAreaofWork)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getAreaofWorkbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intAreaofWork.Trim() == "" || intAreaofWork.Trim() == null)
                da.SelectCommand.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = intAreaofWork.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //Created by suresh as on 08-1-2016 :: Insert,Update Areaofwork 
    public int insrtAreaofWork(string intAreaofWork, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtAreaofWork";



        if (intAreaofWork == "" || intAreaofWork == null)
            com.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = intAreaofWork.Trim();


        if (AreaofWork == "" || AreaofWork == null)
            com.Parameters.Add("@AreaofWork", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AreaofWork", SqlDbType.VarChar).Value = AreaofWork.Trim();







        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }




    //Created by suresh as on 8-1-2016:: Search Area
    public DataSet getAreaofworkSearch(string AreaofWork)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getAreaofworkSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (AreaofWork.Trim() == "" || AreaofWork.Trim() == null)
                da.SelectCommand.Parameters.Add("@AreaofWork", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@AreaofWork", SqlDbType.VarChar).Value = AreaofWork.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //Created by siva as on 28-11-2015 :: To delete Qualification
    public int deleteAreaofWork(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteAreaofWork";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }
        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }

        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }


    //created by suresh for insrtdisability
    public int insrtDisability(string intDisability, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtDisability";



        if (intDisability == "" || intDisability == null)
            com.Parameters.Add("@intDisability", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDisability", SqlDbType.VarChar).Value = intDisability.Trim();


        if (Disability == "" || Disability == null)
            com.Parameters.Add("@Disability", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Disability", SqlDbType.VarChar).Value = Disability.Trim();







        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //create by suresh 8-1-2016 purpose of getdata by id
    public DataSet getDisabilitybyID(string intDisability)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getDisabilitybyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDisability.Trim() == "" || intDisability.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDisability", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDisability", SqlDbType.VarChar).Value = intDisability.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Created by siva as on 28-11-2015 :: To delete Qualification
    public int deleteDisability(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteDisability";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }
        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }

        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //Created by suresh as on 8-1-2016:: Search ArDisability
    public DataSet getDisabilitySearch(string Disability)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getDisabilitySearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Disability.Trim() == "" || Disability.Trim() == null)
                da.SelectCommand.Parameters.Add("@Disability", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Disability", SqlDbType.VarChar).Value = Disability.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //create by suresh 8-1-2016 purpose of getdesignationbyid
    public DataSet getDesignationByID(string intDesgid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getDesignationByID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDesgid.Trim() == "" || intDesgid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDesgid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDesgid", SqlDbType.VarChar).Value = intDesgid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //created by suresh insert designations
    public int insrtDesignations(string intDesgid, string Type, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtDesignations";

        if (Type == "" || Type == null)
            com.Parameters.Add("@Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type", SqlDbType.VarChar).Value = Type.Trim();

        if (intDesgid == "" || intDesgid == null)
            com.Parameters.Add("@intDesgid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDesgid", SqlDbType.VarChar).Value = intDesgid.Trim();


        if (Designation == "" || Designation == null)
            com.Parameters.Add("@Designation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Designation", SqlDbType.VarChar).Value = Designation.Trim();







        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    //Created by siva as on 28-11-2015 :: To delete Qualification
    public int deleteDesignation(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteDesignation";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }
        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }

        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //Created by suresh as on 8-1-2016:: Search designationsearch
    public DataSet getDesignationSearch(string Designation, string Type)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getDesignationSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Type.Trim() == "" || Type.Trim() == null || Type.ToString() == "--Select--")
                da.SelectCommand.Parameters.Add("@Type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Type", SqlDbType.VarChar).Value = Type.ToString();

            if (Designation.Trim() == "" || Designation.Trim() == null)
                da.SelectCommand.Parameters.Add("@Designation", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Designation", SqlDbType.VarChar).Value = Designation.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //created by suresh get area of work
    public void getAreaOfWork(DropDownList ddlArea)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("getAreaOfWork", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddlArea.DataSource = ds.Tables[0];
            ddlArea.DataTextField = "AreaofWork";
            ddlArea.DataValueField = "intAreaofWork";
            ddlArea.DataBind();
            ddlArea.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Created by suresh as on 7-1-2016 :: Search worksearch
    public DataSet getWorkActivitySearch(string intAreaofWork, string WorkActivity)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getWorkActivitySearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intAreaofWork.Trim() == "" || intAreaofWork.Trim() == null || intAreaofWork.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = intAreaofWork.ToString();

            if (WorkActivity.Trim() == "" || WorkActivity.Trim() == null)
                da.SelectCommand.Parameters.Add("@WorkActivity", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@WorkActivity", SqlDbType.VarChar).Value = WorkActivity.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Created by suresh as on 07-1-2016 :: Search workactivity by ID
    public DataSet getWorkActivitybyID(string intWorkActivity)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getWorkActivitybyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intWorkActivity.Trim() == "" || intWorkActivity.Trim() == null)
                da.SelectCommand.Parameters.Add("@intWorkActivity", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intWorkActivity", SqlDbType.VarChar).Value = intWorkActivity.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Created by suresh as on 07-1-2016 :: Insert,Update workactivities 
    public int insrtUpWorkActivity(string intWorkActivity, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtUpWorkActivity";



        if (intWorkActivity == "" || intWorkActivity == null)
            com.Parameters.Add("@intWorkActivity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intWorkActivity", SqlDbType.VarChar).Value = intWorkActivity.Trim();


        if (intAreaofWork == "" || intAreaofWork == null || intAreaofWork.Trim() == "--Select--")
            com.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = intAreaofWork.Trim();

        if (WorkActivity == "" || WorkActivity == null)
            com.Parameters.Add("@WorkActivity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WorkActivity", SqlDbType.VarChar).Value = WorkActivity.Trim();






        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //created by suresh for delete delete id
    public int deleteWorkActivities(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteWorkActivities";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }


    //Created by siva as on 11-1-2016 :: Insert,Update Project Details 
    public int InsUpdProjectDet(string intPrjid, string intIP, string PrjName, string StartDate, string EndDate, string PrjSanctionDate, string TargetBeneficiary, string ProjectCost, string PrjInchargeName, string PrjInchargeMobile, string PrjInchargeEmail, string Status, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsUpdProjectDet";



        if (intPrjid == "" || intPrjid == null)
            com.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = intPrjid.Trim();


        if (intIP == "" || intIP == null)
            com.Parameters.Add("@intIP", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intIP", SqlDbType.VarChar).Value = intIP.Trim();

        if (PrjName == "" || PrjName == null)
            com.Parameters.Add("@PrjName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PrjName", SqlDbType.VarChar).Value = PrjName.Trim();


        if (StartDate == "" || StartDate == null)
            com.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@StartDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(StartDate.Trim());

        if (EndDate == "" || EndDate == null)
            com.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@EndDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(EndDate.Trim());

        if (PrjSanctionDate == "" || PrjSanctionDate == null)
            com.Parameters.Add("@PrjSanctionDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@PrjSanctionDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(PrjSanctionDate.Trim());




        if (TargetBeneficiary == "" || TargetBeneficiary == null)
            com.Parameters.Add("@TargetBeneficiary", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TargetBeneficiary", SqlDbType.VarChar).Value = TargetBeneficiary.Trim();

        if (ProjectCost == "" || ProjectCost == null)
            com.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = ProjectCost.Trim();

        if (PrjInchargeName == "" || PrjInchargeName == null)
            com.Parameters.Add("@PrjInchargeName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PrjInchargeName", SqlDbType.VarChar).Value = PrjInchargeName.Trim();

        if (PrjInchargeMobile == "" || PrjInchargeMobile == null)
            com.Parameters.Add("@PrjInchargeMobile", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PrjInchargeMobile", SqlDbType.VarChar).Value = PrjInchargeMobile.Trim();


        if (PrjInchargeEmail == "" || PrjInchargeEmail == null)
            com.Parameters.Add("@PrjInchargeEmail", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PrjInchargeEmail", SqlDbType.VarChar).Value = PrjInchargeEmail.Trim();


        if (Status == "" || Status == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();




        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //Created by siva as on 11-1-2016 :: Get Work Activities
    public void getWorkActivities(DropDownList ddl, string intAreaofWork)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("getWorkActivities", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intAreaofWork.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = intAreaofWork.ToString();
            }
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "WorkActivity";
            ddl.DataValueField = "intWorkActivity";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int DeleteProjectTargets(string intPrjtarget)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DeleteProjectTargets";

        cmd.Parameters.Add("@intPrjtarget", SqlDbType.Int).Value = intPrjtarget;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    public int bulkInsertdrPrjTargetDetails(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);

            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intPrjid", "intPrjid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intStateid", "intStateid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("intCountieid", "intCountieid");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("intPayamid", "intPayamid");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("intBomasid", "intBomasid");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Proposedtarget", "Proposedtarget");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("intAreaofWork", "intAreaofWork");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("intWorkActivity", "intWorkActivity");
            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);


            bulkCopy.DestinationTableName = ("tr_ProjectTarget");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }

    //siva as on 11-1-2016
    public DataSet getProjectDetLookupSearch(string intIP, string PrjName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getProjectDetLookupSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intIP.Trim() == "" || intIP.Trim() == null || intIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = intIP.ToString();



            if (PrjName.Trim() == "" || PrjName.Trim() == null || PrjName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@PrjName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@PrjName", SqlDbType.VarChar).Value = PrjName.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //siva as on 11-01-2016 :: GetProjectDetails by ID
    public DataSet GetProjectDetailsByid(string intPrjid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetProjectDetailsByid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intPrjid.Trim() == "" || intPrjid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = intPrjid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //Created by siva as on 12-1-2016 :: Insert,Update Beneficiaries  
    public int InsUpdBenDetails(string intBenid, string intIP, string EnrollmentNo, string NameofHousehold, string FamilySize, string Sex, string NameofSpouse, string NoofAdult, string NoofDependents, string FamilyIncome, string intStateid, string intCountieid, string intPayamid, string intBomasid, string Address, string ContactNo, string Email, string SecondLineHome, string IsDisability, string intDisability, string BiometricNo, string NameofBank, string AccountNo, string Created_by, string LegalStatus, string Age, string SOurceofIncome)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsUpdBenDetails";




        if (SOurceofIncome == "" || SOurceofIncome == null)
            com.Parameters.Add("@SOurceofIncome", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SOurceofIncome", SqlDbType.VarChar).Value = SOurceofIncome.Trim();

        if (Age == "" || Age == null)
            com.Parameters.Add("@Age", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Age", SqlDbType.VarChar).Value = Age.Trim();



        if (LegalStatus == "" || LegalStatus == null)
            com.Parameters.Add("@LegalStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LegalStatus", SqlDbType.VarChar).Value = LegalStatus.Trim();

        if (Email == "" || Email == null)
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();


        if (intBenid == "" || intBenid == null)
            com.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = intBenid.Trim();

        if (intIP == "" || intIP == null)
            com.Parameters.Add("@intIP", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intIP", SqlDbType.VarChar).Value = intIP.Trim();


        if (EnrollmentNo == "" || EnrollmentNo == null)
            com.Parameters.Add("@EnrollmentNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@EnrollmentNo", SqlDbType.VarChar).Value = EnrollmentNo.Trim();

        if (NameofHousehold == "" || NameofHousehold == null)
            com.Parameters.Add("@NameofHousehold", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NameofHousehold", SqlDbType.VarChar).Value = NameofHousehold.Trim();


        if (FamilySize == "" || FamilySize == null)
            com.Parameters.Add("@FamilySize", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FamilySize", SqlDbType.VarChar).Value = FamilySize.Trim();

        if (Sex == "" || Sex == null)
            com.Parameters.Add("@Sex", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Sex", SqlDbType.VarChar).Value = Sex.Trim();

        if (NameofSpouse == "" || NameofSpouse == null)
            com.Parameters.Add("@NameofSpouse", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NameofSpouse", SqlDbType.VarChar).Value = NameofSpouse.Trim();


        // , string  , string  , string  , string  , string  , string 


        if (NoofAdult == "" || NoofAdult == null)
            com.Parameters.Add("@NoofAdult", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofAdult", SqlDbType.VarChar).Value = NoofAdult.Trim();

        if (NoofDependents == "" || NoofDependents == null)
            com.Parameters.Add("@NoofDependents", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofDependents", SqlDbType.VarChar).Value = NoofDependents.Trim();

        if (FamilyIncome == "" || FamilyIncome == null)
            com.Parameters.Add("@FamilyIncome", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@FamilyIncome", SqlDbType.Decimal).Value = FamilyIncome.Trim();

        if (intStateid == "" || intStateid == null)
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

        if (intCountieid == "" || intCountieid == null)
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.Trim();

        if (intPayamid == "" || intPayamid == null)
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.Trim();
        // , string  , string  , string  , string  , string 
        if (intBomasid == "" || intBomasid == null)
            com.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.Trim();

        if (Address == "" || Address == null)
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

        if (ContactNo == "" || ContactNo == null)
            com.Parameters.Add("@ContactNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ContactNo", SqlDbType.VarChar).Value = ContactNo.Trim();

        if (SecondLineHome == "" || SecondLineHome == null)
            com.Parameters.Add("@SecondLineHome", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SecondLineHome", SqlDbType.VarChar).Value = SecondLineHome.Trim();

        if (IsDisability == "" || IsDisability == null)
            com.Parameters.Add("@IsDisability", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsDisability", SqlDbType.VarChar).Value = IsDisability.Trim();
        // , string  , string   , string 

        if (intDisability == "" || intDisability == null || intDisability.ToString() == "--Select--")
            com.Parameters.Add("@intDisability", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDisability", SqlDbType.VarChar).Value = intDisability.Trim();

        if (BiometricNo == "" || BiometricNo == null)
            com.Parameters.Add("@BiometricNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BiometricNo", SqlDbType.VarChar).Value = BiometricNo.Trim();

        if (NameofBank == "" || NameofBank == null)
            com.Parameters.Add("@NameofBank", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NameofBank", SqlDbType.VarChar).Value = NameofBank.Trim();


        if (AccountNo == "" || AccountNo == null)
            com.Parameters.Add("@AccountNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AccountNo", SqlDbType.VarChar).Value = AccountNo.Trim();


        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    //siva as on 12-1-2016 :: Benfeciary Detaila by ID
    public DataSet GetBenficiaryDetByID(string intBenid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBenficiaryDetByID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBenid.Trim() == "" || intBenid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = intBenid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //siva as on 12-1-2016 as Beneficiary Lookup Search
    public DataSet getBeneficiaryLookupsearch(string intStateid, string intCountieid, string intPayamid, string intBomasid, string NameofHousehold, string EnrollmentNo, string intIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getBeneficiaryLookupsearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intIP.Trim() == "" || intIP.Trim() == null || intIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = intIP.ToString();



            if (NameofHousehold.Trim() == "" || NameofHousehold.Trim() == null || NameofHousehold.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@NameofHousehold", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@NameofHousehold", SqlDbType.VarChar).Value = NameofHousehold.ToString();


            if (EnrollmentNo.Trim() == "" || EnrollmentNo.Trim() == null || EnrollmentNo.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@EnrollmentNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnrollmentNo", SqlDbType.VarChar).Value = EnrollmentNo.ToString();



            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();

            if (intPayamid.Trim() == "" || intPayamid.Trim() == null || intPayamid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();


            if (intBomasid.Trim() == "" || intBomasid.Trim() == null || intBomasid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //siva as on 13-01-2016 for for workproposal by id
    public DataSet GetworkproposalforProgress(string intWorkActivityId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetworkproposalforProgress", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intWorkActivityId.Trim() == "" || intWorkActivityId.Trim() == null)
                da.SelectCommand.Parameters.Add("@intWorkActivityId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intWorkActivityId", SqlDbType.VarChar).Value = intWorkActivityId.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet getWorkProgressearch(string IPid, string intStateid, string intCountieid, string intPayamid, string intBomasid, string WorkCode, string intTSTid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getWorkProgressearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intTSTid.Trim() == "" || intTSTid.Trim() == null || intTSTid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intTSTid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTSTid", SqlDbType.VarChar).Value = intTSTid.ToString();

            if (IPid.Trim() == "" || IPid.Trim() == null || IPid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IPid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IPid", SqlDbType.VarChar).Value = IPid.ToString();

            if (WorkCode.Trim() == "" || WorkCode.Trim() == null || WorkCode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = WorkCode.ToString();



            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();

            if (intPayamid.Trim() == "" || intPayamid.Trim() == null || intPayamid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();


            if (intBomasid.Trim() == "" || intBomasid.Trim() == null || intBomasid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //siva as on 13-01-2016 for for Get Boma wise Beneficiary by Boma id
    public DataSet GetBomawiseBeneficiary(string intBomasid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBomawiseBeneficiary", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBomasid.Trim() == "" || intBomasid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    //Created by siva as on 13-1-2016 :: Insert,Update Work Progress 
    public int InsrtWorkProgressDet(string intWorkid, string WorkStartDate, string Status, string Remarks, string Created_by, string Incharge)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsUpdWorkProgress";




        if (Incharge == "" || Incharge == null)
            com.Parameters.Add("@Incharge", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Incharge", SqlDbType.VarChar).Value = Incharge.Trim();


        if (intWorkid == "" || intWorkid == null)
            com.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = intWorkid.Trim();


        if (WorkStartDate == "" || WorkStartDate == null)
            com.Parameters.Add("@WorkStartDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@WorkStartDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(WorkStartDate.Trim());


        if (Status == "" || Status == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Remarks == "" || Remarks == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();




        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int WorkAllocation(string WorkCode, string intBenid, string Created_by)
    {
        int value = 0;

        try
        {
            con.OpenConnection();// dbu.openCon();
            SqlCommand cmd = new SqlCommand("WorkAllocation", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;


            if (WorkCode == "" || WorkCode == null)
                cmd.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = WorkCode.Trim();

            cmd.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = intBenid.Trim();

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }



    //siva as on 13-01-2016 for for Get Boma wise Beneficiary by Boma id
    public DataSet workProgressBendet(string WorkCode)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("workProgressBendet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (WorkCode.Trim() == "" || WorkCode.Trim() == null)
                da.SelectCommand.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = WorkCode.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //siva as on 13-01-2016 for for Get beneficiary Attendance
    public int BenefeciaryAttendance(string WorkCode, string intBenid, string Status, string AttendanceDate, string Created_by)
    {
        int value = 0;

        try
        {
            con.OpenConnection();// dbu.openCon();
            SqlCommand cmd = new SqlCommand("BenefeciaryAttendance", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;


            if (Status == "" || Status == null)
                cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


            if (WorkCode == "" || WorkCode == null)
                cmd.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@WorkCode", SqlDbType.VarChar).Value = WorkCode.Trim();

            cmd.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = intBenid.Trim();


            if (AttendanceDate == "" || AttendanceDate == null)
                cmd.Parameters.Add("@AttendanceDate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@AttendanceDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(AttendanceDate.Trim());

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }





    //siva as on 18-01-2016 for save/update Applicant Attachements
    public int InsrtUpdAttachment(string intTypeId, byte[] Photo, string PhotoFileName, string Type, string Created_by)
    {
        int value = 0;

        try
        {
            con.OpenConnection();// dbu.openCon();
            SqlCommand cmd = new SqlCommand("InsrtUpdAttachment", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;


            if (intTypeId == "" || intTypeId == null)
                cmd.Parameters.Add("@intTypeId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intTypeId", SqlDbType.VarChar).Value = intTypeId.Trim();


            if (PhotoFileName.Trim() == "" || PhotoFileName.Trim() == null)
                cmd.Parameters.Add("@Photo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Photo", SqlDbType.Image).Value = Photo;

            if (PhotoFileName.Trim() == "" || PhotoFileName.Trim() == null)
                cmd.Parameters.Add("@PhotoFileName", SqlDbType.VarChar).Value = PhotoFileName.Trim();
            else
                cmd.Parameters.Add("@PhotoFileName", SqlDbType.VarChar).Value = PhotoFileName.Trim();







            if (Type == "" || Type == null)
                cmd.Parameters.Add("@Type", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Type", SqlDbType.VarChar).Value = Type;

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }


    #region Executing Reader
    public SqlDataReader ExecuteDReader(string searchQuery, SqlConnection sqlConnection)
    {
        SqlDataReader dr = null;
        try
        {
            SqlCommand cmd = new SqlCommand(searchQuery, sqlConnection);
            dr = cmd.ExecuteReader();

        }
        catch (Exception ex)
        {
            throw ex;
        }
        return dr;
    }
    #endregion

    //siva as on 18-01-2016  for get Attendance Count
    public DataSet getAttendanceCount(string intWorkActivityId, string Year, string Month)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getAttendanceCount", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Year.Trim() == "" || Year.Trim() == null)
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();

            if (Month.Trim() == "" || Month.Trim() == null)
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();

            if (intWorkActivityId.Trim() == "" || intWorkActivityId.Trim() == null)
                da.SelectCommand.Parameters.Add("@intWorkActivityId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intWorkActivityId", SqlDbType.VarChar).Value = intWorkActivityId.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    //siva as on 19-01-2016 for for Get beneficiary Wages Payment
    public int InsUpdBeneficiaryWages(string intBenid, string Year, string Month, string PaidDate, string PaidAmount, string Created_by)
    {
        int value = 0;

        try
        {
            con.OpenConnection();// dbu.openCon();
            SqlCommand cmd = new SqlCommand("InsUpdBeneficiaryWages", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;

            if (PaidAmount == "" || PaidAmount == null)
                cmd.Parameters.Add("@PaidAmount", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@PaidAmount", SqlDbType.Decimal).Value = PaidAmount.Trim();



            if (Year == "" || Year == null)
                cmd.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();


            if (Month == "" || Month == null)
                cmd.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

            cmd.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = intBenid.Trim();


            if (PaidDate == "" || PaidDate == null)
                cmd.Parameters.Add("@PaidDate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@PaidDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(PaidDate.Trim());

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }



    //created by suresh as on 14-1-2016 for search Boma Developmeny Comitte 
    public DataSet getBDCSearch(string intStateid, string intCountieid, string intPayamid, string BDCName, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getBDCSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();

            if (intPayamid.Trim() == "" || intPayamid.Trim() == null || intPayamid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();


            if (BDCName.Trim() == "" || BDCName.Trim() == null)
                da.SelectCommand.Parameters.Add("@BDCName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BDCName", SqlDbType.VarChar).Value = BDCName.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //created by suresh as on 13-1-16:insert,update Boma/Quarter Council  Development Comitte
    public int insrtBDC(string intBDC, string Created_by, string User_id, string Password)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtBDC";



        if (intBDC == "" || intBDC == null)
            com.Parameters.Add("@intBDC", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intBDC", SqlDbType.VarChar).Value = intBDC.Trim();

        if (BDCName == "" || BDCName == null)
            com.Parameters.Add("@BDCName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BDCName", SqlDbType.VarChar).Value = BDCName.Trim();


        if (intStateid == "" || intStateid == null || intStateid.Trim() == "--Select--")
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();


        if (intCountieid == "" || intCountieid == null)
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.Trim();


        if (intPayamid == "" || intPayamid == null)
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.Trim();


        if (Address == "" || Address == null)
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

        if (Email == "" || Email == null)
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();


        if (Contact_No == "" || Contact_No == null)
            com.Parameters.Add("@Contact_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Contact_No", SqlDbType.VarChar).Value = Contact_No.Trim();

        if (Status == "" || Status == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();



        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (User_id == "" || User_id == null)
            com.Parameters.Add("@User_id ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@User_id ", SqlDbType.VarChar).Value = User_id.Trim();

        if (Password == "" || Password == null)
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //created by suresh 13-1-2016 for delete BDC
    public int deleteBDC(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteBDC";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //created by suresh as 14-1-2016 for getBDCbyid
    public DataSet getBDCbyID(string intBDC)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getBDCbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBDC.Trim() == "" || intBDC.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBDC", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBDC", SqlDbType.VarChar).Value = intBDC.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //created by suresh as on 01-17-2016 for get county development search 
    public DataSet getCASearch(string intStateid, string intCountieid, string CountyAdmName, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCASearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();



            if (CountyAdmName.Trim() == "" || CountyAdmName.Trim() == null)
                da.SelectCommand.Parameters.Add("@CountyAdmName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@CountyAdmName", SqlDbType.VarChar).Value = CountyAdmName.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //created by suresh as for county search by id
    public DataSet getCAbyID(string intCountyAdm)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCAbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intCountyAdm.Trim() == "" || intCountyAdm.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCountyAdm", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountyAdm", SqlDbType.VarChar).Value = intCountyAdm.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //creted by suresh as pn 01-17-2016 for insert county dvp
    public int insrtCA(string intCountyAdm, string Created_by, string User_id, string Password)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtCA";



        if (intCountyAdm == "" || intCountyAdm == null)
            com.Parameters.Add("@intCountyAdm", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountyAdm", SqlDbType.VarChar).Value = intCountyAdm.Trim();

        if (CountyAdmName == "" || CountyAdmName == null)
            com.Parameters.Add("@CountyAdmName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CountyAdmName", SqlDbType.VarChar).Value = CountyAdmName.Trim();


        if (intStateid == "" || intStateid == null || intStateid.Trim() == "--Select--")
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();


        if (intCountieid == "" || intCountieid == null)
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.Trim();

        if (Address == "" || Address == null)
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

        if (Email == "" || Email == null)
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();


        if (ContactNo == "" || ContactNo == null)
            com.Parameters.Add("@ContactNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ContactNo", SqlDbType.VarChar).Value = ContactNo.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (User_id == "" || User_id == null)
            com.Parameters.Add("@User_id ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@User_id ", SqlDbType.VarChar).Value = User_id.Trim();

        if (Password == "" || Password == null)
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public int bulkInsertdrCouncilNewDetails(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);

            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("MemType", "MemType");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intCPBid", "intCPBid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("AuthorizedPerson", "AuthorizedPerson");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Designation", "Designation");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("MobileNo", "MobileNo");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Email", "Email");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Gender", "Gender");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);


            bulkCopy.DestinationTableName = ("tr_CouncilMemDet");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }


    //crete by suresh As on 01-17-2016 for delete county by id
    public int deleteCA(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteCA";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //created by suresh as on 01-19-16 for delete memsinvolved
    public int DeleteCouncilMemsInvolved(string intMemid)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DeleteCouncilMemsInvolved";

        cmd.Parameters.Add("@intMemid", SqlDbType.Int).Value = intMemid;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }


    //Created by suresh as on 8-1-2016:: Search ip
    public DataSet getIPSearch(string IPName, string TypeofIP, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIPSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@IPName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IPName", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@TypeofIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TypeofIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetCFOQuesdetbulogin(string Created_by)
    {


        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdetailsbyid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetCFOQuestionereisReceiptDetails(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCFOQuestionereisReceiptDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //created by suresh as on 17-1-2016 purpose of get data by id
    public DataSet getIPbyID(string intIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIPbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intIP.Trim() == "" || intIP.Trim() == null)
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = intIP.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //created by suresh as on 17-1-2016 for delete ip
    public int deleteIP(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteIP";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //Created by suresh as on 08-1-2016 :: Insert,Update ip 
    public int insrtIP(string intIP, string Created_by, string User_id, string Password, string intTST, string SPerson, string SEmail)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtIP";

        if (SPerson == "" || SPerson == null)
            com.Parameters.Add("@SPerson", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SPerson", SqlDbType.VarChar).Value = SPerson.Trim();

        if (SEmail == "" || SEmail == null)
            com.Parameters.Add("@SEmail", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SEmail", SqlDbType.VarChar).Value = SEmail.Trim();

        if (SecondaryAuthorisedPerson == "" || SecondaryAuthorisedPerson == null)
            com.Parameters.Add("@SecondaryAuthorisedPerson", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SecondaryAuthorisedPerson", SqlDbType.VarChar).Value = SecondaryAuthorisedPerson.Trim();


        if (intTST == "" || intTST == null)
            com.Parameters.Add("@intTST", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intTST", SqlDbType.VarChar).Value = intTST.Trim();

        if (intIP == "" || intIP == null)
            com.Parameters.Add("@intIP", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intIP", SqlDbType.VarChar).Value = intIP.Trim();


        if (IPName == "" || IPName == null)
            com.Parameters.Add("@IPName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPName", SqlDbType.VarChar).Value = IPName.Trim();

        if (TypeofIP == "" || TypeofIP == null)
            com.Parameters.Add("@TypeofIP", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofIP", SqlDbType.VarChar).Value = TypeofIP.Trim();

        if (AuthorisedPerson == "" || AuthorisedPerson == null)
            com.Parameters.Add("@AuthorisedPerson", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AuthorisedPerson", SqlDbType.VarChar).Value = AuthorisedPerson.Trim();




        if (ContactNo == "" || ContactNo == null)
            com.Parameters.Add("@ContactNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ContactNo", SqlDbType.VarChar).Value = ContactNo.Trim();

        if (SecondaryContactNo == "" || SecondaryContactNo == null)
            com.Parameters.Add("@SecondaryContactNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SecondaryContactNo", SqlDbType.VarChar).Value = SecondaryContactNo.Trim();


        if (Email == "" || Email == null)
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

        if (Address == "" || Address == null)
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

        if (Website == "" || Website == null)
            com.Parameters.Add("@Website", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Website", SqlDbType.VarChar).Value = Website.Trim();


        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (User_id == "" || User_id == null)
            com.Parameters.Add("@User_id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@User_id", SqlDbType.VarChar).Value = User_id.Trim();

        if (Password == "" || Password == null)
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //created by suresh as on 13-1-2016 for search payam admin search
    public DataSet getPADSearch(string intStateid, string intCountieid, string intPayamid, string PDCName, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getPADSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();

            if (intPayamid.Trim() == "" || intPayamid.Trim() == null || intPayamid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();


            if (PDCName.Trim() == "" || PDCName.Trim() == null)
                da.SelectCommand.Parameters.Add("@PDCName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@PDCName", SqlDbType.VarChar).Value = PDCName.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //created by suresh as on 13-1-16:insert,update PDC
    public int insrtPDC(string intPDC, string Created_by, string User_id, string Password)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtPDC";



        if (intPDC == "" || intPDC == null)
            com.Parameters.Add("@intPDC", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPDC", SqlDbType.VarChar).Value = intPDC.Trim();

        if (PDCName == "" || PDCName == null)
            com.Parameters.Add("@PDCName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PDCName", SqlDbType.VarChar).Value = PDCName.Trim();


        if (intStateid == "" || intStateid == null || intStateid.Trim() == "--Select--")
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();


        if (intCountieid == "" || intCountieid == null)
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.Trim();


        if (intPayamid == "" || intPayamid == null)
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.Trim();


        if (Address == "" || Address == null)
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

        if (Email == "" || Email == null)
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();


        if (Contact_No == "" || Contact_No == null)
            com.Parameters.Add("@Contact_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Contact_No", SqlDbType.VarChar).Value = Contact_No.Trim();

        if (Status == "" || Status == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (User_id == "" || User_id == null)
            com.Parameters.Add("@User_id ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@User_id ", SqlDbType.VarChar).Value = User_id.Trim();

        if (Password == "" || Password == null)
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    //created by suresh 13-1-2016 for deletepdc
    public int deletePDC(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deletePDC";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }

    //created by suresh as 13-1-2016 for getPDCbyid
    public DataSet getPdcbyID(string intPDC)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getPdcbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intPDC.Trim() == "" || intPDC.Trim() == null)
                da.SelectCommand.Parameters.Add("@intPDC", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPDC", SqlDbType.VarChar).Value = intPDC.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Created by suresh as on 12-1-2016 :: Search TST 
    public DataSet getTSTSearch(string intStateid, string intCountieid, string intPayamid, string TstName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getTSTSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intStateid.Trim() == "" || intStateid.Trim() == null || intStateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.ToString();

            if (intCountieid.Trim() == "" || intCountieid.Trim() == null || intCountieid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.ToString();

            if (intPayamid.Trim() == "" || intPayamid.Trim() == null || intPayamid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.ToString();


            if (TstName.Trim() == "" || TstName.Trim() == null || TstName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@TstName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TstName", SqlDbType.VarChar).Value = TstName.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //created by suresh as on 12-1-2016 get Designations
    public void sp_Designations(DropDownList ddldesignation)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("sp_Designations", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddldesignation.DataSource = ds.Tables[0];
            ddldesignation.DataTextField = "Designation";
            ddldesignation.DataValueField = "intDesgid";
            ddldesignation.DataBind();
            ddldesignation.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Creates by suresh as on 12-1-2016
    public DataSet getTSTbyID(string intTST)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getTSTbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intTST.Trim() == "" || intTST.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = intTST.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //create by suresh as on 14-1-2016 for verify existing user table
    public DataSet CheckUserid(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("CheckUserid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = User_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet getRawmaterialdetails(string intCEFid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getRawmaterial", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intCEFid.Trim() == "" || intCEFid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCEFid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCEFid", SqlDbType.VarChar).Value = intCEFid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet getPCBbulkdetails(string intCEFid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetPCBBulkdetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intCEFid.Trim() == "" || intCEFid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCEFid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCEFid", SqlDbType.VarChar).Value = intCEFid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet getForestbulkdetails(string intCEFid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetForestBulkdetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intCEFid.Trim() == "" || intCEFid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCEFid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCEFid", SqlDbType.VarChar).Value = intCEFid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet getManfacturedetails(string intCEFid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getManfactureDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intCEFid.Trim() == "" || intCEFid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCEFid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCEFid", SqlDbType.VarChar).Value = intCEFid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public int bulkInsertEduDetails(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intQuessionaireid", "intQuessionaireid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intCFEEnterpid", "intCFEEnterpid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("intCFEForestid", "intCFEForestid");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Species", "Species");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Est_Len_Timber", "Est_Len_Timber");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Est_Vol_Timber", "Est_Vol_Timber");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Girth", "Girth");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Est_FireWood", "Est_FireWood");
            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Forest_Pole", "Forest_Pole");
            SqlBulkCopyColumnMapping mapping10 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            //SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);
            bulkCopy.ColumnMappings.Add(mapping10);

            bulkCopy.DestinationTableName = ("td_CFEForestDetBulk");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }



    public int bulkInsertmanufacture(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intQuessionaireid", "intQuessionaireid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intCFEEnterpid", "intCFEEnterpid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Manf_ItemName", "Manf_ItemName");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Manf_Item_Quantity", "Manf_Item_Quantity");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Manf_Item_Quantity_In", "Manf_Item_Quantity_In");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Manf_Item_Quantity_Per", "Manf_Item_Quantity_Per");

            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("OtherItemName", "OtherItemName");

            //SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Girth", "Girth");
            //SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Est_FireWood", "Est_FireWood");
            //SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Forest_Pole", "Forest_Pole");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            //SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            //bulkCopy.ColumnMappings.Add(mapping9);


            bulkCopy.DestinationTableName = ("td_LineofActivity_Manfacture");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }

    public DataSet GetEnterPreneurdatabylineofactivity1(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerbylineofActivity", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }




    public int DeletebyManufactureid(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DeleteManufacturebyEnterPrenuer";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }


    public int DeletebyRawMaterialid(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DeleteRawmeterialbyEnterPrenuer";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }

    public int bulkInsertRAWmaterial(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intQuessionaireid", "intQuessionaireid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intCFEEnterpid", "intCFEEnterpid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Raw_ItemName", "Raw_ItemName");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Raw_Item_Quantity", "Raw_Item_Quantity");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Raw_Item_Quantity_In", "Raw_Item_Quantity_In");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Raw_Item_Quantity_Per", "Raw_Item_Quantity_Per");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("OtherItemName", "OtherItemName");
            //SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Girth", "Girth");
            //SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Est_FireWood", "Est_FireWood");
            //SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Forest_Pole", "Forest_Pole");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            //SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            //bulkCopy.ColumnMappings.Add(mapping9);


            bulkCopy.DestinationTableName = ("td_LineofActivity_RawMetrial");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }


    public int DeletebyForestdataid(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "GetdeletebuForest";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }

    public DataSet getdataofidentity(string intQuessioneryid, string deptid)
    {


        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("GetDeptOrder", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessioneryid.Trim() == "" || intQuessioneryid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = intQuessioneryid.ToString();



            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

        //}



    }

    public int bulkInsertEduDetailsPCB(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);

            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intQuessionaireid", "intQuessionaireid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intCFEEnterpid", "intCFEEnterpid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("intCFEPCBid", "intCFEPCBid");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("NameofWaste", "NameofWaste");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Category", "Category");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Qunt_Generated", "Qunt_Generated");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Storage_Treatment", "Storage_Treatment");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Disposal", "Disposal");

            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            //SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);


            bulkCopy.DestinationTableName = ("td_CFEPCBDetBulk");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }


    public DataSet Getverifyofque9(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque9", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    //public int insertCFOQuestionerrie(string Sector_Ent, string Prop_intDistrictid, string Prop_intMandalid, string Prop_intVillageid, string Val_Land, string Val_Build, string Val_Plant, string Tot_PrjCost,
    //                string HaveyourTakePolution, string intLineofActivityid, string Pol_Category, string License_Factory, string High_Tension_Meter, string NOC_Fire, string Product_Drugs, string Bioler_Industry, string Created_by)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertCFOQuessionary";

    //    if (Sector_Ent == "" || Sector_Ent == null || Sector_Ent.Trim() == "--Select--")
    //        com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();

    //    if (Prop_intDistrictid == "" || Prop_intDistrictid == null || Prop_intDistrictid.Trim() == "--Select--")
    //        com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = Prop_intDistrictid.Trim();

    //    if (Prop_intMandalid == "" || Prop_intMandalid == null || Prop_intMandalid.Trim() == "--Select--")
    //        com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = Prop_intMandalid.Trim();

    //    if (Prop_intVillageid == "" || Prop_intVillageid == null || Prop_intVillageid.Trim() == "--Select--")
    //        com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = Prop_intVillageid.Trim();

    //    if (Val_Land == "" || Val_Land == null || Val_Land.Trim() == "--Select--")
    //        com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();

    //    if (Val_Build == "" || Val_Build == null || Val_Build.Trim() == "--Select--")
    //        com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();

    //    if (Val_Plant == "" || Val_Plant == null || Val_Plant.Trim() == "--Select--")
    //        com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();


    //    if (Tot_PrjCost == "" || Tot_PrjCost == null || Tot_PrjCost.Trim() == "--Select--")
    //        com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();


    //    if (HaveyourTakePolution == "" || HaveyourTakePolution == null || HaveyourTakePolution.Trim() == "--Select--")
    //        com.Parameters.Add("@HaveyourTakePolution", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@HaveyourTakePolution", SqlDbType.VarChar).Value = HaveyourTakePolution.Trim();
    //    //string intLineofActivityid, string Pol_Category, string License_Factory, string High_Tension_Meter, string NOC_Fire, string Product_Drugs, string Bioler_Industry
    //    if (intLineofActivityid == "" || intLineofActivityid == null || intLineofActivityid.Trim() == "--Select--")
    //        com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = intLineofActivityid.Trim();

    //    if (Pol_Category == "" || Pol_Category == null || Pol_Category.Trim() == "--Select--")
    //        com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();

    //    if (License_Factory == "" || License_Factory == null || License_Factory.Trim() == "--Select--")
    //        com.Parameters.Add("@License_Factory", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@License_Factory", SqlDbType.VarChar).Value = License_Factory.Trim();

    //    if (High_Tension_Meter == "" || High_Tension_Meter == null || High_Tension_Meter.Trim() == "--Select--")
    //        com.Parameters.Add("@High_Tension_Meter", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@High_Tension_Meter", SqlDbType.VarChar).Value = High_Tension_Meter.Trim();

    //    if (NOC_Fire == "" || NOC_Fire == null || NOC_Fire.Trim() == "--Select--")
    //        com.Parameters.Add("@NOC_Fire", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NOC_Fire", SqlDbType.VarChar).Value = NOC_Fire.Trim();

    //    if (Product_Drugs == "" || Product_Drugs == null || NOC_Fire.Trim() == "--Select--")
    //        com.Parameters.Add("@Product_Drugs", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Product_Drugs", SqlDbType.VarChar).Value = Product_Drugs.Trim();

    //    if (Bioler_Industry == "" || Bioler_Industry == null || Bioler_Industry.Trim() == "--Select--")
    //        com.Parameters.Add("@Bioler_Industry", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Bioler_Industry", SqlDbType.VarChar).Value = Bioler_Industry.Trim();


    //    if (Created_by == "" || Created_by == null || Created_by.Trim() == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }

    //}

    public DataSet RetriveStatusForViewApplication(string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1Drildownbyid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByType(string status, string type)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRIDrillDownPhase2", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet RetriveApprovalsStatusByType(string status, string type)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1Drilldownphase4", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getApplicationDataForCMO()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //  da = new SqlDataAdapter("getApplicationDataForCMO", con.GetConnection);
            da = new SqlDataAdapter("[getApplicationDataForCMO_NEW_CFE]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet getEnterprenuerdashboarddrilldown(string intEntid, string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerdashboarddrilldown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (intEntid.Trim() == "" || intEntid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = intEntid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByType1(string status, string type, string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1DrillDownPhase3", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetR1DrillDownPhase3CFO(string status, string type, string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("GetR1DrillDownPhase3CFO", con.GetConnection);
            da = new SqlDataAdapter("GetR1DrillDownPhase3New_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getdataofStatelevel(string dist, string fromdate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("getdataofstatelevel", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (dist.Trim() == "" || dist.Trim() == null || dist.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = dist.ToString();

            if (fromdate.Trim() == "" || fromdate.Trim() == null || fromdate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    //public DataSet getdataofStatelevel(string dist)
    //{

    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();

    //    try
    //    {
    //        da = new SqlDataAdapter("getdataofstatelevel", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (dist.Trim() == "" || dist.Trim() == null || dist.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = dist.ToString();
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }

    //}


    public DataSet getdataofDistrictlevel(string dist)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("getdistrleveldata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (dist.Trim() == "" || dist.Trim() == null || dist.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = dist.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetEnterPreneurdatabyQuewaterReq(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getenterdataofQueWaterbyday", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public int UpdateAdditionalpayments(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string ipaddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnew";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();


        if (ipaddress.Trim() == "" || ipaddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = ipaddress.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }



    public int DeletebyPCBdataid(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DeletedatabyPCBBulk";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }
    public int insertPCBDetails(string number, string ApplNo, string intCFEEnterpid, string PCB_Water, string PCB_Washing, string PCB_BoilerBlowDown, string PCB_CollingTower, string PCB_Domastic,
                     string PCB_Total, string PCB_AP_Capcity, string PCB_FuelConsumption, string PCB_FuelStorge, string PCB_StackHight, string PCB_StackDaimeter, string PCB_AirPolution_Equipment, string PCB_EmiCharcter,
                     string PCB_Qunt_Emission, string PCB_ControlEqu, string PCB_IsPrjRequired, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertPCBdetails";

        if (number.ToString().Trim() == "" || number.ToString().Trim() == null || number.ToString().Trim() == "--Select--")
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

        if (ApplNo.ToString().Trim() == "" || ApplNo.ToString().Trim() == null || ApplNo.ToString().Trim() == "--Select--")
            com.Parameters.Add("@ApplNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ApplNo", SqlDbType.VarChar).Value = ApplNo.Trim();



        if (intCFEEnterpid.ToString().Trim() == "" || intCFEEnterpid.ToString().Trim() == null || intCFEEnterpid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null || Created_by.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (PCB_Water.ToString().Trim() == "" || PCB_Water.ToString().Trim() == null || PCB_Water.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Water", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Water", SqlDbType.VarChar).Value = PCB_Water.Trim();
        if (PCB_Washing.ToString().Trim() == "" || PCB_Washing.ToString().Trim() == null || PCB_Washing.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Washing", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Washing", SqlDbType.VarChar).Value = PCB_Washing.Trim();

        if (PCB_BoilerBlowDown.ToString().Trim() == "" || PCB_BoilerBlowDown.ToString().Trim() == null || PCB_BoilerBlowDown.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_BoilerBlowDown", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_BoilerBlowDown", SqlDbType.VarChar).Value = PCB_BoilerBlowDown.Trim();

        if (PCB_CollingTower.ToString().Trim() == "" || PCB_CollingTower.ToString().Trim() == null || PCB_CollingTower.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_CollingTower", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_CollingTower", SqlDbType.VarChar).Value = PCB_CollingTower.Trim();

        if (PCB_Domastic.ToString().Trim() == "" || PCB_Domastic.ToString().Trim() == null || PCB_Domastic.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Domastic", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Domastic", SqlDbType.VarChar).Value = PCB_Domastic.Trim();

        if (PCB_Total.ToString().Trim() == "" || PCB_Total.ToString().Trim() == null || PCB_Total.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Total", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Total", SqlDbType.VarChar).Value = PCB_Total.Trim();
        //string PCB_AP_Capcity, string PCB_FuelConsumption, string PCB_FuelStorge, string PCB_StackHight, string PCB_StackDaimeter, string PCB_AirPolution_Equipment, string PCB_EmiCharcter,
        //           string PCB_Qunt_Emission, string PCB_ControlEqu, string PCB_IsPrjRequired

        if (PCB_AP_Capcity.ToString().Trim() == "" || PCB_AP_Capcity.ToString().Trim() == null || PCB_AP_Capcity.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_AP_Capcity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_AP_Capcity", SqlDbType.VarChar).Value = PCB_AP_Capcity.Trim();
        if (PCB_FuelConsumption.ToString().Trim() == "" || PCB_FuelConsumption.ToString().Trim() == null || PCB_FuelConsumption.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_FuelConsumption", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_FuelConsumption", SqlDbType.VarChar).Value = PCB_FuelConsumption.Trim();
        if (PCB_FuelStorge.ToString().Trim() == "" || PCB_FuelStorge.ToString().Trim() == null || PCB_FuelStorge.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_FuelStorge", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_FuelStorge", SqlDbType.VarChar).Value = PCB_FuelStorge.Trim();
        if (PCB_StackHight.ToString().Trim() == "" || PCB_StackHight.ToString().Trim() == null || PCB_StackHight.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_StackHight", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_StackHight", SqlDbType.VarChar).Value = PCB_StackHight.Trim();

        if (PCB_StackDaimeter.ToString().Trim() == "" || PCB_StackDaimeter.ToString().Trim() == null || PCB_StackDaimeter.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_StackDaimeter", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_StackDaimeter", SqlDbType.VarChar).Value = PCB_StackDaimeter.Trim();

        if (PCB_AirPolution_Equipment.ToString().Trim() == "" || PCB_AirPolution_Equipment.ToString().Trim() == null || PCB_AirPolution_Equipment.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_AirPolution_Equipment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_AirPolution_Equipment", SqlDbType.VarChar).Value = PCB_AirPolution_Equipment.Trim();

        if (PCB_EmiCharcter.ToString().Trim() == "" || PCB_EmiCharcter.ToString().Trim() == null || PCB_EmiCharcter.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_EmiCharcter", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_EmiCharcter", SqlDbType.VarChar).Value = PCB_EmiCharcter.Trim();

        if (PCB_Qunt_Emission.ToString().Trim() == "" || PCB_Qunt_Emission.ToString().Trim() == null || PCB_Qunt_Emission.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Qunt_Emission", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Qunt_Emission", SqlDbType.VarChar).Value = PCB_Qunt_Emission.Trim();

        if (PCB_ControlEqu.ToString().Trim() == "" || PCB_ControlEqu.ToString().Trim() == null || PCB_ControlEqu.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_ControlEqu", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_ControlEqu", SqlDbType.VarChar).Value = PCB_ControlEqu.Trim();

        if (PCB_IsPrjRequired.ToString().Trim() == "" || PCB_IsPrjRequired.ToString().Trim() == null || PCB_IsPrjRequired.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_IsPrjRequired", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_IsPrjRequired", SqlDbType.VarChar).Value = PCB_IsPrjRequired.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            //  return Convert.ToInt32(com.ExecuteScalar());

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }



    }

    public DataSet GetdataofEnterprenuer(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofEnterprenuer", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetdataofLandenterprenuer(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetdataofLanddet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }



    public DataSet GetdataofForestenterprenuer(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetdataofForestdet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetdataofPowerenterprenuer(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetdataofPowerdet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }




    public DataSet GetdataofFireenterprenuer(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("Getdataoffiredet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }



    public DataSet GetdataofWaterenterprenuer(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("Getdataofwaterdet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }



    public DataSet GetdataofPCBenterprenuer(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetdataofPCBdet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet RetriveLanddata(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("RetriveLandData", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }




    //    #region Developed By Rajesh Patnaik
    //    public int InsertLandDetails(string number, string intQuessionaireid,
    //string intCFEEnterpid,
    //string Uid_No,
    //string Reg_Id,
    //string intProposedCateogryid,
    //string intApplicationTypeid,
    //string LocationNameIEIDA,
    //string IsSitePlaning,
    //string SurveyNo,
    //string Land_intDistrictid,
    //string Land_intMandalid,
    //string Land_intVillageid,
    //string Name_Gramapachayat,
    //string Land_Pincode,
    //string Land_Email,
    //string Land_TelephoneNumber,
    //string Land_TotExtent,
    //string Land_ProposedArea,
    //string Land_BuiltupArea,
    //string Land_Existingwidth,
    //string intTypeofApprochid,
    //string intLocationFalls,
    //string intBuildingApproval,
    //string intIndustryProduct,
    //string intCategoryid,
    //string FromZone,
    //string ToZone,
    //string GoogleMaptoUploadFile,
    //string GoogleMapFilePath,
    //string Geo_Cordinate_Latitude,
    //string Geo_Cordinate_Langitude,
    //string KMLFileName,
    //string KMLFilePath,
    //string Covered_revenueSketch,
    //string Covered_Adjoining,
    //string Plot_Number,
    //string Sanction_LayoutNo,
    //string Land_User_MasterPlan,
    //string Hight_Building,
    //string Affected_roadwinding,
    //string Geo_Cordinate_Latitude1,
    //string Geo_Cordinate_Langitude1,
    //string KMLFileName1,
    //string KMLFilePath1,
    //string Created_by,
    //string Created_dt,
    //string Modified_by,
    //string Modified_dt,
    //        string txtArchitectName, string txtArchitectLicenseno, string txtArchitectMobileno)
    //    {
    //        try
    //        {

    //            con.OpenConnection();
    //            SqlDataAdapter myDataAdapter;

    //            myDataAdapter = new SqlDataAdapter("sp_LandDetails", con.GetConnection);
    //            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


    //            if (number.ToString().Trim() == "" || number.ToString().Trim() == null)
    //                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

    //            //if (Applid.ToString().Trim() == "" || Applid.ToString().Trim() == null)
    //            //    com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = DBNull.Value;
    //            //else
    //            //    com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = Applid.Trim();


    //            //-------------------------------------------------
    //            if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null || intQuessionaireid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


    //            if (intCFEEnterpid.ToString().Trim() == "" || intCFEEnterpid.ToString().Trim() == null || intCFEEnterpid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();


    //            if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null || Uid_No.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

    //            if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null || Reg_Id.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

    //            if (intProposedCateogryid.ToString().Trim() == "" || intProposedCateogryid.ToString().Trim() == null || intProposedCateogryid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intProposedCateogryid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intProposedCateogryid", SqlDbType.VarChar).Value = intProposedCateogryid.Trim();

    //            if (intApplicationTypeid.ToString().Trim() == "" || intApplicationTypeid.ToString().Trim() == null || intApplicationTypeid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intApplicationTypeid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intApplicationTypeid", SqlDbType.VarChar).Value = intApplicationTypeid.Trim();

    //            if (LocationNameIEIDA.ToString().Trim() == "" || LocationNameIEIDA.ToString().Trim() == null || LocationNameIEIDA.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@LocationNameIEIDA", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@LocationNameIEIDA", SqlDbType.VarChar).Value = LocationNameIEIDA.Trim();

    //            if (IsSitePlaning == null || IsSitePlaning.ToString().Trim() == "" || IsSitePlaning.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@IsSitePlaning", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@IsSitePlaning", SqlDbType.VarChar).Value = IsSitePlaning.Trim();

    //            if (SurveyNo.ToString().Trim() == "" || SurveyNo.ToString().Trim() == null || SurveyNo.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = SurveyNo.Trim();

    //            if (Land_intDistrictid.ToString().Trim() == "" || Land_intDistrictid.ToString().Trim() == null || Land_intDistrictid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = Land_intDistrictid.Trim();

    //            if (Land_intMandalid.ToString().Trim() == "" || Land_intMandalid.ToString().Trim() == null || Land_intMandalid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = Land_intMandalid.Trim();

    //            if (Land_intVillageid.ToString().Trim() == "" || Land_intVillageid.ToString().Trim() == null || Land_intVillageid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = Land_intVillageid.Trim();



    //            if (Name_Gramapachayat.ToString().Trim() == "" || Name_Gramapachayat.ToString().Trim() == null || Name_Gramapachayat.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = Name_Gramapachayat.Trim();

    //            if (Land_Pincode.ToString().Trim() == "" || Land_Pincode.ToString().Trim() == null || Land_Pincode.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = Land_Pincode.Trim();

    //            if (Land_Email.ToString().Trim() == "" || Land_Email.ToString().Trim() == null || Land_Email.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_Email", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_Email", SqlDbType.VarChar).Value = Land_Email.Trim();

    //            if (Land_TelephoneNumber.ToString().Trim() == "" || Land_TelephoneNumber.ToString().Trim() == null || Land_TelephoneNumber.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_TelephoneNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_TelephoneNumber", SqlDbType.VarChar).Value = Land_TelephoneNumber.Trim();

    //            if (Land_TotExtent.ToString().Trim() == "" || Land_TotExtent.ToString().Trim() == null || Land_TotExtent.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_TotExtent", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_TotExtent", SqlDbType.VarChar).Value = Land_TotExtent.Trim();

    //            if (Land_ProposedArea.ToString().Trim() == "" || Land_ProposedArea.ToString().Trim() == null || Land_ProposedArea.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_ProposedArea", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_ProposedArea", SqlDbType.VarChar).Value = Land_ProposedArea.Trim();

    //            if (Land_BuiltupArea.ToString().Trim() == "" || Land_BuiltupArea.ToString().Trim() == null || Land_BuiltupArea.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_BuiltupArea", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_BuiltupArea", SqlDbType.VarChar).Value = Land_BuiltupArea.Trim();

    //            if (Land_Existingwidth.ToString().Trim() == "" || Land_Existingwidth.ToString().Trim() == null || Land_Existingwidth.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_Existingwidth", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_Existingwidth", SqlDbType.VarChar).Value = Land_Existingwidth.Trim();

    //            if (intTypeofApprochid.ToString().Trim() == "" || intTypeofApprochid.ToString().Trim() == null || intTypeofApprochid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intTypeofApprochid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intTypeofApprochid", SqlDbType.VarChar).Value = intTypeofApprochid.Trim();

    //            if (intLocationFalls.ToString().Trim() == "" || intLocationFalls.ToString().Trim() == null || intLocationFalls.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intLocationFalls", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intLocationFalls", SqlDbType.VarChar).Value = intLocationFalls.Trim();

    //            if (intBuildingApproval.ToString().Trim() == "" || intBuildingApproval.ToString().Trim() == null || intBuildingApproval.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intBuildingApproval", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intBuildingApproval", SqlDbType.VarChar).Value = intBuildingApproval.Trim();

    //            if (intIndustryProduct.ToString().Trim() == "" || intIndustryProduct.ToString().Trim() == null || intIndustryProduct.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intIndustryProduct", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intIndustryProduct", SqlDbType.VarChar).Value = intIndustryProduct.Trim();

    //            if (intCategoryid.ToString().Trim() == "" || intCategoryid.ToString().Trim() == null || intCategoryid.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@intCategoryid", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@intCategoryid", SqlDbType.VarChar).Value = intCategoryid.Trim();


    //            if (FromZone.ToString().Trim() == "" || FromZone.ToString().Trim() == null || FromZone.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@FromZone", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@FromZone", SqlDbType.VarChar).Value = FromZone.Trim();

    //            if (ToZone.ToString().Trim() == "" || ToZone.ToString().Trim() == null || ToZone.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@ToZone", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@ToZone", SqlDbType.VarChar).Value = ToZone.Trim();

    //            if (GoogleMaptoUploadFile.ToString().Trim() == "" || GoogleMaptoUploadFile.ToString().Trim() == null || GoogleMaptoUploadFile.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMaptoUploadFile", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMaptoUploadFile", SqlDbType.VarChar).Value = GoogleMaptoUploadFile.Trim();

    //            if (GoogleMapFilePath.ToString().Trim() == "" || GoogleMapFilePath.ToString().Trim() == null || GoogleMapFilePath.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMapFilePath", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMapFilePath", SqlDbType.VarChar).Value = GoogleMapFilePath.Trim();

    //            if (Geo_Cordinate_Latitude.ToString().Trim() == "" || Geo_Cordinate_Latitude.ToString().Trim() == null || Geo_Cordinate_Latitude.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude", SqlDbType.VarChar).Value = Geo_Cordinate_Latitude.Trim();

    //            if (Geo_Cordinate_Langitude.ToString().Trim() == "" || Geo_Cordinate_Langitude.ToString().Trim() == null || Geo_Cordinate_Langitude.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude", SqlDbType.VarChar).Value = Geo_Cordinate_Langitude.Trim();

    //            if (KMLFileName.ToString().Trim() == "" || KMLFileName.ToString().Trim() == null || KMLFileName.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName", SqlDbType.VarChar).Value = KMLFileName.Trim();

    //            if (KMLFilePath.ToString().Trim() == "" || KMLFilePath.ToString().Trim() == null || KMLFilePath.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath", SqlDbType.VarChar).Value = KMLFilePath.Trim();

    //            if (Covered_revenueSketch.ToString().Trim() == "" || Covered_revenueSketch.ToString().Trim() == null || Covered_revenueSketch.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Covered_revenueSketch", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Covered_revenueSketch", SqlDbType.VarChar).Value = Covered_revenueSketch.Trim();

    //            if (Covered_Adjoining.ToString().Trim() == "" || Covered_Adjoining.ToString().Trim() == null || Covered_Adjoining.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Covered_Adjoining", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Covered_Adjoining", SqlDbType.VarChar).Value = Covered_Adjoining.Trim();

    //            if (Plot_Number.ToString().Trim() == "" || Plot_Number.ToString().Trim() == null || Plot_Number.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Plot_Number", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Plot_Number", SqlDbType.VarChar).Value = Plot_Number.Trim();

    //            if (Sanction_LayoutNo.ToString().Trim() == "" || Sanction_LayoutNo.ToString().Trim() == null || Sanction_LayoutNo.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Sanction_LayoutNo", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Sanction_LayoutNo", SqlDbType.VarChar).Value = Sanction_LayoutNo.Trim();

    //            if (Land_User_MasterPlan.ToString().Trim() == "" || Land_User_MasterPlan.ToString().Trim() == null || Land_User_MasterPlan.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_User_MasterPlan", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Land_User_MasterPlan", SqlDbType.VarChar).Value = Land_User_MasterPlan.Trim();

    //            //string Hight_Building,
    //            //string Affected_roadwinding,

    //            if (Hight_Building.ToString().Trim() == "" || Hight_Building.ToString().Trim() == null || Hight_Building.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.VarChar).Value = Hight_Building.Trim();

    //            if (Affected_roadwinding.ToString().Trim() == "" || Affected_roadwinding.ToString().Trim() == null || Affected_roadwinding.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Affected_roadwinding", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Affected_roadwinding", SqlDbType.VarChar).Value = Affected_roadwinding.Trim();

    //            if (Geo_Cordinate_Latitude1.ToString().Trim() == "" || Geo_Cordinate_Latitude1.ToString().Trim() == null || Geo_Cordinate_Latitude1.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude1", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude1", SqlDbType.VarChar).Value = Geo_Cordinate_Latitude1.Trim();

    //            if (Geo_Cordinate_Langitude1.ToString().Trim() == "" || Geo_Cordinate_Langitude1.ToString().Trim() == null || Geo_Cordinate_Langitude1.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude1", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude1", SqlDbType.VarChar).Value = Geo_Cordinate_Langitude1.Trim();

    //            if (KMLFileName1.ToString().Trim() == "" || KMLFileName1.ToString().Trim() == null || KMLFileName1.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName1", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName1", SqlDbType.VarChar).Value = KMLFileName1.Trim();

    //            if (KMLFilePath1.ToString().Trim() == "" || KMLFilePath1.ToString().Trim() == null || KMLFilePath1.ToString().Trim() == "--Select--")
    //                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath1", SqlDbType.VarChar).Value = DBNull.Value;
    //            else
    //                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath1", SqlDbType.VarChar).Value = KMLFilePath1.Trim();


    //            //-------------------------------------------------
    //            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
    //            }

    //            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
    //            }


    //            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
    //            }

    //            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
    //            }

    //            if (txtArchitectName.Trim() == "" || txtArchitectName.Trim() == null || txtArchitectName.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectName", SqlDbType.DateTime).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectName", SqlDbType.DateTime).Value = txtArchitectName.Trim();
    //            }
    //            if (txtArchitectLicenseno.Trim() == "" || txtArchitectLicenseno.Trim() == null || txtArchitectLicenseno.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectLicenseno", SqlDbType.DateTime).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectLicenseno", SqlDbType.DateTime).Value = txtArchitectLicenseno.Trim();
    //            }
    //            if (txtArchitectMobileno.Trim() == "" || txtArchitectMobileno.Trim() == null || txtArchitectMobileno.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectMobileno", SqlDbType.DateTime).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectMobileno", SqlDbType.DateTime).Value = txtArchitectMobileno.Trim();
    //            }
    //            // string txtArchitectName, string txtArchitectLicenseno, string txtArchitectMobileno
    //            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


    //            if (n > 0)
    //            {
    //                return 1;
    //            }
    //            else
    //            {
    //                return 0;
    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            con.CloseConnection();
    //            throw ex;
    //        }
    //        finally
    //        {
    //            con.CloseConnection();
    //        }

    //    }

    //    #endregion
//    //commented on 11.11.2020
   #region commented Developed By Rajesh Patnaik
//    public int InsertLandDetails(string number, string intQuessionaireid,
//string intCFEEnterpid,
//string Uid_No,
//string Reg_Id,
//string intProposedCateogryid,
//string intApplicationTypeid,
//string LocationNameIEIDA,
//string IsSitePlaning,
//string SurveyNo,
//string Land_intDistrictid,
//string Land_intMandalid,
//string Land_intVillageid,
//string Name_Gramapachayat,
//string Land_Pincode,
//string Land_Email,
//string Land_TelephoneNumber,
//string Land_TotExtent,
//string Land_ProposedArea,
//string Land_BuiltupArea,
//string Land_Existingwidth,
//string intTypeofApprochid,
//string intLocationFalls,
//string intBuildingApproval,
//string intIndustryProduct,
//string intCategoryid,
//string FromZone,
//string ToZone,
//string GoogleMaptoUploadFile,
//string GoogleMapFilePath,
//string Geo_Cordinate_Latitude,
//string Geo_Cordinate_Langitude,
//string KMLFileName,
//string KMLFilePath,
//string Covered_revenueSketch,
//string Covered_Adjoining,
//string Plot_Number,
//string Sanction_LayoutNo,
//string Land_User_MasterPlan,
//string Hight_Building,
//string Affected_roadwinding,
//string Geo_Cordinate_Latitude1,
//string Geo_Cordinate_Langitude1,
//string KMLFileName1,
//string KMLFilePath1,
//string Created_by,
//string Created_dt,
//string Modified_by,
//string Modified_dt,
//        string txtArchitectName, string txtArchitectLicenseno, string txtArchitectMobileno, string existingbuildup, string landaspermasterplan,
//        string landmasterplanother, string typeofbuilding, string typeofbuildingother, string Affectedroadwinding, string roadwidening, string islandpartof,
//        string structuralenglicno, string structuralengname, string structuralmobileno, string corporationname, string wardno, string PlotSubUse,
//string NorthBoundary,
//string SouthBoundary,
//string WestBoundary,
//string EastBoundary)
//    {
//        try
//        {

//            con.OpenConnection();
//            SqlDataAdapter myDataAdapter;

//            myDataAdapter = new SqlDataAdapter("sp_LandDetails", con.GetConnection);
//            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


//            if (number.ToString().Trim() == "" || number.ToString().Trim() == null)
//                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

//            //if (Applid.ToString().Trim() == "" || Applid.ToString().Trim() == null)
//            //    com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = DBNull.Value;
//            //else
//            //    com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = Applid.Trim();


//            //-------------------------------------------------
//            if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null || intQuessionaireid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


//            if (intCFEEnterpid.ToString().Trim() == "" || intCFEEnterpid.ToString().Trim() == null || intCFEEnterpid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();


//            if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null || Uid_No.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

//            if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null || Reg_Id.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

//            if (intProposedCateogryid.ToString().Trim() == "" || intProposedCateogryid.ToString().Trim() == null || intProposedCateogryid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intProposedCateogryid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intProposedCateogryid", SqlDbType.VarChar).Value = intProposedCateogryid.Trim();

//            if (intApplicationTypeid.ToString().Trim() == "" || intApplicationTypeid.ToString().Trim() == null || intApplicationTypeid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intApplicationTypeid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intApplicationTypeid", SqlDbType.VarChar).Value = intApplicationTypeid.Trim();

//            if (LocationNameIEIDA.ToString().Trim() == "" || LocationNameIEIDA.ToString().Trim() == null || LocationNameIEIDA.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@LocationNameIEIDA", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@LocationNameIEIDA", SqlDbType.VarChar).Value = LocationNameIEIDA.Trim();

//            if (IsSitePlaning == null || IsSitePlaning.ToString().Trim() == "" || IsSitePlaning.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@IsSitePlaning", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@IsSitePlaning", SqlDbType.VarChar).Value = IsSitePlaning.Trim();

//            if (SurveyNo.ToString().Trim() == "" || SurveyNo.ToString().Trim() == null || SurveyNo.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = SurveyNo.Trim();

//            if (Land_intDistrictid.ToString().Trim() == "" || Land_intDistrictid.ToString().Trim() == null || Land_intDistrictid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = Land_intDistrictid.Trim();

//            if (Land_intMandalid.ToString().Trim() == "" || Land_intMandalid.ToString().Trim() == null || Land_intMandalid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = Land_intMandalid.Trim();

//            if (Land_intVillageid.ToString().Trim() == "" || Land_intVillageid.ToString().Trim() == null || Land_intVillageid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = Land_intVillageid.Trim();



//            if (Name_Gramapachayat.ToString().Trim() == "" || Name_Gramapachayat.ToString().Trim() == null || Name_Gramapachayat.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = Name_Gramapachayat.Trim();

//            if (Land_Pincode.ToString().Trim() == "" || Land_Pincode.ToString().Trim() == null || Land_Pincode.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = Land_Pincode.Trim();

//            if (Land_Email.ToString().Trim() == "" || Land_Email.ToString().Trim() == null || Land_Email.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_Email", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_Email", SqlDbType.VarChar).Value = Land_Email.Trim();

//            if (Land_TelephoneNumber.ToString().Trim() == "" || Land_TelephoneNumber.ToString().Trim() == null || Land_TelephoneNumber.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_TelephoneNumber", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_TelephoneNumber", SqlDbType.VarChar).Value = Land_TelephoneNumber.Trim();

//            if (Land_TotExtent.ToString().Trim() == "" || Land_TotExtent.ToString().Trim() == null || Land_TotExtent.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_TotExtent", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_TotExtent", SqlDbType.VarChar).Value = Land_TotExtent.Trim();

//            if (Land_ProposedArea.ToString().Trim() == "" || Land_ProposedArea.ToString().Trim() == null || Land_ProposedArea.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_ProposedArea", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_ProposedArea", SqlDbType.VarChar).Value = Land_ProposedArea.Trim();

//            if (Land_BuiltupArea.ToString().Trim() == "" || Land_BuiltupArea.ToString().Trim() == null || Land_BuiltupArea.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_BuiltupArea", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_BuiltupArea", SqlDbType.VarChar).Value = Land_BuiltupArea.Trim();

//            if (Land_Existingwidth.ToString().Trim() == "" || Land_Existingwidth.ToString().Trim() == null || Land_Existingwidth.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_Existingwidth", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_Existingwidth", SqlDbType.VarChar).Value = Land_Existingwidth.Trim();

//            if (intTypeofApprochid.ToString().Trim() == "" || intTypeofApprochid.ToString().Trim() == null || intTypeofApprochid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intTypeofApprochid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intTypeofApprochid", SqlDbType.VarChar).Value = intTypeofApprochid.Trim();

//            if (intLocationFalls.ToString().Trim() == "" || intLocationFalls.ToString().Trim() == null || intLocationFalls.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intLocationFalls", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intLocationFalls", SqlDbType.VarChar).Value = intLocationFalls.Trim();

//            if (intBuildingApproval.ToString().Trim() == "" || intBuildingApproval.ToString().Trim() == null || intBuildingApproval.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intBuildingApproval", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intBuildingApproval", SqlDbType.VarChar).Value = intBuildingApproval.Trim();

//            if (intIndustryProduct.ToString().Trim() == "" || intIndustryProduct.ToString().Trim() == null || intIndustryProduct.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intIndustryProduct", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intIndustryProduct", SqlDbType.VarChar).Value = intIndustryProduct.Trim();

//            if (intCategoryid.ToString().Trim() == "" || intCategoryid.ToString().Trim() == null || intCategoryid.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@intCategoryid", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@intCategoryid", SqlDbType.VarChar).Value = intCategoryid.Trim();


//            if (FromZone.ToString().Trim() == "" || FromZone.ToString().Trim() == null || FromZone.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@FromZone", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@FromZone", SqlDbType.VarChar).Value = FromZone.Trim();

//            if (ToZone.ToString().Trim() == "" || ToZone.ToString().Trim() == null || ToZone.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@ToZone", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@ToZone", SqlDbType.VarChar).Value = ToZone.Trim();

//            if (GoogleMaptoUploadFile.ToString().Trim() == "" || GoogleMaptoUploadFile.ToString().Trim() == null || GoogleMaptoUploadFile.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMaptoUploadFile", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMaptoUploadFile", SqlDbType.VarChar).Value = GoogleMaptoUploadFile.Trim();

//            if (GoogleMapFilePath.ToString().Trim() == "" || GoogleMapFilePath.ToString().Trim() == null || GoogleMapFilePath.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMapFilePath", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMapFilePath", SqlDbType.VarChar).Value = GoogleMapFilePath.Trim();

//            if (Geo_Cordinate_Latitude.ToString().Trim() == "" || Geo_Cordinate_Latitude.ToString().Trim() == null || Geo_Cordinate_Latitude.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude", SqlDbType.VarChar).Value = Geo_Cordinate_Latitude.Trim();

//            if (Geo_Cordinate_Langitude.ToString().Trim() == "" || Geo_Cordinate_Langitude.ToString().Trim() == null || Geo_Cordinate_Langitude.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude", SqlDbType.VarChar).Value = Geo_Cordinate_Langitude.Trim();

//            if (KMLFileName.ToString().Trim() == "" || KMLFileName.ToString().Trim() == null || KMLFileName.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName", SqlDbType.VarChar).Value = KMLFileName.Trim();

//            if (KMLFilePath.ToString().Trim() == "" || KMLFilePath.ToString().Trim() == null || KMLFilePath.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath", SqlDbType.VarChar).Value = KMLFilePath.Trim();

//            if (Covered_revenueSketch.ToString().Trim() == "" || Covered_revenueSketch.ToString().Trim() == null || Covered_revenueSketch.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Covered_revenueSketch", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Covered_revenueSketch", SqlDbType.VarChar).Value = Covered_revenueSketch.Trim();

//            if (Covered_Adjoining.ToString().Trim() == "" || Covered_Adjoining.ToString().Trim() == null || Covered_Adjoining.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Covered_Adjoining", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Covered_Adjoining", SqlDbType.VarChar).Value = Covered_Adjoining.Trim();

//            if (Plot_Number.ToString().Trim() == "" || Plot_Number.ToString().Trim() == null || Plot_Number.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Plot_Number", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Plot_Number", SqlDbType.VarChar).Value = Plot_Number.Trim();

//            if (Sanction_LayoutNo.ToString().Trim() == "" || Sanction_LayoutNo.ToString().Trim() == null || Sanction_LayoutNo.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Sanction_LayoutNo", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Sanction_LayoutNo", SqlDbType.VarChar).Value = Sanction_LayoutNo.Trim();

//            if (Land_User_MasterPlan.ToString().Trim() == "" || Land_User_MasterPlan.ToString().Trim() == null || Land_User_MasterPlan.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_User_MasterPlan", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Land_User_MasterPlan", SqlDbType.VarChar).Value = Land_User_MasterPlan.Trim();

//            //string Hight_Building,
//            //string Affected_roadwinding,

//            if (Hight_Building.ToString().Trim() == "" || Hight_Building.ToString().Trim() == null || Hight_Building.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.VarChar).Value = Hight_Building.Trim();

//            if (Affected_roadwinding.ToString().Trim() == "" || Affected_roadwinding.ToString().Trim() == null || Affected_roadwinding.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Affected_roadwinding", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Affected_roadwinding", SqlDbType.VarChar).Value = Affected_roadwinding.Trim();

//            if (Geo_Cordinate_Latitude1.ToString().Trim() == "" || Geo_Cordinate_Latitude1.ToString().Trim() == null || Geo_Cordinate_Latitude1.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude1", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude1", SqlDbType.VarChar).Value = Geo_Cordinate_Latitude1.Trim();

//            if (Geo_Cordinate_Langitude1.ToString().Trim() == "" || Geo_Cordinate_Langitude1.ToString().Trim() == null || Geo_Cordinate_Langitude1.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude1", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude1", SqlDbType.VarChar).Value = Geo_Cordinate_Langitude1.Trim();

//            if (KMLFileName1.ToString().Trim() == "" || KMLFileName1.ToString().Trim() == null || KMLFileName1.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName1", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName1", SqlDbType.VarChar).Value = KMLFileName1.Trim();

//            if (KMLFilePath1.ToString().Trim() == "" || KMLFilePath1.ToString().Trim() == null || KMLFilePath1.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath1", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath1", SqlDbType.VarChar).Value = KMLFilePath1.Trim();


//            //-------------------------------------------------
//            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
//            }

//            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
//            }


//            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
//            }

//            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
//            }

//            if (txtArchitectName.Trim() == "" || txtArchitectName.Trim() == null || txtArchitectName.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectName", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectName", SqlDbType.VarChar).Value = txtArchitectName.Trim();
//            }
//            if (txtArchitectLicenseno.Trim() == "" || txtArchitectLicenseno.Trim() == null || txtArchitectLicenseno.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectLicenseno", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectLicenseno", SqlDbType.VarChar).Value = txtArchitectLicenseno.Trim();
//            }
//            if (txtArchitectMobileno.Trim() == "" || txtArchitectMobileno.Trim() == null || txtArchitectMobileno.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectMobileno", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectMobileno", SqlDbType.VarChar).Value = txtArchitectMobileno.Trim();
//            }
//            // string txtArchitectName, string txtArchitectLicenseno, string txtArchitectMobileno
//            if (existingbuildup.Trim() == "" || existingbuildup.Trim() == null || existingbuildup.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@existingbuildup", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@existingbuildup", SqlDbType.VarChar).Value = existingbuildup.Trim();
//            }

//            if (landaspermasterplan.Trim() == "" || landaspermasterplan.Trim() == null || landaspermasterplan.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@landaspermasterplan", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@landaspermasterplan", SqlDbType.VarChar).Value = landaspermasterplan.Trim();
//            }

//            if (landmasterplanother.Trim() == "" || landmasterplanother.Trim() == null || landmasterplanother.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@landmasterplanother", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@landmasterplanother", SqlDbType.VarChar).Value = landmasterplanother.Trim();
//            }

//            if (typeofbuilding.Trim() == "" || typeofbuilding.Trim() == null || typeofbuilding.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@typeofbuilding", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@typeofbuilding", SqlDbType.VarChar).Value = typeofbuilding.Trim();
//            }

//            if (typeofbuildingother.Trim() == "" || typeofbuildingother.Trim() == null || typeofbuildingother.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@typeofbuildingother", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@typeofbuildingother", SqlDbType.VarChar).Value = typeofbuildingother.Trim();
//            }

//            if (Affectedroadwinding.Trim() == "" || Affectedroadwinding.Trim() == null || Affectedroadwinding.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Affectedroadwinding", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@Affectedroadwinding", SqlDbType.VarChar).Value = Affectedroadwinding.Trim();
//            }

//            if (roadwidening.Trim() == "" || roadwidening.Trim() == null || roadwidening.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@roadwidening", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@roadwidening", SqlDbType.VarChar).Value = roadwidening.Trim();
//            }
//            if (islandpartof.Trim() == "" || islandpartof.Trim() == null || islandpartof.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@islandpartof", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@islandpartof", SqlDbType.VarChar).Value = islandpartof.Trim();
//            }

//            if (structuralengname.Trim() == "" || structuralengname.Trim() == null || structuralengname.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@StructuralName", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@StructuralName", SqlDbType.VarChar).Value = structuralengname.Trim();
//            }
//            if (structuralenglicno.Trim() == "" || structuralenglicno.Trim() == null || structuralenglicno.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@StructuralLicenseno", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@StructuralLicenseno", SqlDbType.VarChar).Value = structuralenglicno.Trim();
//            }
//            if (structuralmobileno.Trim() == "" || structuralmobileno.Trim() == null || structuralmobileno.Trim() == "--Select--")
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@StructuralMobileno", SqlDbType.VarChar).Value = DBNull.Value;
//            }
//            else
//            {
//                myDataAdapter.SelectCommand.Parameters.Add("@StructuralMobileno", SqlDbType.VarChar).Value = structuralmobileno.Trim();
//            }

//            if (corporationname.ToString().Trim() == "" || corporationname.ToString().Trim() == null || corporationname.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@corporationname", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@corporationname", SqlDbType.VarChar).Value = corporationname.Trim();

//            if (wardno.ToString().Trim() == "" || wardno.ToString().Trim() == null || wardno.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@wardno", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@wardno", SqlDbType.VarChar).Value = wardno.Trim();

//            if (PlotSubUse.ToString().Trim() == "" || PlotSubUse.ToString().Trim() == null || PlotSubUse.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@PlotSubUse", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@PlotSubUse", SqlDbType.VarChar).Value = PlotSubUse.Trim();

//            if (NorthBoundary.ToString().Trim() == "" || NorthBoundary.ToString().Trim() == null || NorthBoundary.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@NorthBoundary", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@NorthBoundary", SqlDbType.VarChar).Value = NorthBoundary.Trim();

//            if (SouthBoundary.ToString().Trim() == "" || SouthBoundary.ToString().Trim() == null || SouthBoundary.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@SouthBoundary", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@SouthBoundary", SqlDbType.VarChar).Value = SouthBoundary.Trim();

//            if (WestBoundary.ToString().Trim() == "" || WestBoundary.ToString().Trim() == null || WestBoundary.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@WestBoundary", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@WestBoundary", SqlDbType.VarChar).Value = WestBoundary.Trim();

//            if (EastBoundary.ToString().Trim() == "" || EastBoundary.ToString().Trim() == null || EastBoundary.ToString().Trim() == "--Select--")
//                myDataAdapter.SelectCommand.Parameters.Add("@EastBoundary", SqlDbType.VarChar).Value = DBNull.Value;
//            else
//                myDataAdapter.SelectCommand.Parameters.Add("@EastBoundary", SqlDbType.VarChar).Value = EastBoundary.Trim();
//            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


//            if (n > 0)
//            {
//                return 1;
//            }
//            else
//            {
//                return 0;
//            }
//        }
//        catch (Exception ex)
//        {
//            con.CloseConnection();
//            throw ex;
//        }
//        finally
//        {
//            con.CloseConnection();
//        }

//    }

    #endregion
    //commented above on  11.11.2020 
    public DataSet GetdataofApprovaldata(string enterprenuer)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyid", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }
    public DataSet ViewAttachmetsDataForMSME(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveAttachmentsByMSMEid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }




    public int insertApprovalData(string Enterprenuer, string RefNo, string Status, string Modified_by, string intApprovalid, string intDeptid, string Remarks, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "updateApprovaldata";

        if (Enterprenuer.Trim() == "" || Enterprenuer.Trim() == null)
            com.Parameters.Add("@Enterprenuer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Enterprenuer", SqlDbType.VarChar).Value = Enterprenuer.Trim();

        if (RefNo.Trim() == "" || RefNo.Trim() == null)
            com.Parameters.Add("@RefNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@RefNo", SqlDbType.VarChar).Value = RefNo.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public DataSet GetCompletedbyApproval(string status, string FromDate, string Todate)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }



            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }



    //public int insertEnterprenuerdata(string number,string Applid,string NameofIndustrialUnder, string NameofthePromoter, string SoWo, string intStateid, string intDistrictid, string intMandalid, string intVillageid, string StreetName, string Door_No, string Pincode,
    //                string MobileNumber,
    //               string Email,
    //                string intTypeofOrganization, 
    //                string TelephoneNumber, 
    //                string ProposalFor, 
    //                string Caste, 
    //               string DirectMale, 
    //               string DirectFemale, 
    //               string InDirectMale, 
    //               string InDirectFemale, 
    //                string intCategoryofReg,
    //                 string Reg_No, 
    //               string Reg_Date, 
    //              string TypeofFactory, 
    //               string Created_by,string land,string plant
    //    ,string building,string total,string uidnumber)

    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertEnterPrenuerdetails";
    //    //string generateid = "";
    //    if (number.ToString().Trim() == "" || number.ToString().Trim() == null)
    //        com.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
    //    else
    //        com.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

    //    if (Applid.ToString().Trim() == "" || Applid.ToString().Trim() == null)
    //        com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = Applid.Trim();

    //    if (uidnumber.ToString().Trim() == "" || uidnumber.ToString().Trim() == null)
    //        com.Parameters.Add("@uidnumber", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@uidnumber", SqlDbType.VarChar).Value = uidnumber.Trim();


    //    if (land.ToString().Trim() == "" || land.ToString().Trim() == null)
    //        com.Parameters.Add("@land", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@land", SqlDbType.VarChar).Value = land.Trim();

    //    if (plant.ToString().Trim() == "" || plant.ToString().Trim() == null)
    //        com.Parameters.Add("@plant", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@plant", SqlDbType.VarChar).Value = plant.Trim();


    //    if (building.ToString().Trim() == "" || building.ToString().Trim() == null)
    //        com.Parameters.Add("@building", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@building", SqlDbType.VarChar).Value = building.Trim();

    //    if (total.ToString().Trim() == "" || total.ToString().Trim() == null)
    //        com.Parameters.Add("@total", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@total", SqlDbType.VarChar).Value = total.Trim();

    //    if (NameofIndustrialUnder.ToString().Trim() == "" || NameofIndustrialUnder.ToString().Trim() == null)
    //        com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = NameofIndustrialUnder.Trim();

    //    if (NameofthePromoter.ToString().Trim() == "" || NameofthePromoter.ToString().Trim() == null)
    //        com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = NameofthePromoter.Trim();

    //    if (SoWo.ToString().Trim() == "" || SoWo.ToString().Trim() == null)
    //        com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = SoWo.Trim();

    //    if (intStateid.ToString().Trim() == "" || intStateid.ToString().Trim() == null || intStateid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

    //    if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

    //    if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

    //    if (intVillageid.ToString().Trim() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();

    //    if (StreetName.ToString().Trim() == "" || StreetName.ToString().Trim() == null || StreetName.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = StreetName.Trim();


    //    if (Door_No.ToString().Trim() == "" || Door_No.ToString().Trim() == null || Door_No.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = Door_No.Trim();

    //    if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null || Pincode.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

    //    if (MobileNumber.ToString().Trim() == "" || MobileNumber.ToString().Trim() == null || MobileNumber.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();


    //    //------------------------------------------------------------------------------------------------------
    //    if (Email.ToString().Trim() == "" || Email.ToString().Trim() == null || Email.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

    //    if (intTypeofOrganization.ToString().Trim() == "" || intTypeofOrganization.ToString().Trim() == null || intTypeofOrganization.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = intTypeofOrganization.Trim();

    //    if (TelephoneNumber.ToString().Trim() == "" || TelephoneNumber.ToString().Trim() == null || TelephoneNumber.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = TelephoneNumber.Trim();

    //    if (ProposalFor.ToString().Trim() == "" || ProposalFor.ToString().Trim() == null || ProposalFor.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = ProposalFor.Trim();

    //    if (Caste.ToString().Trim() == "" || Caste.ToString().Trim() == null || Caste.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.Trim();

    //    if (DirectMale.ToString().Trim() == "" || DirectMale.ToString().Trim() == null || DirectMale.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@DirectMale", SqlDbType.VarChar).Value = "0";
    //    else
    //        com.Parameters.Add("@DirectMale", SqlDbType.VarChar).Value = DirectMale.Trim();

    //    if (DirectFemale.ToString().Trim() == "" || DirectFemale.ToString().Trim() == null || DirectFemale.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@DirectFemale", SqlDbType.VarChar).Value = "0";
    //    else
    //        com.Parameters.Add("@DirectFemale", SqlDbType.VarChar).Value = DirectFemale.Trim();

    //    if (InDirectMale.ToString().Trim() == "" || InDirectMale.ToString().Trim() == null || InDirectMale.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@InDirectMale", SqlDbType.VarChar).Value = "0";
    //    else
    //        com.Parameters.Add("@InDirectMale", SqlDbType.VarChar).Value = InDirectMale.Trim();

    //    if (InDirectFemale.ToString().Trim() == "" || InDirectFemale.ToString().Trim() == null || InDirectFemale.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@InDirectFemale", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@InDirectFemale", SqlDbType.VarChar).Value = InDirectFemale.Trim();

    //    if (intCategoryofReg.ToString().Trim() == "" || intCategoryofReg.ToString().Trim() == null || intCategoryofReg.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = intCategoryofReg.Trim();


    //    //string Reg_No, 
    //    //           string Reg_Date, 
    //    //          string TypeofFactory, 
    //    //           string Created_by
    //    if (Reg_No.ToString().Trim() == "" || Reg_No.ToString().Trim() == null || Reg_No.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = Reg_No.Trim();

    //    if (Reg_Date.ToString().Trim() == "" || Reg_Date.ToString().Trim() == null || Reg_Date.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_Date.Trim()); 

    //    if (TypeofFactory.ToString().Trim() == "" || TypeofFactory.ToString().Trim() == null || TypeofFactory.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = TypeofFactory.Trim();

    //    if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null || Created_by.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();
    //    //---------------------------------------------------------------------------------------------------------------
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return Convert.ToInt32(com.ExecuteScalar());
    //        //if (returnvalue == DBNull.Value || returnvalue == null)
    //        //    return 0;
    //        //else
    //        //    return Convert.ToInt32(returnvalue);

    //        object returnvalue = com.ExecuteScalar();
    //        if (returnvalue == DBNull.Value || returnvalue == null)
    //            return 0;
    //        else
    //            return Convert.ToInt32(returnvalue);

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        //return 0;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }


    //}



    public int insertEnterprenuerdata(string number, string Applid, string NameofIndustrialUnder, string NameofthePromoter, string SoWo, string intStateid, string intDistrictid, string intMandalid, string intVillageid, string StreetName, string Door_No, string Pincode,
                    string MobileNumber,
                   string Email,
                    string intTypeofOrganization,
                    string TelephoneNumber,
                    string ProposalFor,
                    string Caste,
                   string DirectMale,
                   string DirectFemale,
                   string InDirectMale,
                   string InDirectFemale,
                    string intCategoryofReg,
                     string Reg_No,
                   string Reg_Date,
                  string TypeofFactory,
                   string Created_by, string land, string plant
        , string building, string total, string uidnumber, string DistrictName, string Mandalname, string VillageName, string diffabled, string WomenEnterprenuer, string Minority, string AlternateMobileno)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertEnterPrenuerdetails";
        //string generateid = "";
        if (number.ToString().Trim() == "" || number.ToString().Trim() == null)
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

        if (Applid.ToString().Trim() == "" || Applid.ToString().Trim() == null)
            com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = Applid.Trim();

        if (diffabled.ToString().Trim() == "" || diffabled.ToString().Trim() == null || diffabled.ToString().Trim() == "--Select--")
            com.Parameters.Add("@diffabled", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@diffabled", SqlDbType.VarChar).Value = diffabled.Trim();

        if (WomenEnterprenuer.ToString().Trim() == "" || WomenEnterprenuer.ToString().Trim() == null || WomenEnterprenuer.ToString().Trim() == "--Select--")
            com.Parameters.Add("@WomenEnterprenuer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WomenEnterprenuer", SqlDbType.VarChar).Value = WomenEnterprenuer.Trim();


        if (Minority.ToString().Trim() == "" || Minority.ToString().Trim() == null || Minority.ToString().Trim() == "--Select--")

            com.Parameters.Add("@Minority", SqlDbType.VarChar).Value = DBNull.Value;

        else
            com.Parameters.Add("@Minority", SqlDbType.VarChar).Value = Minority.Trim();




        if (uidnumber.ToString().Trim() == "" || uidnumber.ToString().Trim() == null)
            com.Parameters.Add("@uidnumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@uidnumber", SqlDbType.VarChar).Value = uidnumber.Trim();


        if (DistrictName.ToString().Trim() == "" || DistrictName.ToString().Trim() == null)
            com.Parameters.Add("@DistrictName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DistrictName", SqlDbType.VarChar).Value = DistrictName.Trim();


        if (Mandalname.ToString().Trim() == "" || Mandalname.ToString().Trim() == null)
            com.Parameters.Add("@Mandalname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mandalname", SqlDbType.VarChar).Value = Mandalname.Trim();



        if (VillageName.ToString().Trim() == "" || VillageName.ToString().Trim() == null)
            com.Parameters.Add("@VillageName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VillageName", SqlDbType.VarChar).Value = VillageName.Trim();

        if (land.ToString().Trim() == "" || land.ToString().Trim() == null)
            com.Parameters.Add("@land", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@land", SqlDbType.VarChar).Value = land.Trim();

        if (plant.ToString().Trim() == "" || plant.ToString().Trim() == null)
            com.Parameters.Add("@plant", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@plant", SqlDbType.VarChar).Value = plant.Trim();


        if (building.ToString().Trim() == "" || building.ToString().Trim() == null)
            com.Parameters.Add("@building", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@building", SqlDbType.VarChar).Value = building.Trim();

        if (total.ToString().Trim() == "" || total.ToString().Trim() == null)
            com.Parameters.Add("@total", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@total", SqlDbType.VarChar).Value = total.Trim();

        if (NameofIndustrialUnder.ToString().Trim() == "" || NameofIndustrialUnder.ToString().Trim() == null)
            com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = NameofIndustrialUnder.Trim();

        if (NameofthePromoter.ToString().Trim() == "" || NameofthePromoter.ToString().Trim() == null)
            com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = NameofthePromoter.Trim();

        if (SoWo.ToString().Trim() == "" || SoWo.ToString().Trim() == null)
            com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = SoWo.Trim();

        if (intStateid.ToString().Trim() == "" || intStateid.ToString().Trim() == null || intStateid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

        if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

        if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

        if (intVillageid.ToString().Trim() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();

        if (StreetName.ToString().Trim() == "" || StreetName.ToString().Trim() == null || StreetName.ToString().Trim() == "--Select--")
            com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = StreetName.Trim();


        if (Door_No.ToString().Trim() == "" || Door_No.ToString().Trim() == null || Door_No.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = Door_No.Trim();

        if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null || Pincode.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

        if (MobileNumber.ToString().Trim() == "" || MobileNumber.ToString().Trim() == null || MobileNumber.ToString().Trim() == "--Select--")
            com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();


        //------------------------------------------------------------------------------------------------------
        if (Email.ToString().Trim() == "" || Email.ToString().Trim() == null || Email.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

        if (intTypeofOrganization.ToString().Trim() == "" || intTypeofOrganization.ToString().Trim() == null || intTypeofOrganization.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = intTypeofOrganization.Trim();

        if (TelephoneNumber.ToString().Trim() == "" || TelephoneNumber.ToString().Trim() == null || TelephoneNumber.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = TelephoneNumber.Trim();

        if (ProposalFor.ToString().Trim() == "" || ProposalFor.ToString().Trim() == null || ProposalFor.ToString().Trim() == "--Select--")
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = ProposalFor.Trim();

        if (Caste.ToString().Trim() == "" || Caste.ToString().Trim() == null || Caste.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.Trim();

        if (DirectMale.ToString().Trim() == "" || DirectMale.ToString().Trim() == null || DirectMale.ToString().Trim() == "--Select--")
            com.Parameters.Add("@DirectMale", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@DirectMale", SqlDbType.VarChar).Value = DirectMale.Trim();

        if (DirectFemale.ToString().Trim() == "" || DirectFemale.ToString().Trim() == null || DirectFemale.ToString().Trim() == "--Select--")
            com.Parameters.Add("@DirectFemale", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@DirectFemale", SqlDbType.VarChar).Value = DirectFemale.Trim();

        if (InDirectMale.ToString().Trim() == "" || InDirectMale.ToString().Trim() == null || InDirectMale.ToString().Trim() == "--Select--")
            com.Parameters.Add("@InDirectMale", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@InDirectMale", SqlDbType.VarChar).Value = InDirectMale.Trim();

        if (InDirectFemale.ToString().Trim() == "" || InDirectFemale.ToString().Trim() == null || InDirectFemale.ToString().Trim() == "--Select--")
            com.Parameters.Add("@InDirectFemale", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InDirectFemale", SqlDbType.VarChar).Value = InDirectFemale.Trim();

        if (intCategoryofReg.ToString().Trim() == "" || intCategoryofReg.ToString().Trim() == null || intCategoryofReg.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = intCategoryofReg.Trim();


        //string Reg_No, 
        //           string Reg_Date, 
        //          string TypeofFactory, 
        //           string Created_by
        if (Reg_No.ToString().Trim() == "" || Reg_No.ToString().Trim() == null || Reg_No.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = Reg_No.Trim();

        if (Reg_Date.ToString().Trim() == "" || Reg_Date.ToString().Trim() == null || Reg_Date.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_Date.Trim());

        if (TypeofFactory.ToString().Trim() == "" || TypeofFactory.ToString().Trim() == null || TypeofFactory.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = TypeofFactory.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null || Created_by.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();
        if (AlternateMobileno.ToString().Trim() == "" || AlternateMobileno.ToString().Trim() == null || AlternateMobileno.ToString().Trim() == "--Select--")
            com.Parameters.Add("@AlternateMobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AlternateMobileNumber", SqlDbType.VarChar).Value = AlternateMobileno.Trim();

        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return Convert.ToInt32(com.ExecuteScalar());
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public string RetriveRefNo(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveRefNumber", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "";
        }
        finally
        {
            con.CloseConnection();
        }
    }





    public string RetriveIsOffline(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveIsOffline", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet RetriveIsOfflineByAPPID(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveDepartmentApprovalsByAppID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetQueryResponseDetailsByEnterpID(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveQueriesDetailsAndEntDetByID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public int UpdateRefferenceNumber(string Refno, string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_UpdateRefNo";


        if (Refno == "" || Refno == null)
            com.Parameters.Add("@Refno", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Refno", SqlDbType.VarChar).Value = Refno.Trim();

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }






    public DataSet sp_YearWiseProgress(string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_YearWiseProgress", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet sp_YearWiseProgressCFO(string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("sp_YearWiseProgressCFO", con.GetConnection);
            da = new SqlDataAdapter("sp_YearWiseProgress_New_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartment()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDepartment", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet sp_DepartmentWiseProgress(string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            //da = new SqlDataAdapter("sp_DepartmentWiseProgress", con.GetConnection);
            da = new SqlDataAdapter("sp_DepartmentWiseProgress_new", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet RetriveApprovalsPendingBeyondTimeLimitCFO(string intDeptid, string DistID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        // da = new SqlDataAdapter("sp_RetriveApprovalsPendingBeyondTimeLimitCFO", con.GetConnection);
    //        da = new SqlDataAdapter("sp_RetriveApprovalsPendingBeyondTimeLimitNew_CFO", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


    //        if (DistID.Trim() == "" || DistID.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = DistID.ToString();

    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet RetriveApprovalsPendingBeyondTimeLimitCFO(string intDeptid, string DistID, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveApprovalsPendingBeyondTimeLimitCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (DistID.Trim() == "" || DistID.Trim() == null)
                da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = DistID.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveApprovalsPendingBeyondTimeLimit(string intDeptid, string DistID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveApprovalsPendingBeyondTimeLimit", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (DistID.Trim() == "" || DistID.Trim() == null)
                da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = DistID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet ApplicationWiseDetailedTraker(string Quesionary_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveR4Report_test", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Quesionary_id.Trim() == "" || Quesionary_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = Quesionary_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public DataSet GetDepartmentDashboardDetails(string intDeptid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("sp_GetDepartmentDashboardDetails", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;



    //        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet GetDepartmentDashboardDetails(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        // if (intDeptid == "266")
        //  intDeptid = "11";
        try
        {
            if (intDeptid == "266")
            {
                da = new SqlDataAdapter("DispMAUDHMDA", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;
                da.Fill(ds);
                return ds;

                // if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                //  da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
                //  else
                //  da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            }

            else
            {
                da = new SqlDataAdapter("sp_GetDepartmentDashboardDetails_19112024", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;

                if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
                else
                    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

                da.Fill(ds);
                return ds;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetEnterpreneourDashboardDetails(string intEntid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetEnterpreneourDashboardDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intEntid.Trim() == "" || intEntid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = intEntid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertPaymentTransaction(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentTransaction";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int InsertNEFTPaymentTransaction(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber, string Remarks, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsNEFTPaymentTransaction";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
        {
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        }

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
        {
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }




    public DataSet GetRespondQueryStatus(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatus", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = User_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryStatusByTransactionID(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetAppealDetail(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    #region Developed By Rajesh Patnaik
    public int InsertQueryDetails(string intEnterpreniourApprovalid,
string intQuessionaireid,
string intCFEEnterpid,
string intDeptid,
string intApprovalid,
string QueryRaiseDate,
string QueryDescription,
string QueryStatus,
string QueryAttachmentFileName,
string QueryAttachmentFilePath,
string QueryRespondDate,
string QueryRespondRemarks,
string Created_by,
string Created_dt,
string Modified_by, string Modified_dt, string IPAddress)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertQueryDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IPAddress.Trim() == "" || IPAddress.Trim() == null || IPAddress.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();
            }


            if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            //-------------------------------------------------
            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}
            //if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            //}

            //if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            //}

            //if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            //}

            //if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            //}

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            //if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            //if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            //if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            //if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            //if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            ////-------------------------------------------------
            //if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            //}

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            //if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            //}

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    #endregion

    public DataSet GetBillDeskNotUpdateReport(string fromdate, string todate, string OnlineOrderNo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_BILLDESKPAYMENT_NOTUPDATED", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateCertificateStatus(string status, string intApprovalid, string intDeptid, string intCFEEnterpid, string created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCertificatestatus";


        if (status.Trim() == "" || status.Trim() == null)
            com.Parameters.Add("@status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@status", SqlDbType.VarChar).Value = status.Trim();

        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();



        if (created_by.Trim() == "" || created_by.Trim() == null)
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public int UpdateApplNoofloanDetails(string intLoanId, string ApplNo)
    {

        int value = 0;

        try
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("updateApplNoinLoadDetails", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;

            if (intLoanId.Trim() == "" || intLoanId.Trim() == null)
                cmd.Parameters.Add("@intLoanId", SqlDbType.VarChar).Value = intLoanId.Trim();
            else
                cmd.Parameters.Add("@intLoanId", SqlDbType.VarChar).Value = intLoanId.Trim();

            if (ApplNo.Trim() == "" || ApplNo == null)
                cmd.Parameters.Add("@ApplNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@ApplNo", SqlDbType.VarChar).Value = ApplNo.Trim();


            return Convert.ToInt32(cmd.ExecuteScalar());
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;

    }

    public DataSet GetLoanDetails(string applno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getLoanDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (applno.Trim() == "" || applno.Trim() == null)
                da.SelectCommand.Parameters.Add("@applno", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@applno", SqlDbType.VarChar).Value = applno.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public int insertLoanDetails(string IndustryName, string intDistrictid, string Email, string MobileNumber, string intmandalid, string bankname, string Reg_Date, string amount, string status, string lineofactivity)
    {

        int value = 0;

        try
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("insertLoanDetails", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null)
                cmd.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.Trim();
            else
                cmd.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.Trim();

            if (intDistrictid.Trim() == "" || intDistrictid == null || intDistrictid.Trim() == "--Select--")
                cmd.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

            if (Email.Trim() == "" || Email.Trim() == null)
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();
            else
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

            if (MobileNumber.Trim() == "" || MobileNumber.Trim() == null)
                cmd.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();

            if (intmandalid.Trim() == "" || intmandalid.Trim() == null || intmandalid.Trim() == "--Select--")
                cmd.Parameters.Add("@intmandalid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intmandalid", SqlDbType.VarChar).Value = intmandalid.Trim();

            if (bankname.Trim() == "" || bankname.Trim() == null || bankname.Trim() == "--Select--")
                cmd.Parameters.Add("@bankname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@bankname", SqlDbType.VarChar).Value = bankname.Trim();


            if (amount.Trim() == "" || amount.Trim() == null || amount.Trim() == "--Select--")
                cmd.Parameters.Add("@amount", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@amount", SqlDbType.VarChar).Value = amount.Trim();

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                cmd.Parameters.Add("@status", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@status", SqlDbType.VarChar).Value = status.Trim();

            if (lineofactivity.Trim() == "" || lineofactivity.Trim() == null || lineofactivity.Trim() == "--Select--")
                cmd.Parameters.Add("@lineofactivity", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@lineofactivity", SqlDbType.VarChar).Value = lineofactivity.Trim();

            if (Reg_Date.ToString().Trim() == "" || Reg_Date.ToString().Trim() == null || Reg_Date.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_Date.Trim());

            return Convert.ToInt32(cmd.ExecuteScalar());
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }


    public DataSet GetdataofCertificate(string FromDate, string Todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCertificatedate", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (FromDate.Trim() == "" || FromDate.Trim() == null)
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = FromDate.ToString();


            if (Todate.Trim() == "" || Todate.Trim() == null)
                da.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = Todate.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

        //        }

    }

    //public int insertEnterprenuerdata(string NameofIndustrialUnder, string NameofthePromoter, string SoWo, string intStateid, string intDistrictid, string intMandalid, string intVillageid, string StreetName, string Door_No, string Pincode,
    //                string MobileNumber, string Email, string intTypeofOrganization, string TelephoneNumber, string ProposalFor, string Caste, string DirectMale, string DirectFemale, string InDirectMale, string InDirectFemale, string intCategoryofReg,
    //                 string Reg_No, string Reg_Date, string TypeofFactory, string Created_by
    //    )
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "sp_insertApplicationDetails";

    //    if (NameofIndustrialUnder.ToString().Trim() == "" || NameofIndustrialUnder.ToString().Trim() == null)
    //        com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = NameofIndustrialUnder.Trim();

    //    if (NameofthePromoter.ToString().Trim() == "" || NameofthePromoter.ToString().Trim() == null)
    //        com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = NameofthePromoter.Trim();

    //    if (SoWo.ToString().Trim() == "" || SoWo.ToString().Trim() == null)
    //        com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = SoWo.Trim();

    //    if (intStateid.ToString().Trim() == "" || intStateid.ToString().Trim() == null || intStateid.ToString().Trim()=="--Select--")
    //        com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

    //    if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

    //    if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

    //    if (intVillageid.ToString().Trim() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();

    //    if (StreetName.ToString().Trim() == "" || StreetName.ToString().Trim() == null || StreetName.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = StreetName.Trim();


    //    if (Door_No.ToString().Trim() == "" || Door_No.ToString().Trim() == null || Door_No.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = Door_No.Trim();

    //    if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null || Pincode.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

    //    if (MobileNumber.ToString().Trim() == "" || MobileNumber.ToString().Trim() == null || MobileNumber.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();

    //    if (MobileNumber.ToString().Trim() == "" || MobileNumber.ToString().Trim() == null || MobileNumber.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();




    //}

    //public int insertQuetieneroes(string intQuessionaireid, string Const_of_unit, string Sector_Ent, string Tot_Extent, string Prop_intDistrictid, string Prop_intMandalid, string Prop_intVillageid, string Prop_Emp, string Val_Land, string Val_Build, string Val_Plant, string Tot_PrjCost, string Ent_is, string
    //                 intLineofActivity, string Pol_Indus, string Pol_Category, string Power_Req, string Loc_of_unit, string Water_req_Perday, string Water_reg_from1, string Water_reg_from2, string Water_reg_from3, string Do_Store_Kerosine, string Gen_Reqired, string Hight_Build, string
    //                 Built_up_Area, string Fall_in_Municipal, string Prop_Site, string Appl_Status, string Appl_no, string Created_by, string NoofTrees)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "InsertQuestioneries";

    //    if (intQuessionaireid == "" || intQuessionaireid == null)
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

    //    if (Const_of_unit == "" || Const_of_unit == null || Const_of_unit == "--Select--")
    //        com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = Const_of_unit.Trim();

    //    if (Sector_Ent == "" || Sector_Ent == null || Sector_Ent == "--Select--")
    //        com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();

    //    if (Tot_Extent == "" || Tot_Extent == null || Tot_Extent == "--Select--")
    //        com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = Tot_Extent.Trim();

    //    if (Prop_intDistrictid == "" || Prop_intDistrictid == null || Prop_intDistrictid == "--Select--")
    //        com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = Prop_intDistrictid.Trim();

    //    if (Prop_intMandalid == "" || Prop_intMandalid == null || Prop_intMandalid == "--Select--")
    //        com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = Prop_intMandalid.Trim();

    //    if (Prop_intVillageid == "" || Prop_intVillageid == null || Prop_intVillageid == "--Select--")
    //        com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = Prop_intVillageid.Trim();

    //    if (Prop_Emp == "" || Prop_Emp == null || Prop_Emp == "--Select--")
    //        com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = Prop_Emp.Trim();

    //    if (Val_Land == "" || Val_Land == null || Val_Land == "--Select--")
    //        com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();

    //    if (Val_Build == "" || Val_Build == null || Val_Build == "--Select--")
    //        com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();

    //    if (Val_Plant == "" || Val_Plant == null || Val_Plant == "--Select--")
    //        com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();

    //    if (Tot_PrjCost == "" || Tot_PrjCost == null || Tot_PrjCost == "--Select--")
    //        com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();

    //    if (Ent_is == "" || Ent_is == null || Ent_is == "--Select--")
    //        com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = Ent_is.Trim();

    //    if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

    //    if (Pol_Indus == "" || Pol_Indus == null || Pol_Indus == "--Select--")
    //        com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = Pol_Indus.Trim();

    //    if (Pol_Category == "" || Pol_Category == null || Pol_Category == "--Select--")
    //        com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();

    //    if (Power_Req == "" || Power_Req == null || Power_Req == "--Select--")
    //        com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = Power_Req.Trim();

    //    if (Loc_of_unit == "" || Loc_of_unit == null || Loc_of_unit == "--Select--")
    //        com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = Loc_of_unit.Trim();

    //    if (Water_req_Perday == "" || Water_req_Perday == null || Water_req_Perday == "--Select--")
    //        com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = Water_req_Perday.Trim();

    //    if (Water_reg_from1 == "" || Water_reg_from1 == null || Water_reg_from1 == "--Select--")
    //        com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = Water_reg_from1.Trim();

    //    if (Water_reg_from2 == "" || Water_reg_from2 == null || Water_reg_from2 == "--Select--")
    //        com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = Water_reg_from2.Trim();

    //    if (Water_reg_from3 == "" || Water_reg_from3 == null || Water_reg_from3 == "--Select--")
    //        com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = Water_reg_from3.Trim();

    //    if (Do_Store_Kerosine == "" || Do_Store_Kerosine == null || Do_Store_Kerosine == "--Select--")
    //        com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = Do_Store_Kerosine.Trim();

    //    if (Gen_Reqired == "" || Gen_Reqired == null || Gen_Reqired == "--Select--")
    //        com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = Gen_Reqired.Trim();

    //    if (Hight_Build == "" || Hight_Build == null || Hight_Build == "--Select--")
    //        com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = Hight_Build.Trim();


    //    if (Built_up_Area == "" || Built_up_Area == null || Built_up_Area == "--Select--")
    //        com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = Built_up_Area.Trim();


    //    if (Fall_in_Municipal == "" || Fall_in_Municipal == null || Fall_in_Municipal == "--Select--")
    //        com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = Fall_in_Municipal.Trim();


    //    if (Prop_Site == "" || Prop_Site == null || Prop_Site == "--Select--")
    //        com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = Prop_Site.Trim();


    //    if (Appl_Status == "" || Appl_Status == null || Appl_Status == "--Select--")
    //        com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = Appl_Status.Trim();
    //    if (Appl_no == "" || Appl_no == null || Appl_no == "--Select--")
    //        com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = Appl_no.Trim();


    //    if (Created_by == "" || Created_by == null || Created_by == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (NoofTrees == "" || NoofTrees == null || NoofTrees == "--Select--")
    //        com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = NoofTrees.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}


    public int insertQuetieneroes(string intQuessionaireid, string Const_of_unit, string Sector_Ent, string Tot_Extent, string Prop_intDistrictid, string Prop_intMandalid, string Prop_intVillageid, string Prop_Emp, string Val_Land, string Val_Build, string Val_Plant, string Tot_PrjCost, string Ent_is, string
                     intLineofActivity, string Pol_Indus, string Pol_Category, string Power_Req, string Loc_of_unit, string Water_req_Perday, string Water_reg_from1, string Water_reg_from2, string Water_reg_from3, string Do_Store_Kerosine, string Gen_Reqired, string Hight_Build, string
                     Built_up_Area, string Fall_in_Municipal, string Prop_Site, string Appl_Status, string Appl_no, string Created_by, string NoofTrees, string Appl_Type, string nameofunit)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertQuestioneries";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (Const_of_unit == "" || Const_of_unit == null || Const_of_unit == "--Select--")
            com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = Const_of_unit.Trim();

        if (Sector_Ent == "" || Sector_Ent == null || Sector_Ent == "--Select--")
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();

        if (Tot_Extent == "" || Tot_Extent == null || Tot_Extent == "--Select--")
            com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = Tot_Extent.Trim();

        if (Prop_intDistrictid == "" || Prop_intDistrictid == null || Prop_intDistrictid == "--Select--")
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = Prop_intDistrictid.Trim();

        if (Prop_intMandalid == "" || Prop_intMandalid == null || Prop_intMandalid == "--Select--")
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = Prop_intMandalid.Trim();

        if (Prop_intVillageid == "" || Prop_intVillageid == null || Prop_intVillageid == "--Select--")
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = Prop_intVillageid.Trim();

        if (Prop_Emp == "" || Prop_Emp == null || Prop_Emp == "--Select--")
            com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = Prop_Emp.Trim();

        if (Val_Land == "" || Val_Land == null || Val_Land == "--Select--")
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();

        if (Val_Build == "" || Val_Build == null || Val_Build == "--Select--")
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();

        if (Val_Plant == "" || Val_Plant == null || Val_Plant == "--Select--")
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();

        if (Tot_PrjCost == "" || Tot_PrjCost == null || Tot_PrjCost == "--Select--")
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();

        if (Ent_is == "" || Ent_is == null || Ent_is == "--Select--")
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = Ent_is.Trim();

        if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

        if (Pol_Indus == "" || Pol_Indus == null || Pol_Indus == "--Select--")
            com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = Pol_Indus.Trim();

        if (Pol_Category == "" || Pol_Category == null || Pol_Category == "--Select--")
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();

        if (Power_Req == "" || Power_Req == null || Power_Req == "--Select--")
            com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = Power_Req.Trim();

        if (Loc_of_unit == "" || Loc_of_unit == null || Loc_of_unit == "--Select--")
            com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = Loc_of_unit.Trim();

        if (Water_req_Perday == "" || Water_req_Perday == null || Water_req_Perday == "--Select--")
            com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = Water_req_Perday.Trim();

        if (Water_reg_from1 == "" || Water_reg_from1 == null || Water_reg_from1 == "--Select--")
            com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = Water_reg_from1.Trim();

        if (Water_reg_from2 == "" || Water_reg_from2 == null || Water_reg_from2 == "--Select--")
            com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = Water_reg_from2.Trim();

        if (Water_reg_from3 == "" || Water_reg_from3 == null || Water_reg_from3 == "--Select--")
            com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = Water_reg_from3.Trim();

        if (Do_Store_Kerosine == "" || Do_Store_Kerosine == null || Do_Store_Kerosine == "--Select--")
            com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = Do_Store_Kerosine.Trim();

        if (Gen_Reqired == "" || Gen_Reqired == null || Gen_Reqired == "--Select--")
            com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = Gen_Reqired.Trim();

        if (Hight_Build == "" || Hight_Build == null || Hight_Build == "--Select--")
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = Hight_Build.Trim();


        if (Built_up_Area == "" || Built_up_Area == null || Built_up_Area == "--Select--")
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = Built_up_Area.Trim();


        if (Fall_in_Municipal == "" || Fall_in_Municipal == null || Fall_in_Municipal == "--Select--")
            com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = Fall_in_Municipal.Trim();


        if (Prop_Site == "" || Prop_Site == null || Prop_Site == "--Select--")
            com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = Prop_Site.Trim();


        if (Appl_Status == "" || Appl_Status == null || Appl_Status == "--Select--")
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = Appl_Status.Trim();
        if (Appl_no == "" || Appl_no == null || Appl_no == "--Select--")
            com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = Appl_no.Trim();


        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (NoofTrees == "" || NoofTrees == null || NoofTrees == "--Select--")
            com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = NoofTrees.Trim();


        if (Appl_Type == "" || Appl_Type == null || Appl_Type == "--Select--")
            com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = Appl_Type.Trim();

        if (nameofunit == "" || nameofunit == null || nameofunit == "--Select--")
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();

       
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet getApprovalbyUID(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getApprovalbyUID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = UID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getApprovalbyUIDCFO(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getApprovalbyUIDCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = UID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet getApplicationforpayment(string UnitName, string UID, string DistID, string MandalID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getApplforpayment", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (UnitName.Trim() == "" || UnitName.Trim() == null)
                da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = UnitName.ToString();

            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();
            if (DistID.Trim() == "" || DistID.Trim() == null || DistID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DistID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DistID", SqlDbType.VarChar).Value = DistID.ToString();

            if (MandalID.Trim() == "" || MandalID.Trim() == null || MandalID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@MandalID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@MandalID", SqlDbType.VarChar).Value = MandalID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    //public DataSet GetPcbLoginDetails(string UserID)//,string Dept
    //{
    //    DataSet ds = new DataSet();
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    try
    //    {

    //        da = new SqlDataAdapter("sp_ValidUser_PCB", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
    //        da.Fill(ds);
    //        return ds;

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }

    //}
    public DataSet GetPcbLoginDetails(string UserID, string ApplicatonType)//,string Dept
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {
            da = new SqlDataAdapter("sp_ValidUser_PCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
            da.SelectCommand.Parameters.Add("@ApplicatonType", SqlDbType.VarChar).Value = ApplicatonType.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getApplicationforpaymentCFO(string UnitName, string UID, string DistID, string MandalID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getApplforpaymentCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (UnitName.Trim() == "" || UnitName.Trim() == null)
                da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = UnitName.ToString();

            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();
            if (DistID.Trim() == "" || DistID.Trim() == null || DistID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DistID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DistID", SqlDbType.VarChar).Value = DistID.ToString();

            if (MandalID.Trim() == "" || MandalID.Trim() == null || MandalID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@MandalID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@MandalID", SqlDbType.VarChar).Value = MandalID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetDistricts()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistricts", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDistrictbyID(string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictbyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = District.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetCategoryDet()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetCategoryDet]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

           
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetCategoryDet(string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetCategoryDet_test26052022]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (createdby.Trim() == "" || createdby.Trim() == null)
                da.SelectCommand.Parameters.Add("@createdby", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@createdby", SqlDbType.VarChar).Value = createdby.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //public DataSet GetCategoryDet()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetCategoryDet", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet GetMandalsForClosedUnits()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetMandalsForClosedUnits", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (District.Trim() == "" || District.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = District.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetMandals(string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetMandals", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCategoryType(string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCategoryType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Category.Trim() == "" || Category.Trim() == null)
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetVillages(string Mandal)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetVillages", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Mandal.Trim() == "" || Mandal.Trim() == null || Mandal.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@inMandalid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@inMandalid", SqlDbType.VarChar).Value = Mandal.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public DataSet GetEnterPriseIs(string EnterpriseCost, string EnterPriseType)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetEnterPriseIs", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (EnterpriseCost.Trim() == "" || EnterpriseCost.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@EnterpriseCost", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@EnterpriseCost", SqlDbType.VarChar).Value = EnterpriseCost.ToString();


    //        if (EnterPriseType.Trim() == "" || EnterPriseType.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = EnterPriseType.ToString();

    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    public DataSet GetdataofCertificate(string unitname, string uidnumber, string location, string Category, string AppType)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getCertificatedetailsnew", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (unitname.Trim() == "" || unitname.Trim() == null || unitname.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@unitname", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@unitname", SqlDbType.VarChar).Value = unitname.Trim();
            }

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.Trim();
            }

            if (uidnumber.Trim() == "" || uidnumber.Trim() == null || uidnumber.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@uidnumber", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@uidnumber", SqlDbType.VarChar).Value = uidnumber.Trim();
            }

            if (location.Trim() == "" || location.Trim() == null || location.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@location", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@location", SqlDbType.VarChar).Value = location.Trim();
            }
            myDataAdapter.SelectCommand.Parameters.Add("@AppType", SqlDbType.VarChar).Value = AppType.Trim();
            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public int insertUploadCertificate(string nameofunit, string uid, string locationunit, string address, string intCFEEnterpid, string created_by, string intQuessionaireid, string ddlCategory, byte[] Cast, string CasteFileName)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertuploadCertificate";

        if (nameofunit.Trim() == "" || nameofunit.Trim() == null)
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();

        if (uid.Trim() == "" || uid.Trim() == null)
            com.Parameters.Add("@uid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@uid", SqlDbType.VarChar).Value = uid.Trim();


        if (Cast.ToString().Trim() == "" || Cast == null)
            com.Parameters.Add("@Cast", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cast", SqlDbType.Image).Value = Cast;

        if (CasteFileName.Trim() == "" || CasteFileName.Trim() == null)
            com.Parameters.Add("@CasteFileName", SqlDbType.VarChar).Value = CasteFileName.Trim();
        else
            com.Parameters.Add("@CasteFileName", SqlDbType.VarChar).Value = CasteFileName.Trim();



        if (ddlCategory.Trim() == "" || ddlCategory.Trim() == null)
            com.Parameters.Add("@ddlCategory", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ddlCategory", SqlDbType.VarChar).Value = ddlCategory.Trim();

        if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (locationunit.Trim() == "" || locationunit.Trim() == null)
            com.Parameters.Add("@locationunit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@locationunit", SqlDbType.VarChar).Value = locationunit.Trim();

        if (address.Trim() == "" || address.Trim() == null)
            com.Parameters.Add("@address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@address", SqlDbType.VarChar).Value = address.Trim();


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (created_by.Trim() == "" || created_by.Trim() == null)
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }



    }
    public DataSet GetShowApprovalandFees(string SerchVer, string EnterpriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowApprovalandFees(string SerchVer, string EnterpriseType, string questionnaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (questionnaireid.Trim() == "" || questionnaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@questionnaireid", SqlDbType.VarChar).Value =DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@questionnaireid", SqlDbType.VarChar).Value = questionnaireid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesPCBCFO(string SerchVer, string EnterpriseType, string intquestionnaieid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesPCBCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (intquestionnaieid.Trim() == "" || intquestionnaieid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = intquestionnaieid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesGpFees(string SerchVer, string EnterpriseType, string Builduparea, string Villageid, string UNDERLIMIT, string CREATEDBY)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetShowApprovalandFees_Gpfees]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            da.SelectCommand.Parameters.Add("@Builduparea", SqlDbType.VarChar).Value = Builduparea.ToString();

            if (Villageid.Trim() == "" || Villageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Villageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Villageid", SqlDbType.VarChar).Value = Villageid.ToString();

            if (UNDERLIMIT.Trim() == "" || UNDERLIMIT.Trim() == null)
                da.SelectCommand.Parameters.Add("@UNDERLIMIT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UNDERLIMIT", SqlDbType.VarChar).Value = UNDERLIMIT.ToString();

            if (CREATEDBY.Trim() == "" || CREATEDBY.Trim() == null)
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = CREATEDBY.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetEnterprisebyID(string Enterpriseid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetEnterprisebyID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Enterpriseid.Trim() == "" || Enterpriseid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Enterpriseid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Enterpriseid", SqlDbType.VarChar).Value = Enterpriseid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesDistincts(string SerchVer, string EnterpriseType, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesDistricts", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetShowLOcationofUnit(string intDistrictid, string intMandalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetLocationofUnitbyDistrict", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            if (intMandalid.Trim() == "" || intMandalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int insertQuetieneroesDept(string intQuessionaireid, string intDeptid, string intApprovalid, string Created_by, string Approval_Fee)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQuetieneroesDept";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.Decimal).Value = Convert.ToDecimal(Approval_Fee.Trim());

        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet GetShowApprovalandFeesEnterPriseAmount(string SerchVer, string EnterpriseType, string TotPlantCost, string TotProjectCost, string NoofTrees)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesProjectCost", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();

            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (TotPlantCost.Trim() == "" || TotPlantCost.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotPlantCost", SqlDbType.VarChar).Value = "0";
            else
                da.SelectCommand.Parameters.Add("@TotPlantCost", SqlDbType.Decimal).Value = Convert.ToDecimal(TotPlantCost.ToString());


            if (TotProjectCost.Trim() == "" || TotProjectCost.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotProjectCost", SqlDbType.VarChar).Value = "0";
            else
                da.SelectCommand.Parameters.Add("@TotProjectCost", SqlDbType.Decimal).Value = Convert.ToDecimal(TotProjectCost.ToString());
            if (NoofTrees.Trim() == "" || NoofTrees.Trim() == null)
                da.SelectCommand.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = "0";
            else
                da.SelectCommand.Parameters.Add("@NoofTrees", SqlDbType.Decimal).Value = Convert.ToDecimal(NoofTrees.ToString());



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesDTCP(string SerchVer, string EnterpriseType, string RUType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesDTCP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();




            if (RUType.Trim() == "" || RUType.Trim() == null)
                da.SelectCommand.Parameters.Add("@RUType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@RUType", SqlDbType.VarChar).Value = RUType.ToString();





            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowApprovalandFeesSUDA(string SerchVer, string EnterpriseType, string RUType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesDTCP_TEST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();




            if (RUType.Trim() == "" || RUType.Trim() == null)
                da.SelectCommand.Parameters.Add("@RUType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@RUType", SqlDbType.VarChar).Value = RUType.ToString();





            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesFire(string SerchVer, string EnterpriseType, string HightMts)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesFire", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();




            if (HightMts.Trim() == "" || HightMts.Trim() == null)
                da.SelectCommand.Parameters.Add("@HightMts", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@HightMts", SqlDbType.Decimal).Value = Convert.ToDecimal(HightMts.ToString());





            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowApprovalandFeesGroundWater(string SerchVer, string EnterpriseType, string Water, string Land)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesGroundWater", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();




            if (Water.Trim() == "" || Water.Trim() == null)
                da.SelectCommand.Parameters.Add("@Water", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Water", SqlDbType.Decimal).Value = Convert.ToDecimal(Water.ToString());


            if (Land.Trim() == "" || Land.Trim() == null)
                da.SelectCommand.Parameters.Add("@Land", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Land", SqlDbType.Decimal).Value = Convert.ToDecimal(Land.ToString());





            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetEnterPreneurdata(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerdata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getdataofPowerDetails(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getPowerDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getdataofwaterDetails(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getWaterDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getPCBDetails(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getPCBDetailsnew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetForestdata(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getForestdata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetQuestionereisReceiptDetails(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQuestionereisReceiptDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public int insertForestdata(string number, string intQuessionaireid, string intCFEForestid, string north, string west, string east, string south, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFEForest";
        if (number.ToString().Trim() == "" || number.ToString().Trim() == null)
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

        if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intCFEForestid.ToString().Trim() == "" || intCFEForestid.ToString().Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEForestid.Trim();
        if (north.ToString().Trim() == "" || north.ToString().Trim() == null)
            com.Parameters.Add("@north", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@north", SqlDbType.VarChar).Value = north.Trim();


        if (east.ToString().Trim() == "" || east.ToString().Trim() == null)
            com.Parameters.Add("@east", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@east", SqlDbType.VarChar).Value = east.Trim();


        if (west.ToString().Trim() == "" || west.ToString().Trim() == null)
            com.Parameters.Add("@west", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@west", SqlDbType.VarChar).Value = west.Trim();


        if (south.ToString().Trim() == "" || south.ToString().Trim() == null)
            com.Parameters.Add("@south", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@south", SqlDbType.VarChar).Value = south.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            // return Convert.ToInt32(com.ExecuteScalar());


            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }



    }

    //Created by suresh as on 12-1-2016 :: Insert,Update TST 
    public int insrtTST(string intTST, string Created_by, string User_id, string Password)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insrtTST";



        if (intTST == "" || intTST == null)
            com.Parameters.Add("@intTST", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intTST", SqlDbType.VarChar).Value = intTST.Trim();


        if (intStateid == "" || intStateid == null)
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();


        if (intCountieid == "" || intCountieid == null)
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCountieid", SqlDbType.VarChar).Value = intCountieid.Trim();

        if (intPayamid == "" || intPayamid == null)
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPayamid", SqlDbType.VarChar).Value = intPayamid.Trim();

        if (Ministry == "" || Ministry == null)
            com.Parameters.Add("@Ministry", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Ministry", SqlDbType.VarChar).Value = Ministry.Trim();


        if (TstName == "" || TstName == null)
            com.Parameters.Add("@TstName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TstName", SqlDbType.VarChar).Value = TstName.Trim();

        if (Address == "" || Address == null)
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

        if (Email == "" || Email == null)
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();


        if (ContactNo == "" || ContactNo == null)
            com.Parameters.Add("@ContactNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ContactNo", SqlDbType.VarChar).Value = ContactNo.Trim();


        if (Type == "" || Type == null)
            com.Parameters.Add("@Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type", SqlDbType.VarChar).Value = Type.Trim();

        if (intDesgid == "" || intDesgid == null || intDesgid.Trim() == "--Select--")
            com.Parameters.Add("@intDesgid ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDesgid ", SqlDbType.VarChar).Value = intDesgid.Trim();

        if (Status == "" || Status == null)
            com.Parameters.Add("@Status ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status ", SqlDbType.VarChar).Value = Status.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (User_id == "" || User_id == null)
            com.Parameters.Add("@User_id ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@User_id ", SqlDbType.VarChar).Value = User_id.Trim();

        if (Password == "" || Password == null)
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //created by suresh 12-1-2016 purpose of deletetst
    public int deleteTST(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteTST";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            return cmd.ExecuteNonQuery();
        }

        catch (SqlException ex)
        {
            if (ex.Number == 547)
            {
                return 3;
            }
            else
            {
                return 3;
            }
            //throw ex;
            //return 0;

        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }


    //Created by siva as on 22-1-2016 :: Get Designation by Type in Dropdown
    public void Getdesignations(DropDownList ddl, string Type)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("sp_getDesignationByType", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Type.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Type", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Type", SqlDbType.VarChar).Value = Type.ToString();
            }
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "Designation";
            ddl.DataValueField = "intDesgid";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Created by siva as on 22-1-2016 :: Get Ips by TST in Dropdown
    public void GetIpsByTST(DropDownList ddl, string Created_by)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("GetIpsByTST", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Created_by.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();
            }
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "IPName";
            ddl.DataValueField = "intIP";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //siva as on 25-01-2016 for deleteing Financial det
    public int deleteFinancialTrans(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteFinancialTrans";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }




    public DataSet Getverifyofque(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdatavarifyque", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet Getverifyofque1(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdatavarifyque1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet Getverifyofque2(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdatavarifyque2", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet Getverifyofque3(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque3", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet Getverifyofque4(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque4", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet Getverifyofque5(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque5", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet Getverifyofque6(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque6", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet Getverifyofque7(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque7", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet Getverifyofque8(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque8", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public string RetriveStatus(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveStatus", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet ChkFundsApproval(string intWorklId, string PaidAmount)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("ChkFundsApproval", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intWorklId.Trim() == "" || intWorklId.Trim() == null)
                da.SelectCommand.Parameters.Add("@intWorklId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intWorklId", SqlDbType.VarChar).Value = intWorklId.ToString();


            if (PaidAmount.Trim() == "" || PaidAmount.Trim() == null)
                da.SelectCommand.Parameters.Add("@PaidAmount", SqlDbType.Decimal).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@PaidAmount", SqlDbType.Decimal).Value = PaidAmount.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //siva as on 25-01-2016 for for getProposalwork details
    public DataSet GetWorkProgressforWages(string intWorkActivityId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetWorkProgressforWages", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intWorkActivityId.Trim() == "" || intWorkActivityId.Trim() == null)
                da.SelectCommand.Parameters.Add("@intWorkActivityId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intWorkActivityId", SqlDbType.VarChar).Value = intWorkActivityId.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet Verifylandordetails(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("VerifyEnterprenuerDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "All" || intQuessionaireid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet VerifylandordetailsCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("VerifyEnterprenuerDetCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "All" || intQuessionaireid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    //siva as on 25-01-2016 for for Get Work wise Beneficiary by id
    public DataSet GetWorkwiseBenDet(string intBomasid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetWorkwiseBenDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBomasid.Trim() == "" || intBomasid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //create by Siva 29-1-2016 Work status wise Report
    public DataSet GetWorkStatusReport(string intTST, string intIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("WorkwiseStatusreport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intIP.Trim() == "" || intIP.Trim() == null)
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = intIP.ToString();

            if (intTST.Trim() == "" || intTST.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = intTST.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //create by Siva 29-1-2016 Work status wise Report
    public DataSet GetWorkStatusReportByTST(string intTST)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("TSTDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;





            if (intTST.Trim() == "" || intTST.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = intTST.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //Created by siva as on 30-11-2015 :: Get States in Dropdown
    public void getVulnerbility(DropDownList ddlState)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("getVulnerbility", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddlState.DataSource = ds.Tables[0];
            ddlState.DataTextField = "Disability";
            ddlState.DataValueField = "intDisability";
            ddlState.DataBind();
            ddlState.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet IPwiseTypesofWorkreport(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("IPwiseTypesofWorkreport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet WorkwiseStatusreport(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("WorkwiseStatusreport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet GetPiaName(string intPIAid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("sp_getPianame", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            myDataAdapter.SelectCommand.Parameters.Add("@intPIAid", SqlDbType.Int).Value = intPIAid;
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public void getfeedback(DropDownList ddlfeedback)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            //myDataAdapter = new SqlDataAdapter("sp_Deptmaster", con.GetConnection);
            myDataAdapter = new SqlDataAdapter("sp_feedback", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            ds = new System.Data.DataSet();
            //        myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            // Commented by Srikanth on 26-08-2013 for Loop Remove

            //ddlfeedback.DataSource = ds;
            //int i = 0;
            //foreach (DataTable dt in ds.Tables)
            //{
            //    foreach (DataRow dr in dt.Rows)
            //    {
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddlfeedback.DataSource = ds.Tables[0].DefaultView;
                ddlfeedback.DataTextField = "Fb_Type";
                ddlfeedback.DataValueField = "intfb_id";
                ddlfeedback.DataBind();
                ddlfeedback.Items.Insert(0, "--Select--");
                // i++;
            }
            //    }
            //}

        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public string getHelpDeskID(string PIA)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {

            da = new SqlDataAdapter("sp_GetHelpDeskID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (PIA.Trim() == "" || PIA.Trim() == null)
                da.SelectCommand.Parameters.Add("@PIA", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@PIA", SqlDbType.VarChar).Value = PIA.Trim();

            da.Fill(ds);
            if (ds.Tables[0].Rows.Count > 0)
            {
                return ds.Tables[0].Rows[0][0].ToString();
            }
            else
            {
                return "";
            }


        }
        catch (Exception ex)
        {
            return ex.Message.ToString();
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertFeedBack(string intPIAid, string hd_Username, string intfb_id, string hd_desc, string prjSancLetterScanFileName, byte[] prjSancLetterScan, string usertype, string Created_by, string generateid, string anothermail, string IPAddres)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_Instfeedback";

        if (intPIAid.Trim() == "" || intPIAid.Trim() == null)
            com.Parameters.Add("@intPIAid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPIAid", SqlDbType.Int).Value = intPIAid.Trim();

        if (hd_Username.Trim() == "" || hd_Username.Trim() == null)
            com.Parameters.Add("@hd_Username", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@hd_Username", SqlDbType.VarChar).Value = hd_Username.Trim();

        if (intfb_id.Trim() == "" || intfb_id.Trim() == null)
            com.Parameters.Add("@intfb_id", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intfb_id", SqlDbType.Int).Value = intfb_id.Trim();

        if (hd_desc.Trim() == "" || hd_desc.Trim() == null)
            com.Parameters.Add("@hd_desc", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@hd_desc", SqlDbType.VarChar).Value = hd_desc.Trim();


        if (prjSancLetterScanFileName.Trim() == "" || prjSancLetterScanFileName.Trim() == null)
            com.Parameters.Add("@hd_uplddocname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@hd_uplddocname", SqlDbType.VarChar).Value = prjSancLetterScanFileName.Trim();

        com.Parameters.Add("@hd_uplddoc", SqlDbType.Image).Value = prjSancLetterScan;

        if (usertype.Trim() == "" || usertype.Trim() == null)
            com.Parameters.Add("@User_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@User_Type", SqlDbType.VarChar).Value = usertype.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Created_by.Trim();

        //Begin Created By Srikanth on 17-5-2012 for Generating Number

        if (generateid.Trim() == "" || generateid.Trim() == null)
            com.Parameters.Add("@generateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@generateid", SqlDbType.VarChar).Value = generateid.ToString().Trim();

        //End Created By Srikanth on 17-5-2012 for Generating Number

        //Begin Created By Srikanth on 15-6-2012 for Generating Number

        if (anothermail.Trim() == "" || anothermail.Trim() == null)
            com.Parameters.Add("@anothermail", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@anothermail", SqlDbType.VarChar).Value = anothermail.ToString().Trim();

        //End Created By Srikanth on 15-6-2012 for Generating Number

        if (IPAddres.Trim() == "" || IPAddres.Trim() == null)
            com.Parameters.Add("@IPAddres", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddres", SqlDbType.VarChar).Value = IPAddres.ToString().Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }



    //siva as on 12-1-2016 :: Benfeciary Detaila by ID
    public DataSet GetBenficiaryDetByIDForJobCard(string intBenid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBenficiaryDetByIDForJobCard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBenid.Trim() == "" || intBenid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = intBenid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //created by SIva as on 19-02-2016:insert Field Monitoring
    public int InsertFieldMonitoring(string WorkId, string DateofVisit, string OutCome, string Remarks, byte[] Photo, string PhotFilename, byte[] Photo2, string PhotoFilename2, byte[] Photo3, string Photo3Filename, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertFieldMonitoring";



        if (WorkId == "" || WorkId == null)
            com.Parameters.Add("@WorkId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WorkId", SqlDbType.VarChar).Value = WorkId.Trim();


        if (DateofVisit == "" || DateofVisit == null)
            com.Parameters.Add("@DateofVisit", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@DateofVisit", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofVisit.Trim());


        if (OutCome == "" || OutCome == null || OutCome.Trim() == "--Select--")
            com.Parameters.Add("@OutCome", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OutCome", SqlDbType.VarChar).Value = OutCome.Trim();


        if (Remarks == "" || Remarks == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();


        if (PhotFilename.Trim() == "" || PhotFilename.Trim() == null)
            com.Parameters.Add("@Photo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Photo", SqlDbType.Image).Value = Photo;

        if (PhotFilename.Trim() == "" || PhotFilename.Trim() == null)
            com.Parameters.Add("@PhotFilename", SqlDbType.VarChar).Value = PhotFilename.Trim();
        else
            com.Parameters.Add("@PhotFilename", SqlDbType.VarChar).Value = PhotFilename.Trim();



        if (PhotoFilename2.Trim() == "" || PhotoFilename2.Trim() == null)
            com.Parameters.Add("@Photo2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Photo2", SqlDbType.Image).Value = Photo2;

        if (PhotoFilename2.Trim() == "" || PhotoFilename2.Trim() == null)
            com.Parameters.Add("@PhotoFilename2", SqlDbType.VarChar).Value = PhotoFilename2.Trim();
        else
            com.Parameters.Add("@PhotoFilename2", SqlDbType.VarChar).Value = PhotoFilename2.Trim();



        if (Photo3Filename.Trim() == "" || Photo3Filename.Trim() == null)
            com.Parameters.Add("@Photo3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Photo3", SqlDbType.Image).Value = Photo3;

        if (Photo3Filename.Trim() == "" || Photo3Filename.Trim() == null)
            com.Parameters.Add("@Photo3Filename", SqlDbType.VarChar).Value = Photo3Filename.Trim();
        else
            com.Parameters.Add("@Photo3Filename", SqlDbType.VarChar).Value = Photo3Filename.Trim();


        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public void getPIADetwithMORD(DropDownList ddl)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("sp_getREPPIAswithMORD", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);


            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl.DataSource = ds.Tables[0].DefaultView;
                ddl.DataTextField = "piaName";
                ddl.DataValueField = "intPIAid";
                ddl.DataBind();
                ddl.Items.Insert(0, "--Select--");

            }


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    #region Intigrated By Srikanth on 17-5-2012 For Change Feed back Status
    public int Changestatusapprove(string int_fbid, string Status, string Remarks, string Modified_by, string IPAddress, string Updby)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_Updatehelpdesk";

        if (int_fbid.Trim() == "" || int_fbid.Trim() == null)
            com.Parameters.Add("@int_fbid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@int_fbid", SqlDbType.Int).Value = int_fbid.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Modified_by.Trim();

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (Updby.Trim() == "" || Updby.Trim() == null)
            com.Parameters.Add("@Updby", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Updby", SqlDbType.VarChar).Value = Updby.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet GetCFEEnterprenuerDetailsNew(string intSBenid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("GetCFEEnterprenuerDetailsNew", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intSBenid.Trim() == "" || intSBenid.Trim() == null || intSBenid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterprenuerid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterprenuerid", SqlDbType.VarChar).Value = intSBenid;
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();

        }
        return ds;
    }


    public DataSet GetCFEEnterprenuerDetailsNewCFO(string intSBenid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("GetCFEEnterprenuerDetailsNew", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intSBenid.Trim() == "" || intSBenid.Trim() == null || intSBenid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterprenuerid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterprenuerid", SqlDbType.VarChar).Value = intSBenid;
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();

        }
        return ds;
    }


    public int insertDepartmentProcess(string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Trans_Date, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertDepartmentProcess";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();

        if (Trans_Date == "" || Trans_Date == null)
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = cmf.convertDateIndia(Trans_Date);

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }



    //public int insertQueryResponsedata(string intEnterpreniourApprovalid, string intCFEEnterpid, string QueryDescription, string QueryStatus, string Created_by)
    //{


    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertQueriesDetails";

    //    if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null)
    //        com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = intEnterpreniourApprovalid.Trim();

    //    if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
    //        com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

    //    if (QueryDescription.Trim() == "" || QueryDescription.Trim() == null)
    //        com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();


    //    if (QueryStatus.Trim() == "" || QueryStatus.Trim() == null)
    //        com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

    //    if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }


    //}

    public int insertQueryResponsedata(string intEnterpreniourApprovalid, string intCFEEnterpid, string QueryDescription, string QueryStatus, string Created_by, string intDeptid, string intApprovalid, string intQuessionaireid)
    {


        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQueriesDetails";

        if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null)
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = intEnterpreniourApprovalid.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (QueryDescription.Trim() == "" || QueryDescription.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();


        if (QueryStatus.Trim() == "" || QueryStatus.Trim() == null)
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public int insertQueryResponsedata_BP(string intEnterpreniourApprovalid, string intCFEEnterpid, string QueryDescription, string QueryStatus, string Created_by, string intDeptid, string intApprovalid, string intQuessionaireid, string docs)
    {


        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQueriesDetails";

        if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null)
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = intEnterpreniourApprovalid.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (QueryDescription.Trim() == "" || QueryDescription.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();


        if (QueryStatus.Trim() == "" || QueryStatus.Trim() == null)
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (docs.Trim() == "" || docs.Trim() == null)
            com.Parameters.Add("@docs", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@docs", SqlDbType.VarChar).Value = docs.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    //public int insertQueryResponsedata(string intEnterpreniourApprovalid, string intCFEEnterpid, string QueryDescription, string QueryStatus, string Created_by, string intDeptid, string intApprovalid, string intQuessionaireid, string docs)
    //{


    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertQueriesDetails";

    //    if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null)
    //        com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = intEnterpreniourApprovalid.Trim();

    //    if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
    //        com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

    //    if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

    //    if (QueryDescription.Trim() == "" || QueryDescription.Trim() == null)
    //        com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();


    //    if (QueryStatus.Trim() == "" || QueryStatus.Trim() == null)
    //        com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

    //    if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


    //    if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
    //        com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


    //    if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
    //        com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

    //    if (docs.Trim() == "" || docs.Trim() == null)
    //        com.Parameters.Add("@docs", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@docs", SqlDbType.VarChar).Value = docs.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }


    //}

    public DataSet GetUidnumber(string intQuessionaireid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getUIDNumberdata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetEnterPreniourPayDetailsPaidDet(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetailsPaidDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet GetShowDepartmentFiles(string Deptid, string intStageid, string intDistrictid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetShowDepartmentFiles", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (Deptid.Trim() == "" || Deptid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
    //        if (intStageid.Trim() == "" || intStageid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

    //        if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet GetShowDepartmentFiles(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();


        if (Deptid == "266")
        {
            da = new SqlDataAdapter("getShowMAUDDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();
            da.Fill(ds);
            return ds;

        }

        else
        {
            try
            {
                da = new SqlDataAdapter("GetShowDepartmentFiles", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;


                if (Deptid.Trim() == "" || Deptid.Trim() == null)
                    da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
                else
                    da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
                if (intStageid.Trim() == "" || intStageid.Trim() == null)
                    da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
                else
                    da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

                if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                    da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
                else
                    da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

                da.SelectCommand.CommandTimeout = 3600;
                da.Fill(ds);
                return ds;


            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                con.CloseConnection();
            }

        }

    }
    public DataSet GetShowDepartmentFilesHmda(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesHmda1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowDepartmentFilesHmda2(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesHmda2", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int AddToTrans(string ids, string Status, string Remarks, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_Instviewhelpdesk";


        if (ids.Trim() == "" || ids.Trim() == null)
            com.Parameters.Add("@ids", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ids", SqlDbType.VarChar).Value = ids.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Created_by.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet Gethelpdeskbackup(string fedid, string statid, string piaid, string refno)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("sp_Gethelpd", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (fedid.Trim() == "" || fedid.Trim() == null || fedid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@fedid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@fedid", SqlDbType.VarChar).Value = fedid.ToString();


        if (statid.Trim() == "" || statid.Trim() == null || statid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@statid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@statid", SqlDbType.VarChar).Value = statid.ToString();


        if (piaid.Trim() == "" || piaid.Trim() == null || piaid == "--Select--" || piaid.ToString().Length == 0)
            myDataAdapter.SelectCommand.Parameters.Add("@piaid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@piaid", SqlDbType.VarChar).Value = piaid.ToString();

        if (refno.Trim() == "" || refno.Trim() == null)
            myDataAdapter.SelectCommand.Parameters.Add("@refno", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@refno", SqlDbType.VarChar).Value = "%" + refno.ToString().Trim() + "%";

        myDataAdapter.Fill(ds);
        return ds;

    }

    public DataSet Gethelpdeskbackup_search(string fedid, string statid, string piaid, string refno, string Todate, string FromDate)  //added nikhil hd search
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("sp_Gethelpd_search", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (fedid.Trim() == "" || fedid.Trim() == null || fedid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@fedid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@fedid", SqlDbType.VarChar).Value = fedid.ToString();


        if (statid.Trim() == "" || statid.Trim() == null || statid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@statid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@statid", SqlDbType.VarChar).Value = statid.ToString();


        if (piaid.Trim() == "" || piaid.Trim() == null || piaid == "--Select--" || piaid.ToString().Length == 0)
            myDataAdapter.SelectCommand.Parameters.Add("@piaid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@piaid", SqlDbType.VarChar).Value = piaid.ToString();

        if (refno.Trim() == "" || refno.Trim() == null)
            myDataAdapter.SelectCommand.Parameters.Add("@refno", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@refno", SqlDbType.VarChar).Value = "%" + refno.ToString().Trim() + "%";


        myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.Date).Value = Convert.ToDateTime(Todate).ToShortDateString();

        myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.Date).Value = Convert.ToDateTime(FromDate).ToShortDateString();

        myDataAdapter.Fill(ds);
        return ds;

    }


    public DataSet GetFBPCounts(string FromDate, string ToDate, string piano)
    {
        string cond = " ";
        if (FromDate.Trim() != "" && ToDate.Trim() != "")
            cond = "  WHERE     (DATEDIFF(dd, '" + FromDate.Trim() + "', created_dt) >= 0) AND (DATEDIFF(dd, '" + ToDate.Trim() + "', created_dt) <= 0) ";
        string qryList = "select f.Fb_Type,f.intfb_id,a.Created_by,p.User_name as piaName,(a.Open1+a.Close1+a.Reject) as Total,a.Open1,a.Close1,a.Reject from ";
        qryList = qryList + "(select intfb_id,Created_by,sum(ISNULL(Open1, 0)) as Open1,sum(ISNULL(Close1,0)) as Close1,sum(ISNULL(Reject,0)) as Reject from ";
        qryList = qryList + "(select intfb_id,Created_by,count(int_fbid) as Total,";
        qryList = qryList + "case when Status='Open' then count(int_fbid) else 0  end as Open1,";
        qryList = qryList + "case when Status='Closed' then count(int_fbid) else 0 end as Close1,";
        qryList = qryList + "case when Status='Rejected' then count(int_fbid) else 0 end as Reject from tm_Helpdesk " + cond.Trim();
        if (cond != " ")
            qryList = qryList + " and Created_by like '" + piano + "'";
        else
            qryList = qryList + " where Created_by like '" + piano + "'";

        qryList = qryList + " group by intfb_id,status,Created_by";
        qryList = qryList + ") as b group by intfb_id,Created_by) as a Inner join tm_fbType as f  on f.intfb_id=a.intfb_id left outer join tbl_Users as p on p.intUserid=a.Created_by order by p.User_name";

        return (con.ExecuteQuery(qryList));
    }

    public DataSet GetFBDet(string status, string FromDt, string Todt, string FBNum, string PiaNum)
    {
        string cond = " ";
        if (FromDt.Trim() != "" && Todt.Trim() != "")
            cond = "  where   (DATEDIFF(dd, '" + FromDt.Trim() + "', created_dt) >= 0) and (DATEDIFF(dd, '" + Todt.Trim() + "', created_dt) <= 0)  ";
        switch (status)
        {
            case "1":
                break;
            case "2":
                if (cond.Trim() != "")
                    cond = cond + " and Status='Open' ";
                else
                    cond = cond + " where Status='Open' ";
                break;
            case "3":
                if (cond.Trim() != "")
                    cond = cond + " and Status='Closed' ";
                else
                    cond = cond + " where Status='Closed' ";
                break;
            case "4":
                if (cond.Trim() != "")
                    cond = cond + " and Status='Rejected' ";
                else
                    cond = cond + " where Status='Rejected' ";
                break;

        }
        if (FBNum.Trim() != "")
        {
            if (cond.Trim() != "")
                cond = cond + " and intfb_id='" + FBNum.Trim() + "'";
            else
                cond = cond + " where intfb_id='" + FBNum.Trim() + "'";
        }
        if (PiaNum.Trim() != "")
        {
            if (cond.Trim() != "")
                cond = cond + " and hd_Username='" + PiaNum.Trim() + "'";
            else
                cond = cond + " where hd_Username='" + PiaNum.Trim() + "'";
        }

        string qryList;
        qryList = "Select int_fbid,User_Type,hd_desc,Remarks,Status,hd_uplddocname,Reply_Filename, REPLACE(Reply_Filepath, '\\','/') as Reply_Filepath  from tm_Helpdesk " + cond;

        return (con.ExecuteQuery(qryList));
    }



    public DataSet GetHelpDespDetbyid(string fedid)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("sp_Gethelpdbyid", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (fedid.Trim() == "" || fedid.Trim() == null || fedid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@fedid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@fedid", SqlDbType.VarChar).Value = fedid.ToString();



        myDataAdapter.Fill(ds);
        return ds;

    }


    #endregion


    public DataSet YearwiseDashboard(string Year)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("YearwiseDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Year.Trim() == "" || Year.Trim() == null)
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    //siva as on 22-2-2016 for for Get Beneficiary PaidAmount
    public DataSet GetBenPaidAmt(string intBenid, string Year, string Month)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBenPaidAmt", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intBenid.Trim() == "" || intBenid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBenid", SqlDbType.VarChar).Value = intBenid.ToString();


            if (Year.Trim() == "" || Year.Trim() == null)
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();



            if (Month.Trim() == "" || Month.Trim() == null)
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet CountyWiseReportNew(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("CountywiseReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet CountywisereportByType(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("CountywisereportByType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet PayamwiseReportNew(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("PayamwiseReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet PayamwisereportByTypeNew(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("PayamwisereportByType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet TypesofWorkswiseReport(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("TypesofWorkswiseReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet FundDisbursedReports(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FundDisbursedReports", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet WagespaidReport(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("WagespaidReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet BomawiseReport(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("BomawiseReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet BomawisereportByType(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("BomawisereportByType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }






    //Get Boma wise Beneficiary by Boma id
    public DataSet GetBomawiseBeneficiarywithIP(string intBomasid, string IP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBomawiseBeneficiarywithIP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBomasid.Trim() == "" || intBomasid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();

            if (IP.Trim() == "" || IP.Trim() == null)
                da.SelectCommand.Parameters.Add("@IP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IP", SqlDbType.VarChar).Value = IP.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet CountiesWagespaidReport(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("CountiesWagespaidReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet PayamWagespaidReport(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("PayamWagespaidReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //Get Boma wise Beneficiary by Boma id
    public DataSet GetBomawiseBeneficiarywithIP2(string intBomasid, string IP, string workcode)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBomawiseBeneficiarywithIP2", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBomasid.Trim() == "" || intBomasid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();

            if (IP.Trim() == "" || IP.Trim() == null)
                da.SelectCommand.Parameters.Add("@IP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IP", SqlDbType.VarChar).Value = IP.ToString();


            if (workcode.Trim() == "" || workcode.Trim() == null)
                da.SelectCommand.Parameters.Add("@workcode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@workcode", SqlDbType.VarChar).Value = workcode.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet FundDisbursedReportsByTrans(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FundDisbursedReportsByTrans", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet FundDisbursedReportsByTransDrildown(string IPName, string TypeofIP)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FundDisbursedReportsByTransDrildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (Created_by.Trim() == "" || Created_by.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (IPName.Trim() == "" || IPName.Trim() == null)
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intTST", SqlDbType.VarChar).Value = IPName.ToString();

            if (TypeofIP.Trim() == "" || TypeofIP.Trim() == null || TypeofIP.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIP", SqlDbType.VarChar).Value = TypeofIP.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet fetchCreateBatchTraineesAll2AttendencebyDatesDeletion(string IPid, string intWorkid, string FromDate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_fetchCreateBatchTraineesAll2AttendencebydatesForDeletion", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            //@TradeCode

            if ((IPid.ToString().Trim() == "") || (IPid.ToString().Trim() == "--Select--"))
            {
                da.SelectCommand.Parameters.Add("@IPid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@IPid", SqlDbType.VarChar).Value = IPid.Trim();
            }

            if ((intWorkid.ToString().Trim() == "") || (intWorkid.ToString().Trim() == "--Select--"))
            {
                da.SelectCommand.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@intWorkid", SqlDbType.VarChar).Value = intWorkid.Trim();
            }


            if ((FromDate.ToString().Trim() == "") || (FromDate.ToString().Trim() == null))
            {
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = Convert.ToDateTime(FromDate.Trim());
            }


            //Attendence
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();

        }

    }


    public int deleteAttandancerpt(string intBatchID, string FromDate)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteAttendance";

        cmd.Parameters.Add("@intBatchID", SqlDbType.VarChar).Value = intBatchID;

        if ((FromDate.ToString().Trim() == "") || (FromDate.ToString().Trim() == null))
        {
            cmd.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            cmd.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = Convert.ToDateTime(FromDate.Trim());
        }
        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {

            //return cmd.ExecuteNonQuery();
            return Convert.ToInt32(cmd.ExecuteScalar());
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            //  number = generateid;
            cmd.Dispose();
            con.CloseConnection();
        }

    }



    //siva as on 26-02-2016 for for Get Beneficiary det by Attendance Date
    public DataSet GetWorkwiseBenDetAttByDate(string intBomasid, string FromDate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetWorkwiseBenDetAttByDate", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intBomasid.Trim() == "" || intBomasid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBomasid", SqlDbType.VarChar).Value = intBomasid.ToString();

            if ((FromDate.ToString().Trim() == "") || (FromDate.ToString().Trim() == null))
            {
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = Convert.ToDateTime(FromDate.Trim());
            }

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int deleteGroupSavingData1(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deletemanufacturedata";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }



    public int deleteGroupSavingData2(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteRawmaterialdata";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }

    public int deleteGroupSavingData3(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteCFEForestDetBulk";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }


    public int deleteGroupSavingData4(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deletetCFEPCBDetBulkdet";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }

    //Created by siva as on 27-02-2016 :: Get areas of work in Dropdown
    public void getAreaofWorksByPrjid(DropDownList ddl, string intPrjid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("getAreaofWorksByPrjid", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intPrjid.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = intPrjid.ToString();
            }
            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "AreaofWork";
            ddl.DataValueField = "intAreaofWork";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //Created by siva as on 27-02-2016 :: Get Work Activities by Projectid
    public void getWorkActivitiesByProjects(DropDownList ddl, string intAreaofWork, string intPrjid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("getWorkActivitiesByProjects", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intAreaofWork.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intAreaofWork", SqlDbType.VarChar).Value = intAreaofWork.ToString();
            }


            if (intPrjid.ToString().Trim() == "")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intPrjid", SqlDbType.VarChar).Value = intPrjid.ToString();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            myDataAdapter.Fill(ds);

            ddl.DataSource = ds.Tables[0];
            ddl.DataTextField = "WorkActivity";
            ddl.DataValueField = "intWorkActivity";
            ddl.DataBind();
            ddl.Items.Insert(0, "--Select--");


        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet YearwiseDashboardforAdmin(string Year)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("YearwiseDashboardforAdmin", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Year.Trim() == "" || Year.Trim() == null)
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    #region Developed By Rajesh Patnaik
    public int InsertImagedata1(string intQuessionaireid, string intCFEid, string FileType, string FilePath, string FileName,
     string Created_by, string Created_dt, string Modified_by, string Modified_dt)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertImage", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEid.Trim() == "" || intCFEid.Trim() == null || intCFEid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = Int32.Parse(intCFEid.Trim());
            }



            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }



            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }
    #endregion


    #region Developed By Rajesh Patnaik
    public int InsertPowerDetails(string number, string intQuessionaireid, string intCFEEnterpid,
string Uid_No,
string Reg_Id,
string Cont_Demand_Max,
string Connect_Load_A,
string Connect_Load_B,
string Aggrigate_Capcity,
string Req_Voltage,
string Anyother_Service,
string Power_PerDay,
string Power_PerMonth,
string Trail_Production,
string Portable_Date,
     string Created_by, string Created_dt, string Modified_by, string Modified_dt, string Meternumber)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_CFEPowerDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (number.Trim() == "" || number.Trim() == null || number.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();
            }



            if (Meternumber.Trim() == "" || Meternumber.Trim() == null || Meternumber.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@MeterNumber", SqlDbType.VarChar).Value = "0";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@MeterNumber", SqlDbType.VarChar).Value = Meternumber.Trim();
            }


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null || Uid_No.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = Int32.Parse(Uid_No.Trim());
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null || Reg_Id.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = Int32.Parse(Reg_Id.Trim());
            }

            if (Cont_Demand_Max.Trim() == "" || Cont_Demand_Max.Trim() == null || Cont_Demand_Max.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Cont_Demand_Max", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Cont_Demand_Max", SqlDbType.Decimal).Value = Decimal.Parse(Cont_Demand_Max.Trim());
            }


            if (Connect_Load_A.Trim() == "" || Connect_Load_A.Trim() == null || Connect_Load_A.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Connect_Load_A", SqlDbType.Decimal).Value = "0";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Connect_Load_A", SqlDbType.Decimal).Value = Decimal.Parse(Connect_Load_A.Trim());
            }

            if (Connect_Load_B.Trim() == "" || Connect_Load_B.Trim() == null || Connect_Load_B.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Connect_Load_B", SqlDbType.Decimal).Value = "0";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Connect_Load_B", SqlDbType.Decimal).Value = Decimal.Parse(Connect_Load_B.Trim());
            }

            if (Aggrigate_Capcity.Trim() == "" || Aggrigate_Capcity.Trim() == null || Aggrigate_Capcity.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Aggrigate_Capcity", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Aggrigate_Capcity", SqlDbType.Decimal).Value = Decimal.Parse(Aggrigate_Capcity.Trim());
            }


            if (Req_Voltage.Trim() == "" || Req_Voltage.Trim() == null || Req_Voltage.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Req_Voltage", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Req_Voltage", SqlDbType.Int).Value = Int32.Parse(Req_Voltage.Trim());
            }

            if (Anyother_Service.Trim() == "" || Anyother_Service.Trim() == null || Anyother_Service.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Anyother_Service", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Anyother_Service", SqlDbType.Char).Value = Anyother_Service.Trim();
            }

            if (Power_PerDay.Trim() == "" || Power_PerDay.Trim() == null || Power_PerDay.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Power_PerDay", SqlDbType.Decimal).Value = "0";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Power_PerDay", SqlDbType.Decimal).Value = Decimal.Parse(Power_PerDay.Trim());
            }

            if (Power_PerMonth.Trim() == "" || Power_PerMonth.Trim() == null || Power_PerMonth.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Power_PerMonth", SqlDbType.Decimal).Value = "0";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Power_PerMonth", SqlDbType.Decimal).Value = Decimal.Parse(Power_PerMonth.Trim());
            }

            if (Trail_Production.Trim() == "" || Trail_Production.Trim() == null || Trail_Production.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Trail_Production", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                //myDataAdapter.SelectCommand.Parameters.Add("@Trail_Production", SqlDbType.DateTime).Value = Convert.ToDateTime(Trail_Production.Trim());
                myDataAdapter.SelectCommand.Parameters.Add("@Trail_Production", SqlDbType.DateTime).Value = cmf.convertDateIndia(Trail_Production.Trim());
            }

            if (Portable_Date.Trim() == "" || Portable_Date.Trim() == null || Portable_Date.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Portable_Date", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                // myDataAdapter.SelectCommand.Parameters.Add("@Portable_Date", SqlDbType.DateTime).Value = Convert.ToDateTime(Portable_Date.Trim());
                myDataAdapter.SelectCommand.Parameters.Add("@Portable_Date", SqlDbType.DateTime).Value = cmf.convertDateIndia(Portable_Date.Trim());
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

        //    con.OpenConnection();
        //com.Connection = con.GetConnection;

        //try
        //{
        //    //return Convert.ToInt32(com.ExecuteScalar());
        //    //if (returnvalue == DBNull.Value || returnvalue == null)
        //    //    return 0;
        //    //else
        //    //    return Convert.ToInt32(returnvalue);

        //    object returnvalue = com.ExecuteScalar();
        //    if (returnvalue == DBNull.Value || returnvalue == null)
        //        return 0;
        //    else
        //        return Convert.ToInt32(returnvalue);

        //}
        //catch (Exception ex)
        //{
        //    throw ex;
        //    //return 0;
        //    return 0;
        //}
        //finally
        //{
        //    com.Dispose();
        //    con.CloseConnection();
        //}



    }
    #endregion


    //    #region Developed By Rajesh Patnaik
    //    public int InsertWaterDetails(string number, string intQuessionaireid, string intCFEEnterpid,
    //string Uid_No,
    //string Reg_Id,
    //string Water_Suply_From,
    //string Drink_Water,
    //string Water_Processing,
    //string Source_Water,
    //string Requirement_Water,
    //string Quant_Water_Consumptive,
    //string Quant_Water_NonConsumptive,
    //     string Created_by, string Created_dt, string Modified_by, string Modified_dt)
    //    {
    //        try
    //        {

    //            con.OpenConnection();
    //            SqlDataAdapter myDataAdapter;

    //            myDataAdapter = new SqlDataAdapter("sp_WaterDetails", con.GetConnection);
    //            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;



    //            if (number.Trim() == "" || number.Trim() == null || number.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();
    //            }


    //            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
    //            }


    //            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
    //            }

    //            if (Uid_No.Trim() == "" || Uid_No.Trim() == null || Uid_No.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = Int32.Parse(Uid_No.Trim());
    //            }

    //            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null || Reg_Id.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = Int32.Parse(Reg_Id.Trim());
    //            }

    //            if (Water_Suply_From.Trim() == "" || Water_Suply_From.Trim() == null || Water_Suply_From.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Water_Suply_From", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Water_Suply_From", SqlDbType.Int).Value = Int32.Parse(Water_Suply_From.Trim());
    //            }

    //            if (Drink_Water.Trim() == "" || Drink_Water.Trim() == null || Drink_Water.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Drink_Water", SqlDbType.Decimal).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Drink_Water", SqlDbType.Decimal).Value = Decimal.Parse(Drink_Water.Trim());
    //            }


    //            if (Water_Processing.Trim() == "" || Water_Processing.Trim() == null || Water_Processing.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Water_Processing", SqlDbType.Decimal).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Water_Processing", SqlDbType.Decimal).Value = Decimal.Parse(Water_Processing.Trim());
    //            }

    //            if (Source_Water.Trim() == "" || Source_Water.Trim() == null || Source_Water.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Source_Water", SqlDbType.VarChar).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Source_Water", SqlDbType.VarChar).Value = Source_Water.Trim();
    //            }

    //            if (Requirement_Water.Trim() == "" || Requirement_Water.Trim() == null || Requirement_Water.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Requirement_Water", SqlDbType.Decimal).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Requirement_Water", SqlDbType.Decimal).Value = Decimal.Parse(Requirement_Water.Trim());
    //            }

    //            if (Quant_Water_Consumptive.Trim() == "" || Quant_Water_Consumptive.Trim() == null || Quant_Water_Consumptive.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Quant_Water_Consumptive", SqlDbType.Decimal).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Quant_Water_Consumptive", SqlDbType.Decimal).Value = Decimal.Parse(Quant_Water_Consumptive.Trim());
    //            }

    //            if (Quant_Water_NonConsumptive.Trim() == "" || Quant_Water_NonConsumptive.Trim() == null || Quant_Water_NonConsumptive.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Quant_Water_NonConsumptive", SqlDbType.Decimal).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Quant_Water_NonConsumptive", SqlDbType.Decimal).Value = Decimal.Parse(Quant_Water_NonConsumptive.Trim());
    //            }


    //            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
    //            }

    //            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
    //            }


    //            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
    //            }

    //            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
    //            }
    //            else
    //            {
    //                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
    //            }

    //            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


    //            if (n > 0)
    //            {
    //                return 1;
    //            }
    //            else
    //            {
    //                return 0;
    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            con.CloseConnection();
    //            throw ex;
    //        }
    //        finally
    //        {
    //            con.CloseConnection();
    //        }

    //    }
    //    #endregion
    #region Developed By Rajesh Patnaik
    public int InsertWaterDetails(string number, string intQuessionaireid, string intCFEEnterpid,
string Uid_No,
string Reg_Id,
string Water_Suply_From,
string Drink_Water,
string Water_Processing,
string Source_Water,
string Requirement_Water,
string Quant_Water_Consumptive,
string Quant_Water_NonConsumptive,
     string Created_by, string Created_dt, string Modified_by, string Modified_dt, string AreaName, QuesionerVO quesionervoobj,
     string IntakeCordinates, string StorageCordinates, string MinWaterReq, string MaxWaterReq)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_WaterDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (number.Trim() == "" || number.Trim() == null || number.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();
            }


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null || Uid_No.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = Int32.Parse(Uid_No.Trim());
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null || Reg_Id.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = Int32.Parse(Reg_Id.Trim());
            }

            if (Water_Suply_From.Trim() == "" || Water_Suply_From.Trim() == null || Water_Suply_From.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Water_Suply_From", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Water_Suply_From", SqlDbType.Int).Value = Int32.Parse(Water_Suply_From.Trim());
            }

            if (Drink_Water.Trim() == "" || Drink_Water.Trim() == null || Drink_Water.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Drink_Water", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Drink_Water", SqlDbType.Decimal).Value = Decimal.Parse(Drink_Water.Trim());
            }


            if (Water_Processing.Trim() == "" || Water_Processing.Trim() == null || Water_Processing.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Water_Processing", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Water_Processing", SqlDbType.Decimal).Value = Decimal.Parse(Water_Processing.Trim());
            }

            if (Source_Water.Trim() == "" || Source_Water.Trim() == null || Source_Water.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Source_Water", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Source_Water", SqlDbType.VarChar).Value = Source_Water.Trim();
            }

            if (Requirement_Water.Trim() == "" || Requirement_Water.Trim() == null || Requirement_Water.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Requirement_Water", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Requirement_Water", SqlDbType.Decimal).Value = Decimal.Parse(Requirement_Water.Trim());
            }

            if (Quant_Water_Consumptive.Trim() == "" || Quant_Water_Consumptive.Trim() == null || Quant_Water_Consumptive.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Quant_Water_Consumptive", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Quant_Water_Consumptive", SqlDbType.Decimal).Value = Decimal.Parse(Quant_Water_Consumptive.Trim());
            }

            if (Quant_Water_NonConsumptive.Trim() == "" || Quant_Water_NonConsumptive.Trim() == null || Quant_Water_NonConsumptive.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Quant_Water_NonConsumptive", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Quant_Water_NonConsumptive", SqlDbType.Decimal).Value = Decimal.Parse(Quant_Water_NonConsumptive.Trim());
            }


            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            if (AreaName.Trim() == "" || AreaName.Trim() == null || AreaName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AreaName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AreaName", SqlDbType.VarChar).Value = AreaName.Trim();
            }


            // added by shankar
            if (quesionervoobj.Water_req_Perday1 == "" || quesionervoobj.Water_req_Perday1 == null || quesionervoobj.Water_req_Perday1 == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Water_req_Perday1", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Water_req_Perday1", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday1.Trim();

            if (quesionervoobj.Water_req_Perday2 == "" || quesionervoobj.Water_req_Perday2 == null || quesionervoobj.Water_req_Perday2 == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Water_req_Perday2", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Water_req_Perday2", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday2.Trim();

            if (quesionervoobj.Water_req_Perday3 == "" || quesionervoobj.Water_req_Perday3 == null || quesionervoobj.Water_req_Perday3 == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Water_req_Perday3", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Water_req_Perday3", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday3.Trim();
            // end

            if (quesionervoobj.Water_reg_from1 == "" || quesionervoobj.Water_reg_from1 == null || quesionervoobj.Water_reg_from1 == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from1.Trim();

            if (quesionervoobj.Water_reg_from2 == "" || quesionervoobj.Water_reg_from2 == null || quesionervoobj.Water_reg_from2 == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from2.Trim();

            if (quesionervoobj.Water_reg_from3 == "" || quesionervoobj.Water_reg_from3 == null || quesionervoobj.Water_reg_from3 == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from3.Trim();
            if (IntakeCordinates.Trim() == "" || IntakeCordinates.Trim() == null || IntakeCordinates.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Irrg_IntakePointCordnats", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Irrg_IntakePointCordnats", SqlDbType.VarChar).Value = IntakeCordinates.Trim();
            }
            if (StorageCordinates.Trim() == "" || StorageCordinates.Trim() == null || StorageCordinates.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Irrg_StoragePointCordnats", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Irrg_StoragePointCordnats", SqlDbType.VarChar).Value = StorageCordinates.Trim();
            }
            if (MinWaterReq.Trim() == "" || MinWaterReq.Trim() == null || MinWaterReq.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Irrg_MinWaterReqPerAnnum", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Irrg_MinWaterReqPerAnnum", SqlDbType.VarChar).Value = MinWaterReq.Trim();
            }
            if (MaxWaterReq.Trim() == "" || MaxWaterReq.Trim() == null || MaxWaterReq.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Irrg_MaxWaterReqPerAnnum", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Irrg_MaxWaterReqPerAnnum", SqlDbType.VarChar).Value = MaxWaterReq.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    #endregion
    public DataSet RetriveFiredata(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("RetriveFireData", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    #region Developed By Rajesh Patnaik
    public int InsertFireDetails(string number, string intQuessionaireid, string intCFEEnterpid,
string Uid_No,
string Reg_Id,
string Hight_Building,
string Hight_EachFloor,
string Inter_Stairs,
string Exernal_Stairs,
string Width_Stairs,
string Width_Stairs1,
string NoofExits,
string Width_eachExit,
string Fire_East,
string Fire_West,
string Fire_South,
string Fire_North,
string Level_ground,
string Fire_Detection,
string Fire_Alaram,
string Sprinkler,
string Foam,
string CO2,
string DCP,
string Fire_Service_Inlet,
string Under_ground,
string Court_yard_hydrants,
string Fire_pumps_Electrical_15,
string Fire_pumps_Diesel,
string Fire_pumps_Electrical_30,
string Trolley_45,
string Fencing,
string SoakPit,
string Lightning_Prot,
string Cont_Room,
string Hydraulic_Platform,
     string Created_by, string Created_dt, string Modified_by, string Modified_dt, List<Stairecases> lststire, string frontsidedir, string HoseReel,
string WetRiser,
string DownCorner,
string YardHydrant,
string ManuallyOperatedelectricalfirealaramsystem,
string AutomaticDetectionSystem,
string Undergroundwatersump,
string TerraceTank,
string TerracePumps,
string Electricalpumps,
string DieselPumps,
string JockeyPumps, string NoofFireLifts
)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_FireDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (number.Trim() == "" || number.Trim() == null || number.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null || Uid_No.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = Int32.Parse(Uid_No.Trim());
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null || Reg_Id.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = Int32.Parse(Reg_Id.Trim());
            }

            //----------------------------------

            if (Hight_Building.Trim() == "" || Hight_Building.Trim() == null || Hight_Building.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.Decimal).Value = Decimal.Parse(Hight_Building.Trim());
            }

            if (Hight_EachFloor.Trim() == "" || Hight_EachFloor.Trim() == null || Hight_EachFloor.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_EachFloor", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_EachFloor", SqlDbType.Decimal).Value = Decimal.Parse(Hight_EachFloor.Trim());
            }

            if (Inter_Stairs.Trim() == "" || Inter_Stairs.Trim() == null || Inter_Stairs.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Inter_Stairs", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Inter_Stairs", SqlDbType.Decimal).Value = Decimal.Parse(Inter_Stairs.Trim());
            }

            if (Exernal_Stairs.Trim() == "" || Exernal_Stairs.Trim() == null || Exernal_Stairs.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Exernal_Stairs", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Exernal_Stairs", SqlDbType.Decimal).Value = Decimal.Parse(Exernal_Stairs.Trim());
            }

            if (Width_Stairs.Trim() == "" || Width_Stairs.Trim() == null || Width_Stairs.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_Stairs", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_Stairs", SqlDbType.Decimal).Value = Decimal.Parse(Width_Stairs.Trim());
            }

            if (Width_Stairs1.Trim() == "" || Width_Stairs1.Trim() == null || Width_Stairs1.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_Stairs1", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_Stairs1", SqlDbType.Decimal).Value = Decimal.Parse(Width_Stairs1.Trim());
            }

            if (NoofExits.Trim() == "" || NoofExits.Trim() == null || NoofExits.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@NoofExits", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@NoofExits", SqlDbType.Decimal).Value = Decimal.Parse(NoofExits.Trim());
            }

            if (Width_eachExit.Trim() == "" || Width_eachExit.Trim() == null || Width_eachExit.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_eachExit", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_eachExit", SqlDbType.Decimal).Value = Decimal.Parse(Width_eachExit.Trim());
            }

            if (Fire_East.Trim() == "" || Fire_East.Trim() == null || Fire_East.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_East", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_East", SqlDbType.Decimal).Value = Decimal.Parse(Fire_East.Trim());
            }

            if (Fire_West.Trim() == "" || Fire_West.Trim() == null || Fire_West.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_West", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_West", SqlDbType.Decimal).Value = Decimal.Parse(Fire_West.Trim());
            }

            if (Fire_South.Trim() == "" || Fire_South.Trim() == null || Fire_South.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_South", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_South", SqlDbType.Decimal).Value = Decimal.Parse(Fire_South.Trim());
            }

            if (Fire_North.Trim() == "" || Fire_North.Trim() == null || Fire_North.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_North", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_North", SqlDbType.Decimal).Value = Decimal.Parse(Fire_North.Trim());
            }
            //-------------------------------------

            //--------------------------------------
            if (Level_ground.Trim() == "" || Level_ground.Trim() == null || Level_ground.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Level_ground", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Level_ground", SqlDbType.Int).Value = Int32.Parse(Level_ground.Trim());
            }

            //---------------------------------------

            if (Fire_Detection.Trim() == "" || Fire_Detection.Trim() == null || Fire_Detection.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Detection", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Detection", SqlDbType.VarChar).Value = Fire_Detection.Trim();
            }

            if (Fire_Alaram.Trim() == "" || Fire_Alaram.Trim() == null || Fire_Alaram.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Alaram", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Alaram", SqlDbType.VarChar).Value = Fire_Alaram.Trim();
            }

            //-----------------------------------------
            if (Sprinkler.Trim() == "" || Sprinkler.Trim() == null || Sprinkler.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Sprinkler", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Sprinkler", SqlDbType.Char).Value = Char.Parse(Sprinkler.Trim());
            }

            if (Foam.Trim() == "" || Foam.Trim() == null || Foam.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Foam", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Foam", SqlDbType.Char).Value = Char.Parse(Foam.Trim());
            }


            if (CO2.Trim() == "" || CO2.Trim() == null || CO2.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@CO2", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@CO2", SqlDbType.Char).Value = Char.Parse(CO2.Trim());
            }


            if (DCP.Trim() == "" || DCP.Trim() == null || DCP.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@DCP", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@DCP", SqlDbType.Char).Value = Char.Parse(DCP.Trim());
            }


            if (Fire_Service_Inlet.Trim() == "" || Fire_Service_Inlet.Trim() == null || Fire_Service_Inlet.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Service_Inlet", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Service_Inlet", SqlDbType.Char).Value = Char.Parse(Fire_Service_Inlet.Trim());
            }


            //----------------------------------------

            //          @Trolley_45 char(1),
            //@Fencing char(1),
            //@SoakPit char(1),
            //@Lightning_Prot char(1),
            //@Cont_Room char(1),
            //@Hydraulic_Platform char(1),


            if (Trolley_45.Trim() == "" || Trolley_45.Trim() == null || Trolley_45.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Trolley_45", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Trolley_45", SqlDbType.Char).Value = Char.Parse(Trolley_45.Trim());
            }

            if (Fencing.Trim() == "" || Fencing.Trim() == null || Fencing.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fencing", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fencing", SqlDbType.Char).Value = Char.Parse(Fencing.Trim());
            }


            if (SoakPit.Trim() == "" || SoakPit.Trim() == null || SoakPit.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@SoakPit", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@SoakPit", SqlDbType.Char).Value = Char.Parse(SoakPit.Trim());
            }


            if (Lightning_Prot.Trim() == "" || Lightning_Prot.Trim() == null || Lightning_Prot.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Lightning_Prot", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Lightning_Prot", SqlDbType.Char).Value = Char.Parse(Lightning_Prot.Trim());
            }


            if (Cont_Room.Trim() == "" || Cont_Room.Trim() == null || Cont_Room.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Cont_Room", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Cont_Room", SqlDbType.Char).Value = Char.Parse(Cont_Room.Trim());
            }

            if (Hydraulic_Platform.Trim() == "" || Hydraulic_Platform.Trim() == null || Hydraulic_Platform.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hydraulic_Platform", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hydraulic_Platform", SqlDbType.Char).Value = Char.Parse(Hydraulic_Platform.Trim());
            }

            //--------------------------------------------
            //@Under_ground decimal(18, 2),
            //@Court_yard_hydrants decimal(18, 2),
            //@Fire_pumps_Electrical_15 decimal(18, 2),
            //@Fire_pumps_Diesel decimal(18, 2),
            //@Fire_pumps_Electrical_30 decimal(18, 2),



            if (Under_ground.Trim() == "" || Under_ground.Trim() == null || Under_ground.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Under_ground", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Under_ground", SqlDbType.Decimal).Value = Decimal.Parse(Under_ground.Trim());
            }

            if (Court_yard_hydrants.Trim() == "" || Court_yard_hydrants.Trim() == null || Court_yard_hydrants.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Court_yard_hydrants", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Court_yard_hydrants", SqlDbType.Decimal).Value = Decimal.Parse(Court_yard_hydrants.Trim());
            }

            if (Fire_pumps_Electrical_15.Trim() == "" || Fire_pumps_Electrical_15.Trim() == null || Fire_pumps_Electrical_15.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Electrical_15", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Electrical_15", SqlDbType.Decimal).Value = Decimal.Parse(Fire_pumps_Electrical_15.Trim());
            }

            if (Fire_pumps_Diesel.Trim() == "" || Fire_pumps_Diesel.Trim() == null || Fire_pumps_Diesel.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Diesel", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Diesel", SqlDbType.Decimal).Value = Decimal.Parse(Fire_pumps_Diesel.Trim());
            }

            if (Fire_pumps_Electrical_30.Trim() == "" || Fire_pumps_Electrical_30.Trim() == null || Fire_pumps_Electrical_30.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Electrical_30", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Electrical_30", SqlDbType.Decimal).Value = Decimal.Parse(Fire_pumps_Electrical_30.Trim());
            }

            if (frontsidedir.Trim() == "" || frontsidedir.Trim() == null || frontsidedir.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@frontsidedir", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@frontsidedir", SqlDbType.VarChar).Value = frontsidedir.Trim();
            }
            //----------------------------------------------

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            myDataAdapter.SelectCommand.Parameters.Add("@HoseReel", SqlDbType.VarChar).Value = HoseReel.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@WetRiser", SqlDbType.VarChar).Value = WetRiser.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@DownCorner", SqlDbType.VarChar).Value = DownCorner.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@YardHydrant", SqlDbType.VarChar).Value = YardHydrant.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@ManuallyOperatedelectricalfirealaramsystem", SqlDbType.VarChar).Value = ManuallyOperatedelectricalfirealaramsystem.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@AutomaticDetectionSystem", SqlDbType.VarChar).Value = AutomaticDetectionSystem.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@Undergroundwatersump", SqlDbType.VarChar).Value = Undergroundwatersump.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@TerraceTank", SqlDbType.VarChar).Value = TerraceTank.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@TerracePumps", SqlDbType.VarChar).Value = TerracePumps.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@Electricalpumps", SqlDbType.VarChar).Value = Electricalpumps.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@DieselPumps", SqlDbType.VarChar).Value = DieselPumps.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@JockeyPumps", SqlDbType.VarChar).Value = JockeyPumps.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@NoofFireLifts", SqlDbType.VarChar).Value = NoofFireLifts.Trim();


            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                int valid = 0;
                con.OpenConnection();
                SqlCommand cmd = null;

                foreach (Stairecases fromvo in lststire)
                {
                    cmd = new SqlCommand("USP_INSERT_StaireCases", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@intQuessionaireid", Convert.ToString(intQuessionaireid));
                    cmd.Parameters.AddWithValue("@intCFEEnterpid", Convert.ToString(intCFEEnterpid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Staireid", Convert.ToString(fromvo.Staireid));
                    cmd.Parameters.AddWithValue("@StaireName", Convert.ToString(fromvo.StaireName));
                    cmd.Parameters.AddWithValue("@NoofStairecases", Convert.ToString(fromvo.NoofStairecases));
                    cmd.Parameters.AddWithValue("@Width", Convert.ToString(fromvo.Width));
                    cmd.Parameters.AddWithValue("@id", Convert.ToString(fromvo.id));
                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(fromvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }
                return 1;

            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    #endregion
    //added by rajinikar
    public DataSet GetShowApprovalandFees_cinemalicense(string SerchVer, string EnterpriseType, string approvalfee, string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees_cinemalicense", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (approvalfee.Trim() == "" || approvalfee.Trim() == null)
                da.SelectCommand.Parameters.Add("@approvalfee", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@approvalfee", SqlDbType.VarChar).Value = approvalfee.ToString();

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet RetriveMiningData(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("RetriveMiningData", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public int InsertMiningDetails(string intQuessionaireid, string intCFEEnterpid,
string applicant_type,
string profession_type,
string gst,
string request_days,
string regional_office,
string land_categoery,
string compartment_number,
string division,
string range,
string id,
     string Created_by, string Modified_by, List<minerals> lstminerals)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertMiningDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }
            if (applicant_type.Trim() == "" || applicant_type.Trim() == null || applicant_type.Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Application_type", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Application_type", SqlDbType.VarChar).Value = applicant_type.ToString();

            if (profession_type.Trim() == "" || profession_type.Trim() == null || profession_type.Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@profession_type", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@profession_type", SqlDbType.VarChar).Value = profession_type.ToString();

            if (regional_office.Trim() == "" || regional_office.Trim() == null || regional_office.Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Regional_office", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Regional_office", SqlDbType.VarChar).Value = regional_office.ToString();

            if (land_categoery.Trim() == "" || land_categoery.Trim() == null || land_categoery.Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_categoery", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_categoery", SqlDbType.VarChar).Value = land_categoery.ToString();

            if (request_days.Trim() == "" || request_days.Trim() == null || request_days.Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Request_Days", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Request_Days", SqlDbType.VarChar).Value = request_days.ToString();

            if (gst.Trim() == "" || gst.Trim() == null)
                myDataAdapter.SelectCommand.Parameters.Add("@Gst_number", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Gst_number", SqlDbType.VarChar).Value = gst.ToString();

            if (compartment_number.Trim() == "" || compartment_number.Trim() == null)
                myDataAdapter.SelectCommand.Parameters.Add("@compartment_no", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@compartment_no", SqlDbType.VarChar).Value = compartment_number.ToString();

            if (division.Trim() == "" || division.Trim() == null)
                myDataAdapter.SelectCommand.Parameters.Add("@division", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@division", SqlDbType.VarChar).Value = division.ToString();

            if (range.Trim() == "" || range.Trim() == null)
                myDataAdapter.SelectCommand.Parameters.Add("@range", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@range", SqlDbType.VarChar).Value = range.ToString();

            if (id.Trim() == "" || id.Trim() == null)
                myDataAdapter.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = id.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }


            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                int valid = 0;
                con.OpenConnection();
                SqlCommand cmd = null;

                foreach (minerals fromvo in lstminerals)
                {
                    cmd = new SqlCommand("USP_INSERT_Minerals", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@intQuessionaireid", Convert.ToString(intQuessionaireid));
                    cmd.Parameters.AddWithValue("@intCFEEnterpid", Convert.ToString(intCFEEnterpid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Mineralid", Convert.ToString(fromvo.mineralid));
                    cmd.Parameters.AddWithValue("@Minerals", Convert.ToString(fromvo.mineral));
                    cmd.Parameters.AddWithValue("@Quantity", Convert.ToString(fromvo.quantity));
                    cmd.Parameters.AddWithValue("@UnitsId", Convert.ToString(fromvo.unitid));
                    cmd.Parameters.AddWithValue("@Units", Convert.ToString(fromvo.units));
                    cmd.Parameters.AddWithValue("@id", Convert.ToString(fromvo.id));
                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(fromvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }
                return 1;

            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetShowApprovalandFeesPCB(string SerchVer, string EnterpriseType, string Pol_Category, string GeneratorType, string Val_Plant)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesPCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (Pol_Category.Trim() == "" || Pol_Category.Trim() == null)
                da.SelectCommand.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.ToString();

            if (GeneratorType.Trim() == "" || GeneratorType.Trim() == null)
                da.SelectCommand.Parameters.Add("@GeneratorType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@GeneratorType", SqlDbType.VarChar).Value = GeneratorType.ToString();

            if (Val_Plant.Trim() == "" || Val_Plant.Trim() == null)
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.Decimal).Value = Convert.ToDecimal(Val_Plant.ToString());



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesPCBNewDB(string SerchVer, string EnterpriseType, string Pol_Category, string GeneratorType, string Val_Plant)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesPCBNewDB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (Pol_Category.Trim() == "" || Pol_Category.Trim() == null)
                da.SelectCommand.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.ToString();

            if (GeneratorType.Trim() == "" || GeneratorType.Trim() == null)
                da.SelectCommand.Parameters.Add("@GeneratorType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@GeneratorType", SqlDbType.VarChar).Value = GeneratorType.ToString();

            if (Val_Plant.Trim() == "" || Val_Plant.Trim() == null)
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.Decimal).Value = Convert.ToDecimal(Val_Plant.ToString());



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesHWS(string SerchVer, string EnterpriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesHWS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetShowApprovalandFeesHMDACLUandBuilding(string SerchVer, string EnterpriseType, string ApplType, string TotExtent, string TotHight)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesHMDACLUandBuilding", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (ApplType.Trim() == "" || ApplType.Trim() == null)
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.ToString();


            if (TotExtent.Trim() == "" || TotExtent.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.Decimal).Value = Convert.ToDecimal(TotExtent.ToString());



            if (TotHight.Trim() == "" || TotHight.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.Decimal).Value = Convert.ToDecimal(TotHight.ToString());






            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getStatesotherthanTG()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getstatesOtherthanTg", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet ViewAttachmetsData(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveAttachmentsByCFEID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet ApprovalViewAttachmetsData(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[sp_RetriveAttachmentsByCFEID_Approvals]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet GetShowApprovalandFeesHMDACLUandBuildingBoth(string SerchVer, string EnterpriseType, string ApplType, string TotExtent, string TotHight)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesHMDACLUandBuildingBoth", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (ApplType.Trim() == "" || ApplType.Trim() == null)
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.ToString();


            if (TotExtent.Trim() == "" || TotExtent.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.Decimal).Value = Convert.ToDecimal(TotExtent.ToString());



            if (TotHight.Trim() == "" || TotHight.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.Decimal).Value = Convert.ToDecimal(TotHight.ToString());






            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesHMDACLUandGHMCBuildingBoth(string SerchVer, string EnterpriseType, string ApplType, string TotExtent, string TotHight)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesHMDACLUandGHMCBuildingBoth", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (ApplType.Trim() == "" || ApplType.Trim() == null)
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.ToString();


            if (TotExtent.Trim() == "" || TotExtent.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.Decimal).Value = Convert.ToDecimal(TotExtent.ToString());



            if (TotHight.Trim() == "" || TotHight.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.Decimal).Value = Convert.ToDecimal(TotHight.ToString());






            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetEnterincetrackerForLatestDetailsUpdation(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("INCENTIVES_APPLICATION_FOR_LATESTDTLS_UPDATION", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = IncentiveID.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetAgreementUploadedFlag(string incentiveID, string MstIds)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_AGREEMENTBOND_UPLOADEDFLAG]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MstIds;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetAgreementAttachmetsData(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetattachmentAgreement", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (incentiveID.Trim() == "" || incentiveID.Trim() == null)
                da.SelectCommand.Parameters.Add("@incId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@incId", SqlDbType.VarChar).Value = incentiveID.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int InsertUnitLatestDetails(UnitLatest unitLatest, string IPAddress)
    {
        int valid = 0;

        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_INS_UNIT_LATESTDETAILS", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("IncentiveId", unitLatest.IncentiveId);
            cmd.Parameters.AddWithValue("MstIncentiveID", unitLatest.MstIncentiveID);
            cmd.Parameters.AddWithValue("BankChange_Flag", unitLatest.BankChange_Flag);
            cmd.Parameters.AddWithValue("ManageChange_Flag", unitLatest.ManageChange_Flag);
            cmd.Parameters.AddWithValue("Break_Flag", unitLatest.Break_Flag);
            cmd.Parameters.AddWithValue("Sick_Flag", unitLatest.Sick_Flag);
            cmd.Parameters.AddWithValue("LocChange_Flag", unitLatest.LocChange_Flag);
            cmd.Parameters.AddWithValue("LOAChange_Flag", unitLatest.LOAChange_Flag);
            cmd.Parameters.AddWithValue("OthersChange_Flag", unitLatest.OthersChange_Flag);
            cmd.Parameters.AddWithValue("Bank_Name", unitLatest.Bank_Name);
            cmd.Parameters.AddWithValue("Branch_Name", unitLatest.Branch_Name);
            cmd.Parameters.AddWithValue("AccountNo", unitLatest.AccountNo);
            cmd.Parameters.AddWithValue("IFSC_Cd", unitLatest.IFSC_Cd);
            cmd.Parameters.AddWithValue("Account_Type", unitLatest.Account_Type);
            cmd.Parameters.AddWithValue("Bank_Remarks", unitLatest.Bank_Remarks);
            cmd.Parameters.AddWithValue("ManageChange", unitLatest.directorDropped);
            cmd.Parameters.AddWithValue("Break_FromDt", unitLatest.Break_FromDt);
            cmd.Parameters.AddWithValue("Sickness", unitLatest.Sickness);
            cmd.Parameters.AddWithValue("Distrctcd", unitLatest.Distrctcd);
            cmd.Parameters.AddWithValue("MandalCd", unitLatest.MandalCd);
            cmd.Parameters.AddWithValue("VillageCd", unitLatest.VillageCd);
            cmd.Parameters.AddWithValue("LOA", unitLatest.LOA);
            cmd.Parameters.AddWithValue("Other_remarks", unitLatest.Other_remarks);
            cmd.Parameters.AddWithValue("CrtdUser", unitLatest.CrtdUser);
            cmd.Parameters.AddWithValue("AgreementBond", unitLatest.AgreementBond);
            cmd.Parameters.AddWithValue("AssignmentLetter", unitLatest.AssignmentLetter);
            cmd.Parameters.AddWithValue("directorAdded", unitLatest.directorAdded);
            cmd.Parameters.AddWithValue("IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }

    public DataSet GetShowApprovalandFeesNALA_newdharani(string SerchVer, string EnterpriseType, string intDistrictid, string marketvalue, string cost,string intmandalid,string userid)
    {
        // 28 feb 2022 added
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesNALA_26022022", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (marketvalue.Trim() == "" || marketvalue.Trim() == null)
                da.SelectCommand.Parameters.Add("@MarketValue", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@MarketValue", SqlDbType.VarChar).Value = marketvalue.ToString();

            if (cost.Trim() == "" || cost.Trim() == null)
                da.SelectCommand.Parameters.Add("@cost", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@cost", SqlDbType.VarChar).Value = cost.ToString();

            if (intmandalid.Trim() == "" || intmandalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intmandalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intmandalid", SqlDbType.VarChar).Value = intmandalid.ToString();
            if (userid.Trim() == "" || userid.Trim() == null)
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = userid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesNALA(string SerchVer, string EnterpriseType, string intDistrictid, string marketvalue, string cost, string intmandalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesNALA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (marketvalue.Trim() == "" || marketvalue.Trim() == null)
                da.SelectCommand.Parameters.Add("@MarketValue", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@MarketValue", SqlDbType.VarChar).Value = marketvalue.ToString();

            if (cost.Trim() == "" || cost.Trim() == null)
                da.SelectCommand.Parameters.Add("@cost", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@cost", SqlDbType.VarChar).Value = cost.ToString();

            if (intmandalid.Trim() == "" || intmandalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intmandalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intmandalid", SqlDbType.VarChar).Value = intmandalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertQuetieneroes(string intQuessionaireid, string Const_of_unit, string Sector_Ent, string Tot_Extent, string Prop_intDistrictid, string Prop_intMandalid, string Prop_intVillageid, string Prop_Emp, string Val_Land, string Val_Build, string Val_Plant, string Tot_PrjCost, string Ent_is, string
                        intLineofActivity, string Pol_Indus, string Pol_Category, string Power_Req, string Loc_of_unit, string Water_req_Perday, string Water_reg_from1, string Water_reg_from2, string Water_reg_from3, string Do_Store_Kerosine, string Gen_Reqired, string Hight_Build, string
                        Built_up_Area, string Fall_in_Municipal, string Prop_Site, string Appl_Status, string Appl_no, string Created_by, string NoofTrees, string Appl_Type)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertQuestioneries";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (Const_of_unit == "" || Const_of_unit == null || Const_of_unit == "--Select--")
            com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = Const_of_unit.Trim();

        if (Sector_Ent == "" || Sector_Ent == null || Sector_Ent == "--Select--")
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();

        if (Tot_Extent == "" || Tot_Extent == null || Tot_Extent == "--Select--")
            com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = Tot_Extent.Trim();

        if (Prop_intDistrictid == "" || Prop_intDistrictid == null || Prop_intDistrictid == "--Select--")
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = Prop_intDistrictid.Trim();

        if (Prop_intMandalid == "" || Prop_intMandalid == null || Prop_intMandalid == "--Select--")
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = Prop_intMandalid.Trim();

        if (Prop_intVillageid == "" || Prop_intVillageid == null || Prop_intVillageid == "--Select--")
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = Prop_intVillageid.Trim();

        if (Prop_Emp == "" || Prop_Emp == null || Prop_Emp == "--Select--")
            com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = Prop_Emp.Trim();

        if (Val_Land == "" || Val_Land == null || Val_Land == "--Select--")
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();

        if (Val_Build == "" || Val_Build == null || Val_Build == "--Select--")
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();

        if (Val_Plant == "" || Val_Plant == null || Val_Plant == "--Select--")
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();

        if (Tot_PrjCost == "" || Tot_PrjCost == null || Tot_PrjCost == "--Select--")
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();

        if (Ent_is == "" || Ent_is == null || Ent_is == "--Select--")
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = Ent_is.Trim();

        if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

        if (Pol_Indus == "" || Pol_Indus == null || Pol_Indus == "--Select--")
            com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = Pol_Indus.Trim();

        if (Pol_Category == "" || Pol_Category == null || Pol_Category == "--Select--")
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();

        if (Power_Req == "" || Power_Req == null || Power_Req == "--Select--")
            com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = Power_Req.Trim();

        if (Loc_of_unit == "" || Loc_of_unit == null || Loc_of_unit == "--Select--")
            com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = Loc_of_unit.Trim();

        if (Water_req_Perday == "" || Water_req_Perday == null || Water_req_Perday == "--Select--")
            com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = Water_req_Perday.Trim();

        if (Water_reg_from1 == "" || Water_reg_from1 == null || Water_reg_from1 == "--Select--")
            com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = Water_reg_from1.Trim();

        if (Water_reg_from2 == "" || Water_reg_from2 == null || Water_reg_from2 == "--Select--")
            com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = Water_reg_from2.Trim();

        if (Water_reg_from3 == "" || Water_reg_from3 == null || Water_reg_from3 == "--Select--")
            com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = Water_reg_from3.Trim();

        if (Do_Store_Kerosine == "" || Do_Store_Kerosine == null || Do_Store_Kerosine == "--Select--")
            com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = Do_Store_Kerosine.Trim();

        if (Gen_Reqired == "" || Gen_Reqired == null || Gen_Reqired == "--Select--")
            com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = Gen_Reqired.Trim();

        if (Hight_Build == "" || Hight_Build == null || Hight_Build == "--Select--")
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = Hight_Build.Trim();


        if (Built_up_Area == "" || Built_up_Area == null || Built_up_Area == "--Select--")
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = Built_up_Area.Trim();


        if (Fall_in_Municipal == "" || Fall_in_Municipal == null || Fall_in_Municipal == "--Select--")
            com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = Fall_in_Municipal.Trim();


        if (Prop_Site == "" || Prop_Site == null || Prop_Site == "--Select--")
            com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = Prop_Site.Trim();


        if (Appl_Status == "" || Appl_Status == null || Appl_Status == "--Select--")
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = Appl_Status.Trim();
        if (Appl_no == "" || Appl_no == null || Appl_no == "--Select--")
            com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = Appl_no.Trim();


        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (NoofTrees == "" || NoofTrees == null || NoofTrees == "--Select--")
            com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = NoofTrees.Trim();
        if (Appl_Type == "" || Appl_Type == null || Appl_Type == "--Select--")
            com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = Appl_Type.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetShowQuestionaries(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowQuestionaries", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowAttachment(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowAttachment", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPreneurdatabyQue(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerdatabyQues", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }



    public DataSet GetEnterPreneurdatabyQue1(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerdatabyQues1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }




    public DataSet GetDistrictsWithoutHYD()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictsHYD", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int insertDepartmentAprrovalNew(string intQuessionaireid, string intDeptid, string intApprovalid, string Approval_Fee, string IsPayment, string Created_by, string IsOffline)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insDepartmentApprovals";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = Approval_Fee.Trim();

        if (IsPayment == "" || IsPayment == null)
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (IsOffline == "" || IsOffline == null)
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();





        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetQuestionaryAprovalsApplyData(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQuestionaryAprovalsApplyData", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetEnterPreniourPayDetailsAddtionalPayment(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetEnterPreniourPayDetails_AddtionalPayment]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPreniourPayDetailsAddtionalPaymentCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetEnterPreniourPayDetails_AddtionalPaymentCFO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPreniourPayDetails(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet sp_GetReport(string Category, string Department)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("sp_GetReport", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;



    //        if (Category.Trim() == "" || Category.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

    //        if (Department.Trim() == "" || Department.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    #region Developed By Rajesh Patnaik
    public int InsertImagedata(string intQuessionaireid, string intCFEid, string FileType, string FilePath, string FileName, string FileDescription,
     string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertImage", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEid.Trim() == "" || intCFEid.Trim() == null || intCFEid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = Int32.Parse(intCFEid.Trim());
            }



            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (FileDescription.Trim() == "" || FileDescription.Trim() == null || FileDescription.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }

            if (bu.Trim() == "" || bu.Trim() == null || bu.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = bu.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }

    public int InsertImagedataCFO(string intQuessionaireid, string intCFEid, string FileType, string FilePath, string FileName, string FileDescription,
     string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertImageCFO", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEid.Trim() == "" || intCFEid.Trim() == null || intCFEid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = Int32.Parse(intCFEid.Trim());
            }



            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (FileDescription.Trim() == "" || FileDescription.Trim() == null || FileDescription.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }

            if (bu.Trim() == "" || bu.Trim() == null || bu.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = bu.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }


    public int InsertImagedataApproval(string intQuessionaireid, string intCFEid, string FileType, string FilePath, string FileName, string FileDescription,
     string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string intDeptid, string intApprovalid)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertImageApproval", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }




            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEid.Trim() == "" || intCFEid.Trim() == null || intCFEid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = Int32.Parse(intCFEid.Trim());
            }



            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (FileDescription.Trim() == "" || FileDescription.Trim() == null || FileDescription.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }

            if (bu.Trim() == "" || bu.Trim() == null || bu.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = bu.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }
    #endregion

    public DataSet sp_TSIPASSApprovals(string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_TSIPASSApprovalsNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RptAPPROVALSBYDEPARTMENTWISE(string Category, string Department)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("RptAPPROVALSBYDEPARTMENTWISE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RptNALAAPPROVALSDISTRICTWISE(string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FetchNALADISTRICTWise", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDeptPendency(string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDeptPendency", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDistrictWiseCertificate(string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictWisereportCertificate", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDeptPendencyDetailed(string Department)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDeptPendencyDrildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@intdept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intdept", SqlDbType.VarChar).Value = Department.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet RptAPPROVALSBYDEPARTMENTWISECFO(string Category, string Department)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        // da = new SqlDataAdapter("RptAPPROVALSBYDEPARTMENTWISECFO", con.GetConnection);
    //        da = new SqlDataAdapter("RptAPPROVALSBYDEPARTMENTWISENew_CFO", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;



    //        if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
    //            da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

    //        if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
    //            da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    public DataSet RptAPPROVALSBYDEPARTMENTWISECFO(string Category, string Department, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("RptAPPROVALSBYDEPARTMENTWISECFO", con.GetConnection);
            da = new SqlDataAdapter("RptAPPROVALSBYDEPARTMENTWISENew_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetShowDistrictwiseDataExisting(string District, string Category, string caste, string PCB, string currentstatus, string diffable, string womentype, string muslim)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDistrictwiseDataExisting", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            if (caste.Trim() == "" || caste.Trim() == null || caste.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@caste", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@caste", SqlDbType.VarChar).Value = caste.ToString();

            if (PCB.Trim() == "" || PCB.Trim() == null || PCB.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@pcb", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@pcb", SqlDbType.VarChar).Value = PCB.ToString();

            if (currentstatus.Trim() == "" || currentstatus.Trim() == null || currentstatus.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@currentstatus", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@currentstatus", SqlDbType.VarChar).Value = currentstatus.ToString();



            if (diffable.Trim() == "" || diffable.Trim() == null || diffable.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@diffable", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@diffable", SqlDbType.VarChar).Value = diffable.ToString();


            if (womentype.Trim() == "" || womentype.Trim() == null || womentype.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@womentype", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@womentype", SqlDbType.VarChar).Value = womentype.ToString();

            if (muslim.Trim() == "" || muslim.Trim() == null || muslim.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@muslim", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@muslim", SqlDbType.VarChar).Value = muslim.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet sp_DepartmentWiseReport(string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("FetchDepartmentWise", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet sp_DepartmentWiseReportCFO(string Category, string District)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
    //        // da = new SqlDataAdapter("FetchDepartmentWiseCFO", con.GetConnection);
    //        da = new SqlDataAdapter("FetchDepartmentWiseNew_CFO", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;



    //        if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
    //            da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

    //        if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    public DataSet sp_DepartmentWiseReportCFO(string Category, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            // da = new SqlDataAdapter("FetchDepartmentWiseCFO", con.GetConnection);
            da = new SqlDataAdapter("FetchDepartmentWiseNew_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public DataSet ViewAttachmetsData(string intEnterprenuerid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("sp_RetriveAttachmentsByCFEID", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }

    //}

    //-------------------------------------------------------

    public DataSet GetAdditonalAttachmets(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetAdditionalAttachments", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetR1ReportbyDistrictid(string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1ReportbyDistrictid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetR1ReportbyDistrictidCFO(string intDistrictid, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("GetR1ReportbyDistrictidCFO", con.GetConnection);
            da = new SqlDataAdapter("[GetR1ReportbyDistrictid_New_CFO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.SelectCommand.CommandTimeout = 950;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetdataofApprovaldataAproval(string enterprenuer)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyidAprovals", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public DataSet GetdataofApprovaldataAprovalbyID(string enterprenuer, string intDeptid)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyidAprovalsNew", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }



            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public DataSet getApprovalDocumentDetails(string enterprenuerUID, string ApprovalID)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getApprovalDocumentDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuerUID.Trim() == "" || enterprenuerUID.Trim() == null || enterprenuerUID.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = enterprenuerUID.Trim();
            }

            if (ApprovalID.Trim() == "" || ApprovalID.Trim() == null || ApprovalID.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ApprovalID", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ApprovalID", SqlDbType.VarChar).Value = ApprovalID.Trim();
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public DataSet getApprovalDocumentDetailsCFO(string enterprenuerUID, string ApprovalID)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getApprovalDocumentDetailsCFO", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuerUID.Trim() == "" || enterprenuerUID.Trim() == null || enterprenuerUID.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = enterprenuerUID.Trim();
            }

            if (ApprovalID.Trim() == "" || ApprovalID.Trim() == null || ApprovalID.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ApprovalID", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ApprovalID", SqlDbType.VarChar).Value = ApprovalID.Trim();
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }




    public int UpdDepartmentAprrovalNew(string intQuessionaireid, string intDeptid, string intApprovalid, string Approval_Fee, string IsPayment, string Created_by, string IsOffline)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdDepartmentAprrovalNew";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = Approval_Fee.Trim();

        if (IsPayment == "" || IsPayment == null)
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (IsOffline == "" || IsOffline == null)
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet ValidateLogin(string UserID, String Password)//,string Dept
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {

            da = new SqlDataAdapter("sp_ValidUser", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UserID.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
            }
            if (Password.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = Password.ToString();
            }

            //if (Dept.ToString() == "" || Dept.ToString()==null)
            //{
            //    da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = DBNull.Value;
            //}
            //else
            //{
            //    da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();
            //}

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet ValidateLoginNew(string UserID, string Password, string Encpassword)//,string Dept
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {

            da = new SqlDataAdapter("sp_ValidUser", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UserID.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
            }
            if (Password.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = Password.ToString();
            }
            if (Encpassword.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@Encpassword", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@Encpassword", SqlDbType.VarChar).Value = Encpassword.ToString();
            }

            //if (Dept.ToString() == "" || Dept.ToString()==null)
            //{
            //    da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = DBNull.Value;
            //}
            //else
            //{
            //    da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();
            //}
            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet ValidateEmail(string Email, string MobileNo, string userid)
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {

            da = new SqlDataAdapter("sp_ValidEmail", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Email.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@email", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@email", SqlDbType.VarChar).Value = Email.ToString();
            }

            if (MobileNo.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@mobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@mobileNo", SqlDbType.VarChar).Value = MobileNo.ToString();
            }
            if (userid.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = userid.ToString();
            }

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }



    public int InsertPaymentDisbusment(string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string IsActive, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentDisbusment";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());



        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();

        if (IsActive.ToString().Trim() == "" || IsActive.ToString().Trim() == null)
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = IsActive.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public int InsertPaymentDisbusmentSBI(string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string IsActive, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentDisbusmentSBI";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());



        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();

        if (IsActive.ToString().Trim() == "" || IsActive.ToString().Trim() == null)
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = IsActive.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public DataSet getEnterprenuerdashboarddrilldownCFO(string intEntid, string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerdashboarddrilldownCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (intEntid.Trim() == "" || intEntid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = intEntid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetRespondQueryStatusCFO(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = User_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentDashboardDetailsCFO(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("sp_GetDepartmentDashboardDetailsCFO", con.GetConnection);
            da = new SqlDataAdapter("[sp_GetDepartmentDashboardDetails_CFO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterpreneourDashboardDetailsCFO(string intEntid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetEnterpreneourDashboardDetailsCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intEntid.Trim() == "" || intEntid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = intEntid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

//    public int insetEnterprenuerdataCFO(string @intCFOEnterpid,
//         string intQuessionaireCFOid,
//         string intQuessionaireid,
//         string NameofIndustrialUnder,
//         string NameofthePromoter,
//         string SoWo,
//         string Age,
//         string Occupation,
//         string intStateid,
//         string intDistrictid,
//         string intMandalid,
//         string intVillageid,
//         string StreetName,
//         string Door_No,
//         string Land_Mark,
//         string Pincode,
//         string MobileNumber,
//         string Email,
//         string Fax,
//         string intTypeofOrganization,
//         string TelephoneNumber,
//         string AdultMale,
//         string AdultFemale,
//         string Adolescents_Male,
//         string Adolescents_Female,
//         string Children_Male,
//         string Children_Female,
//         string intCategoryofReg,
//         string Reg_No,
//         string Reg_Date,
//         string Reg_ExpDate,
//         string TypeofFactory,
//         string Reg_id,
//         string UID_No,
//         string Created_by,
//      string @Modified_by, string DistrictName, string Mandalname, string VillageName, string diffabled, string WomenEnterprenuer, string Minority, string Hight_Build, string Built_up_Area
//        , string SurveyNo,
//string Land_intDistrictid,
//string Land_intMandalid,
//string Land_intVillageid,
//string Name_Gramapachayat,
//string Land_Pincode
//        )
//    {


//        SqlCommand com = new SqlCommand();
//        com.CommandType = CommandType.StoredProcedure;
//        com.CommandText = "insertEnterPrenuerdetailsCFO";

//        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null || intCFOEnterpid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "0";
//        else
//            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

//        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null || intCFOEnterpid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

//        if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null || intQuessionaireid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


//        if (DistrictName.ToString().Trim() == "" || DistrictName.ToString().Trim() == null || DistrictName.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@DistrictName", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@DistrictName", SqlDbType.VarChar).Value = DistrictName.Trim();
//        if (diffabled.ToString().Trim() == "" || diffabled.ToString().Trim() == null || diffabled.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@diffabled", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@diffabled", SqlDbType.VarChar).Value = diffabled.Trim();

//        if (WomenEnterprenuer.ToString().Trim() == "" || WomenEnterprenuer.ToString().Trim() == null || WomenEnterprenuer.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@WomenEnterprenuer", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@WomenEnterprenuer", SqlDbType.VarChar).Value = WomenEnterprenuer.Trim();


//        if (Minority.ToString().Trim() == "" || Minority.ToString().Trim() == null || Minority.ToString().Trim() == "--Select--")

//            com.Parameters.Add("@Minority", SqlDbType.VarChar).Value = DBNull.Value;

//        else
//            com.Parameters.Add("@Minority", SqlDbType.VarChar).Value = Minority.Trim();

//        if (Hight_Build == "" || Hight_Build == null || Hight_Build == "--Select--")
//            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = Hight_Build.Trim();


//        if (Built_up_Area == "" || Built_up_Area == null || Built_up_Area == "--Select--")
//            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = Built_up_Area.Trim();




//        if (Mandalname.ToString().Trim() == "" || Mandalname.ToString().Trim() == null || Mandalname.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Mandalname", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Mandalname", SqlDbType.VarChar).Value = Mandalname.Trim();



//        if (VillageName.ToString().Trim() == "" || VillageName.ToString().Trim() == null || VillageName.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@VillageName", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@VillageName", SqlDbType.VarChar).Value = VillageName.Trim();

//        if (NameofIndustrialUnder.ToString().Trim() == "" || NameofIndustrialUnder.ToString().Trim() == null || NameofIndustrialUnder.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = NameofIndustrialUnder.Trim();

//        if (NameofthePromoter.ToString().Trim() == "" || NameofthePromoter.ToString().Trim() == null || NameofthePromoter.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = NameofthePromoter.Trim();

//        if (SoWo.ToString().Trim() == "" || SoWo.ToString().Trim() == null || SoWo.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = SoWo.Trim();

//        if (Age.ToString().Trim() == "" || Age.ToString().Trim() == null || Age.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Age", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Age", SqlDbType.VarChar).Value = Age.Trim();

//        //if (Age.ToString().Trim() == "" || Age.ToString().Trim() == null)
//        //    com.Parameters.Add("@Age", SqlDbType.VarChar).Value = DBNull.Value;
//        //else
//        //    com.Parameters.Add("@Age", SqlDbType.VarChar).Value = Age.Trim();

//        if (Occupation.ToString().Trim() == "" || Occupation.ToString().Trim() == null || Occupation.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Occupation", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Occupation", SqlDbType.VarChar).Value = Occupation.Trim();

//        if (intStateid.ToString().Trim() == "" || intStateid.ToString().Trim() == null || intStateid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

//        if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

//        if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

//        if (intVillageid.ToString().Trim() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();

//        if (StreetName.ToString().Trim() == "" || StreetName.ToString().Trim() == null)
//            com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = StreetName.Trim();

//        if (Door_No.ToString().Trim() == "" || Door_No.ToString().Trim() == null)
//            com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = Door_No.Trim();

//        if (Land_Mark.ToString().Trim() == "" || Land_Mark.ToString().Trim() == null)
//            com.Parameters.Add("@Land_Mark", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Land_Mark", SqlDbType.VarChar).Value = Land_Mark.Trim();

//        if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null)
//            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

//        if (MobileNumber.ToString().Trim() == "" || MobileNumber.ToString().Trim() == null)
//            com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();

//        if (Email.ToString().Trim() == "" || Email.ToString().Trim() == null)
//            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

//        if (Fax.ToString().Trim() == "" || Fax.ToString().Trim() == null)
//            com.Parameters.Add("@Fax", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Fax", SqlDbType.VarChar).Value = Fax.Trim();

//        if (intTypeofOrganization.ToString().Trim() == "" || intTypeofOrganization.ToString().Trim() == null || intTypeofOrganization.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = intTypeofOrganization.Trim();

//        if (TelephoneNumber.ToString().Trim() == "" || TelephoneNumber.ToString().Trim() == null)
//            com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = TelephoneNumber.Trim();

//        if (AdultMale.ToString().Trim() == "" || AdultMale.ToString().Trim() == null)
//            com.Parameters.Add("@AdultMale", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@AdultMale", SqlDbType.VarChar).Value = AdultMale.Trim();

//        if (AdultFemale.ToString().Trim() == "" || AdultFemale.ToString().Trim() == null)
//            com.Parameters.Add("@AdultFemale", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@AdultFemale", SqlDbType.VarChar).Value = AdultFemale.Trim();

//        if (Adolescents_Male.ToString().Trim() == "" || Adolescents_Male.ToString().Trim() == null)
//            com.Parameters.Add("@Adolescents_Male", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Adolescents_Male", SqlDbType.VarChar).Value = Adolescents_Male.Trim();

//        if (Adolescents_Female.ToString().Trim() == "" || Adolescents_Female.ToString().Trim() == null)
//            com.Parameters.Add("@Adolescents_Female", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Adolescents_Female", SqlDbType.VarChar).Value = Adolescents_Female.Trim();

//        if (Children_Male.ToString().Trim() == "" || Children_Male.ToString().Trim() == null)
//            com.Parameters.Add("@Children_Male", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Children_Male", SqlDbType.VarChar).Value = Children_Male.Trim();

//        if (Children_Female.ToString().Trim() == "" || Children_Female.ToString().Trim() == null)
//            com.Parameters.Add("@Children_Female", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Children_Female", SqlDbType.VarChar).Value = Children_Female.Trim();

//        if (intCategoryofReg.ToString().Trim() == "" || intCategoryofReg.ToString().Trim() == null || intCategoryofReg.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = intCategoryofReg.Trim();

//        if (Reg_No.ToString().Trim() == "" || Reg_No.ToString().Trim() == null)
//            com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = Reg_No.Trim();

//        if (Reg_Date.ToString().Trim() == "" || Reg_Date.ToString().Trim() == null || Reg_Date.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_Date.Trim());

//        if (Reg_ExpDate.ToString().Trim() == "" || Reg_ExpDate.ToString().Trim() == null || Reg_ExpDate.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Reg_ExpDate", SqlDbType.DateTime).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Reg_ExpDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_ExpDate.Trim());

//        if (TypeofFactory.ToString().Trim() == "" || TypeofFactory.ToString().Trim() == null || TypeofFactory.ToString().Trim() == "--Select Proposal--" || TypeofFactory.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = TypeofFactory.Trim();

//        if (Reg_id.ToString().Trim() == "" || Reg_id.ToString().Trim() == null || Reg_id.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = Reg_id.Trim();

//        if (UID_No.ToString().Trim() == "" || UID_No.ToString().Trim() == null || UID_No.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.Trim();

//        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null || Created_by.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

//        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null || Modified_by.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Modified_by ", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Modified_by ", SqlDbType.VarChar).Value = Modified_by.Trim();
//        /////// Added by madhuri on 12/09/2017///////////////

//        if (SurveyNo.ToString().Trim() == "" || SurveyNo.ToString().Trim() == null || SurveyNo.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = SurveyNo.Trim();

//        if (Land_intDistrictid.ToString().Trim() == "" || Land_intDistrictid.ToString().Trim() == null || Land_intDistrictid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = Land_intDistrictid.Trim();

//        if (Land_intMandalid.ToString().Trim() == "" || Land_intMandalid.ToString().Trim() == null || Land_intMandalid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = Land_intMandalid.Trim();

//        if (Land_intVillageid.ToString().Trim() == "" || Land_intVillageid.ToString().Trim() == null || Land_intVillageid.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = Land_intVillageid.Trim();

//        if (Name_Gramapachayat.ToString().Trim() == "" || Name_Gramapachayat.ToString().Trim() == null || Name_Gramapachayat.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = Name_Gramapachayat.Trim();

//        if (Land_Pincode.ToString().Trim() == "" || Land_Pincode.ToString().Trim() == null || Land_Pincode.ToString().Trim() == "--Select--")
//            com.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = DBNull.Value;
//        else
//            com.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = Land_Pincode.Trim();
//        //---------------------------------------------------------------------------------------------------------------
//        con.OpenConnection();
//        com.Connection = con.GetConnection;

//        try
//        {
//            //return Convert.ToInt32(com.ExecuteScalar());
//            //if (returnvalue == DBNull.Value || returnvalue == null)
//            //    return 0;
//            //else
//            //    return Convert.ToInt32(returnvalue);

//            object returnvalue = com.ExecuteScalar();
//            if (returnvalue == DBNull.Value || returnvalue == null)
//                return 0;
//            else
//                return Convert.ToInt32(returnvalue);

//        }
//        catch (Exception ex)
//        {
//            throw ex;
//            //return 0;
//            return 0;
//        }
//        finally
//        {
//            com.Dispose();
//            con.CloseConnection();
//        }
//    }
    public int insetEnterprenuerdataCFO(string @intCFOEnterpid,
        string intQuessionaireCFOid,
        string intQuessionaireid,
        string NameofIndustrialUnder,
        string NameofthePromoter,
        string SoWo,
        string Age,
        string Occupation,
        string intStateid,
        string intDistrictid,
        string intMandalid,
        string intVillageid,
        string StreetName,
        string Door_No,
        string Land_Mark,
        string Pincode,
        string MobileNumber,
        string Email,
        string Fax,
        string intTypeofOrganization,
        string TelephoneNumber,
        string AdultMale,
        string AdultFemale,
        string Adolescents_Male,
        string Adolescents_Female,
        string Children_Male,
        string Children_Female,
        string intCategoryofReg,
        string Reg_No,
        string Reg_Date,
        string Reg_ExpDate,
        string TypeofFactory,
        string Reg_id,
        string UID_No,
        string Created_by,
     string @Modified_by, string DistrictName, string Mandalname, string VillageName, string diffabled, string WomenEnterprenuer, string Minority, string Hight_Build, string Built_up_Area
       , string SurveyNo,
string Land_intDistrictid,
string Land_intMandalid,
string Land_intVillageid,
string Name_Gramapachayat,
string Land_Pincode, string Commissionerate, string Pol_Zone, string Pol_Division, string Pol_Station, string Tra_Station, string Tra_Division, string Tra_Police, string PoliceNo
       )
    {


        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertEnterPrenuerdetailsCFO";

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null || intCFOEnterpid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null || intCFOEnterpid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

        if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null || intQuessionaireid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


        if (DistrictName.ToString().Trim() == "" || DistrictName.ToString().Trim() == null || DistrictName.ToString().Trim() == "--Select--")
            com.Parameters.Add("@DistrictName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DistrictName", SqlDbType.VarChar).Value = DistrictName.Trim();
        if (diffabled.ToString().Trim() == "" || diffabled.ToString().Trim() == null || diffabled.ToString().Trim() == "--Select--")
            com.Parameters.Add("@diffabled", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@diffabled", SqlDbType.VarChar).Value = diffabled.Trim();

        if (WomenEnterprenuer.ToString().Trim() == "" || WomenEnterprenuer.ToString().Trim() == null || WomenEnterprenuer.ToString().Trim() == "--Select--")
            com.Parameters.Add("@WomenEnterprenuer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WomenEnterprenuer", SqlDbType.VarChar).Value = WomenEnterprenuer.Trim();


        if (Minority.ToString().Trim() == "" || Minority.ToString().Trim() == null || Minority.ToString().Trim() == "--Select--")

            com.Parameters.Add("@Minority", SqlDbType.VarChar).Value = DBNull.Value;

        else
            com.Parameters.Add("@Minority", SqlDbType.VarChar).Value = Minority.Trim();

        if (Hight_Build == "" || Hight_Build == null || Hight_Build == "--Select--")
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = Hight_Build.Trim();


        if (Built_up_Area == "" || Built_up_Area == null || Built_up_Area == "--Select--")
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = Built_up_Area.Trim();




        if (Mandalname.ToString().Trim() == "" || Mandalname.ToString().Trim() == null || Mandalname.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Mandalname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mandalname", SqlDbType.VarChar).Value = Mandalname.Trim();



        if (VillageName.ToString().Trim() == "" || VillageName.ToString().Trim() == null || VillageName.ToString().Trim() == "--Select--")
            com.Parameters.Add("@VillageName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VillageName", SqlDbType.VarChar).Value = VillageName.Trim();

        if (NameofIndustrialUnder.ToString().Trim() == "" || NameofIndustrialUnder.ToString().Trim() == null || NameofIndustrialUnder.ToString().Trim() == "--Select--")
            com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = NameofIndustrialUnder.Trim();

        if (NameofthePromoter.ToString().Trim() == "" || NameofthePromoter.ToString().Trim() == null || NameofthePromoter.ToString().Trim() == "--Select--")
            com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = NameofthePromoter.Trim();

        if (SoWo.ToString().Trim() == "" || SoWo.ToString().Trim() == null || SoWo.ToString().Trim() == "--Select--")
            com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = SoWo.Trim();

        if (Age.ToString().Trim() == "" || Age.ToString().Trim() == null || Age.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Age", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Age", SqlDbType.VarChar).Value = Age.Trim();

        //if (Age.ToString().Trim() == "" || Age.ToString().Trim() == null)
        //    com.Parameters.Add("@Age", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@Age", SqlDbType.VarChar).Value = Age.Trim();

        if (Occupation.ToString().Trim() == "" || Occupation.ToString().Trim() == null || Occupation.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Occupation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupation", SqlDbType.VarChar).Value = Occupation.Trim();

        if (intStateid.ToString().Trim() == "" || intStateid.ToString().Trim() == null || intStateid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

        if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

        if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

        if (intVillageid.ToString().Trim() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();

        if (StreetName.ToString().Trim() == "" || StreetName.ToString().Trim() == null)
            com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = StreetName.Trim();

        if (Door_No.ToString().Trim() == "" || Door_No.ToString().Trim() == null)
            com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = Door_No.Trim();

        if (Land_Mark.ToString().Trim() == "" || Land_Mark.ToString().Trim() == null)
            com.Parameters.Add("@Land_Mark", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Land_Mark", SqlDbType.VarChar).Value = Land_Mark.Trim();

        if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null)
            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

        if (MobileNumber.ToString().Trim() == "" || MobileNumber.ToString().Trim() == null)
            com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();

        if (Email.ToString().Trim() == "" || Email.ToString().Trim() == null)
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

        if (Fax.ToString().Trim() == "" || Fax.ToString().Trim() == null)
            com.Parameters.Add("@Fax", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fax", SqlDbType.VarChar).Value = Fax.Trim();

        if (intTypeofOrganization.ToString().Trim() == "" || intTypeofOrganization.ToString().Trim() == null || intTypeofOrganization.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = intTypeofOrganization.Trim();

        if (TelephoneNumber.ToString().Trim() == "" || TelephoneNumber.ToString().Trim() == null)
            com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = TelephoneNumber.Trim();

        if (AdultMale.ToString().Trim() == "" || AdultMale.ToString().Trim() == null)
            com.Parameters.Add("@AdultMale", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AdultMale", SqlDbType.VarChar).Value = AdultMale.Trim();

        if (AdultFemale.ToString().Trim() == "" || AdultFemale.ToString().Trim() == null)
            com.Parameters.Add("@AdultFemale", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AdultFemale", SqlDbType.VarChar).Value = AdultFemale.Trim();

        if (Adolescents_Male.ToString().Trim() == "" || Adolescents_Male.ToString().Trim() == null)
            com.Parameters.Add("@Adolescents_Male", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Adolescents_Male", SqlDbType.VarChar).Value = Adolescents_Male.Trim();

        if (Adolescents_Female.ToString().Trim() == "" || Adolescents_Female.ToString().Trim() == null)
            com.Parameters.Add("@Adolescents_Female", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Adolescents_Female", SqlDbType.VarChar).Value = Adolescents_Female.Trim();

        if (Children_Male.ToString().Trim() == "" || Children_Male.ToString().Trim() == null)
            com.Parameters.Add("@Children_Male", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Children_Male", SqlDbType.VarChar).Value = Children_Male.Trim();

        if (Children_Female.ToString().Trim() == "" || Children_Female.ToString().Trim() == null)
            com.Parameters.Add("@Children_Female", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Children_Female", SqlDbType.VarChar).Value = Children_Female.Trim();

        if (intCategoryofReg.ToString().Trim() == "" || intCategoryofReg.ToString().Trim() == null || intCategoryofReg.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = intCategoryofReg.Trim();

        if (Reg_No.ToString().Trim() == "" || Reg_No.ToString().Trim() == null)
            com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = Reg_No.Trim();

        if (Reg_Date.ToString().Trim() == "" || Reg_Date.ToString().Trim() == null || Reg_Date.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_Date.Trim());

        if (Reg_ExpDate.ToString().Trim() == "" || Reg_ExpDate.ToString().Trim() == null || Reg_ExpDate.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Reg_ExpDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_ExpDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_ExpDate.Trim());

        if (TypeofFactory.ToString().Trim() == "" || TypeofFactory.ToString().Trim() == null || TypeofFactory.ToString().Trim() == "--Select Proposal--" || TypeofFactory.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = TypeofFactory.Trim();

        if (Reg_id.ToString().Trim() == "" || Reg_id.ToString().Trim() == null || Reg_id.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = Reg_id.Trim();

        if (UID_No.ToString().Trim() == "" || UID_No.ToString().Trim() == null || UID_No.ToString().Trim() == "--Select--")
            com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null || Created_by.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null || Modified_by.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Modified_by ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by ", SqlDbType.VarChar).Value = Modified_by.Trim();
        /////// Added by madhuri on 12/09/2017///////////////

        if (SurveyNo.ToString().Trim() == "" || SurveyNo.ToString().Trim() == null || SurveyNo.ToString().Trim() == "--Select--")
            com.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = SurveyNo.Trim();

        if (Land_intDistrictid.ToString().Trim() == "" || Land_intDistrictid.ToString().Trim() == null || Land_intDistrictid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = Land_intDistrictid.Trim();

        if (Land_intMandalid.ToString().Trim() == "" || Land_intMandalid.ToString().Trim() == null || Land_intMandalid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = Land_intMandalid.Trim();

        if (Land_intVillageid.ToString().Trim() == "" || Land_intVillageid.ToString().Trim() == null || Land_intVillageid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = Land_intVillageid.Trim();

        if (Name_Gramapachayat.ToString().Trim() == "" || Name_Gramapachayat.ToString().Trim() == null || Name_Gramapachayat.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = Name_Gramapachayat.Trim();

        if (Land_Pincode.ToString().Trim() == "" || Land_Pincode.ToString().Trim() == null || Land_Pincode.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = Land_Pincode.Trim();
        if (Commissionerate.Trim() == "" || Commissionerate.Trim() == null)
        {
            com.Parameters.Add("@Commissionerate", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Commissionerate", SqlDbType.VarChar).Value = Commissionerate.Trim();
        }
        if (Pol_Zone.Trim() == "" || Pol_Zone.Trim() == null)
        {
            com.Parameters.Add("@Pol_Zone", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Pol_Zone", SqlDbType.VarChar).Value = Pol_Zone.Trim();
        }
        if (Pol_Division.Trim() == "" || Pol_Division.Trim() == null)
        {
            com.Parameters.Add("@Pol_Division", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Pol_Division", SqlDbType.VarChar).Value = Pol_Division.Trim();
        }
        if (Pol_Station.Trim() == "" || Pol_Station.Trim() == null)
        {
            com.Parameters.Add("@Pol_Station", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Pol_Station", SqlDbType.VarChar).Value = Pol_Station.Trim();
        }
        if (Tra_Station.Trim() == "" || Tra_Station.Trim() == null)
        {
            com.Parameters.Add("@Tra_Station", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Tra_Station", SqlDbType.VarChar).Value = Tra_Station.Trim();
        }
        if (Tra_Division.Trim() == "" || Tra_Division.Trim() == null)
        {
            com.Parameters.Add("@Tra_Division", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Tra_Division", SqlDbType.VarChar).Value = Tra_Division.Trim();
        }
        if (Tra_Police.Trim() == "" || Tra_Police.Trim() == null)
        {
            com.Parameters.Add("@Tra_Police", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Tra_Police", SqlDbType.VarChar).Value = Tra_Police.Trim();
        }
        if (PoliceNo.Trim() == "" || PoliceNo.Trim() == null)
        {
            com.Parameters.Add("@PoliceNoc", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@PoliceNoc", SqlDbType.VarChar).Value = PoliceNo.Trim();
        }
        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return Convert.ToInt32(com.ExecuteScalar());
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //public int insetCFOFactoriesDet(
    //    //string intCFOFactoryid,
    //         string intQuessionaireCFOid,
    //         string intCFOEnterpid,
    //         string Uid_No,
    //         string Reg_Id,
    //         string Nature_Manfacture,
    //         string Plans_Chief_Inspector_RefNo,
    //         string Plans_Chief_Inspector_RefDt,
    //         string FullN_Res_Address,
    //         string Date_Occupation,
    //         string FullN_Addres_LocalLadFund,
    //         string FullN_Addres_Owner,
    //         string Petrolium_District,
    //         string Petrolium_Mandal,
    //         string Petrolium_Village,
    //         string Petrolium_PoliceStation,
    //         string Nearest_RailwayStation,
    //         string InBulk_ClassA,
    //         string InBulk_ClassB,
    //         string InBulk_CalssC,
    //         string InBulk_Total,
    //         string NotinBulk_ClassA,
    //         string NotinBulk_ClassB,
    //         string NotinBulk_ClassC,
    //         string NotinBulk_ClassTotal,
    //         string Total_Class_A,
    //         string Total_Class_B,
    //         string Total_Class_C,
    //         string Total_Totals,
    //         string Stored_InBulk_ClassA,
    //         string Stored_InBulk_ClassB,
    //         string Stored_InBulk_CalssC,
    //         string Stored_InBulk_Total,
    //         string Stored_NotinBulk_ClassA,
    //         string Stored_NotinBulk_ClassB,
    //         string Stored_NotinBulk_ClassC,
    //         string Stored_NotinBulk_ClassTotal,
    //         string Stored_Total_Class_A,
    //         string Stored_Total_Class_B,
    //         string Stored_Total_Class_C,
    //         string Stored_Total_Totals,
    //         string SalesTaxDetails,
    //         string Exploside_LicenseDetails,
    //         string Created_by,
    //         string Modified_by
    //         )
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertCFOFactoriesDet";



    //    //if (intCFOFactoryid.ToString().Trim() == "" || intCFOFactoryid.ToString().Trim() == null)
    //    //    com.Parameters.Add("@intCFOFactoryid", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@intCFOFactoryid", SqlDbType.VarChar).Value = intCFOFactoryid.Trim();

    //    if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

    //    if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();



    //    if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

    //    if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

    //    if (Nature_Manfacture.ToString().Trim() == "" || Nature_Manfacture.ToString().Trim() == null)
    //        com.Parameters.Add("@Nature_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Nature_Manfacture", SqlDbType.VarChar).Value = Nature_Manfacture.Trim();

    //    if (Plans_Chief_Inspector_RefNo.ToString().Trim() == "" || Plans_Chief_Inspector_RefNo.ToString().Trim() == null)
    //        com.Parameters.Add("@Plans_Chief_Inspector_RefNo", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Plans_Chief_Inspector_RefNo", SqlDbType.VarChar).Value = Plans_Chief_Inspector_RefNo.Trim();

    //    if (Plans_Chief_Inspector_RefDt.ToString().Trim() == "" || Plans_Chief_Inspector_RefDt.ToString().Trim() == null)
    //        com.Parameters.Add("@Plans_Chief_Inspector_RefDt", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Plans_Chief_Inspector_RefDt", SqlDbType.DateTime).Value = cmf.convertDateIndia(Plans_Chief_Inspector_RefDt.Trim());

    //    if (FullN_Res_Address.ToString().Trim() == "" || FullN_Res_Address.ToString().Trim() == null)
    //        com.Parameters.Add("@FullN_Res_Address", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@FullN_Res_Address", SqlDbType.VarChar).Value = FullN_Res_Address.Trim();

    //    if (Date_Occupation.ToString().Trim() == "" || Date_Occupation.ToString().Trim() == null)
    //        com.Parameters.Add("@Date_Occupation", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Date_Occupation", SqlDbType.DateTime).Value = cmf.convertDateIndia(Plans_Chief_Inspector_RefDt.Trim());

    //    if (FullN_Addres_LocalLadFund.ToString().Trim() == "" || FullN_Addres_LocalLadFund.ToString().Trim() == null)
    //        com.Parameters.Add("@FullN_Addres_LocalLadFund", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@FullN_Addres_LocalLadFund", SqlDbType.VarChar).Value = FullN_Addres_LocalLadFund.Trim();

    //    if (FullN_Addres_Owner.ToString().Trim() == "" || FullN_Addres_Owner.ToString().Trim() == null)
    //        com.Parameters.Add("@FullN_Addres_Owner", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@FullN_Addres_Owner", SqlDbType.VarChar).Value = FullN_Addres_Owner.Trim();

    //    if (Petrolium_District.ToString().Trim() == "" || Petrolium_District.ToString().Trim() == null || Petrolium_District.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Petrolium_District", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Petrolium_District", SqlDbType.VarChar).Value = Petrolium_District.Trim();

    //    if (Petrolium_Mandal.ToString().Trim() == "" || Petrolium_Mandal.ToString().Trim() == null || Petrolium_Mandal.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Petrolium_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Petrolium_Mandal", SqlDbType.VarChar).Value = Petrolium_Mandal.Trim();

    //    if (Petrolium_Village.ToString().Trim() == "" || Petrolium_Village.ToString().Trim() == null || Petrolium_Village.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Petrolium_Village", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Petrolium_Village", SqlDbType.VarChar).Value = Petrolium_Village.Trim();

    //    if (Petrolium_PoliceStation.ToString().Trim() == "" || Petrolium_PoliceStation.ToString().Trim() == null)
    //        com.Parameters.Add("@Petrolium_PoliceStation", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Petrolium_PoliceStation", SqlDbType.VarChar).Value = Petrolium_PoliceStation.Trim();

    //    if (Nearest_RailwayStation.ToString().Trim() == "" || Nearest_RailwayStation.ToString().Trim() == null)
    //        com.Parameters.Add("@Nearest_RailwayStation", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Nearest_RailwayStation", SqlDbType.VarChar).Value = Nearest_RailwayStation.Trim();


    //    if (InBulk_ClassA.ToString().Trim() == "" || InBulk_ClassA.ToString().Trim() == null)
    //        com.Parameters.Add("@InBulk_ClassA", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@InBulk_ClassA", SqlDbType.VarChar).Value = InBulk_ClassA.Trim();

    //    if (InBulk_ClassB.ToString().Trim() == "" || InBulk_ClassB.ToString().Trim() == null)
    //        com.Parameters.Add("@InBulk_ClassB", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@InBulk_ClassB", SqlDbType.VarChar).Value = InBulk_ClassB.Trim();

    //    if (InBulk_CalssC.ToString().Trim() == "" || InBulk_CalssC.ToString().Trim() == null)
    //        com.Parameters.Add("@InBulk_CalssC", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@InBulk_CalssC", SqlDbType.VarChar).Value = InBulk_CalssC.Trim();

    //    if (InBulk_Total.ToString().Trim() == "" || InBulk_Total.ToString().Trim() == null)
    //        com.Parameters.Add("@InBulk_Total", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@InBulk_Total", SqlDbType.VarChar).Value = InBulk_Total.Trim();

    //    if (NotinBulk_ClassA.ToString().Trim() == "" || NotinBulk_ClassA.ToString().Trim() == null)
    //        com.Parameters.Add("@NotinBulk_ClassA", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NotinBulk_ClassA", SqlDbType.VarChar).Value = NotinBulk_ClassA.Trim();

    //    if (NotinBulk_ClassB.ToString().Trim() == "" || NotinBulk_ClassB.ToString().Trim() == null)
    //        com.Parameters.Add("@NotinBulk_ClassB", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NotinBulk_ClassB", SqlDbType.VarChar).Value = NotinBulk_ClassB.Trim();

    //    if (NotinBulk_ClassC.ToString().Trim() == "" || NotinBulk_ClassC.ToString().Trim() == null)
    //        com.Parameters.Add("@NotinBulk_ClassC", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NotinBulk_ClassC", SqlDbType.VarChar).Value = NotinBulk_ClassC.Trim();

    //    if (NotinBulk_ClassTotal.ToString().Trim() == "" || NotinBulk_ClassTotal.ToString().Trim() == null)
    //        com.Parameters.Add("@NotinBulk_ClassTotal", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NotinBulk_ClassTotal", SqlDbType.VarChar).Value = NotinBulk_ClassTotal.Trim();

    //    if (Total_Class_A.ToString().Trim() == "" || Total_Class_A.ToString().Trim() == null)
    //        com.Parameters.Add("@Total_Class_A", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Total_Class_A", SqlDbType.VarChar).Value = Total_Class_A.Trim();

    //    if (Total_Class_B.ToString().Trim() == "" || Total_Class_B.ToString().Trim() == null)
    //        com.Parameters.Add("@Total_Class_B", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Total_Class_B", SqlDbType.VarChar).Value = Total_Class_B.Trim();

    //    if (Total_Class_C.ToString().Trim() == "" || Total_Class_C.ToString().Trim() == null)
    //        com.Parameters.Add("@Total_Class_C", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Total_Class_C", SqlDbType.VarChar).Value = Total_Class_C.Trim();

    //    if (Total_Totals.ToString().Trim() == "" || Total_Totals.ToString().Trim() == null)
    //        com.Parameters.Add("@Total_Totals", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Total_Totals", SqlDbType.VarChar).Value = Total_Totals.Trim();

    //    if (Stored_InBulk_ClassA.ToString().Trim() == "" || Stored_InBulk_ClassA.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_InBulk_ClassA", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_InBulk_ClassA", SqlDbType.VarChar).Value = Stored_InBulk_ClassA.Trim();

    //    if (Stored_InBulk_ClassB.ToString().Trim() == "" || Stored_InBulk_ClassB.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_InBulk_ClassB", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_InBulk_ClassB", SqlDbType.VarChar).Value = Stored_InBulk_ClassB.Trim();

    //    if (Stored_InBulk_CalssC.ToString().Trim() == "" || Stored_InBulk_CalssC.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_InBulk_CalssC", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_InBulk_CalssC", SqlDbType.VarChar).Value = Stored_InBulk_CalssC.Trim();

    //    if (Stored_InBulk_Total.ToString().Trim() == "" || Stored_InBulk_Total.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_InBulk_Total", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_InBulk_Total", SqlDbType.VarChar).Value = Stored_InBulk_Total.Trim();

    //    if (Stored_NotinBulk_ClassA.ToString().Trim() == "" || Stored_NotinBulk_ClassA.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_NotinBulk_ClassA", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_NotinBulk_ClassA", SqlDbType.VarChar).Value = Stored_NotinBulk_ClassA.Trim();

    //    if (Stored_NotinBulk_ClassB.ToString().Trim() == "" || Stored_NotinBulk_ClassB.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_NotinBulk_ClassB", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_NotinBulk_ClassB", SqlDbType.VarChar).Value = Stored_NotinBulk_ClassB.Trim();

    //    if (Stored_NotinBulk_ClassC.ToString().Trim() == "" || Stored_NotinBulk_ClassC.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_NotinBulk_ClassC", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_NotinBulk_ClassC", SqlDbType.VarChar).Value = Stored_NotinBulk_ClassC.Trim();

    //    if (Stored_NotinBulk_ClassTotal.ToString().Trim() == "" || Stored_NotinBulk_ClassTotal.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_NotinBulk_ClassTotal", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_NotinBulk_ClassTotal", SqlDbType.VarChar).Value = Stored_NotinBulk_ClassTotal.Trim();

    //    if (Stored_Total_Class_A.ToString().Trim() == "" || Stored_Total_Class_A.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_Total_Class_A", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_Total_Class_A", SqlDbType.VarChar).Value = Stored_Total_Class_A.Trim();

    //    if (Stored_Total_Class_B.ToString().Trim() == "" || Stored_Total_Class_B.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_Total_Class_B", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_Total_Class_B", SqlDbType.VarChar).Value = Stored_Total_Class_B.Trim();

    //    if (Stored_Total_Class_C.ToString().Trim() == "" || Stored_Total_Class_C.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_Total_Class_C", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_Total_Class_C", SqlDbType.VarChar).Value = Stored_Total_Class_C.Trim();

    //    if (Stored_Total_Totals.ToString().Trim() == "" || Stored_Total_Totals.ToString().Trim() == null)
    //        com.Parameters.Add("@Stored_Total_Totals", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Stored_Total_Totals", SqlDbType.VarChar).Value = Stored_Total_Totals.Trim();

    //    if (SalesTaxDetails.ToString().Trim() == "" || SalesTaxDetails.ToString().Trim() == null)
    //        com.Parameters.Add("@SalesTaxDetails", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@SalesTaxDetails", SqlDbType.VarChar).Value = SalesTaxDetails.Trim();

    //    if (Exploside_LicenseDetails.ToString().Trim() == "" || Exploside_LicenseDetails.ToString().Trim() == null)
    //        com.Parameters.Add("@Exploside_LicenseDetails", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Exploside_LicenseDetails", SqlDbType.VarChar).Value = Exploside_LicenseDetails.Trim();

    //    if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

    //    //---------------------------------------------------------------------------------------------------------------
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return Convert.ToInt32(com.ExecuteScalar());
    //        //if (returnvalue == DBNull.Value || returnvalue == null)
    //        //    return 0;
    //        //else
    //        //    return Convert.ToInt32(returnvalue);

    //        object returnvalue = com.ExecuteScalar();
    //        if (returnvalue == DBNull.Value || returnvalue == null)
    //            return 0;
    //        else
    //            return Convert.ToInt32(returnvalue);

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        //return 0;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }

    //}

    //public int insertCFOBoiler(
    //   string intCFOBoilerid,
    //      string intQuessionaireCFOid,
    //      string intCFOEnterpid,
    //      string Uid_No,
    //      string Reg_Id,
    //      string Reg_No_Boiler,
    //      string Name_Owner,
    //      string Location,
    //      string Date_Inpec_Desirable,
    //      string Desc_Boiler_Age,
    //      string Makers_name,
    //      string Type_Boiler,
    //      string Boiler_User_for,
    //      string Boiler_ration,
    //      string Place_Manfacture,
    //      string Year_Manfacture,
    //      string Allowed_Max_Presure,
    //      string Econ_Maker_Number,
    //      string Heating_Surface_boiler,
    //      string Max_Conti_Evapron,
    //      string Class_Erector,
    //      string Name_of_Erector,
    //      string State_Erector,
    //      string Max_Presure_Econ,
    //      string Tot_Lenght_Steam_PipeLine,
    //      string Created_by,
    //      string Modified_by)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertCFOBoilersDet";


    //    if (intCFOBoilerid.ToString().Trim() == "" || intCFOBoilerid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = intCFOBoilerid.Trim();

    //    if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

    //    if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

    //    if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

    //    if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

    //    if (Reg_No_Boiler.ToString().Trim() == "" || Reg_No_Boiler.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = Reg_No_Boiler.Trim();

    //    if (Name_Owner.ToString().Trim() == "" || Name_Owner.ToString().Trim() == null)
    //        com.Parameters.Add("@Name_Owner", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Name_Owner", SqlDbType.VarChar).Value = Name_Owner.Trim();

    //    if (Location.ToString().Trim() == "" || Location.ToString().Trim() == null)
    //        com.Parameters.Add("@Location", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Location", SqlDbType.VarChar).Value = Location.Trim();

    //    if (Date_Inpec_Desirable.ToString().Trim() == "" || Date_Inpec_Desirable.ToString().Trim() == null)
    //        com.Parameters.Add("@Date_Inpec_Desirable", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Date_Inpec_Desirable", SqlDbType.DateTime).Value = Date_Inpec_Desirable.Trim();

    //    if (Desc_Boiler_Age.ToString().Trim() == "" || Desc_Boiler_Age.ToString().Trim() == null)
    //        com.Parameters.Add("@Desc_Boiler_Age", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Desc_Boiler_Age", SqlDbType.VarChar).Value = Desc_Boiler_Age.Trim();

    //    if (Makers_name.ToString().Trim() == "" || Makers_name.ToString().Trim() == null)
    //        com.Parameters.Add("@Makers_name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Makers_name", SqlDbType.VarChar).Value = Makers_name.Trim();

    //    if (Type_Boiler.ToString().Trim() == "" || Type_Boiler.ToString().Trim() == null || Type_Boiler.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Type_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Type_Boiler", SqlDbType.VarChar).Value = Type_Boiler.Trim();

    //    if (Boiler_User_for.ToString().Trim() == "" || Boiler_User_for.ToString().Trim() == null || Boiler_User_for.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = Boiler_User_for.Trim();

    //    if (Boiler_ration.ToString().Trim() == "" || Boiler_ration.ToString().Trim() == null)
    //        com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = Boiler_ration.Trim();

    //    if (Place_Manfacture.ToString().Trim() == "" || Place_Manfacture.ToString().Trim() == null)
    //        com.Parameters.Add("@Place_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Place_Manfacture", SqlDbType.VarChar).Value = Place_Manfacture.Trim();

    //    if (Year_Manfacture.ToString().Trim() == "" || Year_Manfacture.ToString().Trim() == null)
    //        com.Parameters.Add("@Year_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Year_Manfacture", SqlDbType.VarChar).Value = Year_Manfacture.Trim();

    //    if (Allowed_Max_Presure.ToString().Trim() == "" || Allowed_Max_Presure.ToString().Trim() == null)
    //        com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = Allowed_Max_Presure.Trim();

    //    if (Econ_Maker_Number.ToString().Trim() == "" || Econ_Maker_Number.ToString().Trim() == null)
    //        com.Parameters.Add("@Econ_Maker_Number", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Econ_Maker_Number", SqlDbType.VarChar).Value = Econ_Maker_Number.Trim();

    //    if (Heating_Surface_boiler.ToString().Trim() == "" || Heating_Surface_boiler.ToString().Trim() == null)
    //        com.Parameters.Add("@Heating_Surface_boiler", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Heating_Surface_boiler", SqlDbType.VarChar).Value = Heating_Surface_boiler.Trim();

    //    if (Max_Conti_Evapron.ToString().Trim() == "" || Max_Conti_Evapron.ToString().Trim() == null)
    //        com.Parameters.Add("@Max_Conti_Evapron", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Max_Conti_Evapron", SqlDbType.VarChar).Value = Max_Conti_Evapron.Trim();

    //    if (Class_Erector.ToString().Trim() == "" || Class_Erector.ToString().Trim() == null)
    //        com.Parameters.Add("@Class_Erector", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Class_Erector", SqlDbType.VarChar).Value = Class_Erector.Trim();

    //    if (Name_of_Erector.ToString().Trim() == "" || Name_of_Erector.ToString().Trim() == null)
    //        com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = Name_of_Erector.Trim();

    //    if (State_Erector.ToString().Trim() == "" || State_Erector.ToString().Trim() == null || State_Erector.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = State_Erector.Trim();

    //    if (Max_Presure_Econ.ToString().Trim() == "" || Max_Presure_Econ.ToString().Trim() == null)
    //        com.Parameters.Add("@Max_Presure_Econ", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Max_Presure_Econ", SqlDbType.VarChar).Value = Max_Presure_Econ.Trim();

    //    if (Tot_Lenght_Steam_PipeLine.ToString().Trim() == "" || Tot_Lenght_Steam_PipeLine.ToString().Trim() == null)
    //        com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = Tot_Lenght_Steam_PipeLine.Trim();

    //    if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();


    //    //---------------------------------------------------------------------------------------------------------------
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {

    //        object returnvalue = com.ExecuteScalar();
    //        if (returnvalue == DBNull.Value || returnvalue == null)
    //            return 0;
    //        else
    //            return Convert.ToInt32(returnvalue);

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        //return 0;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }

    //}



    //public int insertCFOBoiler(
    //   string intCFOBoilerid,
    //      string intQuessionaireCFOid,
    //      string intCFOEnterpid,
    //      string Uid_No,
    //      string Reg_Id,
    //      string Reg_No_Boiler,
    //      string Name_Owner,
    //      string Location,
    //      string Date_Inpec_Desirable,
    //      string Desc_Boiler_Age,
    //      string Makers_name,
    //      string Type_Boiler,
    //      string Boiler_User_for,
    //      string Boiler_ration,
    //      string Place_Manfacture,
    //      string Year_Manfacture,
    //      string Allowed_Max_Presure,
    //      string Econ_Maker_Number,
    //      string Heating_Surface_boiler,
    //      string Max_Conti_Evapron,
    //      string Class_Erector,
    //      string Name_of_Erector,
    //      string State_Erector,
    //      string Max_Presure_Econ,
    //      string Tot_Lenght_Steam_PipeLine,
    //      string Created_by,
    //      string Modified_by)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertCFOBoilersDet";


    //    if (intCFOBoilerid.ToString().Trim() == "" || intCFOBoilerid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = intCFOBoilerid.Trim();

    //    if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

    //    if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

    //    if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

    //    if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

    //    if (Reg_No_Boiler.ToString().Trim() == "" || Reg_No_Boiler.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = Reg_No_Boiler.Trim();

    //    if (Name_Owner.ToString().Trim() == "" || Name_Owner.ToString().Trim() == null)
    //        com.Parameters.Add("@Name_Owner", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Name_Owner", SqlDbType.VarChar).Value = Name_Owner.Trim();

    //    if (Location.ToString().Trim() == "" || Location.ToString().Trim() == null)
    //        com.Parameters.Add("@Location", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Location", SqlDbType.VarChar).Value = Location.Trim();

    //    if (Date_Inpec_Desirable.ToString().Trim() == "" || Date_Inpec_Desirable.ToString().Trim() == null)
    //        com.Parameters.Add("@Date_Inpec_Desirable", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Date_Inpec_Desirable", SqlDbType.DateTime).Value = cmf.convertDateIndia(Date_Inpec_Desirable.Trim());

    //    if (Desc_Boiler_Age.ToString().Trim() == "" || Desc_Boiler_Age.ToString().Trim() == null)
    //        com.Parameters.Add("@Desc_Boiler_Age", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Desc_Boiler_Age", SqlDbType.VarChar).Value = Desc_Boiler_Age.Trim();

    //    if (Makers_name.ToString().Trim() == "" || Makers_name.ToString().Trim() == null)
    //        com.Parameters.Add("@Makers_name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Makers_name", SqlDbType.VarChar).Value = Makers_name.Trim();

    //    if (Type_Boiler.ToString().Trim() == "" || Type_Boiler.ToString().Trim() == null || Type_Boiler.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Type_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Type_Boiler", SqlDbType.VarChar).Value = Type_Boiler.Trim();

    //    if (Boiler_User_for.ToString().Trim() == "" || Boiler_User_for.ToString().Trim() == null || Boiler_User_for.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = Boiler_User_for.Trim();

    //    if (Boiler_ration.ToString().Trim() == "" || Boiler_ration.ToString().Trim() == null)
    //        com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = Boiler_ration.Trim();

    //    if (Place_Manfacture.ToString().Trim() == "" || Place_Manfacture.ToString().Trim() == null)
    //        com.Parameters.Add("@Place_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Place_Manfacture", SqlDbType.VarChar).Value = Place_Manfacture.Trim();

    //    if (Year_Manfacture.ToString().Trim() == "" || Year_Manfacture.ToString().Trim() == null)
    //        com.Parameters.Add("@Year_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Year_Manfacture", SqlDbType.VarChar).Value = Year_Manfacture.Trim();

    //    if (Allowed_Max_Presure.ToString().Trim() == "" || Allowed_Max_Presure.ToString().Trim() == null)
    //        com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = Allowed_Max_Presure.Trim();

    //    if (Econ_Maker_Number.ToString().Trim() == "" || Econ_Maker_Number.ToString().Trim() == null)
    //        com.Parameters.Add("@Econ_Maker_Number", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Econ_Maker_Number", SqlDbType.VarChar).Value = Econ_Maker_Number.Trim();

    //    if (Heating_Surface_boiler.ToString().Trim() == "" || Heating_Surface_boiler.ToString().Trim() == null)
    //        com.Parameters.Add("@Heating_Surface_boiler", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Heating_Surface_boiler", SqlDbType.VarChar).Value = Heating_Surface_boiler.Trim();

    //    if (Max_Conti_Evapron.ToString().Trim() == "" || Max_Conti_Evapron.ToString().Trim() == null)
    //        com.Parameters.Add("@Max_Conti_Evapron", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Max_Conti_Evapron", SqlDbType.VarChar).Value = Max_Conti_Evapron.Trim();

    //    if (Class_Erector.ToString().Trim() == "" || Class_Erector.ToString().Trim() == null)
    //        com.Parameters.Add("@Class_Erector", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Class_Erector", SqlDbType.VarChar).Value = Class_Erector.Trim();

    //    if (Name_of_Erector.ToString().Trim() == "" || Name_of_Erector.ToString().Trim() == null)
    //        com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = Name_of_Erector.Trim();

    //    if (State_Erector.ToString().Trim() == "" || State_Erector.ToString().Trim() == null || State_Erector.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = State_Erector.Trim();

    //    if (Max_Presure_Econ.ToString().Trim() == "" || Max_Presure_Econ.ToString().Trim() == null)
    //        com.Parameters.Add("@Max_Presure_Econ", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Max_Presure_Econ", SqlDbType.VarChar).Value = Max_Presure_Econ.Trim();

    //    if (Tot_Lenght_Steam_PipeLine.ToString().Trim() == "" || Tot_Lenght_Steam_PipeLine.ToString().Trim() == null)
    //        com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = Tot_Lenght_Steam_PipeLine.Trim();

    //    if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();


    //    //---------------------------------------------------------------------------------------------------------------
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {

    //        object returnvalue = com.ExecuteScalar();
    //        if (returnvalue == DBNull.Value || returnvalue == null)
    //            return 0;
    //        else
    //            return Convert.ToInt32(returnvalue);

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        //return 0;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }

    //}

    public int insetCFOFactoriesDet(
        //string intCFOFactoryid,
               string intQuessionaireCFOid,
               string intCFOEnterpid,
               string Uid_No,
               string Reg_Id,
               string Nature_Manfacture,
               string Plans_Chief_Inspector_RefNo,
               string Plans_Chief_Inspector_RefDt,
               string FullN_Res_Address,
               string Date_Occupation,
               string FullN_Addres_LocalLadFund,
               string FullN_Addres_Owner,
               string Petrolium_District,
               string Petrolium_Mandal,
               string Petrolium_Village,
               string Petrolium_PoliceStation,
               string Nearest_RailwayStation,
               string InBulk_ClassA,
               string InBulk_ClassB,
               string InBulk_CalssC,
               string InBulk_Total,
               string NotinBulk_ClassA,
               string NotinBulk_ClassB,
               string NotinBulk_ClassC,
               string NotinBulk_ClassTotal,
               string Total_Class_A,
               string Total_Class_B,
               string Total_Class_C,
               string Total_Totals,
               string Stored_InBulk_ClassA,
               string Stored_InBulk_ClassB,
               string Stored_InBulk_CalssC,
               string Stored_InBulk_Total,
               string Stored_NotinBulk_ClassA,
               string Stored_NotinBulk_ClassB,
               string Stored_NotinBulk_ClassC,
               string Stored_NotinBulk_ClassTotal,
               string Stored_Total_Class_A,
               string Stored_Total_Class_B,
               string Stored_Total_Class_C,
               string Stored_Total_Totals,
               string SalesTaxDetails,
               string Exploside_LicenseDetails,
               string Created_by,
               string Modified_by,

              string LicenseYear,
              string RegularHp,
              string StandbyHp,
              string Mangr_Full_Name,
              string Mangr_District,
              string Mangr_Mandal,
              string Mangr_Village,
              string Mangr_DoorNo,
              string Mangr_Locality,
              string Mangr_PinCode,
              string Mangr_MobileNo,
              string Mangr_EmailId,
              string Occupier_Full_Name,
              string Occupier_District,
              string Occupier_Mandal,
              string Occupier_Village,
              string Occupier_DoorNo,
              string Occupier_Locality,
              string Occupier_PinCode,
              string Occupier_MobileNo,
              string Occupier_EmailId,
              string Owner_Full_Name,
              string Owner_District,
              string Owner_Mandal,
              string Owner_Village,
              string Owner_DoorNo,
              string Owner_Locality,
              string Owner_PinCode,
              string Owner_MobileNo,
              string Owner_EmailId
  )
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFOFactoriesDet";

        //if (intCFOFactoryid.ToString().Trim() == "" || intCFOFactoryid.ToString().Trim() == null)
        //    com.Parameters.Add("@intCFOFactoryid", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@intCFOFactoryid", SqlDbType.VarChar).Value = intCFOFactoryid.Trim();

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();



        if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

        if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

        if (Nature_Manfacture.ToString().Trim() == "" || Nature_Manfacture.ToString().Trim() == null)
            com.Parameters.Add("@Nature_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Nature_Manfacture", SqlDbType.VarChar).Value = Nature_Manfacture.Trim();

        if (Plans_Chief_Inspector_RefNo.ToString().Trim() == "" || Plans_Chief_Inspector_RefNo.ToString().Trim() == null)
            com.Parameters.Add("@Plans_Chief_Inspector_RefNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Plans_Chief_Inspector_RefNo", SqlDbType.VarChar).Value = Plans_Chief_Inspector_RefNo.Trim();

        if (Plans_Chief_Inspector_RefDt.ToString().Trim() == "" || Plans_Chief_Inspector_RefDt.ToString().Trim() == null)
            com.Parameters.Add("@Plans_Chief_Inspector_RefDt", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Plans_Chief_Inspector_RefDt", SqlDbType.DateTime).Value = cmf.convertDateIndia(Plans_Chief_Inspector_RefDt.Trim());

        if (FullN_Res_Address.ToString().Trim() == "" || FullN_Res_Address.ToString().Trim() == null)
            com.Parameters.Add("@FullN_Res_Address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FullN_Res_Address", SqlDbType.VarChar).Value = FullN_Res_Address.Trim();

        if (Date_Occupation.ToString().Trim() == "" || Date_Occupation.ToString().Trim() == null)
            com.Parameters.Add("@Date_Occupation", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date_Occupation", SqlDbType.DateTime).Value = cmf.convertDateIndia(Date_Occupation.Trim());

        if (FullN_Addres_LocalLadFund.ToString().Trim() == "" || FullN_Addres_LocalLadFund.ToString().Trim() == null)
            com.Parameters.Add("@FullN_Addres_LocalLadFund", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FullN_Addres_LocalLadFund", SqlDbType.VarChar).Value = FullN_Addres_LocalLadFund.Trim();

        if (FullN_Addres_Owner.ToString().Trim() == "" || FullN_Addres_Owner.ToString().Trim() == null)
            com.Parameters.Add("@FullN_Addres_Owner", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FullN_Addres_Owner", SqlDbType.VarChar).Value = FullN_Addres_Owner.Trim();

        if (Petrolium_District.ToString().Trim() == "" || Petrolium_District.ToString().Trim() == null || Petrolium_District.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Petrolium_District", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Petrolium_District", SqlDbType.VarChar).Value = Petrolium_District.Trim();

        if (Petrolium_Mandal.ToString().Trim() == "" || Petrolium_Mandal.ToString().Trim() == null || Petrolium_Mandal.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Petrolium_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Petrolium_Mandal", SqlDbType.VarChar).Value = Petrolium_Mandal.Trim();

        if (Petrolium_Village.ToString().Trim() == "" || Petrolium_Village.ToString().Trim() == null || Petrolium_Village.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Petrolium_Village", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Petrolium_Village", SqlDbType.VarChar).Value = Petrolium_Village.Trim();

        if (Petrolium_PoliceStation.ToString().Trim() == "" || Petrolium_PoliceStation.ToString().Trim() == null)
            com.Parameters.Add("@Petrolium_PoliceStation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Petrolium_PoliceStation", SqlDbType.VarChar).Value = Petrolium_PoliceStation.Trim();

        if (Nearest_RailwayStation.ToString().Trim() == "" || Nearest_RailwayStation.ToString().Trim() == null)
            com.Parameters.Add("@Nearest_RailwayStation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Nearest_RailwayStation", SqlDbType.VarChar).Value = Nearest_RailwayStation.Trim();


        if (InBulk_ClassA.ToString().Trim() == "" || InBulk_ClassA.ToString().Trim() == null)
            com.Parameters.Add("@InBulk_ClassA", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InBulk_ClassA", SqlDbType.VarChar).Value = InBulk_ClassA.Trim();

        if (InBulk_ClassB.ToString().Trim() == "" || InBulk_ClassB.ToString().Trim() == null)
            com.Parameters.Add("@InBulk_ClassB", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InBulk_ClassB", SqlDbType.VarChar).Value = InBulk_ClassB.Trim();

        if (InBulk_CalssC.ToString().Trim() == "" || InBulk_CalssC.ToString().Trim() == null)
            com.Parameters.Add("@InBulk_CalssC", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InBulk_CalssC", SqlDbType.VarChar).Value = InBulk_CalssC.Trim();

        if (InBulk_Total.ToString().Trim() == "" || InBulk_Total.ToString().Trim() == null)
            com.Parameters.Add("@InBulk_Total", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InBulk_Total", SqlDbType.VarChar).Value = InBulk_Total.Trim();

        if (NotinBulk_ClassA.ToString().Trim() == "" || NotinBulk_ClassA.ToString().Trim() == null)
            com.Parameters.Add("@NotinBulk_ClassA", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NotinBulk_ClassA", SqlDbType.VarChar).Value = NotinBulk_ClassA.Trim();

        if (NotinBulk_ClassB.ToString().Trim() == "" || NotinBulk_ClassB.ToString().Trim() == null)
            com.Parameters.Add("@NotinBulk_ClassB", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NotinBulk_ClassB", SqlDbType.VarChar).Value = NotinBulk_ClassB.Trim();

        if (NotinBulk_ClassC.ToString().Trim() == "" || NotinBulk_ClassC.ToString().Trim() == null)
            com.Parameters.Add("@NotinBulk_ClassC", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NotinBulk_ClassC", SqlDbType.VarChar).Value = NotinBulk_ClassC.Trim();

        if (NotinBulk_ClassTotal.ToString().Trim() == "" || NotinBulk_ClassTotal.ToString().Trim() == null)
            com.Parameters.Add("@NotinBulk_ClassTotal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NotinBulk_ClassTotal", SqlDbType.VarChar).Value = NotinBulk_ClassTotal.Trim();

        if (Total_Class_A.ToString().Trim() == "" || Total_Class_A.ToString().Trim() == null)
            com.Parameters.Add("@Total_Class_A", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Total_Class_A", SqlDbType.VarChar).Value = Total_Class_A.Trim();

        if (Total_Class_B.ToString().Trim() == "" || Total_Class_B.ToString().Trim() == null)
            com.Parameters.Add("@Total_Class_B", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Total_Class_B", SqlDbType.VarChar).Value = Total_Class_B.Trim();

        if (Total_Class_C.ToString().Trim() == "" || Total_Class_C.ToString().Trim() == null)
            com.Parameters.Add("@Total_Class_C", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Total_Class_C", SqlDbType.VarChar).Value = Total_Class_C.Trim();

        if (Total_Totals.ToString().Trim() == "" || Total_Totals.ToString().Trim() == null)
            com.Parameters.Add("@Total_Totals", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Total_Totals", SqlDbType.VarChar).Value = Total_Totals.Trim();

        if (Stored_InBulk_ClassA.ToString().Trim() == "" || Stored_InBulk_ClassA.ToString().Trim() == null)
            com.Parameters.Add("@Stored_InBulk_ClassA", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_InBulk_ClassA", SqlDbType.VarChar).Value = Stored_InBulk_ClassA.Trim();

        if (Stored_InBulk_ClassB.ToString().Trim() == "" || Stored_InBulk_ClassB.ToString().Trim() == null)
            com.Parameters.Add("@Stored_InBulk_ClassB", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_InBulk_ClassB", SqlDbType.VarChar).Value = Stored_InBulk_ClassB.Trim();

        if (Stored_InBulk_CalssC.ToString().Trim() == "" || Stored_InBulk_CalssC.ToString().Trim() == null)
            com.Parameters.Add("@Stored_InBulk_CalssC", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_InBulk_CalssC", SqlDbType.VarChar).Value = Stored_InBulk_CalssC.Trim();

        if (Stored_InBulk_Total.ToString().Trim() == "" || Stored_InBulk_Total.ToString().Trim() == null)
            com.Parameters.Add("@Stored_InBulk_Total", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_InBulk_Total", SqlDbType.VarChar).Value = Stored_InBulk_Total.Trim();

        if (Stored_NotinBulk_ClassA.ToString().Trim() == "" || Stored_NotinBulk_ClassA.ToString().Trim() == null)
            com.Parameters.Add("@Stored_NotinBulk_ClassA", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_NotinBulk_ClassA", SqlDbType.VarChar).Value = Stored_NotinBulk_ClassA.Trim();

        if (Stored_NotinBulk_ClassB.ToString().Trim() == "" || Stored_NotinBulk_ClassB.ToString().Trim() == null)
            com.Parameters.Add("@Stored_NotinBulk_ClassB", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_NotinBulk_ClassB", SqlDbType.VarChar).Value = Stored_NotinBulk_ClassB.Trim();

        if (Stored_NotinBulk_ClassC.ToString().Trim() == "" || Stored_NotinBulk_ClassC.ToString().Trim() == null)
            com.Parameters.Add("@Stored_NotinBulk_ClassC", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_NotinBulk_ClassC", SqlDbType.VarChar).Value = Stored_NotinBulk_ClassC.Trim();

        if (Stored_NotinBulk_ClassTotal.ToString().Trim() == "" || Stored_NotinBulk_ClassTotal.ToString().Trim() == null)
            com.Parameters.Add("@Stored_NotinBulk_ClassTotal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_NotinBulk_ClassTotal", SqlDbType.VarChar).Value = Stored_NotinBulk_ClassTotal.Trim();

        if (Stored_Total_Class_A.ToString().Trim() == "" || Stored_Total_Class_A.ToString().Trim() == null)
            com.Parameters.Add("@Stored_Total_Class_A", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_Total_Class_A", SqlDbType.VarChar).Value = Stored_Total_Class_A.Trim();

        if (Stored_Total_Class_B.ToString().Trim() == "" || Stored_Total_Class_B.ToString().Trim() == null)
            com.Parameters.Add("@Stored_Total_Class_B", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_Total_Class_B", SqlDbType.VarChar).Value = Stored_Total_Class_B.Trim();

        if (Stored_Total_Class_C.ToString().Trim() == "" || Stored_Total_Class_C.ToString().Trim() == null)
            com.Parameters.Add("@Stored_Total_Class_C", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_Total_Class_C", SqlDbType.VarChar).Value = Stored_Total_Class_C.Trim();

        if (Stored_Total_Totals.ToString().Trim() == "" || Stored_Total_Totals.ToString().Trim() == null)
            com.Parameters.Add("@Stored_Total_Totals", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Stored_Total_Totals", SqlDbType.VarChar).Value = Stored_Total_Totals.Trim();

        if (SalesTaxDetails.ToString().Trim() == "" || SalesTaxDetails.ToString().Trim() == null)
            com.Parameters.Add("@SalesTaxDetails", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SalesTaxDetails", SqlDbType.VarChar).Value = SalesTaxDetails.Trim();

        if (Exploside_LicenseDetails.ToString().Trim() == "" || Exploside_LicenseDetails.ToString().Trim() == null)
            com.Parameters.Add("@Exploside_LicenseDetails", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Exploside_LicenseDetails", SqlDbType.VarChar).Value = Exploside_LicenseDetails.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();
        //----------------------------------------------------------

        if (LicenseYear.ToString().Trim() == "" || LicenseYear.ToString().Trim() == null)
            com.Parameters.Add("@LicenseYear", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LicenseYear", SqlDbType.VarChar).Value = LicenseYear;

        if (RegularHp.ToString().Trim() == "" || RegularHp.ToString().Trim() == null)
            com.Parameters.Add("@RegularHp", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@RegularHp", SqlDbType.VarChar).Value = RegularHp;

        if (StandbyHp.ToString().Trim() == "" || StandbyHp.ToString().Trim() == null)
            com.Parameters.Add("@StandbyHp", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@StandbyHp", SqlDbType.VarChar).Value = StandbyHp;

        if (Mangr_Full_Name.ToString().Trim() == "" || Mangr_Full_Name.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_Full_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_Full_Name", SqlDbType.VarChar).Value = Mangr_Full_Name.Trim();

        if (Mangr_DoorNo.ToString().Trim() == "" || Mangr_DoorNo.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_DoorNo", SqlDbType.VarChar).Value = Mangr_DoorNo.Trim();

        if (Mangr_Locality.ToString().Trim() == "" || Mangr_Locality.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_Locality", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_Locality", SqlDbType.VarChar).Value = Mangr_Locality.Trim();

        if (Mangr_District.ToString().Trim() == "" || Mangr_District.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_District", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_District", SqlDbType.VarChar).Value = Mangr_District;

        if (Mangr_Mandal.ToString().Trim() == "" || Mangr_Mandal.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_Mandal", SqlDbType.VarChar).Value = Mangr_Mandal;

        if (Mangr_Village.ToString().Trim() == "" || Mangr_Village.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_Village", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_Village", SqlDbType.VarChar).Value = Mangr_Village;

        if (Mangr_PinCode.ToString().Trim() == "" || Mangr_PinCode.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_PinCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_PinCode", SqlDbType.VarChar).Value = Mangr_PinCode;

        if (Mangr_EmailId.ToString().Trim() == "" || Mangr_EmailId.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_EmailId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_EmailId", SqlDbType.VarChar).Value = Mangr_EmailId.Trim();

        if (Mangr_MobileNo.ToString().Trim() == "" || Mangr_MobileNo.ToString().Trim() == null)
            com.Parameters.Add("@Mangr_MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mangr_MobileNo", SqlDbType.VarChar).Value = Mangr_MobileNo.Trim();

        if (Occupier_Full_Name.ToString().Trim() == "" || Occupier_Full_Name.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_Full_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_Full_Name", SqlDbType.VarChar).Value = Occupier_Full_Name.Trim();

        if (Occupier_DoorNo.ToString().Trim() == "" || Occupier_DoorNo.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_DoorNo", SqlDbType.VarChar).Value = Occupier_DoorNo.Trim();

        if (Occupier_Locality.ToString().Trim() == "" || Occupier_Locality.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_Locality", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_Locality", SqlDbType.VarChar).Value = Occupier_Locality.Trim();

        if (Occupier_District.ToString().Trim() == "" || Occupier_District.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_District", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_District", SqlDbType.VarChar).Value = Occupier_District;

        if (Occupier_Mandal.ToString().Trim() == "" || Occupier_Mandal.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_Mandal", SqlDbType.VarChar).Value = Occupier_Mandal;

        if (Occupier_Village.ToString().Trim() == "" || Occupier_Village.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_Village", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_Village", SqlDbType.Int).Value = Occupier_Village;

        if (Occupier_PinCode.ToString().Trim() == "" || Occupier_PinCode.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_PinCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_PinCode", SqlDbType.VarChar).Value = Occupier_PinCode;

        if (Occupier_EmailId.ToString().Trim() == "" || Occupier_EmailId.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_EmailId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_EmailId", SqlDbType.VarChar).Value = Occupier_EmailId.Trim();

        if (Occupier_MobileNo.ToString().Trim() == "" || Occupier_MobileNo.ToString().Trim() == null)
            com.Parameters.Add("@Occupier_MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Occupier_MobileNo", SqlDbType.VarChar).Value = Occupier_MobileNo.Trim();

        if (Owner_Full_Name.ToString().Trim() == "" || Owner_Full_Name.ToString().Trim() == null)
            com.Parameters.Add("@Owner_Full_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_Full_Name", SqlDbType.VarChar).Value = Owner_Full_Name.Trim();

        if (Owner_DoorNo.ToString().Trim() == "" || Owner_DoorNo.ToString().Trim() == null)
            com.Parameters.Add("@Owner_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_DoorNo", SqlDbType.VarChar).Value = Owner_DoorNo.Trim();

        if (Owner_Locality.ToString().Trim() == "" || Owner_Locality.ToString().Trim() == null)
            com.Parameters.Add("@Owner_Locality", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_Locality", SqlDbType.VarChar).Value = Owner_Locality.Trim();

        if (Owner_District.ToString().Trim() == "" || Owner_District.ToString().Trim() == null)
            com.Parameters.Add("@Owner_District", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_District", SqlDbType.VarChar).Value = Owner_District;

        if (Owner_Mandal.ToString().Trim() == "" || Owner_Mandal.ToString().Trim() == null)
            com.Parameters.Add("@Owner_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_Mandal", SqlDbType.VarChar).Value = Owner_Mandal;

        if (Owner_Village.ToString().Trim() == "" || Owner_Village.ToString().Trim() == null)
            com.Parameters.Add("@Owner_Village", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_Village", SqlDbType.VarChar).Value = Owner_Village;

        if (Owner_PinCode.ToString().Trim() == "" || Owner_PinCode.ToString().Trim() == null)
            com.Parameters.Add("@Owner_PinCode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_PinCode", SqlDbType.VarChar).Value = Owner_PinCode;

        if (Owner_EmailId.ToString().Trim() == "" || Owner_EmailId.ToString().Trim() == null)
            com.Parameters.Add("@Owner_EmailId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_EmailId", SqlDbType.VarChar).Value = Owner_EmailId.Trim();

        if (Owner_MobileNo.ToString().Trim() == "" || Owner_MobileNo.ToString().Trim() == null)
            com.Parameters.Add("@Owner_MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Owner_MobileNo", SqlDbType.VarChar).Value = Owner_MobileNo;
        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return Convert.ToInt32(com.ExecuteScalar());
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }
    public int insertCFOBoiler(
       string intCFOBoilerid,
          string intQuessionaireCFOid,
          string intCFOEnterpid,
          string Uid_No,
          string Reg_Id,
          string Reg_No_Boiler,
          string Name_Owner,
          string Location,
          string Date_Inpec_Desirable,
          string Desc_Boiler_Age,
          string Makers_name,
          string Type_Boiler,
          string Boiler_User_for,
          string Boiler_ration,
          string Place_Manfacture,
          string Year_Manfacture,
          string Allowed_Max_Presure,
          string Econ_Maker_Number,
          string Heating_Surface_boiler,
          string Max_Conti_Evapron,
          string Class_Erector,
          string Name_of_Erector,
          string State_Erector,
          string Max_Presure_Econ,
          string Tot_Lenght_Steam_PipeLine,
          string Created_by,
          string Modified_by,
        string componentperson,
        string inspectingauthority, string ErectorClass)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFOBoilersDet";


        if (intCFOBoilerid.ToString().Trim() == "" || intCFOBoilerid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = intCFOBoilerid.Trim();

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

        if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

        if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

        if (Reg_No_Boiler.ToString().Trim() == "" || Reg_No_Boiler.ToString().Trim() == null)
            com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = Reg_No_Boiler.Trim();

        if (Name_Owner.ToString().Trim() == "" || Name_Owner.ToString().Trim() == null)
            com.Parameters.Add("@Name_Owner", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Name_Owner", SqlDbType.VarChar).Value = Name_Owner.Trim();

        if (Location.ToString().Trim() == "" || Location.ToString().Trim() == null)
            com.Parameters.Add("@Location", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Location", SqlDbType.VarChar).Value = Location.Trim();

        if (Date_Inpec_Desirable.ToString().Trim() == "" || Date_Inpec_Desirable.ToString().Trim() == null)
            com.Parameters.Add("@Date_Inpec_Desirable", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date_Inpec_Desirable", SqlDbType.DateTime).Value = cmf.convertDateIndia(Date_Inpec_Desirable.Trim());

        if (Desc_Boiler_Age.ToString().Trim() == "" || Desc_Boiler_Age.ToString().Trim() == null)
            com.Parameters.Add("@Desc_Boiler_Age", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Desc_Boiler_Age", SqlDbType.VarChar).Value = Desc_Boiler_Age.Trim();

        if (Makers_name.ToString().Trim() == "" || Makers_name.ToString().Trim() == null)
            com.Parameters.Add("@Makers_name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Makers_name", SqlDbType.VarChar).Value = Makers_name.Trim();

        if (Type_Boiler.ToString().Trim() == "" || Type_Boiler.ToString().Trim() == null || Type_Boiler.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Type_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type_Boiler", SqlDbType.VarChar).Value = Type_Boiler.Trim();

        if (Boiler_User_for.ToString().Trim() == "" || Boiler_User_for.ToString().Trim() == null || Boiler_User_for.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = Boiler_User_for.Trim();

        if (Boiler_ration.ToString().Trim() == "" || Boiler_ration.ToString().Trim() == null)
            com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = Boiler_ration.Trim();

        if (Place_Manfacture.ToString().Trim() == "" || Place_Manfacture.ToString().Trim() == null)
            com.Parameters.Add("@Place_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Place_Manfacture", SqlDbType.VarChar).Value = Place_Manfacture.Trim();

        if (Year_Manfacture.ToString().Trim() == "" || Year_Manfacture.ToString().Trim() == null)
            com.Parameters.Add("@Year_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Year_Manfacture", SqlDbType.VarChar).Value = Year_Manfacture.Trim();

        if (Allowed_Max_Presure.ToString().Trim() == "" || Allowed_Max_Presure.ToString().Trim() == null)
            com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = Allowed_Max_Presure.Trim();

        if (Econ_Maker_Number.ToString().Trim() == "" || Econ_Maker_Number.ToString().Trim() == null)
            com.Parameters.Add("@Econ_Maker_Number", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Econ_Maker_Number", SqlDbType.VarChar).Value = Econ_Maker_Number.Trim();

        if (Heating_Surface_boiler.ToString().Trim() == "" || Heating_Surface_boiler.ToString().Trim() == null)
            com.Parameters.Add("@Heating_Surface_boiler", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Heating_Surface_boiler", SqlDbType.VarChar).Value = Heating_Surface_boiler.Trim();

        if (Max_Conti_Evapron.ToString().Trim() == "" || Max_Conti_Evapron.ToString().Trim() == null)
            com.Parameters.Add("@Max_Conti_Evapron", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Max_Conti_Evapron", SqlDbType.VarChar).Value = Max_Conti_Evapron.Trim();

        if (Class_Erector.ToString().Trim() == "" || Class_Erector.ToString().Trim() == null)
            com.Parameters.Add("@Class_Erector", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Class_Erector", SqlDbType.VarChar).Value = Class_Erector.Trim();

        if (Name_of_Erector.ToString().Trim() == "" || Name_of_Erector.ToString().Trim() == null)
            com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = Name_of_Erector.Trim();

        if (State_Erector.ToString().Trim() == "" || State_Erector.ToString().Trim() == null || State_Erector.ToString().Trim() == "--Select--")
            com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = State_Erector.Trim();

        if (Max_Presure_Econ.ToString().Trim() == "" || Max_Presure_Econ.ToString().Trim() == null)
            com.Parameters.Add("@Max_Presure_Econ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Max_Presure_Econ", SqlDbType.VarChar).Value = Max_Presure_Econ.Trim();

        if (Tot_Lenght_Steam_PipeLine.ToString().Trim() == "" || Tot_Lenght_Steam_PipeLine.ToString().Trim() == null)
            com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = Tot_Lenght_Steam_PipeLine.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (componentperson.ToString().Trim() == "" || componentperson.ToString().Trim() == null)
            com.Parameters.Add("@ComponentPerson", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ComponentPerson", SqlDbType.VarChar).Value = componentperson.Trim();

        if (inspectingauthority.ToString().Trim() == "" || inspectingauthority.ToString().Trim() == null)
            com.Parameters.Add("@InspectingAuthorityType", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectingAuthorityType", SqlDbType.VarChar).Value = inspectingauthority.Trim();
        if (ErectorClass.ToString().Trim() == "" || ErectorClass.ToString().Trim() == null)
            com.Parameters.Add("@ErectorClass", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ErectorClass", SqlDbType.VarChar).Value = ErectorClass.Trim();

        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }
    public DataSet GetQuesionaryID(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getQuesssionerCFOID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetCFOEnterprenuerDetailsNew(string intSBenid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("GetCFODetailsPrint", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intSBenid.Trim() == "" || intSBenid.Trim() == null || intSBenid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intSBenid;
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();

        }
        return ds;
    }

    public DataSet ViewAttachmentCFO(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("sp_RetriveCFOAttachment", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            da.Fill(ds);

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public int InsertCFOAttachement(
    //          string intQuessionaireCFOid,
    //          string intCFOEnterpid,
    //          string Uid_No,
    //          string Reg_Id,
    //          string AttachmentTypeName,
    //          string AttachmentFilename,
    //          string AttachmentFilePath,
    //          string Status,
    //          string Created_by,
    //          string FileDescription)
    //{
    //    try
    //    {

    //        con.OpenConnection();
    //        SqlDataAdapter myDataAdapter;

    //        myDataAdapter = new SqlDataAdapter("sp_CFOAttachmentDet", con.GetConnection);
    //        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (intQuessionaireCFOid.Trim() == "" || intQuessionaireCFOid.Trim() == null)
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireCFOid.Trim());
    //        }

    //        if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFOEnterpid.Trim());
    //        }

    //        if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();
    //        }

    //        if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null)
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();
    //        }

    //        if (AttachmentTypeName.Trim() == "" || AttachmentTypeName.Trim() == null || AttachmentTypeName.Trim() == "--Select--")
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = AttachmentTypeName.Trim();
    //        }

    //        if (AttachmentFilename.Trim() == "" || AttachmentFilename.Trim() == null || AttachmentFilename.Trim() == "--Select--")
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = AttachmentFilename.Trim();
    //        }

    //        if (AttachmentFilePath.Trim() == "" || AttachmentFilePath.Trim() == null || AttachmentFilePath.Trim() == "--Select--")
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = AttachmentFilePath.Trim();
    //        }

    //        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Int32.Parse(Created_by.Trim());
    //        }

    //        if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();
    //        }


    //        if (FileDescription.Trim() == "" || FileDescription.Trim() == null)
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
    //        }
    //        int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


    //        if (n > 0)
    //        {
    //            return 1;
    //        }
    //        else
    //        {
    //            return 0;
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        con.CloseConnection();
    //        throw ex;

    //    }
    //    finally
    //    {

    //        con.CloseConnection();

    //    }
    //}






    //public int insertCFOQuestionerrie(string Sector_Ent, string Prop_intDistrictid, string Prop_intMandalid, string Prop_intVillageid, string Val_Land, string Val_Build, string Val_Plant, string Tot_PrjCost,
    //                    string HaveyourTakePolution, string intLineofActivityid, string Pol_Category, string License_Factory, string High_Tension_Meter, string NOC_Fire, string Product_Drugs, string Bioler_Industry, string Created_by)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertCFOQuessionary";

    //    if (Sector_Ent == "" || Sector_Ent == null || Sector_Ent.Trim() == "--Select--")
    //        com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();

    //    if (Prop_intDistrictid == "" || Prop_intDistrictid == null || Prop_intDistrictid.Trim() == "--Select--")
    //        com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = Prop_intDistrictid.Trim();

    //    if (Prop_intMandalid == "" || Prop_intMandalid == null || Prop_intMandalid.Trim() == "--Select--")
    //        com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = Prop_intMandalid.Trim();

    //    if (Prop_intVillageid == "" || Prop_intVillageid == null || Prop_intVillageid.Trim() == "--Select--")
    //        com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = Prop_intVillageid.Trim();

    //    if (Val_Land == "" || Val_Land == null || Val_Land.Trim() == "--Select--")
    //        com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();

    //    if (Val_Build == "" || Val_Build == null || Val_Build.Trim() == "--Select--")
    //        com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();

    //    if (Val_Plant == "" || Val_Plant == null || Val_Plant.Trim() == "--Select--")
    //        com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();


    //    if (Tot_PrjCost == "" || Tot_PrjCost == null || Tot_PrjCost.Trim() == "--Select--")
    //        com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();


    //    if (HaveyourTakePolution == "" || HaveyourTakePolution == null || HaveyourTakePolution.Trim() == "--Select--")
    //        com.Parameters.Add("@HaveyourTakePolution", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@HaveyourTakePolution", SqlDbType.VarChar).Value = HaveyourTakePolution.Trim();
    //    //string intLineofActivityid, string Pol_Category, string License_Factory, string High_Tension_Meter, string NOC_Fire, string Product_Drugs, string Bioler_Industry
    //    if (intLineofActivityid == "" || intLineofActivityid == null || intLineofActivityid.Trim() == "--Select--")
    //        com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = intLineofActivityid.Trim();

    //    if (Pol_Category == "" || Pol_Category == null || Pol_Category.Trim() == "--Select--")
    //        com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();

    //    if (License_Factory == "" || License_Factory == null || License_Factory.Trim() == "--Select--")
    //        com.Parameters.Add("@License_Factory", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@License_Factory", SqlDbType.VarChar).Value = License_Factory.Trim();

    //    if (High_Tension_Meter == "" || High_Tension_Meter == null || High_Tension_Meter.Trim() == "--Select--")
    //        com.Parameters.Add("@High_Tension_Meter", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@High_Tension_Meter", SqlDbType.VarChar).Value = High_Tension_Meter.Trim();

    //    if (NOC_Fire == "" || NOC_Fire == null || NOC_Fire.Trim() == "--Select--")
    //        com.Parameters.Add("@NOC_Fire", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NOC_Fire", SqlDbType.VarChar).Value = NOC_Fire.Trim();

    //    if (Product_Drugs == "" || Product_Drugs == null || NOC_Fire.Trim() == "--Select--")
    //        com.Parameters.Add("@Product_Drugs", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Product_Drugs", SqlDbType.VarChar).Value = Product_Drugs.Trim();

    //    if (Bioler_Industry == "" || Bioler_Industry == null || Bioler_Industry.Trim() == "--Select--")
    //        com.Parameters.Add("@Bioler_Industry", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Bioler_Industry", SqlDbType.VarChar).Value = Bioler_Industry.Trim();


    //    if (Created_by == "" || Created_by == null || Created_by.Trim() == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }

    //}

    //public DataSet GetCFOQuestionereisReceiptDetails(string intQuessionaireid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetCFOQuestionereisReceiptDetails", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public int insetEnterprenuerdataCFO(string @intCFOEnterpid,
    //     string intQuessionaireCFOid,
    //     string intQuessionaireid,
    //     string NameofIndustrialUnder,
    //     string NameofthePromoter,
    //     string SoWo,
    //     string Age,
    //     string Occupation,
    //     string intStateid,
    //     string intDistrictid,
    //     string intMandalid,
    //     string intVillageid,
    //     string StreetName,
    //     string Door_No,
    //     string Land_Mark,
    //     string Pincode,
    //     string MobileNumber,
    //     string Email,
    //     string Fax,
    //     string intTypeofOrganization,
    //     string TelephoneNumber,
    //     string AdultMale,
    //     string AdultFemale,
    //     string Adolescents_Male,
    //     string Adolescents_Female,
    //     string Children_Male,
    //     string Children_Female,
    //     string intCategoryofReg,
    //     string Reg_No,
    //     string Reg_Date,
    //     string Reg_ExpDate,
    //     string TypeofFactory,
    //     string Reg_id,
    //     string UID_No,
    //     string Created_by,
    //  string @Modified_by, string DistrictName, string Mandalname, string VillageName
    //    )
    //{


    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertEnterPrenuerdetailsCFO";

    //    if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "0";
    //    else
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

    //    if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

    //    if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null)
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


    //    if (DistrictName.ToString().Trim() == "" || DistrictName.ToString().Trim() == null)
    //        com.Parameters.Add("@DistrictName", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DistrictName", SqlDbType.VarChar).Value = DistrictName.Trim();


    //    if (Mandalname.ToString().Trim() == "" || Mandalname.ToString().Trim() == null)
    //        com.Parameters.Add("@Mandalname", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Mandalname", SqlDbType.VarChar).Value = Mandalname.Trim();



    //    if (VillageName.ToString().Trim() == "" || VillageName.ToString().Trim() == null)
    //        com.Parameters.Add("@VillageName", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@VillageName", SqlDbType.VarChar).Value = VillageName.Trim();

    //    if (NameofIndustrialUnder.ToString().Trim() == "" || NameofIndustrialUnder.ToString().Trim() == null)
    //        com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NameofIndustrialUnder", SqlDbType.VarChar).Value = NameofIndustrialUnder.Trim();

    //    if (NameofthePromoter.ToString().Trim() == "" || NameofthePromoter.ToString().Trim() == null)
    //        com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NameofthePromoter", SqlDbType.VarChar).Value = NameofthePromoter.Trim();

    //    if (SoWo.ToString().Trim() == "" || SoWo.ToString().Trim() == null)
    //        com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@SoWo", SqlDbType.VarChar).Value = SoWo.Trim();

    //    if (Age.ToString().Trim() == "" || Age.ToString().Trim() == null)
    //        com.Parameters.Add("@Age", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Age", SqlDbType.VarChar).Value = Age.Trim();

    //    //if (Age.ToString().Trim() == "" || Age.ToString().Trim() == null)
    //    //    com.Parameters.Add("@Age", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@Age", SqlDbType.VarChar).Value = Age.Trim();

    //    if (Occupation.ToString().Trim() == "" || Occupation.ToString().Trim() == null)
    //        com.Parameters.Add("@Occupation", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Occupation", SqlDbType.VarChar).Value = Occupation.Trim();

    //    if (intStateid.ToString().Trim() == "" || intStateid.ToString().Trim() == null || intStateid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intStateid", SqlDbType.VarChar).Value = intStateid.Trim();

    //    if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

    //    if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

    //    if (intVillageid.ToString().Trim() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();

    //    if (StreetName.ToString().Trim() == "" || StreetName.ToString().Trim() == null)
    //        com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@StreetName", SqlDbType.VarChar).Value = StreetName.Trim();

    //    if (Door_No.ToString().Trim() == "" || Door_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Door_No", SqlDbType.VarChar).Value = Door_No.Trim();

    //    if (Land_Mark.ToString().Trim() == "" || Land_Mark.ToString().Trim() == null)
    //        com.Parameters.Add("@Land_Mark", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Land_Mark", SqlDbType.VarChar).Value = Land_Mark.Trim();

    //    if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null)
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

    //    if (MobileNumber.ToString().Trim() == "" || MobileNumber.ToString().Trim() == null)
    //        com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();

    //    if (Email.ToString().Trim() == "" || Email.ToString().Trim() == null)
    //        com.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

    //    if (Fax.ToString().Trim() == "" || Fax.ToString().Trim() == null)
    //        com.Parameters.Add("@Fax", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Fax", SqlDbType.VarChar).Value = Fax.Trim();

    //    if (intTypeofOrganization.ToString().Trim() == "" || intTypeofOrganization.ToString().Trim() == null || intTypeofOrganization.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intTypeofOrganization", SqlDbType.VarChar).Value = intTypeofOrganization.Trim();

    //    if (TelephoneNumber.ToString().Trim() == "" || TelephoneNumber.ToString().Trim() == null)
    //        com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@TelephoneNumber", SqlDbType.VarChar).Value = TelephoneNumber.Trim();

    //    if (AdultMale.ToString().Trim() == "" || AdultMale.ToString().Trim() == null)
    //        com.Parameters.Add("@AdultMale", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@AdultMale", SqlDbType.VarChar).Value = AdultMale.Trim();

    //    if (AdultFemale.ToString().Trim() == "" || AdultFemale.ToString().Trim() == null)
    //        com.Parameters.Add("@AdultFemale", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@AdultFemale", SqlDbType.VarChar).Value = AdultFemale.Trim();

    //    if (Adolescents_Male.ToString().Trim() == "" || Adolescents_Male.ToString().Trim() == null)
    //        com.Parameters.Add("@Adolescents_Male", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Adolescents_Male", SqlDbType.VarChar).Value = Adolescents_Male.Trim();

    //    if (Adolescents_Female.ToString().Trim() == "" || Adolescents_Female.ToString().Trim() == null)
    //        com.Parameters.Add("@Adolescents_Female", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Adolescents_Female", SqlDbType.VarChar).Value = Adolescents_Female.Trim();

    //    if (Children_Male.ToString().Trim() == "" || Children_Male.ToString().Trim() == null)
    //        com.Parameters.Add("@Children_Male", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Children_Male", SqlDbType.VarChar).Value = Children_Male.Trim();

    //    if (Children_Female.ToString().Trim() == "" || Children_Female.ToString().Trim() == null)
    //        com.Parameters.Add("@Children_Female", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Children_Female", SqlDbType.VarChar).Value = Children_Female.Trim();

    //    if (intCategoryofReg.ToString().Trim() == "" || intCategoryofReg.ToString().Trim() == null || intCategoryofReg.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCategoryofReg", SqlDbType.VarChar).Value = intCategoryofReg.Trim();

    //    if (Reg_No.ToString().Trim() == "" || Reg_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_No", SqlDbType.VarChar).Value = Reg_No.Trim();

    //    if (Reg_Date.ToString().Trim() == "" || Reg_Date.ToString().Trim() == null || Reg_Date.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_Date.Trim());

    //    if (Reg_ExpDate.ToString().Trim() == "" || Reg_ExpDate.ToString().Trim() == null || Reg_ExpDate.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Reg_ExpDate", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_ExpDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_ExpDate.Trim());

    //    if (TypeofFactory.ToString().Trim() == "" || TypeofFactory.ToString().Trim() == null || TypeofFactory.ToString().Trim() == "--Select Proposal--")
    //        com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@TypeofFactory", SqlDbType.VarChar).Value = TypeofFactory.Trim();

    //    if (Reg_id.ToString().Trim() == "" || Reg_id.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = Reg_id.Trim();

    //    if (UID_No.ToString().Trim() == "" || UID_No.ToString().Trim() == null)
    //        com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.Trim();

    //    if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null || Created_by.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null || Modified_by.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Modified_by ", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by ", SqlDbType.VarChar).Value = Modified_by.Trim();
    //    //---------------------------------------------------------------------------------------------------------------
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return Convert.ToInt32(com.ExecuteScalar());
    //        //if (returnvalue == DBNull.Value || returnvalue == null)
    //        //    return 0;
    //        //else
    //        //    return Convert.ToInt32(returnvalue);

    //        object returnvalue = com.ExecuteScalar();
    //        if (returnvalue == DBNull.Value || returnvalue == null)
    //            return 0;
    //        else
    //            return Convert.ToInt32(returnvalue);

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        //return 0;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}


    //public int insetCFOPowerDet(
    //       string intCFOPowerid,
    //       string intQuessionaireCFOid,
    //       string intCFOEnterpid,
    //       string Uid_No,
    //       string Reg_Id,
    //       string Cont_Demand_Max_Already,
    //       string Cont_Demand_Max_Proposed,
    //       string Cont_Demand_Max_Total,
    //       string Connect_Load_A,
    //       string Connect_Load_B,
    //       string Connect_Load_C,
    //       string Prop_Location,
    //       string intDistrictid,
    //       string intMandalid,
    //       string Village_Name,
    //       string Street_Name,
    //       string Pincode,
    //       string Telephonce_No,
    //       string Nearest_Tel_No,
    //       string Date_Comm_Production,
    //       string Created_by,
    //       string Modified_by,
    //       string Extent,
    //       string Type_of_connect_Load,
    //    string Survey_No)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertCFOPowerDet";

    //    if (intCFOPowerid.ToString().Trim() == "" || intCFOPowerid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOPowerid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFOPowerid", SqlDbType.VarChar).Value = intCFOPowerid.Trim();

    //    if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "0";
    //    else
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

    //    if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


    //    if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

    //    if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

    //    if (Cont_Demand_Max_Already.ToString().Trim() == "" || Cont_Demand_Max_Already.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = Cont_Demand_Max_Already.Trim();

    //    if (Cont_Demand_Max_Proposed.ToString().Trim() == "" || Cont_Demand_Max_Proposed.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = Cont_Demand_Max_Proposed.Trim();

    //    if (Cont_Demand_Max_Total.ToString().Trim() == "" || Cont_Demand_Max_Total.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = Cont_Demand_Max_Total.Trim();

    //    if (Connect_Load_A.ToString().Trim() == "" || Connect_Load_A.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = Connect_Load_A.Trim();

    //    if (Connect_Load_B.ToString().Trim() == "" || Connect_Load_B.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = Connect_Load_B.Trim();

    //    if (Connect_Load_C.ToString().Trim() == "" || Connect_Load_C.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = Connect_Load_C.Trim();

    //    if (Prop_Location.ToString().Trim() == "" || Prop_Location.ToString().Trim() == null)
    //        com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = Prop_Location.Trim();


    //    if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

    //    if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

    //    if (Village_Name.ToString().Trim() == "" || Village_Name.ToString().Trim() == null || Village_Name.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = Village_Name.Trim();



    //    if (Street_Name.ToString().Trim() == "" || Street_Name.ToString().Trim() == null)
    //        com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = Street_Name.Trim();

    //    if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null)
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

    //    if (Telephonce_No.ToString().Trim() == "" || Telephonce_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = Telephonce_No.Trim();

    //    if (Nearest_Tel_No.ToString().Trim() == "" || Nearest_Tel_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = Nearest_Tel_No.Trim();

    //    if (Date_Comm_Production.ToString().Trim() == "" || Date_Comm_Production.ToString().Trim() == null)
    //        com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = Date_Comm_Production.Trim();

    //    if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

    //    if (Extent.ToString().Trim() == "" || Extent.ToString().Trim() == null)
    //        com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = Extent.Trim();

    //    if (Type_of_connect_Load.ToString().Trim() == "" || Type_of_connect_Load.ToString().Trim() == null || Type_of_connect_Load.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = Type_of_connect_Load.Trim();

    //    if (Survey_No.ToString().Trim() == "" || Survey_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = Survey_No.Trim();


    //    //---------------------------------------------------------------------------------------------------------------
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return Convert.ToInt32(com.ExecuteScalar());
    //        //if (returnvalue == DBNull.Value || returnvalue == null)
    //        //    return 0;
    //        //else
    //        //    return Convert.ToInt32(returnvalue);

    //        object returnvalue = com.ExecuteScalar();
    //        if (returnvalue == DBNull.Value || returnvalue == null)
    //            return 0;
    //        else
    //            return Convert.ToInt32(returnvalue);

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        //return 0;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}

    //public int insetCFOPowerDet(
    //       string intCFOPowerid,
    //       string intQuessionaireCFOid,
    //       string intCFOEnterpid,
    //       string Uid_No,
    //       string Reg_Id,
    //       string Cont_Demand_Max_Already,
    //       string Cont_Demand_Max_Proposed,
    //       string Cont_Demand_Max_Total,
    //       string Connect_Load_A,
    //       string Connect_Load_B,
    //       string Connect_Load_C,
    //       string Prop_Location,
    //       string intDistrictid,
    //       string intMandalid,
    //       string Village_Name,
    //       string Street_Name,
    //       string Pincode,
    //       string Telephonce_No,
    //       string Nearest_Tel_No,
    //       string Date_Comm_Production,
    //       string Created_by,
    //       string Modified_by,
    //       string Extent,
    //       string Type_of_connect_Load,
    //    string Survey_No,
    //    string Regulation_type, string Plant_slno, string Voltage_Slno, string aggregatecapacity)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertCFOPowerDet";

    //    if (intCFOPowerid.ToString().Trim() == "" || intCFOPowerid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOPowerid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFOPowerid", SqlDbType.VarChar).Value = intCFOPowerid.Trim();

    //    if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "0";
    //    else
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

    //    if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


    //    if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

    //    if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

    //    if (Cont_Demand_Max_Already.ToString().Trim() == "" || Cont_Demand_Max_Already.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = Cont_Demand_Max_Already.Trim();

    //    if (Cont_Demand_Max_Proposed.ToString().Trim() == "" || Cont_Demand_Max_Proposed.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = Cont_Demand_Max_Proposed.Trim();

    //    if (Cont_Demand_Max_Total.ToString().Trim() == "" || Cont_Demand_Max_Total.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = Cont_Demand_Max_Total.Trim();

    //    if (Connect_Load_A.ToString().Trim() == "" || Connect_Load_A.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = Connect_Load_A.Trim();

    //    if (Connect_Load_B.ToString().Trim() == "" || Connect_Load_B.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = Connect_Load_B.Trim();

    //    if (Connect_Load_C.ToString().Trim() == "" || Connect_Load_C.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = Connect_Load_C.Trim();

    //    if (Prop_Location.ToString().Trim() == "" || Prop_Location.ToString().Trim() == null)
    //        com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = Prop_Location.Trim();


    //    if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

    //    if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

    //    if (Village_Name.ToString().Trim() == "" || Village_Name.ToString().Trim() == null || Village_Name.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = Village_Name.Trim();



    //    if (Street_Name.ToString().Trim() == "" || Street_Name.ToString().Trim() == null)
    //        com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = Street_Name.Trim();

    //    if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null)
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

    //    if (Telephonce_No.ToString().Trim() == "" || Telephonce_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = Telephonce_No.Trim();

    //    if (Nearest_Tel_No.ToString().Trim() == "" || Nearest_Tel_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = Nearest_Tel_No.Trim();

    //    if (Date_Comm_Production.ToString().Trim() == "" || Date_Comm_Production.ToString().Trim() == null)
    //        com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = Date_Comm_Production.Trim();

    //    if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

    //    if (Extent.ToString().Trim() == "" || Extent.ToString().Trim() == null)
    //        com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = Extent.Trim();

    //    if (Type_of_connect_Load.ToString().Trim() == "" || Type_of_connect_Load.ToString().Trim() == null || Type_of_connect_Load.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = Type_of_connect_Load.Trim();

    //    if (Survey_No.ToString().Trim() == "" || Survey_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = Survey_No.Trim();

    //    if (Regulation_type.ToString().Trim() == "" || Regulation_type.ToString().Trim() == null)
    //        com.Parameters.Add("@Regulation_type", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Regulation_type", SqlDbType.VarChar).Value = Regulation_type.Trim();

    //    if (Plant_slno.ToString().Trim() == "" || Plant_slno.ToString().Trim() == null)
    //        com.Parameters.Add("@Plant_slno", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Plant_slno", SqlDbType.VarChar).Value = Plant_slno.Trim();

    //    if (Voltage_Slno.ToString().Trim() == "" || Voltage_Slno.ToString().Trim() == null)
    //        com.Parameters.Add("@Voltage_Slno", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Voltage_Slno", SqlDbType.VarChar).Value = Voltage_Slno.Trim();

    //    if (aggregatecapacity.ToString().Trim() == "" || aggregatecapacity.ToString().Trim() == null)
    //        com.Parameters.Add("@AggregateCapacity", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@AggregateCapacity", SqlDbType.VarChar).Value = aggregatecapacity.Trim();

    //    //---------------------------------------------------------------------------------------------------------------
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return Convert.ToInt32(com.ExecuteScalar());
    //        //if (returnvalue == DBNull.Value || returnvalue == null)
    //        //    return 0;
    //        //else
    //        //    return Convert.ToInt32(returnvalue);

    //        object returnvalue = com.ExecuteScalar();
    //        if (returnvalue == DBNull.Value || returnvalue == null)
    //            return 0;
    //        else
    //            return Convert.ToInt32(returnvalue);

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        //return 0;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}

    //public int insetCFOPowerDet(
    //       string intCFOPowerid,
    //       string intQuessionaireCFOid,
    //       string intCFOEnterpid,
    //       string Uid_No,
    //       string Reg_Id,
    //       string Cont_Demand_Max_Already,
    //       string Cont_Demand_Max_Proposed,
    //       string Cont_Demand_Max_Total,
    //       string Connect_Load_A,
    //       string Connect_Load_B,
    //       string Connect_Load_C,
    //       string Prop_Location,
    //       string intDistrictid,
    //       string intMandalid,
    //       string Village_Name,
    //       string Street_Name,
    //       string Pincode,
    //       string Telephonce_No,
    //       string Nearest_Tel_No,
    //       string Date_Comm_Production,
    //       string Created_by,
    //       string Modified_by,
    //       string Extent,
    //       string Type_of_connect_Load,
    //    string Survey_No)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertCFOPowerDet";

    //    if (intCFOPowerid.ToString().Trim() == "" || intCFOPowerid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOPowerid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intCFOPowerid", SqlDbType.VarChar).Value = intCFOPowerid.Trim();

    //    if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "0";
    //    else
    //        com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

    //    if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


    //    if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

    //    if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

    //    if (Cont_Demand_Max_Already.ToString().Trim() == "" || Cont_Demand_Max_Already.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = Cont_Demand_Max_Already.Trim();

    //    if (Cont_Demand_Max_Proposed.ToString().Trim() == "" || Cont_Demand_Max_Proposed.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = Cont_Demand_Max_Proposed.Trim();

    //    if (Cont_Demand_Max_Total.ToString().Trim() == "" || Cont_Demand_Max_Total.ToString().Trim() == null)
    //        com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = Cont_Demand_Max_Total.Trim();

    //    if (Connect_Load_A.ToString().Trim() == "" || Connect_Load_A.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = Connect_Load_A.Trim();

    //    if (Connect_Load_B.ToString().Trim() == "" || Connect_Load_B.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = Connect_Load_B.Trim();

    //    if (Connect_Load_C.ToString().Trim() == "" || Connect_Load_C.ToString().Trim() == null)
    //        com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = Connect_Load_C.Trim();

    //    if (Prop_Location.ToString().Trim() == "" || Prop_Location.ToString().Trim() == null)
    //        com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = Prop_Location.Trim();


    //    if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

    //    if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

    //    if (Village_Name.ToString().Trim() == "" || Village_Name.ToString().Trim() == null || Village_Name.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = Village_Name.Trim();



    //    if (Street_Name.ToString().Trim() == "" || Street_Name.ToString().Trim() == null)
    //        com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = Street_Name.Trim();

    //    if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null)
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

    //    if (Telephonce_No.ToString().Trim() == "" || Telephonce_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = Telephonce_No.Trim();

    //    if (Nearest_Tel_No.ToString().Trim() == "" || Nearest_Tel_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = Nearest_Tel_No.Trim();

    //    if (Date_Comm_Production.ToString().Trim() == "" || Date_Comm_Production.ToString().Trim() == null)
    //        com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = Date_Comm_Production.Trim();

    //    if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

    //    if (Extent.ToString().Trim() == "" || Extent.ToString().Trim() == null)
    //        com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = Extent.Trim();

    //    if (Type_of_connect_Load.ToString().Trim() == "" || Type_of_connect_Load.ToString().Trim() == null || Type_of_connect_Load.ToString().Trim() == "--Select--")
    //        com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = Type_of_connect_Load.Trim();

    //    if (Survey_No.ToString().Trim() == "" || Survey_No.ToString().Trim() == null)
    //        com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = Survey_No.Trim();


    //    //---------------------------------------------------------------------------------------------------------------
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return Convert.ToInt32(com.ExecuteScalar());
    //        //if (returnvalue == DBNull.Value || returnvalue == null)
    //        //    return 0;
    //        //else
    //        //    return Convert.ToInt32(returnvalue);

    //        object returnvalue = com.ExecuteScalar();
    //        if (returnvalue == DBNull.Value || returnvalue == null)
    //            return 0;
    //        else
    //            return Convert.ToInt32(returnvalue);

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        //return 0;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetQuesionaryID(string Created_by)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("getQuesssionerCFOID", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}



    //public DataSet ViewAttachmentCFO(string intEnterprenuerid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();

    //    try
    //    {
    //        da = new SqlDataAdapter("sp_RetriveCFOAttachment", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

    //        da.Fill(ds);

    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public int insetCFOPowerDet(
               string intCFOPowerid,
               string intQuessionaireCFOid,
               string intCFOEnterpid,
               string Uid_No,
               string Reg_Id,
               string Cont_Demand_Max_Already,
               string Cont_Demand_Max_Proposed,
               string Cont_Demand_Max_Total,
               string Connect_Load_A,
               string Connect_Load_B,
               string Connect_Load_C,
               string Prop_Location,
               string intDistrictid,
               string intMandalid,
               string Village_Name,
               string Street_Name,
               string Pincode,
               string Telephonce_No,
               string Nearest_Tel_No,
               string Date_Comm_Production,
               string Created_by,
               string Modified_by,
               string Extent,
               string Type_of_connect_Load,
            string Survey_No,
            string Regulation_type, string Plant_slno, string Voltage_Slno, string aggregatecapacity, List<LoadParticulars> lstLoadParticulars, List<CircuitBreakerLoad> lstCircuitBreakerLoad,
            List<TransformerTest> lstTransformerTest, List<ABSwitchIsolator> lstABSwitchIsolator, List<LightningArrestor> lstLightningArrestor,
            List<GeneratorsTestFuel> lstGeneratorsTestFuel, List<PreCommissioning> lstPreCommissioning, List<Transmissionlines> lstTransmissionlines, string filenumber)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFOPowerDet";

        if (intCFOPowerid.ToString().Trim() == "" || intCFOPowerid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOPowerid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOPowerid", SqlDbType.VarChar).Value = intCFOPowerid.Trim();

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


        if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

        if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

        if (Cont_Demand_Max_Already.ToString().Trim() == "" || Cont_Demand_Max_Already.ToString().Trim() == null)
            com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = Cont_Demand_Max_Already.Trim();

        if (Cont_Demand_Max_Proposed.ToString().Trim() == "" || Cont_Demand_Max_Proposed.ToString().Trim() == null)
            com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = Cont_Demand_Max_Proposed.Trim();

        if (Cont_Demand_Max_Total.ToString().Trim() == "" || Cont_Demand_Max_Total.ToString().Trim() == null)
            com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = Cont_Demand_Max_Total.Trim();

        if (Connect_Load_A.ToString().Trim() == "" || Connect_Load_A.ToString().Trim() == null)
            com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = Connect_Load_A.Trim();

        if (Connect_Load_B.ToString().Trim() == "" || Connect_Load_B.ToString().Trim() == null)
            com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = Connect_Load_B.Trim();

        if (Connect_Load_C.ToString().Trim() == "" || Connect_Load_C.ToString().Trim() == null)
            com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = Connect_Load_C.Trim();

        if (Prop_Location.ToString().Trim() == "" || Prop_Location.ToString().Trim() == null)
            com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = Prop_Location.Trim();


        if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

        if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

        if (Village_Name.ToString().Trim() == "" || Village_Name.ToString().Trim() == null || Village_Name.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = Village_Name.Trim();



        if (Street_Name.ToString().Trim() == "" || Street_Name.ToString().Trim() == null)
            com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = Street_Name.Trim();

        if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null)
            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

        if (Telephonce_No.ToString().Trim() == "" || Telephonce_No.ToString().Trim() == null)
            com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = Telephonce_No.Trim();

        if (Nearest_Tel_No.ToString().Trim() == "" || Nearest_Tel_No.ToString().Trim() == null)
            com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = Nearest_Tel_No.Trim();

        if (Date_Comm_Production.ToString().Trim() == "" || Date_Comm_Production.ToString().Trim() == null)
            com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = Date_Comm_Production.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Extent.ToString().Trim() == "" || Extent.ToString().Trim() == null)
            com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = Extent.Trim();

        if (Type_of_connect_Load.ToString().Trim() == "" || Type_of_connect_Load.ToString().Trim() == null || Type_of_connect_Load.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = Type_of_connect_Load.Trim();

        if (Survey_No.ToString().Trim() == "" || Survey_No.ToString().Trim() == null)
            com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = Survey_No.Trim();

        if (Regulation_type.ToString().Trim() == "" || Regulation_type.ToString().Trim() == null)
            com.Parameters.Add("@Regulation_type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Regulation_type", SqlDbType.VarChar).Value = Regulation_type.Trim();

        if (Plant_slno.ToString().Trim() == "" || Plant_slno.ToString().Trim() == null)
            com.Parameters.Add("@Plant_slno", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Plant_slno", SqlDbType.VarChar).Value = Plant_slno.Trim();

        if (Voltage_Slno.ToString().Trim() == "" || Voltage_Slno.ToString().Trim() == null)
            com.Parameters.Add("@Voltage_Slno", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Voltage_Slno", SqlDbType.VarChar).Value = Voltage_Slno.Trim();

        if (aggregatecapacity.ToString().Trim() == "" || aggregatecapacity.ToString().Trim() == null)
            com.Parameters.Add("@AggregateCapacity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AggregateCapacity", SqlDbType.VarChar).Value = aggregatecapacity.Trim();

        if (filenumber.ToString().Trim() == "" || filenumber.ToString().Trim() == null)
            com.Parameters.Add("@filenumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@filenumber", SqlDbType.VarChar).Value = filenumber.Trim();

        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return Convert.ToInt32(com.ExecuteScalar());
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            else if (Convert.ToInt32(returnvalue) > 0)
            {
                int valid = 0;
                con.OpenConnection();
                SqlCommand cmd = null;

                foreach (LoadParticulars loadvo in lstLoadParticulars)
                {
                    cmd = new SqlCommand("USP_INSERT_Load_Particulars", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CFOEnterpid", Convert.ToString(intCFOEnterpid));
                    cmd.Parameters.AddWithValue("@QuessionaireidCFO", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@EquipmentName", Convert.ToString(loadvo.EquipmentName));
                    cmd.Parameters.AddWithValue("@Make", Convert.ToString(loadvo.Make));
                    cmd.Parameters.AddWithValue("@SerialNo", Convert.ToString(loadvo.SerialNo));
                    cmd.Parameters.AddWithValue("@CapacityinKV", Convert.ToString(loadvo.CapacityinKV));
                    cmd.Parameters.AddWithValue("@CapacityinHP", Convert.ToString(loadvo.CapacityinHP));
                    cmd.Parameters.AddWithValue("@LoadUpload", Convert.ToString(loadvo.LoadUpload));
                    cmd.Parameters.AddWithValue("@capacityloadpath", Convert.ToString(loadvo.capacityloadpath));

                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(loadvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }

                foreach (CircuitBreakerLoad CircuitBreakerLoadvo in lstCircuitBreakerLoad)
                {
                    cmd = new SqlCommand("USP_INSERT_Circuit_BreakerLoad", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CFOEnterpid", Convert.ToString(intCFOEnterpid));
                    cmd.Parameters.AddWithValue("@QuessionaireidCFO", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Location", Convert.ToString(CircuitBreakerLoadvo.Location));
                    cmd.Parameters.AddWithValue("@Make", Convert.ToString(CircuitBreakerLoadvo.Make));
                    cmd.Parameters.AddWithValue("@CBSerialNo", Convert.ToString(CircuitBreakerLoadvo.CBSerialNo));
                    cmd.Parameters.AddWithValue("@CapacityA", Convert.ToString(CircuitBreakerLoadvo.CapacityA));
                    cmd.Parameters.AddWithValue("@ISCKA", Convert.ToString(CircuitBreakerLoadvo.ISCKA));
                    cmd.Parameters.AddWithValue("@TestCertificateUpload", Convert.ToString(CircuitBreakerLoadvo.TestCertificateUpload));
                    cmd.Parameters.AddWithValue("@testcertificatefilepath", Convert.ToString(CircuitBreakerLoadvo.testcertificatefilepath));
                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(CircuitBreakerLoadvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }

                foreach (TransformerTest TransformerTestvo in lstTransformerTest)
                {
                    cmd = new SqlCommand("USP_INSERT_Transformer_Test", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CFOEnterpid", Convert.ToString(intCFOEnterpid));
                    cmd.Parameters.AddWithValue("@QuessionaireidCFO", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Transformer", Convert.ToString(TransformerTestvo.Transformer));
                    cmd.Parameters.AddWithValue("@TypeofTransformer", Convert.ToString(TransformerTestvo.TypeofTransformer));
                    cmd.Parameters.AddWithValue("@Capacity", Convert.ToString(TransformerTestvo.Capacity));
                    cmd.Parameters.AddWithValue("@Make", Convert.ToString(TransformerTestvo.Make));
                    cmd.Parameters.AddWithValue("@SerialNo", Convert.ToString(TransformerTestvo.SerialNo));
                    cmd.Parameters.AddWithValue("@VoltageHVLV", Convert.ToString(TransformerTestvo.VoltageHVLV));
                    cmd.Parameters.AddWithValue("@OilTestUpload", Convert.ToString(TransformerTestvo.OilTestUpload));
                    cmd.Parameters.AddWithValue("@TransformerTestUpload", Convert.ToString(TransformerTestvo.TransformerTestUpload));
                    cmd.Parameters.AddWithValue("@transformeruploadfilepath", Convert.ToString(TransformerTestvo.transformeruploadfilepath));
                    //cmd.Parameters.AddWithValue("@id", Convert.ToString(TransformerTestvo.id));
                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(TransformerTestvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }

                foreach (ABSwitchIsolator ABSwitchIsolatorvo in lstABSwitchIsolator)
                {
                    cmd = new SqlCommand("USP_INSERT_ABSwitch_Isolator", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CFOEnterpid", Convert.ToString(intCFOEnterpid));
                    cmd.Parameters.AddWithValue("@QuessionaireidCFO", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Location", Convert.ToString(ABSwitchIsolatorvo.Location));
                    cmd.Parameters.AddWithValue("@WithorWithoutEarthSwitch", Convert.ToString(ABSwitchIsolatorvo.WithorWithoutEarthSwitch));
                    cmd.Parameters.AddWithValue("@VoltageV", Convert.ToString(ABSwitchIsolatorvo.VoltageV));
                    cmd.Parameters.AddWithValue("@CapacityA", Convert.ToString(ABSwitchIsolatorvo.CapacityA));
                    cmd.Parameters.AddWithValue("@Make", Convert.ToString(ABSwitchIsolatorvo.Make));
                    cmd.Parameters.AddWithValue("@SerialNo", Convert.ToString(ABSwitchIsolatorvo.SerialNo));
                    cmd.Parameters.AddWithValue("@TestUpload", Convert.ToString(ABSwitchIsolatorvo.TestUpload));
                    cmd.Parameters.AddWithValue("@testuploadpath", Convert.ToString(ABSwitchIsolatorvo.testuploadpath));
                    //cmd.Parameters.AddWithValue("@id", Convert.ToString(ABSwitchIsolatorvo.id));
                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(ABSwitchIsolatorvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }

                foreach (LightningArrestor LightningArrestorvo in lstLightningArrestor)
                {
                    cmd = new SqlCommand("USP_INSERT_Lightning_Arrestor", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CFOEnterpid", Convert.ToString(intCFOEnterpid));
                    cmd.Parameters.AddWithValue("@QuessionaireidCFO", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Location", Convert.ToString(LightningArrestorvo.Location));
                    cmd.Parameters.AddWithValue("@VoltageV", Convert.ToString(LightningArrestorvo.VoltageV));
                    cmd.Parameters.AddWithValue("@CapacityA", Convert.ToString(LightningArrestorvo.CapacityA));
                    cmd.Parameters.AddWithValue("@Make", Convert.ToString(LightningArrestorvo.Make));
                    cmd.Parameters.AddWithValue("@SerialNo", Convert.ToString(LightningArrestorvo.SerialNo));
                    cmd.Parameters.AddWithValue("@TestUpload", Convert.ToString(LightningArrestorvo.TestUpload));
                    cmd.Parameters.AddWithValue("@Testuploadfilepath", Convert.ToString(LightningArrestorvo.Testuploadfilepath));
                    //cmd.Parameters.AddWithValue("@id", Convert.ToString(LightningArrestorvo.id));
                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(LightningArrestorvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }

                foreach (GeneratorsTestFuel GeneratorsTestFuelvo in lstGeneratorsTestFuel)
                {
                    cmd = new SqlCommand("USP_INSERT_GeneratorsTest_Fuel", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CFOEnterpid", Convert.ToString(intCFOEnterpid));
                    cmd.Parameters.AddWithValue("@QuessionaireidCFO", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Location", Convert.ToString(GeneratorsTestFuelvo.Location));
                    cmd.Parameters.AddWithValue("@CapacityA", Convert.ToString(GeneratorsTestFuelvo.CapacityA));
                    cmd.Parameters.AddWithValue("@Make", Convert.ToString(GeneratorsTestFuelvo.Make));
                    cmd.Parameters.AddWithValue("@SerialNo", Convert.ToString(GeneratorsTestFuelvo.SerialNo));
                    cmd.Parameters.AddWithValue("@FuelType", Convert.ToString(GeneratorsTestFuelvo.FuelType));
                    cmd.Parameters.AddWithValue("@FuelSource", Convert.ToString(GeneratorsTestFuelvo.FuelSource));
                    cmd.Parameters.AddWithValue("@SoxNoxEmission", Convert.ToString(GeneratorsTestFuelvo.SoxNoxEmission));
                    cmd.Parameters.AddWithValue("@Mercury", Convert.ToString(GeneratorsTestFuelvo.Mercury));
                    cmd.Parameters.AddWithValue("@HeatRateDetails", Convert.ToString(GeneratorsTestFuelvo.HeatRateDetails));
                    cmd.Parameters.AddWithValue("@FuelTestUpload", Convert.ToString(GeneratorsTestFuelvo.FuelTestUpload));

                    cmd.Parameters.AddWithValue("@FuelTestUploadfilepath", Convert.ToString(GeneratorsTestFuelvo.FuelTestUploadfilepath));
                    //cmd.Parameters.AddWithValue("@id", Convert.ToString(GeneratorsTestFuelvo.id));
                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(GeneratorsTestFuelvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }

                foreach (PreCommissioning PreCommissioningvo in lstPreCommissioning)
                {
                    cmd = new SqlCommand("USP_INSERT_Pre_Commissioning", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CFOEnterpid", Convert.ToString(intCFOEnterpid));
                    cmd.Parameters.AddWithValue("@QuessionaireidCFO", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Equipment", Convert.ToString(PreCommissioningvo.Equipment));
                    cmd.Parameters.AddWithValue("@Description", Convert.ToString(PreCommissioningvo.Description));
                    cmd.Parameters.AddWithValue("@CommissioningUpload", Convert.ToString(PreCommissioningvo.CommissioningUpload));
                    cmd.Parameters.AddWithValue("@CommissioningUploadfilepath", Convert.ToString(PreCommissioningvo.CommissioningUploadfilepath));

                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(PreCommissioningvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }

                foreach (Transmissionlines Transmissionlinesvo in lstTransmissionlines)
                {
                    cmd = new SqlCommand("USP_INSERT_Transmission_lines", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@CFOEnterpid", Convert.ToString(intCFOEnterpid));
                    cmd.Parameters.AddWithValue("@QuessionaireidCFO", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Description", Convert.ToString(Transmissionlinesvo.Description));
                    cmd.Parameters.AddWithValue("@TransmissionUpload", Convert.ToString(Transmissionlinesvo.TransmissionUpload));
                    cmd.Parameters.AddWithValue("@TransmissionUploadfilepath", Convert.ToString(Transmissionlinesvo.TransmissionUploadfilepath));


                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(Transmissionlinesvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }

                return 1;

            }
            else
            {
                return 0;
            }

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public int InsertCFOAttachement(
              string intQuessionaireCFOid,
              string intCFOEnterpid,
              string Uid_No,
              string Reg_Id,
              string AttachmentTypeName,
              string AttachmentFilename,
              string AttachmentFilePath,
              string Status,
              string Created_by,
              string FileDescription)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_CFOAttachmentDet", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireCFOid.Trim() == "" || intQuessionaireCFOid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireCFOid.Trim());
            }

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFOEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();
            }

            if (AttachmentTypeName.Trim() == "" || AttachmentTypeName.Trim() == null || AttachmentTypeName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = AttachmentTypeName.Trim();
            }

            if (AttachmentFilename.Trim() == "" || AttachmentFilename.Trim() == null || AttachmentFilename.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = AttachmentFilename.Trim();
            }

            if (AttachmentFilePath.Trim() == "" || AttachmentFilePath.Trim() == null || AttachmentFilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = AttachmentFilePath.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Int32.Parse(Created_by.Trim());
            }

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();
            }


            if (FileDescription.Trim() == "" || FileDescription.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }
            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }
    }


    public int InsertCFOAttachementApproval(
             string intQuessionaireCFOid,
             string intCFOEnterpid,
             string Uid_No,
             string Reg_Id,
             string AttachmentTypeName,
             string AttachmentFilename,
             string AttachmentFilePath,
             string Status,
             string Created_by,
             string FileDescription, string intDeptid, string intApprovalid)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_CFOAttachmentDetDeptApproval", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = intDeptid.Trim();
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = intApprovalid.Trim();
            }


            if (intQuessionaireCFOid.Trim() == "" || intQuessionaireCFOid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireCFOid.Trim());
            }

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFOEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();
            }

            if (AttachmentTypeName.Trim() == "" || AttachmentTypeName.Trim() == null || AttachmentTypeName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = AttachmentTypeName.Trim();
            }

            if (AttachmentFilename.Trim() == "" || AttachmentFilename.Trim() == null || AttachmentFilename.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = AttachmentFilename.Trim();
            }

            if (AttachmentFilePath.Trim() == "" || AttachmentFilePath.Trim() == null || AttachmentFilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = AttachmentFilePath.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Int32.Parse(Created_by.Trim());
            }

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();
            }


            if (FileDescription.Trim() == "" || FileDescription.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }
            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }
    }

    //public DataSet GetShowQuestionariesCFO(string Created_by)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("getQuesssionerCFOID", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet GetdataofEnterprenuerCFO(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofEnterprenuerCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid1", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid1", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet getNatureofOrg()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("getNatureofOrg", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getCategoryRegistration()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("getCategoryofRegistration", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetdataofRenewalsbylogin(string usercode)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofRenewalsbylogin", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (usercode.Trim() == "" || usercode.Trim() == null)
                da.SelectCommand.Parameters.Add("@usercode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@usercode", SqlDbType.VarChar).Value = usercode.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    //public DataSet Getpaymentdetailslats(string intDeptid, string UID_No, string nameofunit,string District, string paymentmode)
    //{

    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetPaymentdtailsCFE", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;




    //        if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();
    //        if (paymentmode.Trim() == "" || paymentmode.Trim() == null || paymentmode.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = paymentmode.ToString();

    //        if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
    //        if (UID_No.Trim() == "" || UID_No.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.ToString();

    //        if (nameofunit.Trim() == "" || nameofunit.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }


    //}

    public DataSet Getpaymentdetailslats(string intDeptid, string UID_No, string nameofunit, string District, string paymentmode, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetPaymentdtailsCFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (fromdate.Trim() == "" || fromdate.Trim() == null || fromdate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = cmf.convertDateIndia(fromdate);

            if (todate.Trim() == "" || todate.Trim() == null || todate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(todate);

            if (paymentmode.Trim() == "" || paymentmode.Trim() == null || paymentmode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = paymentmode.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            if (UID_No.Trim() == "" || UID_No.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null)
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet Getcfepaydetails(string intDeptid, string UID_No, string nameofunit, string District, string paymentmode, string fromdate, string todate, string BankName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GETPAYMENTDETAILS_CFE_NEW]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (fromdate.Trim() == "" || fromdate.Trim() == null || fromdate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                //  da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = cmf.convertDateIndia(fromdate);
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = (fromdate);

            if (todate.Trim() == "" || todate.Trim() == null || todate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = (todate);

            if (paymentmode.Trim() == "" || paymentmode.Trim() == null || paymentmode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = paymentmode.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            if (UID_No.Trim() == "" || UID_No.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null)
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();

            if (BankName.Trim() == "" || BankName.Trim() == null)
                da.SelectCommand.Parameters.Add("@BankName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.ToString();


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetpaymentdetailslatsCFO(string intDeptid, string UID_No, string nameofunit, string District, string paymentmode, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetPaymentdtailsCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (fromdate.Trim() == "" || fromdate.Trim() == null || fromdate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = cmf.convertDateIndia(fromdate);

            if (todate.Trim() == "" || todate.Trim() == null || todate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(todate);

            if (paymentmode.Trim() == "" || paymentmode.Trim() == null || paymentmode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = paymentmode.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            if (UID_No.Trim() == "" || UID_No.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null)
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    //public int insertRenewaldata(string Amount, string created_by, string filename, string intRenewalDeptId)
    //{

    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertRenewalDetails";

    //    if (Amount == "" || Amount == null)
    //        com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();

    //    if (created_by == "" || created_by == null || created_by == "--Select--")
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();

    //    if (filename == "" || filename == null || filename == "--Select--")
    //        com.Parameters.Add("@filename", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@filename", SqlDbType.VarChar).Value = filename.Trim();

    //    if (intRenewalDeptId == "" || intRenewalDeptId == null || intRenewalDeptId == "--Select--")
    //        com.Parameters.Add("@intRenewalDeptId", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intRenewalDeptId", SqlDbType.VarChar).Value = intRenewalDeptId.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }

    //}

    public DataSet getAmountofRenewal(string dept)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getamountbyRenewaldept", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (dept.Trim() == "" || dept.Trim() == null)
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetSectorbylineofactivity(string intLineAct)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getSectorsbylinectivity", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intLineAct.Trim() == "" || intLineAct.Trim() == null || intLineAct.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intLineAct", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intLineAct", SqlDbType.VarChar).Value = intLineAct.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public int insertRenewaldata(string created_by, string filename, string filename1, string Year, string Employes, string filePath, string Attchmentname, string intRenewalDeptId)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertRenewalDetails";

        if (filePath == "" || filePath == null || filePath == "--Select")
            com.Parameters.Add("@filePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@filePath", SqlDbType.VarChar).Value = filePath.Trim();

        if (Attchmentname == "" || Attchmentname == null || Attchmentname == "--Select")
            com.Parameters.Add("@Attchmentname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Attchmentname", SqlDbType.VarChar).Value = Attchmentname.Trim();


        if (Employes == "" || Employes == null || Employes == "--Select")
            com.Parameters.Add("@Employes", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Employes", SqlDbType.VarChar).Value = Employes.Trim();

        if (Year == "" || Year == null || Year == "--Select")
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();


        if (created_by == "" || created_by == null || created_by == "--Select--")
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();

        if (filename == "" || filename == null || filename == "--Select--")
            com.Parameters.Add("@filename", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@filename", SqlDbType.VarChar).Value = filename.Trim();

        if (filename1 == "" || filename1 == null || filename1 == "--Select--")
            com.Parameters.Add("@filename1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@filename1", SqlDbType.VarChar).Value = filename1.Trim();

        if (intRenewalDeptId == "" || intRenewalDeptId == null || intRenewalDeptId == "--Select--")
            com.Parameters.Add("@intRenewalDeptId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intRenewalDeptId", SqlDbType.VarChar).Value = intRenewalDeptId.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }


    public DataSet Fetchsearchbydeptandlogin(string Created_by, string deptid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("Fetchdatabysearchbydept", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }




    }
    //created by suribabu on 25-04-2016
    //public DataSet FetchInspectionProgressRpt()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("FetchInspectionProgressRpt", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet RetriveStatusForViewApplication(string status, string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1Drildownbyid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getR1Drildownbyidfin(string status, string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1Drildownbyidfin", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetRPTAPPROVALSGIVENINTSiPASS(string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRPTAPPROVALSGIVENINTSiPASS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Ent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Ent", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getCertpendency(string status, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCertpendency", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusForViewApplicationCFO(string status, string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("getR1DrildownbyidCFO", con.GetConnection);
            da = new SqlDataAdapter("getR1DrildownbyidfinNew_CFO", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getR1DrildownbyidCFO(string status, string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertRenewalAttachement(
             string intQuessionaireCFOid,
             string intCFOEnterpid,
             string Uid_No,
             string Reg_Id,
             string AttachmentTypeName,
             string AttachmentFilename,
             string AttachmentFilePath,
             string Status,
             string Created_by,
             string FileDescription)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_RenewalAttachmentDet", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireCFOid.Trim() == "" || intQuessionaireCFOid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireCFOid.Trim());
            }

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFOEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();
            }

            if (AttachmentTypeName.Trim() == "" || AttachmentTypeName.Trim() == null || AttachmentTypeName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = AttachmentTypeName.Trim();
            }

            if (AttachmentFilename.Trim() == "" || AttachmentFilename.Trim() == null || AttachmentFilename.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = AttachmentFilename.Trim();
            }

            if (AttachmentFilePath.Trim() == "" || AttachmentFilePath.Trim() == null || AttachmentFilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = AttachmentFilePath.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Int32.Parse(Created_by.Trim());
            }

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();
            }


            if (FileDescription.Trim() == "" || FileDescription.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }
            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }
    }
    public DataSet RetriveStatusR1DrildownbyCost(string District, string fromdate, string todate)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyCost", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getR1DrildownbyCostCFO(string District)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyCostCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet RetriveStatusByType(string status, string type, string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRIDrillDownPhase2", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetRIDrillDownPhase2CFO(string status, string type, string Category, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("GetRIDrillDownPhase2CFO", con.GetConnection);
            da = new SqlDataAdapter("GetRIDrillDownPhase2New_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertUIDGeneration(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertUIDGeneration";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int UpdateAdditionalpaymentsUID(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnew";


        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public int InsertPaymentDisbusmentSBI(string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string IsActive, string Created_by, string intApprovalid)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentDisbusmentSBI";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());



        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();

        if (IsActive.ToString().Trim() == "" || IsActive.ToString().Trim() == null)
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = IsActive.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }




    public int InsertPaymentDisbusment(string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string IsActive, string Created_by, string intApprovalid, string ApplType)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentDisbusment";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());



        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();

        if (IsActive.ToString().Trim() == "" || IsActive.ToString().Trim() == null)
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = IsActive.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (ApplType.ToString().Trim() == "" || ApplType.ToString().Trim() == null)
            com.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    //created by Suribabu on 21-04-2016 Modified By abhilash 
    public DataSet FetchR6DrillDown(string status, string Category, string District, string Dept)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FetchR6DrillDown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            if (Dept.Trim() == "" || Dept.Trim() == null || Dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = Dept.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDeptbyinspection()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getinsepectionbydept", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet InspectionRptDrilown(string status, string type, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FetchInspectionListDrillDown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@IntType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IntType", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@DepartMentName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DepartMentName", SqlDbType.VarChar).Value = type.ToString();

            if (fromdate.Trim() == "" || fromdate.Trim() == null)
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.VarChar).Value = "";
            else
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.VarChar).Value = fromdate.ToString();


            if (todate.Trim() == "" || todate.Trim() == null)
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.VarChar).Value = "";
            else
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.VarChar).Value = todate.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet FetchInspectionProgressRpt(string Fromdate, string Todate, string dept)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("FetchInspectionProgressRpt_New", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            //con.OpenConnection();
            //SqlDataAdapter da;
            //DataSet ds = new DataSet();
            //try
            //{
            //    da = new SqlDataAdapter("FetchInspectionProgressRpt", con.GetConnection);
            //    da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Fromdate.Trim() == "" || Fromdate.Trim() == null || Fromdate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = "";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = Fromdate.Trim();
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = "";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = Todate.Trim();
            }


            if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = dept.Trim();
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;
    }



    public int DelCFOLineofActivity_Man(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DelCFOLineofActivity_Manfacture";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
    }






    public int DelCFOLineofActivity_Raw(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DelCFOLineofActivity_RawMetrial";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
    }

    public int bulkCFOLineofActivity_Man(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intQuessionaireCFOid", "intQuessionaireCFOid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intCFOEnterpid", "intCFOEnterpid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Manf_ItemName", "Manf_ItemName");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Manf_Item_Quantity", "Manf_Item_Quantity");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Manf_Item_Quantity_In", "Manf_Item_Quantity_In");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Manf_Item_Quantity_Per", "Manf_Item_Quantity_Per");

            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping8);


            bulkCopy.DestinationTableName = ("td_CFOLineofActivity_Manfacture");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }

    public int bulkInsertCFOLineofActivity_Raw(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intQuessionaireCFOid", "intQuessionaireCFOid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intCFOEnterpid", "intCFOEnterpid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Raw_ItemName", "Raw_ItemName");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Raw_Item_Quantity", "Raw_Item_Quantity");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Raw_Item_Quantity_In", "Raw_Item_Quantity_In");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Raw_Item_Quantity_Per", "Raw_Item_Quantity_Per");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");



            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping8);


            bulkCopy.DestinationTableName = ("td_CFOLineofActivity_RawMetrial");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }

    public DataSet getCFOLineofActRaw(string intCFOEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCFOLineofActivityRaw", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet getCFOLineofActMan(string intCFOEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCFOLineofActivityMan", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet GetdataofCFOPowerDet(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[getdataofCFOPowerDet]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid1", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid1", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdataofCFOFactoriesDet(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofCFOFactoriesDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid1", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid1", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetdataofCFOBoiler(string intQuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofCFOBoilersDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCompletedbyApproval(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet GetCompletedbyApproval1(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata1", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }


    public DataSet GetCompletedbyApproval1HMDA(string status, string FromDate, string Todate, string intDeptid, string Status)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata1HMDA", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet GetCompletedbyApproval2(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata12", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet GetCompletedbyApproval2HMDA(string status, string FromDate, string Todate, string intDeptid, string StatusA)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata12HMDA", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            if (StatusA.Trim() == "" || StatusA.Trim() == null || StatusA.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = StatusA.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    //public DataSet DistrictWiseReport()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetDistrictWisereport", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet sp_GetReport(string Category, string Department, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == "ALL" || Category.Trim() == null)
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (Department.Trim() == "" || Department.Trim() == "ALL" || Department.Trim() == null)
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();

            if (fromdate.Trim() == "" || fromdate.Trim() == null || fromdate.Trim() == "--Select--")
            {
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = "";
            }
            else
            {
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.Trim();
            }

            if (todate.Trim() == "" || todate.Trim() == null || todate.Trim() == "--Select--")
            {
                da.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = "";
            }
            else
            {
                da.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = todate.Trim();
            }

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentDashboardDetailsHMDAPart1(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetDepartmentDashboardDetailsHMDAPart1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetEnterprisebyID1(string Enterpriseid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetEnterprisebyIDCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Enterpriseid.Trim() == "" || Enterpriseid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Enterpriseid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Enterpriseid", SqlDbType.VarChar).Value = Enterpriseid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetShowApprovalandFeesQues(string SerchVer, string EnterpriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertQuetieneroesDeptCFO(string intQuessionaireid, string intDeptid, string intApprovalid, string Created_by, string Approval_Fee)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQuetieneroesDeptCFO";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.Decimal).Value = Convert.ToDecimal(Approval_Fee.Trim());

        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetShowQuestionariesCFOnew(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowQuestionariesCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet Getdataofinnerdatacells(string nameofunit)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdatabydistbyunit", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (nameofunit.Trim() == "" || nameofunit.Trim() == null || nameofunit.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQuestionereisReceiptDetailsCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getDeptApprCFODetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public int insertDepartmentAprrovalNewCFO(string intQuessionaireid, string intDeptid, string intApprovalid, string Approval_Fee, string IsPayment, string Created_by, string IsOffline)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insDepartmentApprovalsCFODetails";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = Approval_Fee.Trim();

        if (IsPayment == "" || IsPayment == null)
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (IsOffline == "" || IsOffline == null)
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();





        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }



    public DataSet GetDeptApprovaldatabyQueCFO(string Queid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getDeptApprovalCFObyQue", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Queid.Trim() == "" || Queid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Enterpriseid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Enterpriseid", SqlDbType.VarChar).Value = Queid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }



    public int updatenonPaymentinCFOQue(string intQuessionaireCFOid, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "getUpdatedataswithoutpayments";

        if (intQuessionaireCFOid == "" || intQuessionaireCFOid == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public int updatenonPaymentinCFOQueNew(string intQuessionaireCFOid, string Created_by, string HdfApprovalid, string HdfAmount)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[getUpdatedataswithoutpayments_LiveTest]";

        if (intQuessionaireCFOid == "" || intQuessionaireCFOid == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = HdfApprovalid.Trim();
        com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = HdfAmount.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }
    public int updatenonPaymentinCFEQueNew(string intQuessionaireCFOid, string Created_by, string HdfApprovalid, string HdfAmount)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[getUpdatedataswithoutpayments_CFE]";

        if (intQuessionaireCFOid == "" || intQuessionaireCFOid == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = HdfApprovalid.Trim();
        com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = HdfAmount.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }
    public int UpdDepartmentAprrovalNewCFO(string intQuessionaireid, string intDeptid, string intApprovalid, string Approval_Fee, string IsPayment, string Created_by, string IsOffline)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdDepartmentAprrovalNewCFODetails";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = Approval_Fee.Trim();

        if (IsPayment == "" || IsPayment == null)
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (IsOffline == "" || IsOffline == null)
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();





        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet getIncentiveDetailsStatus(string dist, string Ename, string Applno, string Status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("getIncentiveDetailsStatus", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Ename.Trim() == "" || Ename.Trim() == null || Ename.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Ename", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Ename", SqlDbType.VarChar).Value = Ename.ToString();
            if (Applno.ToString().Trim() == "" || Applno.ToString().Trim() == null)
            {
                da.SelectCommand.Parameters.Add("@Applno", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                da.SelectCommand.Parameters.Add("@Applno", SqlDbType.VarChar).Value = Applno.ToString();
            }

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (dist.Trim() == "" || dist.Trim() == null || dist.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = dist.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int ChangeIncentiveStatus(string intApplicationid, string Status, string Modified_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "ChangeIncentiveStatus";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }




    public DataSet GetQuestionaryAprovalsApplyDataCFO(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQuestionaryAprovalsApplyDataNeworder", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet RetriveIsOfflineByAPPIDCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveDepartmentApprovalsByAppIDCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int UpdateRefferenceNumber1(string Refno, string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_UpdateRefNo1";


        if (Refno == "" || Refno == null)
            com.Parameters.Add("@Refno", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Refno", SqlDbType.VarChar).Value = Refno.Trim();

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public string RetriveRefNoCFO(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveRefNumberCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "";
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public string RetriveIsOfflineCFO(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveIsOfflineCFOnew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseReport(string financial)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictWisereport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (financial != null && financial != string.Empty && financial != "" && financial != "--Select--")
                da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = financial.ToString();
            else
                da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = DBNull.Value;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowDistricttFiles(string intStageid, string Districtid, string financial)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDistricttFiles", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (Districtid.Trim() == "" || Districtid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = Districtid.ToString();

            if (financial != null && financial != string.Empty && financial != "" && financial != "--Select--")
                da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = financial.ToString();
            else
                da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = DBNull.Value;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetEnterPreniourPayDetailsPaidDetCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetailsPaidDetCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int ChangestatusapproveNew(string int_fbid, string Status, string Remarks, string Modified_by, string IPAddress, string Updby, string TypeofProblem, string up_by, string Filepath, string Filename)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[sp_Updatehelpdesk_New]";

        if (int_fbid.Trim() == "" || int_fbid.Trim() == null)
            com.Parameters.Add("@int_fbid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@int_fbid", SqlDbType.Int).Value = int_fbid.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Modified_by.Trim();

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (Updby.Trim() == "" || Updby.Trim() == null)
            com.Parameters.Add("@Updby", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Updby", SqlDbType.VarChar).Value = Updby.Trim();

        if (TypeofProblem.Trim() == "" || TypeofProblem.Trim() == null)
            com.Parameters.Add("@TypeofProblem", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofProblem", SqlDbType.VarChar).Value = TypeofProblem.Trim();

        if (up_by.Trim() == "" || up_by.Trim() == null)
            com.Parameters.Add("@up_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@up_by", SqlDbType.VarChar).Value = up_by.Trim();
        if (Filename.Trim() == "" || Filename.Trim() == null)
            com.Parameters.Add("@Filename", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Filename", SqlDbType.VarChar).Value = Filename.Trim();
        if (Filepath.Trim() == "" || Filepath.Trim() == null)
            com.Parameters.Add("@Filepath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Filepath", SqlDbType.VarChar).Value = Filepath.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public DataSet HelpdescReport(string Fromdate, string Todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_New_export"
            da = new SqlDataAdapter("USP_GET_HELPDESCSTATUS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = Fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = Todate.ToString();

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet RetriveStatushelpdeskhistory(string status, string dept, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_HELPDESCSTATUS_DRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.ToString();

            if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = dept.ToString();

            da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetEnterPreniourPayDetailsCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetailsCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetUidnumberCFO(string intQuessionaireid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getUIDNumberdataCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetEnterPreneurdatabyQueCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerdatabyQuesCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet GetQuestionaryAprovalsApplyDataCFOnew(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQuestionaryAprovalsApplyDataCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet ViewAttachmetsDatabyPaymentddCFO(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveAttachmentsByCFEIDCFOdet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public int UpdateAdditionalpaymentsUIDCFO(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string ipaddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewCFO";

        if (ipaddress.Trim() == "" || ipaddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = ipaddress.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int InsertUIDGenerationCFO(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertUIDGenerationCFO";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int insertQueryResponsedataCFO(string intEnterpreniourApprovalid, string intCFEEnterpid, string QueryDescription, string QueryStatus, string Created_by, string intDeptid, string intApprovalid, string intQuessionaireid)
    {


        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQueriesDetailsCFO";

        if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null)
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = intEnterpreniourApprovalid.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (QueryDescription.Trim() == "" || QueryDescription.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();


        if (QueryStatus.Trim() == "" || QueryStatus.Trim() == null)
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }



    public DataSet getreceiptDetails(string TransNo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getreceiptDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (TransNo.Trim() == "" || TransNo.Trim() == null)
                da.SelectCommand.Parameters.Add("@TransNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TransNo", SqlDbType.VarChar).Value = TransNo.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet GetReferencenumberbydata(string TransactionNo)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getTransactiondata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (TransactionNo.Trim() == "" || TransactionNo.Trim() == null)
                da.SelectCommand.Parameters.Add("@TransactionNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@TransactionNo", SqlDbType.VarChar).Value = TransactionNo.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }




    public DataSet GetdataofApprovaldataAprovalCFO(string enterprenuer)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyidAprovalsCFO", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public DataSet GetdataofApprovaldataAprovalCFObyID(string enterprenuer, string intDeptid)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyidAprovalsCFONew", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }
    public int insertApprovalDataCFO(string Enterprenuer, string RefNo, string Status, string Modified_by, string intApprovalid, string intDeptid, string Remarks, string ipaddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "updateApprovaldataCFO";

        if (Enterprenuer.Trim() == "" || Enterprenuer.Trim() == null)
            com.Parameters.Add("@Enterprenuer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Enterprenuer", SqlDbType.VarChar).Value = Enterprenuer.Trim();

        if (ipaddress.Trim() == "" || ipaddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = ipaddress.Trim();

        if (RefNo.Trim() == "" || RefNo.Trim() == null)
            com.Parameters.Add("@RefNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@RefNo", SqlDbType.VarChar).Value = RefNo.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public DataSet GetCompletedbyApprovalCFO(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataCFO", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }
    public int UpdateAdditionalpaymentsBeforePreCFO(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string Reason, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewBeforePreCFO";

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();

        if (Reason.Trim() == "" || Reason.Trim() == null)
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = Reason.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int UpdateAdditionalpaymentsCFO(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string ipaddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewCFO";

        if (ipaddress.Trim() == "" || ipaddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = ipaddress.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public int InsertPaymentTransactionCFO(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentTransactionCFO";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int InsertNEFTPaymentTransactionCFO(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber, string Remarks, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertNEFTPaymentTransactionCFO";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null || IPAddress.Trim() == "--Select--")
        {
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        }

        if (Remarks.Trim() == "" || Remarks.Trim() == null || Remarks.Trim() == "--Select--")
        {
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetShowUsersList()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowUsersList", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertDepartmentProcessCFO(string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Trans_Date, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertDepartmentProcessCFO";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();

        if (Trans_Date == "" || Trans_Date == null)
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = cmf.convertDateIndia(Trans_Date);

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetShowDepartmentFilesCFO(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesCFO_CFONEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet RetriveStatusForViewApplicationDistrict(string status, string Category, string District)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidbyDistrict", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertQueryDetailsCFO(string intEnterpreniourApprovalid,
string intQuessionaireid,
string intCFEEnterpid,
string intDeptid,
string intApprovalid,
string QueryRaiseDate,
string QueryDescription,
string QueryStatus,
string QueryAttachmentFileName,
string QueryAttachmentFilePath,
string QueryRespondDate,
string QueryRespondRemarks,
string Created_by,
string Created_dt,
string Modified_by, string Modified_dt, string IPAddress)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertQueryDetailsCFO", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IPAddress.Trim() == "" || IPAddress.Trim() == null || IPAddress.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();
            }



            if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            //-------------------------------------------------
            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}
            //if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            //}

            //if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            //}

            //if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            //}

            //if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            //}

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            //if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            //if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            //if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            //if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            //if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            ////-------------------------------------------------
            //if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            //}

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            //if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            //}

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet ViewAttachmetsDataCFO(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveAttachmentsByCFEIDCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int InsertPaymentDisbusmentSBICFO(string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string IsActive, string Created_by, string intApprovalid)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentDisbusmentSBICFO";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());



        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();

        if (IsActive.ToString().Trim() == "" || IsActive.ToString().Trim() == null)
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = IsActive.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public int InsertPaymentDisbusmentCFO(string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string IsActive, string Created_by, string intApprovalid)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentDisbusmentCFO";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());



        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();

        if (IsActive.ToString().Trim() == "" || IsActive.ToString().Trim() == null)
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = IsActive.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet RetriveLinkForDDCFO(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveLinkForDDCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public string RetriveStatusBoilersCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveStatusBoilersCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public string RetriveStatusPCBCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveStatusPCBCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public string RetriveStatusHTCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveStatusHTCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public string RetriveStatusFactorydataCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveStatusFactorydataCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetQueryResponseDetailsByEnterpIDCFO(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveQueriesDetailsAndEntDetByIDCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetQueryStatusByTransactionIDCFO(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public DataSet GetShowSactionedIncentives(string SLCNumber)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetShowSactionedIncentives", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (SLCNumber.Trim() == "" || SLCNumber.Trim() == null || SLCNumber.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@SLCNumber", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@SLCNumber", SqlDbType.VarChar).Value = SLCNumber.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet RetriveStatusForViewApplicationDepartmentwise(string status, string Category, string District, string Dept)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidbyDepartment", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            if (Dept.Trim() == "" || Dept.Trim() == null || Dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getR1DrildownbyidbyDepartmentCFO(string status, string Category, string District, string Dept, string fromdate, string todate)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("getR1DrildownbyidbyDepartmentCFO", con.GetConnection);
            da = new SqlDataAdapter("getR1DrildownbyidbyDepartmentNew_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            if (Dept.Trim() == "" || Dept.Trim() == null || Dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet RetriveStatusForViewApplicationDistrictDrildowns(string status, string Category, string District)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidbyDistrictDril", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetNalaPENDENCYDetails(string status, string Category, string District)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FetchNALADISTRICTWiseDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusForViewApplicationDepartmentApprovalwise(string status, string Category, string District, string Dept, string intDeptid)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidbyDepartmentApprovalS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            if (Dept.Trim() == "" || Dept.Trim() == null || Dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();





            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusForViewApplicationDepartmentApprovalwiseCFO(string status, string Category, string District, string Dept, string intDeptid, string fromdate, string todate)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("getR1DrildownbyidbyDepartmentApprovalSCFO", con.GetConnection);
            da = new SqlDataAdapter("getR1DrildownbyidbyDepartmentApprovalSNew_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            if (Dept.Trim() == "" || Dept.Trim() == null || Dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public string RetriveStatusCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveStatusCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet Getverifyofque9CFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque9CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet GetverifyofqueCFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdatavarifyqueCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }





    public DataSet Getverifyofquepower9CFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyquePower9CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetverifyofqueFactory9CFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyqueFactory9CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetverifyofqueBoiler9CFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyqueboiler9CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet DistrictWiseReportCFO()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictWisereportCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet GetShowDistricttFilesCFO(string intStageid, string Districtid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDistricttFilesCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (Districtid.Trim() == "" || Districtid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = Districtid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public DataSet GetShowSactionedIncentives(string SLCNumber, string name, string typeofincentive)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetShowSactionedIncentives", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (SLCNumber.Trim() == "" || SLCNumber.Trim() == null || SLCNumber.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@SLCNumber", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@SLCNumber", SqlDbType.VarChar).Value = SLCNumber.ToString();

    //        if (name.Trim() == "" || name.Trim() == null || name.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@name", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@name", SqlDbType.VarChar).Value = name.ToString();


    //        if (typeofincentive.Trim() == "" || typeofincentive.Trim() == null || typeofincentive.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@typeofincentive", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@typeofincentive", SqlDbType.VarChar).Value = typeofincentive.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    public DataSet GetShowSactionedIncentives(string SLCNumber, string name, string typeofincentive, string EMpartnumber)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowSactionedIncentives", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (SLCNumber.Trim() == "" || SLCNumber.Trim() == null || SLCNumber.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@SLCNumber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SLCNumber", SqlDbType.VarChar).Value = SLCNumber.ToString();

            if (name.Trim() == "" || name.Trim() == null || name.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@name", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@name", SqlDbType.VarChar).Value = name.ToString();


            if (typeofincentive.Trim() == "" || typeofincentive.Trim() == null || typeofincentive.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@typeofincentive", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@typeofincentive", SqlDbType.VarChar).Value = typeofincentive.ToString();


            if (EMpartnumber.Trim() == "" || EMpartnumber.Trim() == null || EMpartnumber.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@EMpartnumber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EMpartnumber", SqlDbType.VarChar).Value = EMpartnumber.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowQuestionariesbyUIDPOP(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowQuestionariesbyUIDPOP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowQuestionariesbyUIDPOPCFO(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowQuestionariesbyUIDPOPCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQuestionereisPopup(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQuestionereispopup", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetQuestionereisPopupCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQuestionereispopupCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseReportCollector(string DistrictID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictWisereportCollector", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (DistrictID.Trim() == "" || DistrictID.Trim() == null)
                da.SelectCommand.Parameters.Add("@DistrictID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DistrictID", SqlDbType.VarChar).Value = DistrictID.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetPaymentDetails(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FetchEntrpPaymentDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (UID.Trim() == "" || UID.Trim() == null || UID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetPaymentDetailscfo(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FetchEntrpPaymentDetails_CFO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (UID.Trim() == "" || UID.Trim() == null || UID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdCommissionerApproval(string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Trans_Date, string Created_by, string intQid)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdCommissionerApproval";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();

        if (Trans_Date == "" || Trans_Date == null)
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = cmf.convertDateIndia(Trans_Date);

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (intQid == "" || intQid == null)
            com.Parameters.Add("@intQid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQid", SqlDbType.VarChar).Value = intQid.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetCFECertificatedata(string intApprovalid, string intDeptid, string intCFEEnterpid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCertificateDetailsdata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetTSNPDCL(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetTSNPDCL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // added newly for dept view draft page on 20.06.2017
    //public DataSet GetAllIncentivesDeptView(string CreatedBy)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[FetchIncentives_CAF_DEPT]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = CreatedBy;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    public DataSet GetTSSPDCL(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetTSSPDCL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet ApplicationWiseDetailedTrakerCFO(string Quesionary_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveR4ReportCFONew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Quesionary_id.Trim() == "" || Quesionary_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = Quesionary_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowQuestionariesCFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getQuesssionerCFOID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetShowApprovalandFeesPCBDIC(string SerchVer, string EnterpriseType, string Pol_Category, string GeneratorType, string Val_Plant, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesPCBDIC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (Pol_Category.Trim() == "" || Pol_Category.Trim() == null)
                da.SelectCommand.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.ToString();

            if (GeneratorType.Trim() == "" || GeneratorType.Trim() == null)
                da.SelectCommand.Parameters.Add("@GeneratorType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@GeneratorType", SqlDbType.VarChar).Value = GeneratorType.ToString();

            if (Val_Plant.Trim() == "" || Val_Plant.Trim() == null)
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.Decimal).Value = Convert.ToDecimal(Val_Plant.ToString());

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetCFECertificatedata(string intCFEEnterpid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCertificateDetailsdata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetShowEmailidandMobileNumber(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowEmailidandMobileNumber", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetShowEmailidandMobileNumbernew(string intQuessionaireid, string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowEmailidandMobileNumberNew1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowEmailidandMobileNumbernewCFO(string intQuessionaireid, string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowEmailidandMobileNumberNew1CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowEmailidandMobileNumberCFO(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowEmailidandMobileNumberCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetCentralInspectionDetails(string deptname, string regno, string year, string month)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_CENTRALINSPECTION_DETAILS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (deptname.Trim().ToString() == "" || deptname.ToString().Trim() == null)
                da.SelectCommand.Parameters.Add("@DEPTNAME", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@DEPTNAME", SqlDbType.VarChar).Value = deptname.Trim();


            if (regno.Trim().ToString() == "" || regno.ToString().Trim() == null)
                da.SelectCommand.Parameters.Add("@REGISTRATIONNO", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@REGISTRATIONNO", SqlDbType.VarChar).Value = regno.Trim();


            if (year == "" || year == null || year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = year.Trim();


            if (month == "" || month == null || month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = month.Trim();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowEmailidandMobileNumberDepartment(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowEmailidandMobileNumberDepartment", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentDashboardDetailsIndus(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetDepartmentDashboardDetailsIndus", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }






    public DataSet GetDepartmentDashboardDetailsCFOIndus(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetDepartmentDashboardDetailsCFOIndus", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet GetShowDepartmentFilesIndus(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesIndus", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }






    public DataSet GetShowDepartmentFilesCFOIndus(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesCFOIndus", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetdataofApprovaldataAprovalIndus(string enterprenuer)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyidAprovalsIndus", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }


    public DataSet GetdataofApprovaldataAprovalCFOIndus(string enterprenuer)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyidAprovalsCFOIndus", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public DataSet GetCompletedbyApprovalCFOIndus(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataCFOIndus", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet GetCompletedbyApprovalIndus(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataIndus", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet DeptReportDepartmentWise_New(string intDistrictid, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_New_export"
            da = new SqlDataAdapter("DeptReportDepartmentWise_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DeptReportDepartmentWise_New_export(string intDistrictid, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DeptReportDepartmentWise_New_export", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet DeptReportDepartmentWise_NewCFO(string intDistrictid, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_NewCFO_export"
            // da = new SqlDataAdapter("DeptReportDepartmentWise_NewCFO", con.GetConnection);
            da = new SqlDataAdapter("DeptReportDepartmentWise_New1_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DeptReportDepartmentWise_NewCFO_SMS(string intDistrictid, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_NewCFO_export"
            // da = new SqlDataAdapter("DeptReportDepartmentWise_NewCFO", con.GetConnection);
            da = new SqlDataAdapter("DeptReportDepartmentWise_New1_CFO_SMSNEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DeptReportDepartmentWise_NewCFO_export(string intDistrictid, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DeptReportDepartmentWise_NewCFO_export", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DeptReportDepartmentWise_NewpdfCFO(string intDistrictid, string Category, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_NewCFO_export"
            // da = new SqlDataAdapter("DeptReportDepartmentWise_NewCFO", con.GetConnection);
            da = new SqlDataAdapter("DeptReportDepartmentWise_New1_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DeptReportDepartmentWise_NewCFO_pdfexport(string intDistrictid, string Category, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DeptReportDepartmentWise_NewCFO_export", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public DataSet GetShowInspection(string Created_by)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetShowInspection", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //Jyotshna On 09-05-2016

    //public int InsGrevience(string IndustryName, string intDistrictid, string Email, string MobileNumber, string intDeptid, string Grivance_Subject, string Grievance_Description, string Grivance_File_Path, string Grivance_File_Type, string Grievnace_FileName, string Created_by, string Register_Your, string uidno)
    //{
    //    int value = 0;

    //    try
    //    {
    //        con.OpenConnection();
    //        SqlCommand cmd = new SqlCommand("InsGrevience", con.GetConnection);
    //        cmd.CommandType = CommandType.StoredProcedure;

    //        if (IndustryName.Trim() == "" || IndustryName.Trim() == null)
    //            cmd.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.Trim();
    //        else
    //            cmd.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.Trim();

    //        if (intDistrictid.Trim() == "" || intDistrictid == null)
    //            cmd.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

    //        if (Email.Trim() == "" || Email.Trim() == null)
    //            cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();
    //        else
    //            cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

    //        if (MobileNumber.Trim() == "" || MobileNumber.Trim() == null)
    //            cmd.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();

    //        if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
    //            cmd.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

    //        if (Grivance_Subject.Trim() == "" || Grivance_Subject.Trim() == null)
    //            cmd.Parameters.Add("@Grivance_Subject", SqlDbType.VarChar).Value = Grivance_Subject.Trim();
    //        else
    //            cmd.Parameters.Add("@Grivance_Subject", SqlDbType.VarChar).Value = Grivance_Subject.Trim();

    //        if (Grievance_Description.Trim() == "" || Grievance_Description.Trim() == null)
    //            cmd.Parameters.Add("@Grievance_Description", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Grievance_Description", SqlDbType.VarChar).Value = Grievance_Description.Trim();

    //        if (Grivance_File_Path.Trim() == "" || Grivance_File_Path.Trim() == null)
    //            cmd.Parameters.Add("@Grivance_File_Path", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Grivance_File_Path", SqlDbType.VarChar).Value = Grivance_File_Path.Trim();

    //        if (Grivance_File_Type.Trim() == "" || Grivance_File_Type.Trim() == null)
    //            cmd.Parameters.Add("@Grivance_File_Type", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Grivance_File_Type", SqlDbType.VarChar).Value = Grivance_File_Type.Trim();

    //        if (Grievnace_FileName.Trim() == "" || Grievnace_FileName.Trim() == null)
    //            cmd.Parameters.Add("@Grievnace_FileName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Grievnace_FileName", SqlDbType.VarChar).Value = Grievnace_FileName.Trim();


    //        if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();
    //        if (Register_Your.Trim() == "" || Register_Your.Trim() == null)
    //            cmd.Parameters.Add("@Register_Your", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Register_Your", SqlDbType.VarChar).Value = Register_Your.Trim();

    //        if (uidno.Trim() == "" || uidno.Trim() == null)
    //            cmd.Parameters.Add("@Uidno", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Uidno", SqlDbType.VarChar).Value = uidno.Trim();

    //        cmd.Parameters.Add("@valid", SqlDbType.Int, 500);
    //        cmd.Parameters["@valid"].Direction = ParameterDirection.Output;
    //        cmd.ExecuteNonQuery();
    //        value = (Int32)cmd.Parameters["@valid"].Value;

    //        //string val = cmd.ExecuteScalar().ToString();
    //        //if (val != string.Empty)
    //        //    value = Int32.Parse(val);
    //        //  return Convert.ToInt32(cmd.ExecuteScalar());
    //        con.CloseConnection();
    //    }
    //    catch (Exception ex)
    //    {
    //        con.CloseConnection();
    //        throw ex;
    //    }

    //    return value;
    //}
    public int InsGrevience(string IndustryName, string intDistrictid, string Email, string MobileNumber, string intDeptid, string Grivance_Subject, string Grievance_Description, string Grivance_File_Path, string Grivance_File_Type, string Grievnace_FileName, string Created_by, string Register_Your, string uidno, string Grivance_ID, string Grivance_ID_Reg)
    //public int InsGrevience(string IndustryName, string intDistrictid, string Email, string MobileNumber, string intDeptid, string Grivance_Subject, string Grievance_Description, string Created_by)
    {
        int value = 0;

        try
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("InsGrevience", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null)
                cmd.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.Trim();
            else
                cmd.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.Trim();

            if (intDistrictid.Trim() == "" || intDistrictid == null)
                cmd.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

            if (Email.Trim() == "" || Email.Trim() == null)
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();
            else
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

            if (MobileNumber.Trim() == "" || MobileNumber.Trim() == null)
                cmd.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                cmd.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

            if (Grivance_Subject.Trim() == "" || Grivance_Subject.Trim() == null)
                cmd.Parameters.Add("@Grivance_Subject", SqlDbType.VarChar).Value = Grivance_Subject.Trim();
            else
                cmd.Parameters.Add("@Grivance_Subject", SqlDbType.VarChar).Value = Grivance_Subject.Trim();

            if (Grievance_Description.Trim() == "" || Grievance_Description.Trim() == null)
                cmd.Parameters.Add("@Grievance_Description", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Grievance_Description", SqlDbType.VarChar).Value = Grievance_Description.Trim();

            if (Grivance_File_Path.Trim() == "" || Grivance_File_Path.Trim() == null)
                cmd.Parameters.Add("@Grivance_File_Path", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Grivance_File_Path", SqlDbType.VarChar).Value = Grivance_File_Path.Trim();

            if (Grivance_File_Type.Trim() == "" || Grivance_File_Type.Trim() == null)
                cmd.Parameters.Add("@Grivance_File_Type", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Grivance_File_Type", SqlDbType.VarChar).Value = Grivance_File_Type.Trim();

            if (Grievnace_FileName.Trim() == "" || Grievnace_FileName.Trim() == null)
                cmd.Parameters.Add("@Grievnace_FileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Grievnace_FileName", SqlDbType.VarChar).Value = Grievnace_FileName.Trim();


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();
            if (Register_Your.Trim() == "" || Register_Your.Trim() == null)
                cmd.Parameters.Add("@Register_Your", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Register_Your", SqlDbType.VarChar).Value = Register_Your.Trim();

            if (uidno.Trim() == "" || uidno.Trim() == null)
                cmd.Parameters.Add("@Uidno", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Uidno", SqlDbType.VarChar).Value = uidno.Trim();

            if (Register_Your.Trim() == "" || Register_Your.Trim() == null)
                cmd.Parameters.Add("@Grivance_ID_Reg", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Grivance_ID_Reg", SqlDbType.VarChar).Value = Grivance_ID_Reg.Trim();

            cmd.Parameters.Add("@Grivance_ID", SqlDbType.VarChar).Value = Grivance_ID.Trim();

            cmd.Parameters.Add("@valid", SqlDbType.Int, 500);
            cmd.Parameters["@valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            value = (Int32)cmd.Parameters["@valid"].Value;

            //string val = cmd.ExecuteScalar().ToString();
            //if (val != string.Empty)
            //    value = Int32.Parse(val);
            //  return Convert.ToInt32(cmd.ExecuteScalar());
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }
    public DataSet GetShowDepartmentFilesIndusSearch(string Deptid, string intStageid, string intDistrictid, string NameofUnit, string UIDNUmber, string District_Id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesIndusSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (District_Id.Trim() == "" || District_Id.Trim() == null || District_Id.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District_Id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District_Id", SqlDbType.VarChar).Value = District_Id.ToString();

            if (NameofUnit.Trim() == "" || NameofUnit.Trim() == null)
                da.SelectCommand.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = "%" + NameofUnit.ToString() + "%";


            if (UIDNUmber.Trim() == "" || UIDNUmber.Trim() == null)
                da.SelectCommand.Parameters.Add("@UIDNUmber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UIDNUmber", SqlDbType.VarChar).Value = "%" + UIDNUmber.ToString() + "%";


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet GetICICTransRefernceNumber(string ReferenceNo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetICICTransRefernceNumber", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (ReferenceNo.Trim() == "" || ReferenceNo.Trim() == null)
                da.SelectCommand.Parameters.Add("@ReferenceNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ReferenceNo", SqlDbType.VarChar).Value = ReferenceNo.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //}



    public int insertInspectionDet(string UnitName, string Location_District, string Location_Mandal, string Location_Village,
           string Inspection_Authority_Desg, string Date_Inspection, string Date_Uploading_Inspection, string Unique_Number,
            string File_Link, string Department, string Active_Status, string Transaction_Date, string Created_by, string Created_dt,
            string Modified_by, string Modified_dt, string Type_of_Inspection, string Loction_of_Unit, string File_Link2, string File_Link3,
        string File_Link4, string Type_of_Unit, string PromoterMobileNo, string PromoterEmail, string Aadhaar_Number, string Other_Inspection)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertInspectionDet";

        if (UnitName.Trim() == "" || UnitName.Trim() == null)
            com.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = UnitName.ToString();


        if (Location_District.Trim() == "" || Location_District.Trim() == null || Location_District.Trim() == "--Select--")
            com.Parameters.Add("@Location_District", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Location_District", SqlDbType.VarChar).Value = Location_District.ToString();

        if (Location_Mandal.Trim() == "" || Location_Mandal.Trim() == null || Location_Mandal.Trim() == "--Select--")
            com.Parameters.Add("@Location_Mandal", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Location_Mandal", SqlDbType.VarChar).Value = Location_Mandal.ToString();

        if (Location_Village.Trim() == "" || Location_Village.Trim() == null || Location_Village.Trim() == "--Select--")
            com.Parameters.Add("@Location_Village", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Location_Village", SqlDbType.VarChar).Value = Location_Village.ToString();

        if (Inspection_Authority_Desg.Trim() == "" || Inspection_Authority_Desg.Trim() == null)
            com.Parameters.Add("@Inspection_Authority_Desg", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Inspection_Authority_Desg", SqlDbType.VarChar).Value = Inspection_Authority_Desg.ToString();

        if (Date_Inspection.Trim() == "" || Date_Inspection.Trim() == null)
            com.Parameters.Add("@Date_Inspection", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Date_Inspection", SqlDbType.VarChar).Value = Date_Inspection.ToString();

        if (Date_Uploading_Inspection.Trim() == "" || Date_Uploading_Inspection.Trim() == null)
            com.Parameters.Add("@Date_Uploading_Inspection", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date_Uploading_Inspection", SqlDbType.VarChar).Value = Date_Uploading_Inspection.ToString();

        if (Unique_Number.Trim() == "" || Unique_Number.Trim() == null)
            com.Parameters.Add("@Unique_Number", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Unique_Number", SqlDbType.VarChar).Value = Unique_Number.ToString();

        if (File_Link.Trim() == "" || File_Link.Trim() == null)
            com.Parameters.Add("@File_Link", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_Link", SqlDbType.VarChar).Value = File_Link.ToString();

        if (Department.Trim() == "" || Department.Trim() == null)
            com.Parameters.Add("@Department", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();

        if (Active_Status.Trim() == "" || Active_Status.Trim() == null)
            com.Parameters.Add("@Active_Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Active_Status", SqlDbType.VarChar).Value = Active_Status.ToString();

        if (Transaction_Date.Trim() == "" || Transaction_Date.Trim() == null)
            com.Parameters.Add("@Transaction_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Transaction_Date", SqlDbType.VarChar).Value = Transaction_Date.ToString();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Convert.ToInt32(Created_by.ToString());

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null)
            com.Parameters.Add("@Created_dt", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_dt", SqlDbType.VarChar).Value = Created_dt.ToString();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Convert.ToInt32(Modified_by.ToString());

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null)
            com.Parameters.Add("@Modified_dt", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_dt", SqlDbType.VarChar).Value = Modified_dt.ToString();

        if (Type_of_Inspection.Trim() == "" || Type_of_Inspection.Trim() == null)
            com.Parameters.Add("@Type_of_Inspection", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type_of_Inspection", SqlDbType.VarChar).Value = Type_of_Inspection.ToString();



        if (Loction_of_Unit.Trim() == "" || Loction_of_Unit.Trim() == null)
            com.Parameters.Add("@Loction_of_Unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loction_of_Unit", SqlDbType.VarChar).Value = Loction_of_Unit.ToString();

        if (File_Link2.Trim() == "" || File_Link2.Trim() == null)
            com.Parameters.Add("@File_Link2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_Link2", SqlDbType.VarChar).Value = File_Link2.ToString();


        if (File_Link3.Trim() == "" || File_Link3.Trim() == null)
            com.Parameters.Add("@File_Link3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_Link3", SqlDbType.VarChar).Value = File_Link3.ToString();

        if (File_Link4.Trim() == "" || File_Link4.Trim() == null)
            com.Parameters.Add("@File_Link4", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_Link4", SqlDbType.VarChar).Value = File_Link4.ToString();


        if (Type_of_Unit.Trim() == "" || Type_of_Unit.Trim() == null)
            com.Parameters.Add("@Type_of_Unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type_of_Unit", SqlDbType.VarChar).Value = Type_of_Unit.ToString();


        if (PromoterMobileNo.Trim() == "" || PromoterMobileNo.Trim() == null)
            com.Parameters.Add("@PromoterMobileNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PromoterMobileNo", SqlDbType.VarChar).Value = PromoterMobileNo.ToString();

        if (PromoterEmail.Trim() == "" || PromoterEmail.Trim() == null)
            com.Parameters.Add("@PromoterEmail", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PromoterEmail", SqlDbType.VarChar).Value = PromoterEmail.ToString();

        if (Aadhaar_Number.Trim() == "" || Aadhaar_Number.Trim() == null)
            com.Parameters.Add("@Aadhaar_Number", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Aadhaar_Number", SqlDbType.VarChar).Value = Aadhaar_Number.ToString();

        if (Aadhaar_Number.Trim() == "" || Aadhaar_Number.Trim() == null)
            com.Parameters.Add("@Other_Inspection", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Other_Inspection", SqlDbType.VarChar).Value = Aadhaar_Number.ToString();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetShowInspection(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowInspection", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetInspectionRptDrilown(string nameofUnit, string UID, string District, string Department)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetInspectionRptDrilown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (nameofUnit.Trim() == "" || nameofUnit.Trim() == null)
                da.SelectCommand.Parameters.Add("@unitname", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@unitname", SqlDbType.VarChar).Value = nameofUnit.ToString();

            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();


            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Departnent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Departnent", SqlDbType.VarChar).Value = Department.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int AddnewInspectionUserRegistration(string Department, string Designation, string District,
        string Mandal, string Firstname, string Lastname, string Address, string Email, string Aadhaar, string Mobile, string username, string Password)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("insertinspectionUser", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {
            if (Department.Trim().ToString() == "" || Department.ToString().Trim() == null)
                cmd.Parameters.Add("@Department", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Department", SqlDbType.VarChar).Value = Convert.ToInt32(Department.Trim());

            if (Designation.Trim().ToString() == "" || Designation.ToString().Trim() == null)
                cmd.Parameters.Add("@Designation", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Designation", SqlDbType.VarChar).Value = Designation.Trim();

            if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
                cmd.Parameters.Add("@District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@District", SqlDbType.VarChar).Value = Convert.ToInt32(District.Trim());

            if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
                cmd.Parameters.Add("@Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Mandal", SqlDbType.VarChar).Value = Convert.ToInt32(Mandal.Trim());

            if (Firstname.Trim().ToString() == "" || Firstname.ToString().Trim() == null)
                cmd.Parameters.Add("@Firstname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Firstname", SqlDbType.VarChar).Value = Firstname.Trim();

            if (Lastname.Trim().ToString() == "" || Lastname.ToString().Trim() == null)
                cmd.Parameters.Add("@Lastname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Lastname", SqlDbType.VarChar).Value = Lastname.Trim();

            if (Address.Trim().ToString() == "" || Address.ToString().Trim() == null)
                cmd.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

            if (Email.Trim().ToString() == "" || Email.ToString().Trim() == null)
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

            if (Aadhaar.Trim().ToString() == "" || Aadhaar.ToString().Trim() == null)
                cmd.Parameters.Add("@Aadhaar", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Aadhaar", SqlDbType.VarChar).Value = Aadhaar.Trim();

            if (Mobile.Trim().ToString() == "" || Mobile.ToString().Trim() == null)
                cmd.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = Mobile.Trim();

            if (username.Trim().ToString() == "" || username.ToString().Trim() == null)
                cmd.Parameters.Add("@username", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@username", SqlDbType.VarChar).Value = username.Trim();

            if (Password.Trim().ToString() == "" || Password.ToString().Trim() == null)
                cmd.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }

    public int AddnewAmmendamentUserRegistration(string Department, string Designation, string District,
       string Mandal, string Firstname, string Lastname, string Address, string Email, string Aadhaar, string Mobile, string username, string Password)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("[insertAmmendamentUser]", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {
            if (Department.Trim().ToString() == "" || Department.ToString().Trim() == null)
                cmd.Parameters.Add("@Department", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Department", SqlDbType.VarChar).Value = Convert.ToInt32(Department.Trim());

            if (Designation.Trim().ToString() == "" || Designation.ToString().Trim() == null)
                cmd.Parameters.Add("@Designation", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Designation", SqlDbType.VarChar).Value = Designation.Trim();

            if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
                cmd.Parameters.Add("@District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@District", SqlDbType.VarChar).Value = Convert.ToInt32(District.Trim());

            if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
                cmd.Parameters.Add("@Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Mandal", SqlDbType.VarChar).Value = Convert.ToInt32(Mandal.Trim());

            if (Firstname.Trim().ToString() == "" || Firstname.ToString().Trim() == null)
                cmd.Parameters.Add("@Firstname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Firstname", SqlDbType.VarChar).Value = Firstname.Trim();

            if (Lastname.Trim().ToString() == "" || Lastname.ToString().Trim() == null)
                cmd.Parameters.Add("@Lastname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Lastname", SqlDbType.VarChar).Value = Lastname.Trim();

            if (Address.Trim().ToString() == "" || Address.ToString().Trim() == null)
                cmd.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

            if (Email.Trim().ToString() == "" || Email.ToString().Trim() == null)
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

            if (Aadhaar.Trim().ToString() == "" || Aadhaar.ToString().Trim() == null)
                cmd.Parameters.Add("@Aadhaar", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Aadhaar", SqlDbType.VarChar).Value = Aadhaar.Trim();

            if (Mobile.Trim().ToString() == "" || Mobile.ToString().Trim() == null)
                cmd.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = Mobile.Trim();

            if (username.Trim().ToString() == "" || username.ToString().Trim() == null)
                cmd.Parameters.Add("@username", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@username", SqlDbType.VarChar).Value = username.Trim();

            if (Password.Trim().ToString() == "" || Password.ToString().Trim() == null)
                cmd.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }

    public DataSet GetDepartmentForInspection(string username)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDepartmentForInspection", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (username.Trim() == "" || username.Trim() == null)
                da.SelectCommand.Parameters.Add("@username", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@username", SqlDbType.VarChar).Value = username.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet CheckUserid2(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("CheckUserid2", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = User_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet CheckUseridAmmendament(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[CheckUseridAmmendament]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = User_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetDepartmentFullName()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDepartmentFullName", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetAmmendamentFullName()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetAmmendamentFullName]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet fetchgrievancedet(string Status, string intDistrictid, string IndustryName, string intDeptid, string intGrievanceid, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchgrievancedet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%" + IndustryName.ToString() + "%";

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intGrievanceid.Trim() == "" || intGrievanceid.Trim() == null || intGrievanceid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = intGrievanceid.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet FetchGrievStatus(string intGrievanceid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FetchGrievStatus", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intGrievanceid.Trim() == "" || intGrievanceid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = intGrievanceid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetOtherDistricts(string BankId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetBridgeBankOtherDistricts", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (BankId.Trim() == "" || BankId.Trim() == null)
                da.SelectCommand.Parameters.Add("@BankId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BankId", SqlDbType.VarChar).Value = BankId.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int InsGrievStaus(string intGrievanceid, string Status, string Remarks, string Created_by, string ForwardTo, string QueryReply_File_Path, string QueryReply_File_Type, string QueryReply_FileName, string ForwardToMailId)
    {
        int value = 0;
        try
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("InsGrievStaus", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;

            if (intGrievanceid.Trim() == "" || intGrievanceid.Trim() == null)
                cmd.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = intGrievanceid.Trim();
            else
                cmd.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = intGrievanceid.Trim();

            if (Status.Trim() == "" || Status == null)
                cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

            if (Remarks.Trim() == "" || Remarks.Trim() == null)
                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();
            else
                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

            if (ForwardTo.Trim() == "" || ForwardTo.Trim() == null)
                cmd.Parameters.Add("@ForwardTo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@ForwardTo", SqlDbType.VarChar).Value = ForwardTo.Trim();

            if (QueryReply_File_Path != null && QueryReply_File_Path != "")
                cmd.Parameters.Add("@QueryReply_File_Path", SqlDbType.VarChar).Value = QueryReply_File_Path.Trim();

            if (QueryReply_File_Type != null && QueryReply_File_Type != "")
                cmd.Parameters.Add("@QueryReply_File_Type", SqlDbType.VarChar).Value = QueryReply_File_Type.Trim();

            if (QueryReply_FileName != null && QueryReply_FileName != "")
                cmd.Parameters.Add("@QueryReply_FileName", SqlDbType.VarChar).Value = QueryReply_FileName.Trim();

            if (ForwardToMailId != null && ForwardToMailId != "")
                cmd.Parameters.Add("@ForwardToMailId", SqlDbType.VarChar).Value = ForwardToMailId.Trim();

            return Convert.ToInt32(cmd.ExecuteScalar());
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        return value;
    }


    public DataSet GrievDashboard(string intDeptid, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GrievDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetRawMaterialsDetails(string distid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRawmeterialsdata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (distid.Trim() == "" || distid.Trim() == null)
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }



    public DataSet RetriveLinkForRawmeterial(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveLinkRawmaterial", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    //Jyotshna On 11-05-2016

    //public DataSet RetriveStatusByTypeDistrictCFO(string status, string type, string Category, string dept, string District)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        // da = new SqlDataAdapter("GetRIDrillDownPhase2DeptCFO", con.GetConnection);
    //        da = new SqlDataAdapter("GetRIDrillDownPhase2DeptNew_CFO", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (status.Trim() == "" || status.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

    //        if (type.Trim() == "" || District.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();



    //        if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

    //        if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.ToString();

    //        if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        //throw ex;
    //        return null;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet RetriveStatusByTypeDistrictCFO(string status, string type, string Category, string dept, string District, string FromdateforDB, string TodateforDB)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("GetRIDrillDownPhase2DeptCFO", con.GetConnection);
            da = new SqlDataAdapter("GetRIDrillDownPhase2DeptNew_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = FromdateforDB.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = TodateforDB.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByTypeDistrict(string status, string type, string Category, string dept, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRIDrillDownPhase2Dept", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByTypedept(string status, string type, string intDeptid, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1DrillDownPhase3Dept", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByTypedeptCFO(string status, string type, string intDeptid, string District, string FromdateforDB, string TodateforDB)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1DrillDownPhase3DeptCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = FromdateforDB.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = TodateforDB.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet RetriveStatusByTypedeptCFO(string status, string type, string intDeptid, string District)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetR1DrillDownPhase3DeptCFO", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (status.Trim() == "" || status.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

    //        if (type.Trim() == "" || type.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
    //        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

    //        if (District.Trim() == "" || District.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        //throw ex;
    //        return null;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet GetdataCFEApprovaldocument(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveApprovallink", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdatabyDeptinCFEdocument(string intEnterprenuerid, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            if (deptid.Trim() == "" || deptid.Trim() == null || deptid.Trim() == "10" || deptid.Trim() == "1000")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = deptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdatabyDeptinCFOdocument(string intEnterprenuerid, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptidCFObyapporval", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            if (deptid.Trim() == "" || deptid.Trim() == null || deptid.Trim() == "10" || deptid.Trim() == "1000")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = deptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdataCFOApprovaldocument(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveApprovallinkCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdatabyDeptinCFEdocumentRespondDetails(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptidRespondant", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdatabyDeptinCFEdocumentAppeal(string intEnterprenuerid)  //added..22.10
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptid_Appeal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdatabyDeptinCFOdocumentRespondDetails(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptidCFObyRespondant", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet ViewInspectionAttachmets(string intInspectionid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveInspectionAttachments", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intInspectionid.Trim() == "" || intInspectionid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intInspectionid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intInspectionid", SqlDbType.VarChar).Value = intInspectionid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetDepartmentbyid(string Dept_Id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDepartmentbyid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Dept_Id.Trim() == "" || Dept_Id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Dept_Id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept_Id", SqlDbType.VarChar).Value = Dept_Id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryRaised(string intCFEEnterpid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQueryRaised", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetQueryResponseDetailsByEnterpIDDept(string intCFEEnterpid, string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveQueriesDetailsAndEntDetByIDDept", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetMICSDetails(string nameofunit, string EmNo, string category, string caste, string womenEnterprenuer, string TypeofPower, string DistrictId, string Uid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getMISEDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Uid.Trim() == "" || Uid.Trim() == null || Uid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Uid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Uid", SqlDbType.VarChar).Value = Uid.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null || nameofunit.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();

            if (DistrictId.Trim() == "" || DistrictId.Trim() == null || DistrictId.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DistrictId.ToString();

            if (EmNo.Trim() == "" || EmNo.Trim() == null || EmNo.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@EmNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EmNo", SqlDbType.VarChar).Value = EmNo.ToString();


            if (category.Trim() == "" || category.Trim() == null || category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@category", SqlDbType.VarChar).Value = category.ToString();

            if (caste.Trim() == "" || caste.Trim() == null || caste.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@caste", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@caste", SqlDbType.VarChar).Value = caste.ToString();

            if (womenEnterprenuer.Trim() == "" || womenEnterprenuer.Trim() == null || womenEnterprenuer.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@womenEnterprenuer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@womenEnterprenuer", SqlDbType.VarChar).Value = womenEnterprenuer.ToString();

            if (TypeofPower.Trim() == "" || TypeofPower.Trim() == null || TypeofPower.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@TypeofPower", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TypeofPower", SqlDbType.VarChar).Value = TypeofPower.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetMICSDetailsAssociation(string nameofunit, string EmNo, string category, string caste, string womenEnterprenuer, string TypeofPower, string DistrictId, string Uid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getMISEDetailsLogins", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Uid.Trim() == "" || Uid.Trim() == null || Uid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Uid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Uid", SqlDbType.VarChar).Value = Uid.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null || nameofunit.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();

            if (DistrictId.Trim() == "" || DistrictId.Trim() == null || DistrictId.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DistrictId.ToString();

            if (EmNo.Trim() == "" || EmNo.Trim() == null || EmNo.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@EmNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EmNo", SqlDbType.VarChar).Value = EmNo.ToString();


            if (category.Trim() == "" || category.Trim() == null || category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@category", SqlDbType.VarChar).Value = category.ToString();

            if (caste.Trim() == "" || caste.Trim() == null || caste.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@caste", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@caste", SqlDbType.VarChar).Value = caste.ToString();

            if (womenEnterprenuer.Trim() == "" || womenEnterprenuer.Trim() == null || womenEnterprenuer.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@womenEnterprenuer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@womenEnterprenuer", SqlDbType.VarChar).Value = womenEnterprenuer.ToString();

            if (TypeofPower.Trim() == "" || TypeofPower.Trim() == null || TypeofPower.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@TypeofPower", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TypeofPower", SqlDbType.VarChar).Value = TypeofPower.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    //public int InsertMEMS(string OutState, string Unit_Name, string intLocationofUnit, string EMIUdyogaNumber, string intDistrictid, string intLineofActivityid, string ProductDescription, string Product_FileName, string Product_FilePath, string Product_FileType, string Certification_FileName, string Certification_FilePath, string Certification_FileType, string Investment, string
    //                 Employement, string Date_Commencement, string CategoryofEnterprise, string PCBCategorization, string Caste, string Wheather_Women, string Wheather_Power, string VoltageofPower, string Major_Clients, string OutSide_Cleints, string Created_by)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "InsertMEMS";

    //    if (OutState == "" || OutState == null)
    //        com.Parameters.Add("@OutState", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@OutState", SqlDbType.VarChar).Value = OutState.Trim();

    //    if (Unit_Name == "" || Unit_Name == null)
    //        com.Parameters.Add("@Unit_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Unit_Name", SqlDbType.VarChar).Value = Unit_Name.Trim();

    //    if (intLocationofUnit == "" || intLocationofUnit == null || intLocationofUnit == "--Select--")
    //        com.Parameters.Add("@intLocationofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLocationofUnit", SqlDbType.VarChar).Value = intLocationofUnit.Trim();

    //    if (EMIUdyogaNumber == "" || EMIUdyogaNumber == null || EMIUdyogaNumber == "--Select--")
    //        com.Parameters.Add("@EMIUdyogaNumber", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@EMIUdyogaNumber", SqlDbType.VarChar).Value = EMIUdyogaNumber.Trim();

    //    if (intDistrictid == "" || intDistrictid == null || intDistrictid == "--Select--")
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

    //    if (intLineofActivityid == "" || intLineofActivityid == null || intLineofActivityid == "--Select--")
    //        com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = intLineofActivityid.Trim();





    //    if (ProductDescription == "" || ProductDescription == null || ProductDescription == "--Select--")
    //        com.Parameters.Add("@ProductDescription", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@ProductDescription", SqlDbType.VarChar).Value = ProductDescription.Trim();



    //    if (Product_FileName == "" || Product_FileName == null || Product_FileName == "--Select--")
    //        com.Parameters.Add("@Product_FileName", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Product_FileName", SqlDbType.VarChar).Value = Product_FileName.Trim();

    //    if (Product_FilePath == "" || Product_FilePath == null || Product_FilePath == "--Select--")
    //        com.Parameters.Add("@Product_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Product_FilePath", SqlDbType.VarChar).Value = Product_FilePath.Trim();

    //    if (Product_FileType == "" || Product_FileType == null || Product_FileType == "--Select--")
    //        com.Parameters.Add("@Product_FileType", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Product_FileType", SqlDbType.VarChar).Value = Product_FileType.Trim();

    //    if (Certification_FileName == "" || Certification_FileName == null || Certification_FileName == "--Select--")
    //        com.Parameters.Add("@Certification_FileName", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Certification_FileName", SqlDbType.VarChar).Value = Certification_FileName.Trim();

    //    if (Certification_FilePath == "" || Certification_FilePath == null || Certification_FilePath == "--Select--")
    //        com.Parameters.Add("@Certification_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Certification_FilePath", SqlDbType.VarChar).Value = Certification_FilePath.Trim();

    //    if (Certification_FileType == "" || Certification_FileType == null || Certification_FileType == "--Select--")
    //        com.Parameters.Add("@Certification_FileType", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Certification_FileType", SqlDbType.VarChar).Value = Certification_FileType.Trim();

    //    if (Investment == "" || Investment == null || Investment == "--Select--")
    //        com.Parameters.Add("@Investment", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Investment", SqlDbType.VarChar).Value = Investment.Trim();

    //    if (Employement == "" || Employement == null || Employement == "--Select--")
    //        com.Parameters.Add("@Employement", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Employement", SqlDbType.VarChar).Value = Employement.Trim();

    //    if (Date_Commencement == "" || Date_Commencement == null || Date_Commencement == "--Select--")
    //        com.Parameters.Add("@Date_Commencement", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Date_Commencement", SqlDbType.DateTime).Value = cmf.convertDateIndia(Date_Commencement.Trim());

    //    if (CategoryofEnterprise == "" || CategoryofEnterprise == null || CategoryofEnterprise == "--Select--")
    //        com.Parameters.Add("@CategoryofEnterprise", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@CategoryofEnterprise", SqlDbType.VarChar).Value = CategoryofEnterprise.Trim();

    //    if (PCBCategorization == "" || PCBCategorization == null || PCBCategorization == "--Select--")
    //        com.Parameters.Add("@PCBCategorization", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@PCBCategorization", SqlDbType.VarChar).Value = PCBCategorization.Trim();

    //    if (Caste == "" || Caste == null || Caste == "--Select--")
    //        com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.Trim();

    //    if (Wheather_Women == "" || Wheather_Women == null || Wheather_Women == "--Select--")
    //        com.Parameters.Add("@Wheather_Women", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Wheather_Women", SqlDbType.VarChar).Value = Wheather_Women.Trim();

    //    if (Wheather_Power == "" || Wheather_Power == null || Wheather_Power == "--Select--")
    //        com.Parameters.Add("@Wheather_Power", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Wheather_Power", SqlDbType.VarChar).Value = Wheather_Power.Trim();

    //    if (VoltageofPower == "" || VoltageofPower == null || VoltageofPower == "--Select--")
    //        com.Parameters.Add("@VoltageofPower", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@VoltageofPower", SqlDbType.VarChar).Value = VoltageofPower.Trim();

    //    if (Major_Clients == "" || Major_Clients == null || Major_Clients == "--Select--")
    //        com.Parameters.Add("@Major_Clients", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Major_Clients", SqlDbType.VarChar).Value = Major_Clients.Trim();

    //    if (OutSide_Cleints == "" || OutSide_Cleints == null || OutSide_Cleints == "--Select--")
    //        com.Parameters.Add("@OutSide_Cleints", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@OutSide_Cleints", SqlDbType.VarChar).Value = OutSide_Cleints.Trim();

    //    //if (Gen_Reqired == "" || Gen_Reqired == null || Gen_Reqired == "--Select--")
    //    //    com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = Gen_Reqired.Trim();

    //    //if (Hight_Build == "" || Hight_Build == null || Hight_Build == "--Select--")
    //    //    com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = Hight_Build.Trim();


    //    //if (Built_up_Area == "" || Built_up_Area == null || Built_up_Area == "--Select--")
    //    //    com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = Built_up_Area.Trim();


    //    //if (Fall_in_Municipal == "" || Fall_in_Municipal == null || Fall_in_Municipal == "--Select--")
    //    //    com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = Fall_in_Municipal.Trim();








    //    if (Created_by == "" || Created_by == null || Created_by == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    //if (NoofTrees == "" || NoofTrees == null || NoofTrees == "--Select--")
    //    //    com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = NoofTrees.Trim();
    //    //if (Appl_Type == "" || Appl_Type == null || Appl_Type == "--Select--")
    //    //    com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = Appl_Type.Trim();




    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}




    public DataSet FetchUserdetEMINo(string EmoNo)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("FeatchEmoDEtails", con.GetConnection);
        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        if (EmoNo.Trim() == "" || EmoNo.Trim() == null || EmoNo.Trim() == "--Select--")
        {
            myDataAdapter.SelectCommand.Parameters.Add("@EmoNo", SqlDbType.VarChar).Value = "%";
        }
        else
        {
            myDataAdapter.SelectCommand.Parameters.Add("@EmoNo", SqlDbType.VarChar).Value = EmoNo;
        }

        //myDataAdapter.SelectCommand.Parameters.Add("@ProofUpload", SqlDbType.Image).Value = ProofUpload;


        //if (ProofUploadName.Trim() == "" || ProofUploadName.Trim() == null)
        //    myDataAdapter.SelectCommand.Parameters.Add("@ProofUploadName", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@ProofUploadName", SqlDbType.VarChar).Value = ProofUploadName.Trim();

        ds = new System.Data.DataSet();
        myDataAdapter.Fill(ds);
        return ds;



    }


    public int InsertMEMS(string MinorityType, string PhysicalHandicapped, string UnitAddress, string UnitLocated, string OutState, string Unit_Name, string intLocationofUnit, string EMIUdyogaNumber, string intDistrictid, string intLineofActivityid, string ProductDescription, string Product_FileName, string Product_FilePath, string Product_FileType, string Certification_FileName, string Certification_FilePath, string Certification_FileType, string Investment, string
                    Employement, string Date_Commencement, string CategoryofEnterprise, string PCBCategorization, string Caste, string Wheather_Women, string Wheather_Power, string VoltageofPower, string Major_Clients, string OutSide_Cleints, string Created_by, string SectorName, string IndicateState1, string IndicateState2, string CountryExported1, string CountryExported2)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertMEMS";

        if (PhysicalHandicapped == "" || PhysicalHandicapped == null || PhysicalHandicapped == "--Select--")
            com.Parameters.Add("@PhysicalHandicapped", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PhysicalHandicapped", SqlDbType.VarChar).Value = PhysicalHandicapped.Trim();

        if (SectorName == "" || SectorName == null || SectorName == "--Select--")
            com.Parameters.Add("@SectorName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SectorName", SqlDbType.VarChar).Value = SectorName.Trim();

        if (IndicateState1 == "" || IndicateState1 == null || IndicateState1 == "--Select--")
            com.Parameters.Add("@IndicateState1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IndicateState1", SqlDbType.VarChar).Value = IndicateState1.Trim();

        if (IndicateState2 == "" || IndicateState2 == null || IndicateState2 == "--Select--")
            com.Parameters.Add("@IndicateState2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IndicateState2", SqlDbType.VarChar).Value = IndicateState2.Trim();

        if (CountryExported1 == "" || CountryExported1 == null || CountryExported1 == "--Select--")
            com.Parameters.Add("@CountryExported1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CountryExported1", SqlDbType.VarChar).Value = CountryExported1.Trim();

        if (CountryExported2 == "" || CountryExported2 == null || CountryExported2 == "--Select--")
            com.Parameters.Add("@CountryExported2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CountryExported2", SqlDbType.VarChar).Value = CountryExported2.Trim();


        if (MinorityType == "" || MinorityType == null || MinorityType == "--Select--")
            com.Parameters.Add("@MinorityType", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@MinorityType", SqlDbType.VarChar).Value = MinorityType.Trim();

        if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
            com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

        if (UnitLocated == "" || UnitLocated == null || UnitLocated == "--Select--")
            com.Parameters.Add("@UnitLocated", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UnitLocated", SqlDbType.VarChar).Value = UnitLocated.Trim();

        if (OutState == "" || OutState == null)
            com.Parameters.Add("@OutState", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OutState", SqlDbType.VarChar).Value = OutState.Trim();

        if (Unit_Name == "" || Unit_Name == null)
            com.Parameters.Add("@Unit_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Unit_Name", SqlDbType.VarChar).Value = Unit_Name.Trim();

        if (intLocationofUnit == "" || intLocationofUnit == null || intLocationofUnit == "--Select--")
            com.Parameters.Add("@intLocationofUnit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLocationofUnit", SqlDbType.VarChar).Value = intLocationofUnit.Trim();

        if (EMIUdyogaNumber == "" || EMIUdyogaNumber == null || EMIUdyogaNumber == "--Select--")
            com.Parameters.Add("@EMIUdyogaNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@EMIUdyogaNumber", SqlDbType.VarChar).Value = EMIUdyogaNumber.Trim();

        if (intDistrictid == "" || intDistrictid == null || intDistrictid == "--Select--")
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

        if (intLineofActivityid == "" || intLineofActivityid == null || intLineofActivityid == "--Select--")
            com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = intLineofActivityid.Trim();





        if (ProductDescription == "" || ProductDescription == null || ProductDescription == "--Select--")
            com.Parameters.Add("@ProductDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ProductDescription", SqlDbType.VarChar).Value = ProductDescription.Trim();



        if (Product_FileName == "" || Product_FileName == null || Product_FileName == "--Select--")
            com.Parameters.Add("@Product_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Product_FileName", SqlDbType.VarChar).Value = Product_FileName.Trim();

        if (Product_FilePath == "" || Product_FilePath == null || Product_FilePath == "--Select--")
            com.Parameters.Add("@Product_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Product_FilePath", SqlDbType.VarChar).Value = Product_FilePath.Trim();

        if (Product_FileType == "" || Product_FileType == null || Product_FileType == "--Select--")
            com.Parameters.Add("@Product_FileType", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Product_FileType", SqlDbType.VarChar).Value = Product_FileType.Trim();

        if (Certification_FileName == "" || Certification_FileName == null || Certification_FileName == "--Select--")
            com.Parameters.Add("@Certification_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Certification_FileName", SqlDbType.VarChar).Value = Certification_FileName.Trim();

        if (Certification_FilePath == "" || Certification_FilePath == null || Certification_FilePath == "--Select--")
            com.Parameters.Add("@Certification_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Certification_FilePath", SqlDbType.VarChar).Value = Certification_FilePath.Trim();

        if (Certification_FileType == "" || Certification_FileType == null || Certification_FileType == "--Select--")
            com.Parameters.Add("@Certification_FileType", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Certification_FileType", SqlDbType.VarChar).Value = Certification_FileType.Trim();

        if (Investment == "" || Investment == null || Investment == "--Select--")
            com.Parameters.Add("@Investment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Investment", SqlDbType.VarChar).Value = Investment.Trim();

        if (Employement == "" || Employement == null || Employement == "--Select--")
            com.Parameters.Add("@Employement", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Employement", SqlDbType.VarChar).Value = Employement.Trim();

        if (Date_Commencement == "" || Date_Commencement == null || Date_Commencement == "--Select--")
            com.Parameters.Add("@Date_Commencement", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date_Commencement", SqlDbType.DateTime).Value = cmf.convertDateIndia(Date_Commencement.Trim());

        if (CategoryofEnterprise == "" || CategoryofEnterprise == null || CategoryofEnterprise == "--Select--")
            com.Parameters.Add("@CategoryofEnterprise", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CategoryofEnterprise", SqlDbType.VarChar).Value = CategoryofEnterprise.Trim();

        if (PCBCategorization == "" || PCBCategorization == null || PCBCategorization == "--Select--")
            com.Parameters.Add("@PCBCategorization", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCBCategorization", SqlDbType.VarChar).Value = PCBCategorization.Trim();

        if (Caste == "" || Caste == null || Caste == "--Select--")
            com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.Trim();

        if (Wheather_Women == "" || Wheather_Women == null || Wheather_Women == "--Select--")
            com.Parameters.Add("@Wheather_Women", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Wheather_Women", SqlDbType.VarChar).Value = Wheather_Women.Trim();

        if (Wheather_Power == "" || Wheather_Power == null || Wheather_Power == "--Select--")
            com.Parameters.Add("@Wheather_Power", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Wheather_Power", SqlDbType.VarChar).Value = Wheather_Power.Trim();

        if (VoltageofPower == "" || VoltageofPower == null || VoltageofPower == "--Select--")
            com.Parameters.Add("@VoltageofPower", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VoltageofPower", SqlDbType.VarChar).Value = VoltageofPower.Trim();

        if (Major_Clients == "" || Major_Clients == null || Major_Clients == "--Select--")
            com.Parameters.Add("@Major_Clients", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Major_Clients", SqlDbType.VarChar).Value = Major_Clients.Trim();

        if (OutSide_Cleints == "" || OutSide_Cleints == null || OutSide_Cleints == "--Select--")
            com.Parameters.Add("@OutSide_Cleints", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OutSide_Cleints", SqlDbType.VarChar).Value = OutSide_Cleints.Trim();

        //if (Gen_Reqired == "" || Gen_Reqired == null || Gen_Reqired == "--Select--")
        //    com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = Gen_Reqired.Trim();

        //if (Hight_Build == "" || Hight_Build == null || Hight_Build == "--Select--")
        //    com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = Hight_Build.Trim();


        //if (Built_up_Area == "" || Built_up_Area == null || Built_up_Area == "--Select--")
        //    com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = Built_up_Area.Trim();


        //if (Fall_in_Municipal == "" || Fall_in_Municipal == null || Fall_in_Municipal == "--Select--")
        //    com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = Fall_in_Municipal.Trim();








        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        //if (NoofTrees == "" || NoofTrees == null || NoofTrees == "--Select--")
        //    com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = NoofTrees.Trim();
        //if (Appl_Type == "" || Appl_Type == null || Appl_Type == "--Select--")
        //    com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = Appl_Type.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }



    public int sp_InsertMSMEImage(string intUid, string FileType, string FilePath, string FileName, string FileDescription,
 string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertMSMEImage", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intUid.Trim() == "" || intUid.Trim() == null || intUid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intUid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intUid", SqlDbType.Int).Value = Int32.Parse(intUid.Trim());
            }






            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (FileDescription.Trim() == "" || FileDescription.Trim() == null || FileDescription.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }

            if (bu.Trim() == "" || bu.Trim() == null || bu.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = bu.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }
    public DataSet GetDistrictByUsercode(string DistrictId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictByUsercode", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (DistrictId.Trim() == "" || DistrictId.Trim() == null)
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DistrictId.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int sp_InsertMSMEImagenew(string intUid, string FileType, string FilePath, string FileName, string FileDescription,
 string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string applid)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertMSMEImagenew", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intUid.Trim() == "" || intUid.Trim() == null || intUid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intUid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intUid", SqlDbType.Int).Value = Int32.Parse(intUid.Trim());
            }


            if (applid.Trim() == "" || applid.Trim() == null || applid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@applid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@applid", SqlDbType.VarChar).Value = applid.ToString();
            }





            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (FileDescription.Trim() == "" || FileDescription.Trim() == null || FileDescription.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }

            if (bu.Trim() == "" || bu.Trim() == null || bu.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = bu.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }


    public DataSet GetQueryResponseDetailsByEnterpIDDeptCFO(string intCFEEnterpid, string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveQueriesDetailsAndEntDetByIDDeptCFONew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseReportCFO1()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictWisereportCFONew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCFOCertificatedata(string intCFEEnterpid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCertificateDetailsdataCFONew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }
    public int UpdCommissionerApprovalCFO(string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Trans_Date, string Created_by, string intQid)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdCommissionerApprovalCFO";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();

        if (Trans_Date == "" || Trans_Date == null)
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = cmf.convertDateIndia(Trans_Date);

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (intQid == "" || intQid == null)
            com.Parameters.Add("@intQid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQid", SqlDbType.VarChar).Value = intQid.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetShowDistricttFilesCFO1(string intStageid, string Districtid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDistricttFilesCFONew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (Districtid.Trim() == "" || Districtid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = Districtid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowSactionedIncentivesDCIP(string Category, string name, string typeofincentive, string EMpartnumber, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowSactionedIncentivesDICP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();
            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            if (name.Trim() == "" || name.Trim() == null || name.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@name", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@name", SqlDbType.VarChar).Value = name.ToString();


            if (typeofincentive.Trim() == "" || typeofincentive.Trim() == null || typeofincentive.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@typeofincentive", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@typeofincentive", SqlDbType.VarChar).Value = typeofincentive.ToString();


            if (EMpartnumber.Trim() == "" || EMpartnumber.Trim() == null || EMpartnumber.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@EMpartnumber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EMpartnumber", SqlDbType.VarChar).Value = EMpartnumber.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GrievDeptwiseDashboard()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GrievDeptwiseDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet fetchgrievancedet(string Status, string intDistrictid, string IndustryName, string intDeptid, string intGrievanceid, string Created_by, string ForwardTo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchgrievancedet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%" + IndustryName.ToString() + "%";

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intGrievanceid.Trim() == "" || intGrievanceid.Trim() == null || intGrievanceid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = intGrievanceid.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();
            //Jyotshna for Commissioner login on 13-05-2016
            if (ForwardTo.Trim() == "" || ForwardTo.Trim() == null || ForwardTo.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@ForwardTo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ForwardTo", SqlDbType.VarChar).Value = ForwardTo.ToString();
            //Jyotshna for Commissioner login on 13-05-2016

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    
    //Created by suribabu on 19/05/2016  for raw material status updation
    public int ChangeRawmaterialWiseStatus(string intApplicationid, string Status, string Modified_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "updRawmetairalStatus";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }



    public DataSet GetQueryRaisedCFOOneTime(string intCFEEnterpid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQueryRaisedCFObyOnetime", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetdeptbyCFOstageID(string intCFEEnterpid, string intDeptid, string intApprovalid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetdeptbyCFOstageID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }






    public DataSet GetRawMaterialsDetails1(string distid, string UdyogNo, string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRawmeterialsdata1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (UdyogNo.Trim() == "" || UdyogNo.Trim() == null)
                da.SelectCommand.Parameters.Add("@UdyogNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UdyogNo", SqlDbType.VarChar).Value = UdyogNo.ToString();



            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();



            if (distid.Trim() == "" || distid.Trim() == null || distid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet getdataofPresentYear(string dist)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("getdataofPresentYear", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (dist.Trim() == "" || dist.Trim() == null || dist.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = dist.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet fetchIncentivedet(string intDistrictid, string IndustryName, string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchinsentivedet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%" + IndustryName.ToString() + "%";

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            //if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "--Select--")
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intstageid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowDepartmentFilesKUDA(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesKUDA1lat", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertForestdatalatest(string number, string intQuessionaireid, string intCFEForestid, string north, string west, string east, string south, string Created_by, string trees, string nooftrees)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFEForestnew";
        if (number.ToString().Trim() == "" || number.ToString().Trim() == null)
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

        if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intCFEForestid.ToString().Trim() == "" || intCFEForestid.ToString().Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEForestid.Trim();
        if (north.ToString().Trim() == "" || north.ToString().Trim() == null)
            com.Parameters.Add("@north", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@north", SqlDbType.VarChar).Value = north.Trim();


        if (east.ToString().Trim() == "" || east.ToString().Trim() == null)
            com.Parameters.Add("@east", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@east", SqlDbType.VarChar).Value = east.Trim();


        if (west.ToString().Trim() == "" || west.ToString().Trim() == null)
            com.Parameters.Add("@west", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@west", SqlDbType.VarChar).Value = west.Trim();


        if (south.ToString().Trim() == "" || south.ToString().Trim() == null)
            com.Parameters.Add("@south", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@south", SqlDbType.VarChar).Value = south.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (trees.ToString().Trim() == "" || trees.ToString().Trim() == null)
            com.Parameters.Add("@trees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@trees", SqlDbType.VarChar).Value = trees.Trim();

        if (nooftrees.ToString().Trim() == "" || nooftrees.ToString().Trim() == null)
            com.Parameters.Add("@nooftrees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@nooftrees", SqlDbType.VarChar).Value = nooftrees.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            // return Convert.ToInt32(com.ExecuteScalar());


            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }



    }

    public DataSet GetCompletedbyApproval1KUDA(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata1KUDA", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }
    public DataSet GetDepartmentDashboardDetailsKUDAPart1(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetDepartmentDashboardDetailsKUDAPart1lat", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet fetchIncentivedetnew(string intDistrictid, string IndustryName, string intDeptid, string intstageid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchinsentivedetnew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "All" || intstageid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = intstageid.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%" + IndustryName.ToString() + "%";

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            //if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "--Select--")
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intstageid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet fetchIncentivedetnewSearch(string intDistrictid, string IndustryName, string intDeptid, string intstageid, string IncentiveID, string FromDate, string ToDate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchinsentivedetnewSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IncentiveID.Trim() == "" || IncentiveID.Trim() == null || IncentiveID.Trim() == "All" || IncentiveID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();



            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "All" || FromDate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate.ToString());

            if (ToDate.Trim() == "" || ToDate.Trim() == null || ToDate.Trim() == "All" || ToDate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(ToDate.ToString());


            if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "All" || intstageid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = intstageid.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%" + IndustryName.ToString() + "%";

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            //if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "--Select--")
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intstageid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public int UpdateInspectorName(string intApplicationid, string Deptname, string Modified_by)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "UpdateInspectorName";

    //    if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

    //    if (Deptname.Trim() == "" || Deptname.Trim() == null || Deptname.Trim == "--Select--")
    //        com.Parameters.Add("@Deptname", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Deptname", SqlDbType.VarChar).Value = Deptname.Trim();

    //    if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();




    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        return com.ExecuteNonQuery();
    //    }
    //    catch (Exception ex)
    //    {
    //        con.CloseConnection();
    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}



    public DataSet getIPOTargetDetailslat(string Year, string Month, string intGMid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getDetailsbyGMdet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intGMid.Trim() == "" || intGMid.Trim() == null || intGMid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intGMid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intGMid", SqlDbType.VarChar).Value = intGMid.ToString();

            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();

            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet getGMtoIPOTarget1(string intTSiPASSid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getGMtoIPOTarget1new", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intTSiPASSid.Trim() == "" || intTSiPASSid.Trim() == null || intTSiPASSid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = intTSiPASSid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIPOTargetDetails(string intIPOid, string Year, string Month, string formid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GettargetIDbyGM", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();


            if (formid.Trim() == "" || formid.Trim() == null || formid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@formid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@formid", SqlDbType.VarChar).Value = formid.ToString();


            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();

            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }



    public DataSet GetDepartmentIncentiveDashboard(string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetDepartmentIncentiveDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--" || intDistrictid.Trim() == "0")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetDepartmentDashboardDetailsRenewals(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getRenewalsDeptDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseReportCollectorCFO(string DistrictID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictWisereportCollectorCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (DistrictID.Trim() == "" || DistrictID.Trim() == null)
                da.SelectCommand.Parameters.Add("@DistrictID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DistrictID", SqlDbType.VarChar).Value = DistrictID.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetEnterpreneourDashboardDetailsRenewals(string intEntid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerRenewalsDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intEntid.Trim() == "" || intEntid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = intEntid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertDeapartmetRenewalsProcess(string IntRenewaluserId, string IntRenewalDeptId, string intStageid, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertDepartmentProcess";

        if (IntRenewaluserId == "" || IntRenewaluserId == null)
            com.Parameters.Add("@IntRenewaluserId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IntRenewaluserId", SqlDbType.VarChar).Value = IntRenewaluserId.Trim();

        if (IntRenewalDeptId == "" || IntRenewalDeptId == null)
            com.Parameters.Add("@IntRenewalDeptId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IntRenewalDeptId", SqlDbType.VarChar).Value = IntRenewalDeptId.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();



        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    //public DataSet GetApplicationTracker(string UnitName, string UID)
    //{

    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetApplicationTracker", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;



    //        if (UnitName.Trim() == "" || UnitName.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = '%';
    //        else
    //            da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = '%'+UnitName.ToString()+'%';


    //        if (UID.Trim() == "" || UID.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = '%';
    //        else
    //            da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }


    //}

    public DataSet GetApplicationTracker(string UnitName, string UID, string ApplType)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetApplicationTracker", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (UnitName.Trim() == "" || UnitName.Trim() == null)
                da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = '%';
            else
                da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = '%' + UnitName.ToString() + '%';


            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = '%';
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();

            if (ApplType.Trim() == "" || ApplType.Trim() == null)
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = '%';
            else
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }
    public DataSet GetApplicationTrackerDetailed(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetApplicationTrackerDetailed", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApplicationTrackerDetailed2(string Quesionary_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("GetApplicationTrackerDetailed2", con.GetConnection);
            da = new SqlDataAdapter("GetApplicationTrackerDetailed_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Quesionary_id.Trim() == "" || Quesionary_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = Quesionary_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet FetchTotalDistrictwise_Old()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTotalDistrictwise_Old", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTotalDistrictwise_New(string status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTotalDistrictwise_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getdataofStatelevel1(string dist, string unitname, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("getdataofstatelevel1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if ((fromdate.ToString().Trim() == "") || (fromdate.ToString().Trim() == null))
            {
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = cmf.convertDateIndia(fromdate);
            }
            if (todate.ToString().Trim() == "" || todate.ToString().Trim() == null)
            {
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(todate);
            }

            if (unitname.Trim() == "" || unitname.Trim() == null || unitname.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@unitname", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@unitname", SqlDbType.VarChar).Value = "%" + unitname.ToString() + "%";

            if (dist.Trim() == "" || dist.Trim() == null || dist.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = dist.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet getdataofDistrictlevel1(string dist, string unitname)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("getdistrleveldata1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (dist.Trim() == "" || dist.Trim() == null || dist.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = dist.ToString();


            if (unitname.Trim() == "" || unitname.Trim() == null || unitname.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@unitname", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@unitname", SqlDbType.VarChar).Value = "%" + unitname.ToString() + "%";


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTotalSectorwise_New(string status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTotalSectorwise_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTotalSectorwise_Old()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTotalSectorwise_Old", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet FetchStageOfImplementationwise_Old()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchStageOfImplementationwise_Old", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet FetchMonthwisestatusrpt(string status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_MONTHWISE_RPT_R15_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet FetchStageOfImplementationwise_New(string status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchStageOfImplementationwise_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int ChangeStateWiseStatus(string intApplicationid, string Status, string Modified_by, string Reason, string Filepath)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "updStateWiseStatus";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Reason.Trim() == "" || Reason.Trim() == null)
            com.Parameters.Add("@Reason", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reason", SqlDbType.VarChar).Value = Reason.Trim();

        if (Filepath.Trim() == "" || Filepath.Trim() == null)
            com.Parameters.Add("@Filepath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Filepath", SqlDbType.VarChar).Value = Filepath.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int ChangeDistrictWiseStatus(string intApplicationid, string Status, string Modified_by, string Reason, string Filepath, string FilepathNew, string interacted, string interactiondate, string presentworkingstatus)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "updateDistrictWiseStatus";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Reason.Trim() == "" || Reason.Trim() == null)
            com.Parameters.Add("@Reason", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reason", SqlDbType.VarChar).Value = Reason.Trim();

        if (Filepath.Trim() == "" || Filepath.Trim() == null)
            com.Parameters.Add("@Filepath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Filepath", SqlDbType.VarChar).Value = Filepath.Trim();

        com.Parameters.Add("@FilepathNew", SqlDbType.VarChar).Value = FilepathNew.Trim();


        if (interacted.Trim() == "" || interacted.Trim() == null)
            com.Parameters.Add("@INTERACTION", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@INTERACTION", SqlDbType.VarChar).Value = interacted.Trim();

        if (interactiondate.Trim() == "" || interactiondate.Trim() == null)
            com.Parameters.Add("@INTERACTIONDATE", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@INTERACTIONDATE", SqlDbType.DateTime).Value = interactiondate;
        if (presentworkingstatus.Trim() == "" || presentworkingstatus.Trim() == null)
            com.Parameters.Add("@PRESENTWORKINGSTATUS", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PRESENTWORKINGSTATUS", SqlDbType.VarChar).Value = presentworkingstatus.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int UpdateInspectionDate(string intApplicationid, string InspectionDate, string Modified_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdateInspectionDate";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (InspectionDate.Trim() == "" || InspectionDate.Trim() == null)
            com.Parameters.Add("@InspectionDate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(InspectionDate);

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public int InsertUpload(string intApplicationid, string File, string date, string Modified_by, string FilePath, string filename)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertUpload";

        if (date.Trim() == "" || date.Trim() == null || date.Trim() == "--Select--")
        {
            com.Parameters.Add("@date", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@date", SqlDbType.DateTime).Value = cmf.convertDateIndia(date);
        }

        if (FilePath.Trim() == "" || FilePath.Trim() == null)
            com.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();

        if (filename.Trim() == "" || filename.Trim() == null)
            com.Parameters.Add("@filename", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@filename", SqlDbType.VarChar).Value = filename.Trim();

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (File.Trim() == "" || File.Trim() == null)
            com.Parameters.Add("@File", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File", SqlDbType.VarChar).Value = File.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentINcentive(string Dept_ID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDepartmentIncentive", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Dept_ID.Trim() == "" || Dept_ID.Trim() == null)
                da.SelectCommand.Parameters.Add("@Dept_ID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept_ID", SqlDbType.VarChar).Value = Dept_ID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIPOIncentiveDashboard(string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetIPOIncentiveDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IPOID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IPOID", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet fetchIncentivedetIPO(string intDeptid, string Status)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("fetchinsentivedetIPO", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();




    //        if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    public DataSet fetchIncentivedetIPO(string intDeptid, string Status, string IncentiveID, string IndustryName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchinsentivedetIPO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "All" || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.ToString();

            if (IncentiveID.Trim() == "" || IncentiveID.Trim() == null || IncentiveID.Trim() == "All" || IncentiveID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDistnamebylogin(string dist)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdistnamebyIPO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (dist.Trim() == "" || dist.Trim() == null || dist.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dist", SqlDbType.VarChar).Value = dist.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public int UpdateInspectorName(string intApplicationid, string Deptname, string Modified_by, string EMiUdyogAadhar, string SentFrom, string Status)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdateInspectorName";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Deptname.Trim() == "" || Deptname.Trim() == null || Deptname.Trim() == "--Select--")
            com.Parameters.Add("@Deptname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Deptname", SqlDbType.VarChar).Value = Deptname.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();


        if (EMiUdyogAadhar.Trim() == "" || EMiUdyogAadhar.Trim() == null)

            com.Parameters.Add("@EMiUdyogAadhar", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@EMiUdyogAadhar", SqlDbType.VarChar).Value = EMiUdyogAadhar.Trim();

        if (SentFrom.Trim() == "" || SentFrom.Trim() == null)

            com.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)

            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet RptInvestmentGraph()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchRptInvestmentGraph", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet RptEntType()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchRptEntType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchRptCasteType()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchRptCasteType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet RptDepartmentBeyond()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchRptDepartmentBeyond", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet getMasterDataForCMO()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getMasterDataforCmo", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetmodifiedDate()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("GetmodifiedDate", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchDistrictwiseDrildown(string status, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchDistrictwiseDrildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchDistrictwiseDrildown_New(string status, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchDistrictwiseDrildown_new", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchSectorwiseDrildown(string status, string Sector)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchSectorwiseDrildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null)
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchSectorwiseDrildownNew(string status, string Sector)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchSectorwiseDrildown_new", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null)
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet FetchProgresswiseDrildown(string status, string Progress)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchProgresswiseDrildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Progress.Trim() == "" || Progress.Trim() == null)
                da.SelectCommand.Parameters.Add("@Progress", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Progress", SqlDbType.VarChar).Value = Progress.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchProgresswiseDrildown_new(string status, string Progress)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchProgresswiseDrildown_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Progress.Trim() == "" || Progress.Trim() == null)
                da.SelectCommand.Parameters.Add("@Progress", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Progress", SqlDbType.VarChar).Value = Progress.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchTableOnEmployment()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTableOnEmployment", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTableOnEmployment_New(string status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTableOnEmployment_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetInvestmentwisependancy()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("GetInvestmentwisependancy_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetINVPendencyDetailed(string status, string Type)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR5Point3Drildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@StNumber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@StNumber", SqlDbType.VarChar).Value = status.ToString();

            if (Type.Trim() == "" || Type.Trim() == null || Type.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@InvstTypes", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@InvstTypes", SqlDbType.VarChar).Value = Type.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchTableOnInvestment_New(string status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTableOnInvestment_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTableOnInvestment()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTableOnInvestment", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet GetpaymentdetailslatsSBHChallan(string intDeptid, string UID_No, string nameofunit, string District, string paymentmode, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetpaymentdetailslatsSBHChallan", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (fromdate.Trim() == "" || fromdate.Trim() == null || fromdate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = cmf.convertDateIndia(fromdate);

            if (todate.Trim() == "" || todate.Trim() == null || todate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(todate);

            if (paymentmode.Trim() == "" || paymentmode.Trim() == null || paymentmode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = paymentmode.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            if (UID_No.Trim() == "" || UID_No.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null)
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetCollectorforIncentive(string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCollectorforIncentive", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int GMCertificateInsertUpload(string intApplicationid, string File, string Modified_by, string FilePath, string filename, string SendTo)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "GMCertificateInsertUpload";

        if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
        }

        if (FilePath.Trim() == "" || FilePath.Trim() == null)
            com.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();

        if (filename.Trim() == "" || filename.Trim() == null)
            com.Parameters.Add("@filename", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@filename", SqlDbType.VarChar).Value = filename.Trim();

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (File.Trim() == "" || File.Trim() == null)
            com.Parameters.Add("@File", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File", SqlDbType.VarChar).Value = File.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public DataSet FetchEmploymentwiseDrildown(string status, string Employment)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchEmploymentwiseDrildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Employment.Trim() == "" || Employment.Trim() == null)
                da.SelectCommand.Parameters.Add("@Employment", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Employment", SqlDbType.VarChar).Value = Employment.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchEmploymentwiseDrildown_New(string status, string Employment)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchEmploymentwiseDrildown_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Employment.Trim() == "" || Employment.Trim() == null)
                da.SelectCommand.Parameters.Add("@Employment", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Employment", SqlDbType.VarChar).Value = Employment.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchInvestmentwiseDrildown(string status, string Investment)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchInvestmentwiseDrildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Investment.Trim() == "" || Investment.Trim() == null)
                da.SelectCommand.Parameters.Add("@Investment", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Investment", SqlDbType.VarChar).Value = Investment.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchInvestmentwiseDrildown_New(string status, string Investment)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchInvestmentwiseDrildown_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Investment.Trim() == "" || Investment.Trim() == null)
                da.SelectCommand.Parameters.Add("@Investment", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Investment", SqlDbType.VarChar).Value = Investment.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCompletedbyApproval2A(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata2A", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet GetCompletedbyApproval3A(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata3A", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet GetCompletedbyApprovalCFO2A(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            // myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataCFO2A", con.GetConnection);
            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataCFO2A_CFONEW", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }


    public DataSet GetCompletedbyApprovalCFO3A(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            // myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataCFO3A", con.GetConnection);
            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataCFO3A_CFONEW", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet Getpaymentdetailslats(string intDeptid, string UID_No, string nameofunit, string District, string paymentmode, string fromdate, string todate, string BankName)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetPaymentdtailsCFEBANKTYPE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (fromdate.Trim() == "" || fromdate.Trim() == null || fromdate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = cmf.convertDateIndia(fromdate);

            if (todate.Trim() == "" || todate.Trim() == null || todate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(todate);

            if (paymentmode.Trim() == "" || paymentmode.Trim() == null || paymentmode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = paymentmode.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            if (UID_No.Trim() == "" || UID_No.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null)
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();

            if (BankName.Trim() == "" || BankName.Trim() == null)
                da.SelectCommand.Parameters.Add("@BankName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }
    public DataSet GetpaymentdetailslatsCFO(string intDeptid, string UID_No, string nameofunit, string District, string paymentmode, string fromdate, string todate, string BankName)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("GetPaymentdtailsCFOBANKTYPE", con.GetConnection);
            da = new SqlDataAdapter("GetPaymentdtailsCFOBANKTYPE_NEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (fromdate.Trim() == "" || fromdate.Trim() == null || fromdate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.DateTime).Value = cmf.convertDateIndia(fromdate);

            if (todate.Trim() == "" || todate.Trim() == null || todate.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(todate);

            if (paymentmode.Trim() == "" || paymentmode.Trim() == null || paymentmode.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@paymentmode", SqlDbType.VarChar).Value = paymentmode.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            if (UID_No.Trim() == "" || UID_No.Trim() == null)
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null)
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.ToString();

            if (BankName.Trim() == "" || BankName.Trim() == null)
                da.SelectCommand.Parameters.Add("@BankName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetLoanReport(string nameofunit, string DistrictId, string Uid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetLoanReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Uid.Trim() == "" || Uid.Trim() == null || Uid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Uid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Uid", SqlDbType.VarChar).Value = Uid.ToString();

            if (nameofunit.Trim() == "" || nameofunit.Trim() == null || nameofunit.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = "%" + nameofunit.ToString() + "%";

            if (DistrictId.Trim() == "" || DistrictId.Trim() == null || DistrictId.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DistrictId.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int insertLoanDetails(string IndustryName, string intDistrictid, string Email, string MobileNumber, string intmandalid, string bankname, string Reg_Date, string amount, string status, string lineofactivity, string BankBranchName, string SanctionDate)
    {

        int value = 0;

        try
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("insertLoanDetails", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null)
                cmd.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.Trim();
            else
                cmd.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.Trim();

            if (intDistrictid.Trim() == "" || intDistrictid == null || intDistrictid.Trim() == "--Select--")
                cmd.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

            if (Email.Trim() == "" || Email.Trim() == null)
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();
            else
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = Email.Trim();

            if (MobileNumber.Trim() == "" || MobileNumber.Trim() == null)
                cmd.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MobileNumber", SqlDbType.VarChar).Value = MobileNumber.Trim();

            if (intmandalid.Trim() == "" || intmandalid.Trim() == null || intmandalid.Trim() == "--Select--")
                cmd.Parameters.Add("@intmandalid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intmandalid", SqlDbType.VarChar).Value = intmandalid.Trim();

            if (bankname.Trim() == "" || bankname.Trim() == null || bankname.Trim() == "--Select--")
                cmd.Parameters.Add("@bankname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@bankname", SqlDbType.VarChar).Value = bankname.Trim();


            if (amount.Trim() == "" || amount.Trim() == null || amount.Trim() == "--Select--")
                cmd.Parameters.Add("@amount", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@amount", SqlDbType.VarChar).Value = amount.Trim();

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                cmd.Parameters.Add("@status", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@status", SqlDbType.VarChar).Value = status.Trim();

            if (lineofactivity.Trim() == "" || lineofactivity.Trim() == null || lineofactivity.Trim() == "--Select--")
                cmd.Parameters.Add("@lineofactivity", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@lineofactivity", SqlDbType.VarChar).Value = lineofactivity.Trim();

            if (Reg_Date.ToString().Trim() == "" || Reg_Date.ToString().Trim() == null || Reg_Date.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Reg_Date", SqlDbType.DateTime).Value = cmf.convertDateIndia(Reg_Date.Trim());


            if (BankBranchName.Trim() == "" || BankBranchName.Trim() == null || BankBranchName.Trim() == "--Select--")
                cmd.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

            if (SanctionDate.ToString().Trim() == "" || SanctionDate.ToString().Trim() == null || SanctionDate.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@SanctionDate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@SanctionDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(SanctionDate.Trim());


            return Convert.ToInt32(cmd.ExecuteScalar());
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;
    }
    public DataSet GetShowVATExporters(string NameofComp, string IECNUmber, string Commodity, string Status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowVATExporters", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (NameofComp.Trim() == "" || NameofComp.Trim() == null)
                da.SelectCommand.Parameters.Add("@NameofComp", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@NameofComp", SqlDbType.VarChar).Value = NameofComp.ToString();
            if (IECNUmber.Trim() == "" || IECNUmber.Trim() == null)
                da.SelectCommand.Parameters.Add("@IECNUmber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IECNUmber", SqlDbType.VarChar).Value = IECNUmber.ToString();

            if (Commodity.Trim() == "" || Commodity.Trim() == null)
                da.SelectCommand.Parameters.Add("@Commodity", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Commodity", SqlDbType.VarChar).Value = Commodity.ToString();

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--All--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int updateProductDescription(string intTSExportersid, string filetype, string filepath, string filename, string created_by, string ProductDescription, string StateName, string Countries)
    {

        int value = 0;

        try
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("updateProductDescription", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;

            if (intTSExportersid.Trim() == "" || intTSExportersid.Trim() == null)
                cmd.Parameters.Add("@intTSExportersid", SqlDbType.VarChar).Value = intTSExportersid.Trim();
            else
                cmd.Parameters.Add("@intTSExportersid", SqlDbType.VarChar).Value = intTSExportersid.Trim();

            if (filetype.Trim() == "" || filetype == null)
                cmd.Parameters.Add("@filetype", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@filetype", SqlDbType.VarChar).Value = filetype.Trim();

            if (StateName.Trim() == "" || StateName == null)
                cmd.Parameters.Add("@StateName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@StateName", SqlDbType.VarChar).Value = StateName.Trim();

            if (Countries.Trim() == "" || Countries == null)
                cmd.Parameters.Add("@Countries", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Countries", SqlDbType.VarChar).Value = Countries.Trim();


            if (filepath.Trim() == "" || filepath == null)
                cmd.Parameters.Add("@filepath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@filepath", SqlDbType.VarChar).Value = filepath.Trim();

            if (filename.Trim() == "" || filename == null)
                cmd.Parameters.Add("@filename", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@filename", SqlDbType.VarChar).Value = filename.Trim();

            if (created_by.Trim() == "" || created_by == null)
                cmd.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();
            if (ProductDescription.Trim() == "" || ProductDescription == null)
                cmd.Parameters.Add("@ProductDescription", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@ProductDescription", SqlDbType.VarChar).Value = ProductDescription.Trim();


            return Convert.ToInt32(cmd.ExecuteScalar());
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;

    }

    public DataSet GetGMManufactureDetUpdated(string EnterpriseName, string TINNumber, string Commudity, string status)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getVATGMManufactureDetailsUpdated", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (EnterpriseName.Trim() == "" || EnterpriseName.Trim() == null || EnterpriseName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@EnterpriseName", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@EnterpriseName", SqlDbType.VarChar).Value = EnterpriseName.Trim();
            }


            if (TINNumber.Trim() == "" || TINNumber.Trim() == null || TINNumber.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@TINNumber", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@TINNumber", SqlDbType.VarChar).Value = TINNumber.Trim();
            }

            if (Commudity.Trim() == "" || Commudity.Trim() == null || Commudity.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Commudity", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Commudity", SqlDbType.VarChar).Value = Commudity.Trim();
            }


            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }


    public DataSet GetFinancialYearsFromTodate(string slno)//, string mandalcd, string Villagecd, string Clusterid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FINANCIALYEARS_FromTODates", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@slno", SqlDbType.VarChar).Value = slno.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getvehicleInspTrans(string id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getVehicleInspectionTrans", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (id.Trim().ToString() == "" || id.ToString().Trim() == null || id.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = id.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetVehicleInspectionDet(string id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getVehicleInspectionDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (id.Trim().ToString() == "" || id.ToString().Trim() == null || id.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = id.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }
    public DataSet getvehicleInspLookUp(string Year, string Month, string Created_by)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getVehicleLookUp", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();



            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = Created_by.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }



    public DataSet GetGMExportDetUpdated(string EnterpriseName, string TINNumber, string Commudity, string status)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getVATExportersDetailsUpdated", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (EnterpriseName.Trim() == "" || EnterpriseName.Trim() == null || EnterpriseName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@EnterpriseName", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@EnterpriseName", SqlDbType.VarChar).Value = EnterpriseName.Trim();
            }


            if (TINNumber.Trim() == "" || TINNumber.Trim() == null || TINNumber.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@TINNumber", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@TINNumber", SqlDbType.VarChar).Value = TINNumber.Trim();
            }

            if (Commudity.Trim() == "" || Commudity.Trim() == null || Commudity.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Commudity", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Commudity", SqlDbType.VarChar).Value = Commudity.Trim();
            }


            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }


    public int updateProductDescriptionVATManufacture(string intTSExportersid, string filetype, string filepath, string filename, string created_by, string ProductDescription, string market, string indicateState, string export, string Countryname)
    {

        int value = 0;

        try
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("updateProductDescriptionGMVATManufacture", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            if (market.Trim() == "" || market.Trim() == null || market.Trim() == "--Select--")
                cmd.Parameters.Add("@market", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@market", SqlDbType.VarChar).Value = market.Trim();


            if (indicateState.Trim() == "" || indicateState.Trim() == null || indicateState.Trim() == "--Select--")
                cmd.Parameters.Add("@indicateState", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@indicateState", SqlDbType.VarChar).Value = indicateState.Trim();

            if (export.Trim() == "" || export.Trim() == null || export.Trim() == "--Select--")
                cmd.Parameters.Add("@export", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@export", SqlDbType.VarChar).Value = export.Trim();

            if (Countryname.Trim() == "" || Countryname.Trim() == null || Countryname.Trim() == "--Select--")
                cmd.Parameters.Add("@Countryname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Countryname", SqlDbType.VarChar).Value = Countryname.Trim();

            if (intTSExportersid.Trim() == "" || intTSExportersid.Trim() == null)
                cmd.Parameters.Add("@intTSExportersid", SqlDbType.VarChar).Value = intTSExportersid.Trim();
            else
                cmd.Parameters.Add("@intTSExportersid", SqlDbType.VarChar).Value = intTSExportersid.Trim();

            if (filetype.Trim() == "" || filetype == null)
                cmd.Parameters.Add("@filetype", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@filetype", SqlDbType.VarChar).Value = filetype.Trim();

            if (filepath.Trim() == "" || filepath == null)
                cmd.Parameters.Add("@filepath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@filepath", SqlDbType.VarChar).Value = filepath.Trim();

            if (filename.Trim() == "" || filename == null)
                cmd.Parameters.Add("@filename", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@filename", SqlDbType.VarChar).Value = filename.Trim();

            if (created_by.Trim() == "" || created_by == null)
                cmd.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();
            if (ProductDescription.Trim() == "" || ProductDescription == null)
                cmd.Parameters.Add("@ProductDescription", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@ProductDescription", SqlDbType.VarChar).Value = ProductDescription.Trim();


            return Convert.ToInt32(cmd.ExecuteScalar());
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }

        return value;

    }



    public DataSet GetGMExportdata(string id)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetExportDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (id.Trim() == "" || id.Trim() == null || id.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = id.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public DataSet GetGMExportdataVATmanufacturedata(string id)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetExportDetailsVATManufacture", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (id.Trim() == "" || id.Trim() == null || id.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = id.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }





    public DataSet GetGMManufactureDet(string EnterpriseName, string TINNumber, string Commudity, string status)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getVATGMManufactureDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (EnterpriseName.Trim() == "" || EnterpriseName.Trim() == null || EnterpriseName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@EnterpriseName", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@EnterpriseName", SqlDbType.VarChar).Value = EnterpriseName.Trim();
            }


            if (TINNumber.Trim() == "" || TINNumber.Trim() == null || TINNumber.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@TINNumber", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@TINNumber", SqlDbType.VarChar).Value = TINNumber.Trim();
            }

            if (Commudity.Trim() == "" || Commudity.Trim() == null || Commudity.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Commudity", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Commudity", SqlDbType.VarChar).Value = Commudity.Trim();
            }


            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--All--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.Trim();
            }




            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet getApprovalbyUIDfrotransfer(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getApprovalbyUIDfrotransfer", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (UID.Trim() == "" || UID.Trim() == null)
                da.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = UID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet UpdatepollutionTransfer(string enterprenuerUID, string ApprovalID)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("UpdatepollutionTransfer", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuerUID.Trim() == "" || enterprenuerUID.Trim() == null || enterprenuerUID.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = enterprenuerUID.Trim();
            }

            if (ApprovalID.Trim() == "" || ApprovalID.Trim() == null || ApprovalID.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ApprovalID", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ApprovalID", SqlDbType.VarChar).Value = ApprovalID.Trim();
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public int GMCertificateInsertUpload(string intApplicationid, string File, string Modified_by, string FilePath, string filename, string SendTo, string GMStatus, string GMRemarks)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "GMCertificateInsertUpload";

        if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
        }

        if (FilePath.Trim() == "" || FilePath.Trim() == null)
            com.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();

        if (filename.Trim() == "" || filename.Trim() == null)
            com.Parameters.Add("@filename", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@filename", SqlDbType.VarChar).Value = filename.Trim();

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (File.Trim() == "" || File.Trim() == null)
            com.Parameters.Add("@File", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File", SqlDbType.VarChar).Value = File.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (GMStatus.Trim() == "" || GMStatus.Trim() == null)
            com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = GMStatus.Trim();

        if (GMRemarks.Trim() == "" || GMRemarks.Trim() == null)
            com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = GMRemarks.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int GMCertificateInsertUploadNew(string intApplicationid, string Modified_by, string SendTo, string GMStatus, string GMRemarks, 
        string lblMstIncentiveId, string caste, string gender, string category, string enterprise, string sector)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[GMCertificateInsertUpload_New]";

        if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
        }
        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (GMStatus.Trim() == "" || GMStatus.Trim() == null)
            com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = GMStatus.Trim();

        if (GMRemarks.Trim() == "" || GMRemarks.Trim() == null)
            com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = GMRemarks.Trim();


        com.Parameters.Add("@caste_GM", SqlDbType.VarChar).Value = caste.Trim();
        com.Parameters.Add("@gender_GM", SqlDbType.VarChar).Value = gender.Trim();
        com.Parameters.Add("@category_GM", SqlDbType.VarChar).Value = category.Trim();
        com.Parameters.Add("@enterprise_GM", SqlDbType.VarChar).Value = enterprise.Trim();
        com.Parameters.Add("@sector_GM", SqlDbType.VarChar).Value = sector.Trim();


        com.Parameters.Add("@lblMstIncentiveId", SqlDbType.VarChar).Value = lblMstIncentiveId.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //public int GMCertificateInsertUploadNew(string intApplicationid, string Modified_by, string SendTo, string GMStatus, string GMRemarks, string lblMstIncentiveId)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "[GMCertificateInsertUpload_New]";

    //    if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
    //    {
    //        com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;
    //    }
    //    else
    //    {
    //        com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
    //    }
    //    if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

    //    if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

    //    if (GMStatus.Trim() == "" || GMStatus.Trim() == null)
    //        com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = GMStatus.Trim();

    //    if (GMRemarks.Trim() == "" || GMRemarks.Trim() == null)
    //        com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = GMRemarks.Trim();

    //    com.Parameters.Add("@lblMstIncentiveId", SqlDbType.VarChar).Value = lblMstIncentiveId.Trim();

    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        return com.ExecuteNonQuery();
    //    }
    //    catch (Exception ex)
    //    {
    //        con.CloseConnection();
    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}


    public DataSet fetchIncentivedetnewCommissioner(string intDistrictid, string IndustryName, string intDeptid, string intstageid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchIncentivedetnewCommissioner", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "All" || intstageid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = intstageid.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%" + IndustryName.ToString() + "%";

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            //if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "--Select--")
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intstageid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateCommissionerLogin(string intApplicationid, string CommStatus, string Modified_by, string SLCNumber, string SLCDate, string SLCAmount, string COMRemarks)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdateCommissionerLogin";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (CommStatus.Trim() == "" || CommStatus.Trim() == null || CommStatus.Trim() == "--Select--")
            com.Parameters.Add("@CommStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CommStatus", SqlDbType.VarChar).Value = CommStatus.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();


        if (SLCNumber.Trim() == "" || SLCNumber.Trim() == null)

            com.Parameters.Add("@SLCNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SLCNumber", SqlDbType.VarChar).Value = SLCNumber.Trim();

        if (SLCDate.Trim() == "" || SLCDate.Trim() == null)

            com.Parameters.Add("@SLCDate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SLCDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(SLCDate.Trim());

        if (SLCAmount.Trim() == "" || SLCAmount.Trim() == null)

            com.Parameters.Add("@SLCAmount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SLCAmount", SqlDbType.VarChar).Value = SLCAmount.Trim();

        if (COMRemarks.Trim() == "" || COMRemarks.Trim() == null)

            com.Parameters.Add("@COMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@COMRemarks", SqlDbType.VarChar).Value = COMRemarks.Trim();






        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public DataSet DistrictWiseIncentivereport()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DistrictWiseIncentivereport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseIncentivereportdetails(string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DistrictWiseIncentivereportdetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //public int insertIPOBankVisitDet(string IPOMegistate, string NoofMandals, string NoofBranches, string Created_by, string intIPOid, string Year, string month, string GPSFilePath, string GPSFileName)
    //{

    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "inserBankwiseReport";


    //    if (IPOMegistate == "" || IPOMegistate == null)
    //        com.Parameters.Add("@IPOMegistate", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@IPOMegistate", SqlDbType.VarChar).Value = IPOMegistate.Trim();

    //    if (GPSFilePath == "" || GPSFilePath == null)
    //        com.Parameters.Add("@GPSFilePath", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GPSFilePath", SqlDbType.VarChar).Value = GPSFilePath.Trim();

    //    if (GPSFileName == "" || GPSFileName == null)
    //        com.Parameters.Add("@GPSFileName", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GPSFileName", SqlDbType.VarChar).Value = GPSFileName.Trim();

    //    if (Year.ToString() == "" || Year.ToString() == null || Year.ToString() == "--Select--")
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

    //    if (month.ToString() == "" || month.ToString() == null || month.ToString() == "--Select--")
    //        com.Parameters.Add("@month", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@month", SqlDbType.VarChar).Value = month.Trim();



    //    if (NoofMandals == "" || NoofMandals == null)
    //        com.Parameters.Add("@NoofMandals", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NoofMandals", SqlDbType.VarChar).Value = NoofMandals.Trim();


    //    if (NoofBranches == "" || NoofBranches == null)
    //        com.Parameters.Add("@NoofBranches", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NoofBranches", SqlDbType.VarChar).Value = NoofBranches.Trim();

    //    if (Created_by == "" || Created_by == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


    //    if (intIPOid == "" || intIPOid == null)
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }



    //}



    public DataSet getBankReport(string Year, string Month, string Created_by)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getBankreportLookup", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();



            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }



    public DataSet getBankReportFilldetails(string intbankid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getbankreportfilldet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intbankid.Trim().ToString() == "" || intbankid.ToString().Trim() == null || intbankid.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intbankid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intbankid", SqlDbType.VarChar).Value = intbankid.Trim();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet getBankReportTrans(string intbankid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getbankTransDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intbankid.Trim().ToString() == "" || intbankid.ToString().Trim() == null || intbankid.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intbankid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intbankid", SqlDbType.VarChar).Value = intbankid.Trim();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }




    public int insertIPOBankVisitDet(string intBankReportid, string IPOMegistate, string NoofMandals, string NoofBranches, string Created_by, string intIPOid, string Year, string month, string GPSFilePath, string GPSFileName, string DistId)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "inserBankwiseReport";


        if (IPOMegistate == "" || IPOMegistate == null)
            com.Parameters.Add("@IPOMegistate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPOMegistate", SqlDbType.VarChar).Value = IPOMegistate.Trim();

        if (intBankReportid == "" || intBankReportid == null)
            com.Parameters.Add("@intBankReportid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intBankReportid", SqlDbType.VarChar).Value = intBankReportid.Trim();



        if (GPSFilePath == "" || GPSFilePath == null)
            com.Parameters.Add("@GPSFilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GPSFilePath", SqlDbType.VarChar).Value = GPSFilePath.Trim();

        if (GPSFileName == "" || GPSFileName == null)
            com.Parameters.Add("@GPSFileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GPSFileName", SqlDbType.VarChar).Value = GPSFileName.Trim();

        if (Year.ToString() == "" || Year.ToString() == null || Year.ToString() == "--Select--")
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

        if (month.ToString() == "" || month.ToString() == null || month.ToString() == "--Select--")
            com.Parameters.Add("@month", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@month", SqlDbType.VarChar).Value = month.Trim();



        if (NoofMandals == "" || NoofMandals == null)
            com.Parameters.Add("@NoofMandals", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofMandals", SqlDbType.VarChar).Value = NoofMandals.Trim();


        if (NoofBranches == "" || NoofBranches == null)
            com.Parameters.Add("@NoofBranches", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofBranches", SqlDbType.VarChar).Value = NoofBranches.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (intIPOid == "" || intIPOid == null)
            com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.Trim();



        if (DistId == "" || DistId == null)
            com.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DistId.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }



    }








    public int deletebankwiserpt(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deletebankwiseDet";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }

    }




    public int bulkInsertBankreport(DataTable dt)
    {

        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intBankReportid", "intBankReportid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("TypeofReport", "TypeofReport");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("intBankid", "intBankid");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("BranchName", "BranchName");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("NameofUnit", "NameofUnit");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("AddressofUnit", "AddressofUnit");

            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Remarks", "Remarks");
            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("BankName", "BankName");
            SqlBulkCopyColumnMapping mapping10 = new SqlBulkCopyColumnMapping("TypeName", "TypeName");
            SqlBulkCopyColumnMapping mapping11 = new SqlBulkCopyColumnMapping("FilePath", "FilePath");
            SqlBulkCopyColumnMapping mapping12 = new SqlBulkCopyColumnMapping("ContactNumber", "ContactNumber");
            SqlBulkCopyColumnMapping mapping13 = new SqlBulkCopyColumnMapping("MandalId", "MandalId");
            SqlBulkCopyColumnMapping mapping14 = new SqlBulkCopyColumnMapping("DistrictId", "DistrictId");
            SqlBulkCopyColumnMapping mapping15 = new SqlBulkCopyColumnMapping("VillageId", "VillageId");
            SqlBulkCopyColumnMapping mapping16 = new SqlBulkCopyColumnMapping("WhetherYorN", "WhetherYorN");
            SqlBulkCopyColumnMapping mapping17 = new SqlBulkCopyColumnMapping("TIHCL", "TIHCL");
            SqlBulkCopyColumnMapping mapping18 = new SqlBulkCopyColumnMapping("reason", "reason");
            //SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Girth", "Girth");
            //SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Est_FireWood", "Est_FireWood");
            //SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Forest_Pole", "Forest_Pole");
            //  SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            //SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);
            bulkCopy.ColumnMappings.Add(mapping10);
            bulkCopy.ColumnMappings.Add(mapping11);
            bulkCopy.ColumnMappings.Add(mapping12);
            bulkCopy.ColumnMappings.Add(mapping13);
            bulkCopy.ColumnMappings.Add(mapping14);
            bulkCopy.ColumnMappings.Add(mapping15);
            bulkCopy.ColumnMappings.Add(mapping16);
            bulkCopy.ColumnMappings.Add(mapping17);
            bulkCopy.ColumnMappings.Add(mapping18);
            bulkCopy.DestinationTableName = ("tr_BankReportDet");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;




    }





    //public int insertIndustryCatelog(string intIPOid, string NoofUnitsCaptures, string YettoCaptured, string VI_Year, string VI_Month, string Created_by)
    //{

    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertIndustrialcatelog";

    //    if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.Trim();

    //    if (NoofUnitsCaptures.Trim() == "" || NoofUnitsCaptures.Trim() == null)
    //        com.Parameters.Add("@NoofUnitsCaptures", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NoofUnitsCaptures", SqlDbType.VarChar).Value = NoofUnitsCaptures.Trim();

    //    if (YettoCaptured.Trim() == "" || YettoCaptured.Trim() == null)
    //        com.Parameters.Add("@YettoCaptured", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@YettoCaptured", SqlDbType.VarChar).Value = YettoCaptured.Trim();


    //    if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year.Trim() == "--Select--")
    //        com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.Trim();

    //    if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month.Trim() == "--Select--")
    //        com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.Trim();

    //    if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }




    //}



    public int deleteInitialCatelog(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deleteInitialCatelog";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }

    }



    public int bulkInitialCatelog(DataTable dt)
    {

        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intIPOid", "intIPOid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intIndustrialCatalogueid", "intIndustrialCatalogueid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("NameofUnit", "NameofUnit");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("AddressofUnit", "AddressofUnit");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("intLineofActivityid", "intLineofActivityid");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("DateofVisited", "DateofVisited");

            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("CurrentStatus", "CurrentStatus");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Remarks", "Remarks");

            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
            SqlBulkCopyColumnMapping mapping10 = new SqlBulkCopyColumnMapping("LineofActivityName", "LineofActivityName");
            SqlBulkCopyColumnMapping mapping11 = new SqlBulkCopyColumnMapping("FilePath", "FilePath");
            SqlBulkCopyColumnMapping mapping12 = new SqlBulkCopyColumnMapping("MandalId", "MandalId");
            SqlBulkCopyColumnMapping mapping13 = new SqlBulkCopyColumnMapping("DistrictId", "DistrictId");
            SqlBulkCopyColumnMapping mapping14 = new SqlBulkCopyColumnMapping("VillageId", "VillageId");
            SqlBulkCopyColumnMapping mapping15 = new SqlBulkCopyColumnMapping("WhetherYorN", "WhetherYorN");
            SqlBulkCopyColumnMapping mapping16 = new SqlBulkCopyColumnMapping("NoofMandalsgrid", "NoofMandalsgrid");
            //SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Girth", "Girth");
            //SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Est_FireWood", "Est_FireWood");
            //SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Forest_Pole", "Forest_Pole");
            //  SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            //SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            //bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);

            bulkCopy.ColumnMappings.Add(mapping10);
            bulkCopy.ColumnMappings.Add(mapping11);
            bulkCopy.ColumnMappings.Add(mapping12);
            bulkCopy.ColumnMappings.Add(mapping13);
            bulkCopy.ColumnMappings.Add(mapping14);
            bulkCopy.ColumnMappings.Add(mapping15);
            bulkCopy.ColumnMappings.Add(mapping16);

            bulkCopy.DestinationTableName = ("tr_IndustrialCatalogueDet");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;




    }




    //public int insertVehicleInspection(string intIPOid, string ApplicationRecieved, string NoofInspected, string Noofnotinspected, string VI_Year, string VI_Month, string Created_by)
    //{

    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertvehicleinsp";

    //    if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.Trim();

    //    if (ApplicationRecieved.Trim() == "" || ApplicationRecieved.Trim() == null)
    //        com.Parameters.Add("@ApplicationRecieved", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@ApplicationRecieved", SqlDbType.VarChar).Value = ApplicationRecieved.Trim();


    //    if (NoofInspected.Trim() == "" || NoofInspected.Trim() == null)
    //        com.Parameters.Add("@NoofInspected", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NoofInspected", SqlDbType.VarChar).Value = NoofInspected.Trim();

    //    if (Noofnotinspected.Trim() == "" || Noofnotinspected.Trim() == null)
    //        com.Parameters.Add("@Noofnotinspected", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Noofnotinspected", SqlDbType.VarChar).Value = Noofnotinspected.Trim();

    //    if (VI_Year.Trim() == "" || VI_Year.Trim() == null)
    //        com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.Trim();

    //    if (VI_Month.Trim() == "" || VI_Month.Trim() == null)
    //        com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.Trim();


    //    if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }


    //}


    public int insertVehicleInspection(string intVehicleInspectionid, string intIPOid, string ApplicationRecieved, string NoofInspected, string Noofnotinspected, string VI_Year, string VI_Month, string Created_by, string TotalNoOfAppln_MOnth, string InspectionCarri_2ndFriday, string InspectionCarri_4thFriday, string InspectionreptAT_GM)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertvehicleinsp";

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
            com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.Trim();

        if (intVehicleInspectionid.Trim() == "" || intVehicleInspectionid.Trim() == null)
            com.Parameters.Add("@intVehicleInspectionid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intVehicleInspectionid", SqlDbType.VarChar).Value = intVehicleInspectionid.Trim();

        if (ApplicationRecieved.Trim() == "" || ApplicationRecieved.Trim() == null)
            com.Parameters.Add("@ApplicationRecieved", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ApplicationRecieved", SqlDbType.VarChar).Value = ApplicationRecieved.Trim();


        if (NoofInspected.Trim() == "" || NoofInspected.Trim() == null)
            com.Parameters.Add("@NoofInspected", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofInspected", SqlDbType.VarChar).Value = NoofInspected.Trim();

        if (Noofnotinspected.Trim() == "" || Noofnotinspected.Trim() == null)
            com.Parameters.Add("@Noofnotinspected", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Noofnotinspected", SqlDbType.VarChar).Value = Noofnotinspected.Trim();

        if (VI_Year.Trim() == "" || VI_Year.Trim() == null)
            com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.Trim();

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null)
            com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (TotalNoOfAppln_MOnth.Trim() == "" || TotalNoOfAppln_MOnth.Trim() == null)
            com.Parameters.Add("@TotalNoOfAppln_MOnth", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TotalNoOfAppln_MOnth", SqlDbType.VarChar).Value = TotalNoOfAppln_MOnth.Trim();

        if (InspectionCarri_2ndFriday.Trim() == "" || InspectionCarri_2ndFriday.Trim() == null)
            com.Parameters.Add("@InspectionCarri_2ndFriday", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionCarri_2ndFriday", SqlDbType.VarChar).Value = InspectionCarri_2ndFriday.Trim();

        if (InspectionCarri_4thFriday.Trim() == "" || InspectionCarri_4thFriday.Trim() == null)
            com.Parameters.Add("@InspectionCarri_4thFriday", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionCarri_4thFriday", SqlDbType.VarChar).Value = InspectionCarri_4thFriday.Trim();

        if (InspectionreptAT_GM.Trim() == "" || InspectionreptAT_GM.Trim() == null)
            com.Parameters.Add("@InspectionreptAT_GM", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionreptAT_GM", SqlDbType.VarChar).Value = InspectionreptAT_GM.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public int deleteVehicleInspection(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "deletevehicleinspection";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }

    }
    //public int insertBankVisitDet(string IpodId, string BankID, string BankName,
    //    string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName,
    //    string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by,
    //    string nameofunit, string unitaddress, string natureofloanothers, string contactno,
    //    string District, string Mandal, string Village)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("insertBankVisitDet", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (nameofunit.Trim().ToString() == "" || nameofunit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();


    //        if (unitaddress.Trim().ToString() == "" || unitaddress.ToString().Trim() == null)
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = unitaddress.Trim();



    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

    //        if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

    //        if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

    //        if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

    //        if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

    //        if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

    //        if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = LineofActivityid.Trim();

    //        if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

    //        if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());
    //        if (natureofloanothers.Trim().ToString() == "" || natureofloanothers.ToString().Trim() == null)
    //            cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = natureofloanothers.Trim();
    //        if (contactno.Trim().ToString() == "" || contactno.ToString().Trim() == null)
    //            cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = contactno.Trim();
    //        //
    //        if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
    //        if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
    //        if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}
    public int insertBankVisitDet(string IpodId, string BankID, string BankName,
        string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName,
        string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by,
        string nameofunit, string unitaddress, string natureofloanothers, string contactno,
        string District, string Mandal, string Village, string RBT_BVR, string LOAothers, string Totalinvestment)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("insertBankVisitDet", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {
            if (nameofunit.Trim().ToString() == "" || nameofunit.ToString().Trim() == null)
                cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();


            if (unitaddress.Trim().ToString() == "" || unitaddress.ToString().Trim() == null)
                cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = unitaddress.Trim();



            if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

            if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

            if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
                cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

            if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
                cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

            if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
                cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

            if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
                cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

            if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
                cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

            if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || LineofActivityid.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = LineofActivityid.Trim();

            if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
                cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

            if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
                cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

            if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());
            if (natureofloanothers.Trim().ToString() == "" || natureofloanothers.ToString().Trim() == null)
                cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = natureofloanothers.Trim();
            if (contactno.Trim().ToString() == "" || contactno.ToString().Trim() == null)
                cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = contactno.Trim();
            //
            if (LOAothers.Trim().ToString() == "" || LOAothers.ToString().Trim() == null)
                cmd.Parameters.Add("@loaother", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@loaother", SqlDbType.VarChar).Value = LOAothers.Trim();
            if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
                cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
            if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
                cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
            if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
                cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
            if (RBT_BVR.Trim().ToString() == "" || RBT_BVR.ToString().Trim() == null)
                cmd.Parameters.Add("@rbtbvr", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@rbtbvr", SqlDbType.VarChar).Value = RBT_BVR.Trim();


            if (Totalinvestment.Trim().ToString() == "" || Totalinvestment.ToString().Trim() == null)
                cmd.Parameters.Add("@Totalinvestment", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Totalinvestment", SqlDbType.Decimal).Value = Convert.ToDecimal(Totalinvestment.Trim());

            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }

    //Created By Abhailash on 14-09-2016

    //public int insertBankVisitDet(string IpodId, string BankID, string BankName,
    //    string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName,
    //    string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by,
    //    string nameofunit, string unitaddress, string natureofloanothers, string contactno)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("insertBankVisitDet", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (nameofunit.Trim().ToString() == "" || nameofunit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();


    //        if (unitaddress.Trim().ToString() == "" || unitaddress.ToString().Trim() == null)
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = unitaddress.Trim();



    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

    //        if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

    //        if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

    //        if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

    //        if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

    //        if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

    //        if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = LineofActivityid.Trim();

    //        if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

    //        if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());
    //        if (natureofloanothers.Trim().ToString() == "" || natureofloanothers.ToString().Trim() == null)
    //            cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = natureofloanothers.Trim();
    //        if (contactno.Trim().ToString() == "" || contactno.ToString().Trim() == null)
    //            cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = contactno.Trim();


    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}

    //public int insertBankVisitDet(string IpodId, string BankID, string BankName,
    //    string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName, string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by, string nameofunit, string unitaddress)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("insertBankVisitDet", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (nameofunit.Trim().ToString() == "" || nameofunit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();


    //        if (unitaddress.Trim().ToString() == "" || unitaddress.ToString().Trim() == null)
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = unitaddress.Trim();



    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

    //        if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

    //        if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

    //        if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

    //        if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

    //        if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

    //        if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = LineofActivityid.Trim();

    //        if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

    //        if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}
    //public int insertPMEGPMUDRA(string IpodId, string Month, string Year,
    //    string NameofUnit, string AddressofUnit, string ProjectCost, string AmountSanctioned,
    //    string Bankid, string BranchName, string CurrentStatus, string Remarks, string Created_by,
    //    string District, string Mandal, string Village, string Typeofloan, string TypeofloanOther, string Unitstatusother)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("insertPMEGPMUDRA", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (Month.ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = Convert.ToInt32(Month.Trim());

    //        if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = Convert.ToInt32(Year.Trim());

    //        if (NameofUnit.Trim().ToString() == "" || NameofUnit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = NameofUnit.Trim();

    //        if (AddressofUnit.Trim().ToString() == "" || AddressofUnit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = AddressofUnit.Trim();

    //        if (ProjectCost.Trim().ToString() == "" || ProjectCost.ToString().Trim() == null)
    //            cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = Convert.ToDecimal(ProjectCost.Trim());

    //        if (AmountSanctioned.Trim().ToString() == "" || AmountSanctioned.ToString().Trim() == null)
    //            cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = AmountSanctioned.Trim();

    //        if (Bankid.Trim().ToString() == "" || Bankid.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(Bankid.Trim());

    //        if (BranchName.Trim().ToString() == "" || BranchName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BranchName.Trim();


    //        if (CurrentStatus.Trim().ToString() == "" || CurrentStatus.ToString().Trim() == null)
    //            cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();


    //        if (Remarks.Trim().ToString() == "" || Remarks.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());


    //        if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
    //        if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
    //        if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
    //        if (Typeofloan.Trim().ToString() == "" || Typeofloan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@typeofloan", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@typeofloan", SqlDbType.VarChar).Value = Typeofloan.Trim();
    //        if (TypeofloanOther.Trim().ToString() == "" || TypeofloanOther.ToString().Trim() == null)
    //            cmd.Parameters.Add("@typeofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@typeofloanothers", SqlDbType.VarChar).Value = TypeofloanOther.Trim();
    //        if (Unitstatusother.Trim().ToString() == "" || Unitstatusother.ToString().Trim() == null)
    //            cmd.Parameters.Add("@unitstatusothers", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@unitstatusothers", SqlDbType.VarChar).Value = Unitstatusother.Trim();

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}
    public int insertPMEGPMUDRA(string IpodId, string Month, string Year,
        string NameofUnit, string AddressofUnit, string ProjectCost, string AmountSanctioned,
        string Bankid, string BranchName, string CurrentStatus, string Remarks, string Created_by,
        string District, string Mandal, string Village, string Typeofloan, string TypeofloanOther, string Unitstatusother,
        string RBT_PMEGP, string groundeddate)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("insertPMEGPMUDRA", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {
            if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

            if (Month.ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = Convert.ToInt32(Month.Trim());

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = Convert.ToInt32(Year.Trim());

            if (NameofUnit.Trim().ToString() == "" || NameofUnit.ToString().Trim() == null)
                cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = NameofUnit.Trim();

            if (AddressofUnit.Trim().ToString() == "" || AddressofUnit.ToString().Trim() == null)
                cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = AddressofUnit.Trim();

            if (ProjectCost.Trim().ToString() == "" || ProjectCost.ToString().Trim() == null)
                cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = Convert.ToDecimal(ProjectCost.Trim());

            if (AmountSanctioned.Trim().ToString() == "" || AmountSanctioned.ToString().Trim() == null)
                cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = AmountSanctioned.Trim();

            if (Bankid.Trim().ToString() == "" || Bankid.ToString().Trim() == null)
                cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(Bankid.Trim());

            if (BranchName.Trim().ToString() == "" || BranchName.ToString().Trim() == null)
                cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BranchName.Trim();


            if (CurrentStatus.Trim().ToString() == "" || CurrentStatus.ToString().Trim() == null)
                cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();


            if (Remarks.Trim().ToString() == "" || Remarks.ToString().Trim() == null)
                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

            if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());


            if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
                cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
            if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
                cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
            if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
                cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
            if (Typeofloan.Trim().ToString() == "" || Typeofloan.ToString().Trim() == null)
                cmd.Parameters.Add("@typeofloan", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@typeofloan", SqlDbType.VarChar).Value = Typeofloan.Trim();
            if (TypeofloanOther.Trim().ToString() == "" || TypeofloanOther.ToString().Trim() == null)
                cmd.Parameters.Add("@typeofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@typeofloanothers", SqlDbType.VarChar).Value = TypeofloanOther.Trim();
            if (Unitstatusother.Trim().ToString() == "" || Unitstatusother.ToString().Trim() == null)
                cmd.Parameters.Add("@unitstatusothers", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@unitstatusothers", SqlDbType.VarChar).Value = Unitstatusother.Trim();
            if (RBT_PMEGP.Trim().ToString() == "" || RBT_PMEGP.ToString().Trim() == null)
                cmd.Parameters.Add("@rbtpmegp", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@rbtpmegp", SqlDbType.VarChar).Value = RBT_PMEGP.Trim();

            if (groundeddate.Trim().ToString() == "" || groundeddate.Trim().ToString() == null)
                cmd.Parameters.Add("@groundeddate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@groundeddate", SqlDbType.DateTime).Value = cmf.convertDateIndia(groundeddate.Trim());


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }


    //public int insertPMEGPMUDRA(string IpodId, string Month, string Year,
    //    string NameofUnit, string AddressofUnit, string ProjectCost, string AmountSanctioned,
    //    string Bankid, string BranchName, string CurrentStatus, string Remarks, string Created_by)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("insertPMEGPMUDRA", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (Month.ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = Convert.ToInt32(Month.Trim());

    //        if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = Convert.ToInt32(Year.Trim());

    //        if (NameofUnit.Trim().ToString() == "" || NameofUnit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = NameofUnit.Trim();

    //        if (AddressofUnit.Trim().ToString() == "" || AddressofUnit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = AddressofUnit.Trim();

    //        if (ProjectCost.Trim().ToString() == "" || ProjectCost.ToString().Trim() == null)
    //            cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = Convert.ToDecimal(ProjectCost.Trim());

    //        if (AmountSanctioned.Trim().ToString() == "" || AmountSanctioned.ToString().Trim() == null)
    //            cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = AmountSanctioned.Trim();

    //        if (Bankid.Trim().ToString() == "" || Bankid.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(Bankid.Trim());

    //        if (BranchName.Trim().ToString() == "" || BranchName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BranchName.Trim();


    //        if (CurrentStatus.Trim().ToString() == "" || CurrentStatus.ToString().Trim() == null)
    //            cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();


    //        if (Remarks.Trim().ToString() == "" || Remarks.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}

    //public int updateBankVisitDet(string IpodId, string BankID, string BankName,
    //       string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName,
    //       string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by,
    //       string intBankVisitReport, string nameofunit, string unitaddress, string natureofloanothers,
    //       string contactno, string District, string Mandal, string Village)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("updateBankVisitDet", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (nameofunit.Trim().ToString() == "" || nameofunit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();


    //        if (unitaddress.Trim().ToString() == "" || unitaddress.ToString().Trim() == null)
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = unitaddress.Trim();

    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

    //        if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

    //        if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

    //        if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

    //        if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

    //        if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

    //        if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = LineofActivityid.Trim();

    //        if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

    //        if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = (Created_by.Trim());

    //        if (intBankVisitReport.Trim().ToString() == "" || intBankVisitReport.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intBankVisitReport", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankVisitReport", SqlDbType.Int).Value = (intBankVisitReport.Trim());
    //        if (natureofloanothers.Trim().ToString() == "" || natureofloanothers.ToString().Trim() == null)
    //            cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = natureofloanothers.Trim();
    //        if (contactno.Trim().ToString() == "" || contactno.ToString().Trim() == null)
    //            cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = contactno.Trim();
    //        if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
    //        if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
    //        if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //        // cmd.ExecuteNonQuery();
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}
    //public int updateBankVisitDet(string IpodId, string BankID, string BankName,
    //    string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName,
    //    string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by,
    //    string intBankVisitReport, string nameofunit, string unitaddress, string natureofloanothers,
    //    string contactno, string District, string Mandal, string Village, string RBT_BVR)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("updateBankVisitDet", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (nameofunit.Trim().ToString() == "" || nameofunit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();


    //        if (unitaddress.Trim().ToString() == "" || unitaddress.ToString().Trim() == null)
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = unitaddress.Trim();

    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

    //        if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

    //        if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

    //        if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

    //        if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

    //        if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

    //        if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = LineofActivityid.Trim();

    //        if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

    //        if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = (Created_by.Trim());

    //        if (intBankVisitReport.Trim().ToString() == "" || intBankVisitReport.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intBankVisitReport", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankVisitReport", SqlDbType.Int).Value = (intBankVisitReport.Trim());
    //        if (natureofloanothers.Trim().ToString() == "" || natureofloanothers.ToString().Trim() == null)
    //            cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = natureofloanothers.Trim();
    //        if (contactno.Trim().ToString() == "" || contactno.ToString().Trim() == null)
    //            cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = contactno.Trim();
    //        if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
    //        if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
    //        if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
    //        if (RBT_BVR.Trim().ToString() == "" || RBT_BVR.ToString().Trim() == null)
    //            cmd.Parameters.Add("@rbtbvr", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@rbtbvr", SqlDbType.VarChar).Value = RBT_BVR.Trim();

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //        // cmd.ExecuteNonQuery();
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}

    //by rajinikar on 21 04 2020
    public int updateBankVisitDet(string IpodId, string BankID, string BankName,
        string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName,
        string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by,
        string intBankVisitReport, string nameofunit, string unitaddress, string natureofloanothers,
        string contactno, string District, string Mandal, string Village, string RBT_BVR, string LOAothers, string Totalinvestment)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("updateBankVisitDetMODEFIED", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {
            if (nameofunit.Trim().ToString() == "" || nameofunit.ToString().Trim() == null)
                cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();


            if (unitaddress.Trim().ToString() == "" || unitaddress.ToString().Trim() == null)
                cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = unitaddress.Trim();

            if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

            if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

            if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
                cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

            if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
                cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

            if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
                cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

            if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
                cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

            if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
                cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

            if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = LineofActivityid.Trim();

            if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
                cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

            if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
                cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

            if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = (Created_by.Trim());

            if (intBankVisitReport.Trim().ToString() == "" || intBankVisitReport.ToString().Trim() == null)
                cmd.Parameters.Add("@intBankVisitReport", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intBankVisitReport", SqlDbType.Int).Value = (intBankVisitReport.Trim());
            if (natureofloanothers.Trim().ToString() == "" || natureofloanothers.ToString().Trim() == null)
                cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@natureofloanothers", SqlDbType.VarChar).Value = natureofloanothers.Trim();
            if (LOAothers.Trim().ToString() == "" || LOAothers.ToString().Trim() == null)
                cmd.Parameters.Add("@loaother", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@loaother", SqlDbType.VarChar).Value = LOAothers.Trim();
            if (contactno.Trim().ToString() == "" || contactno.ToString().Trim() == null)
                cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@contactno", SqlDbType.VarChar).Value = contactno.Trim();
            if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
                cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
            if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
                cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
            if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
                cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
            if (RBT_BVR.Trim().ToString() == "" || RBT_BVR.ToString().Trim() == null)
                cmd.Parameters.Add("@rbtbvr", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@rbtbvr", SqlDbType.VarChar).Value = RBT_BVR.Trim();

            if (Totalinvestment.Trim().ToString() == "" || Totalinvestment.ToString().Trim() == null)
                cmd.Parameters.Add("@Totalinvestment", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Totalinvestment", SqlDbType.Decimal).Value = Convert.ToDecimal(Totalinvestment.Trim());

            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
            // cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }
    //public int updateBankVisitDet(string IpodId, string BankID, string BankName,
    //    string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName, string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("updateBankVisitDet", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

    //        if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

    //        if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

    //        if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

    //        if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

    //        if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

    //        if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.Int).Value = Convert.ToInt32(LineofActivityid.Trim());

    //        if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

    //        if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}

    //public DataSet GetShowBankVisitDet(string Created_by)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetBankVisitDet", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}



    public DataSet GetBanks()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FetchBankMst", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet CheckBankVisit(string Month, string Year)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("CheckBankVisit", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Convert.ToInt32(Month.ToString());

            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Convert.ToInt32(Year.ToString());

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public int InsertClosedUnits(string req, string Month, string Year, string Loctio_of_Unit,
    //    string Unitname, string UnitAddress, string DateofClosedUnits, string HT_or_LT,
    //    string Resion, string Remarks, string intLineofActivity, string created_by, string Dateofentry,
    //    String District, string DateofClosedUnitsFirst, string CurrentStatus, string CSothers)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "InsertClosedUnits";

    //    if (req == "" || req == null || req == "--Select--")
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

    //    if (Month == "" || Month == null || Month == "--Select--")
    //        com.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

    //    if (Year == "" || Year == null || Year == "--Select--")
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

    //    if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

    //    if (Loctio_of_Unit == "" || Loctio_of_Unit == null || Loctio_of_Unit == "--Select--")
    //        com.Parameters.Add("@Loctio_of_Unit", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Loctio_of_Unit", SqlDbType.VarChar).Value = Loctio_of_Unit.Trim();

    //    if (DateofClosedUnits == "" || DateofClosedUnits == null)
    //        com.Parameters.Add("@DateofClosedUnits", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DateofClosedUnits", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofClosedUnits.Trim());

    //    if (Resion == "" || Resion == null || Resion == "--Select--")
    //        com.Parameters.Add("@Resion", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Resion", SqlDbType.VarChar).Value = Resion.Trim();

    //    if (HT_or_LT == "" || HT_or_LT == null)
    //        com.Parameters.Add("@HT_or_LT", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@HT_or_LT", SqlDbType.VarChar).Value = HT_or_LT.Trim();

    //    if (Unitname == "" || Unitname == null || Unitname == "--Select--")
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


    //    if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

    //    if (Remarks == "" || Remarks == null || Remarks == "--Select--")
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks;

    //    if (created_by == "" || created_by == null || created_by == "--Select--")
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();


    //    if (Dateofentry == "" || Dateofentry == null || Dateofentry == "--Select--")
    //        com.Parameters.Add("@dateofentry", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@dateofentry", SqlDbType.VarChar).Value = Dateofentry.Trim();
    //    if (District == "" || District == null || District == "--Select--")
    //        com.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
    //    if (DateofClosedUnitsFirst == "" || DateofClosedUnitsFirst == null || DateofClosedUnitsFirst == "--Select--")
    //        com.Parameters.Add("@dateofclosedunitsfirst", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@dateofclosedunitsfirst", SqlDbType.VarChar).Value = DateofClosedUnitsFirst.Trim();
    //    if (CurrentStatus == "" || CurrentStatus == null || CurrentStatus == "--Select--")
    //        com.Parameters.Add("@currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@currentstatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();
    //    if (CSothers == "" || CSothers == null || CSothers == "--Select--")
    //        com.Parameters.Add("@csothers", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@csothers", SqlDbType.VarChar).Value = CSothers.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}

    //public int InsertClosedUnits(string req, string Month, string Year, string Loctio_of_Unit,
    //    string Unitname, string UnitAddress, string DateofClosedUnits, string HT_or_LT,
    //    string Resion, string Remarks, string intLineofActivity, string created_by, string Dateofentry,
    //    String District, string DateofClosedUnitsFirst, string CurrentStatus, string CSothers, string Village)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "InsertClosedUnits";

    //    if (req == "" || req == null || req == "--Select--")
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

    //    if (Month == "" || Month == null || Month == "--Select--")
    //        com.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

    //    if (Year == "" || Year == null || Year == "--Select--")
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

    //    if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

    //    if (Loctio_of_Unit == "" || Loctio_of_Unit == null || Loctio_of_Unit == "--Select--")
    //        com.Parameters.Add("@Loctio_of_Unit", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Loctio_of_Unit", SqlDbType.VarChar).Value = Loctio_of_Unit.Trim();

    //    if (DateofClosedUnits == "" || DateofClosedUnits == null)
    //        com.Parameters.Add("@DateofClosedUnits", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DateofClosedUnits", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofClosedUnits.Trim());

    //    if (Resion == "" || Resion == null || Resion == "--Select--")
    //        com.Parameters.Add("@Resion", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Resion", SqlDbType.VarChar).Value = Resion.Trim();

    //    if (HT_or_LT == "" || HT_or_LT == null)
    //        com.Parameters.Add("@HT_or_LT", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@HT_or_LT", SqlDbType.VarChar).Value = HT_or_LT.Trim();

    //    if (Unitname == "" || Unitname == null || Unitname == "--Select--")
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


    //    if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

    //    if (Remarks == "" || Remarks == null || Remarks == "--Select--")
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks;

    //    if (created_by == "" || created_by == null || created_by == "--Select--")
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();


    //    if (Dateofentry == "" || Dateofentry == null || Dateofentry == "--Select--")
    //        com.Parameters.Add("@dateofentry", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@dateofentry", SqlDbType.VarChar).Value = Dateofentry.Trim();
    //    if (District == "" || District == null || District == "--Select--")
    //        com.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
    //    if (DateofClosedUnitsFirst == "" || DateofClosedUnitsFirst == null || DateofClosedUnitsFirst == "--Select--")
    //        com.Parameters.Add("@dateofclosedunitsfirst", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@dateofclosedunitsfirst", SqlDbType.VarChar).Value = DateofClosedUnitsFirst.Trim();
    //    if (CurrentStatus == "" || CurrentStatus == null || CurrentStatus == "--Select--")
    //        com.Parameters.Add("@currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@currentstatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();
    //    if (CSothers == "" || CSothers == null || CSothers == "--Select--")
    //        com.Parameters.Add("@csothers", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@csothers", SqlDbType.VarChar).Value = CSothers.Trim();

    //    if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
    //        com.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}
    


    //FOR WORK STATUS UPDATE
    public int InserttWorkStatus(string created_by, string Employeename, string Dateofentry, string workdone)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "SP_INSERTWORK_STATUS";


        if (created_by == "" || created_by == null || created_by == "--Select--")
            com.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = created_by.Trim();

        if (Employeename == "" || Employeename == null || Employeename == "--Select--")
            com.Parameters.Add("@EMPLOYEENAME", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@EMPLOYEENAME", SqlDbType.VarChar).Value = Employeename.Trim();


        if (Dateofentry == "" || Dateofentry == null || Dateofentry == "--Select--")
            com.Parameters.Add("@DATEOFENTRY", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@DATEOFENTRY", SqlDbType.DateTime).Value = Dateofentry.Trim();

        if (workdone == "" || workdone == null || workdone == "--Select--")
            com.Parameters.Add("@WORKDONE", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WORKDONE", SqlDbType.VarChar).Value = workdone.Trim();


        //cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
        //cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public int InsertClosedUnits(string req, string Month, string Year, string Loctio_of_Unit,
        string Unitname, string UnitAddress, string DateofClosedUnits, string HT_or_LT,
        string Resion, string Remarks, string intLineofActivity, string created_by, string Dateofentry,
        String District, string DateofClosedUnitsFirst, string CurrentStatus, string CSothers, string Village,
        string RBT_CLOSEDUNITS, string TIHCL, string reason)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertClosedUnits";

        if (req == "" || req == null || req == "--Select--")
            com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

        if (Month == "" || Month == null || Month == "--Select--")
            com.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

        if (Year == "" || Year == null || Year == "--Select--")
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

        if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

        if (Loctio_of_Unit == "" || Loctio_of_Unit == null || Loctio_of_Unit == "--Select--")
            com.Parameters.Add("@Loctio_of_Unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loctio_of_Unit", SqlDbType.VarChar).Value = Loctio_of_Unit.Trim();

        if (DateofClosedUnits == "" || DateofClosedUnits == null)
            com.Parameters.Add("@DateofClosedUnits", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@DateofClosedUnits", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofClosedUnits.Trim());

        if (Resion == "" || Resion == null || Resion == "--Select--")
            com.Parameters.Add("@Resion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Resion", SqlDbType.VarChar).Value = Resion.Trim();

        if (HT_or_LT == "" || HT_or_LT == null)
            com.Parameters.Add("@HT_or_LT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@HT_or_LT", SqlDbType.VarChar).Value = HT_or_LT.Trim();

        if (Unitname == "" || Unitname == null || Unitname == "--Select--")
            com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


        if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
            com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

        if (Remarks == "" || Remarks == null || Remarks == "--Select--")
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks;

        if (created_by == "" || created_by == null || created_by == "--Select--")
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();


        if (Dateofentry == "" || Dateofentry == null || Dateofentry == "--Select--")
            com.Parameters.Add("@dateofentry", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dateofentry", SqlDbType.VarChar).Value = Dateofentry.Trim();
        if (District == "" || District == null || District == "--Select--")
            com.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
        if (DateofClosedUnitsFirst == "" || DateofClosedUnitsFirst == null || DateofClosedUnitsFirst == "--Select--")
            com.Parameters.Add("@dateofclosedunitsfirst", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dateofclosedunitsfirst", SqlDbType.VarChar).Value = DateofClosedUnitsFirst.Trim();
        if (CurrentStatus == "" || CurrentStatus == null || CurrentStatus == "--Select--")
            com.Parameters.Add("@currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@currentstatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();
        if (CSothers == "" || CSothers == null || CSothers == "--Select--")
            com.Parameters.Add("@csothers", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@csothers", SqlDbType.VarChar).Value = CSothers.Trim();

        if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
            com.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
        //ADDED BY RAJINIKAR ON 31/03/2020
        if (RBT_CLOSEDUNITS.Trim().ToString() == "" || RBT_CLOSEDUNITS.ToString().Trim() == null)
            com.Parameters.Add("@rbtclosedunits", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@rbtclosedunits", SqlDbType.VarChar).Value = RBT_CLOSEDUNITS.Trim();

        if (TIHCL.Trim().ToString() != "Y" && TIHCL.ToString().Trim() != "N")
            com.Parameters.Add("@TIHCL", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TIHCL", SqlDbType.VarChar).Value = TIHCL.Trim();

        if (reason.Trim().ToString() == "" || reason.ToString().Trim() == null)
            com.Parameters.Add("@reason", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@reason", SqlDbType.VarChar).Value = reason.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet getUnitClosedDet(string intClosedUnitid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getClosedUnitDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intClosedUnitid.Trim() == "" || intClosedUnitid.Trim() == null || intClosedUnitid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intClosedUnitid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intClosedUnitid", SqlDbType.VarChar).Value = intClosedUnitid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }





    public DataSet getIndustryCatelogLookUp(string Year, string Month, string Created_by)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIndustryLookUp", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();



            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = Created_by.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getIndustrycatelogfillDet(string intindustryCatelogid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIndustrycatelogDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intindustryCatelogid.Trim().ToString() == "" || intindustryCatelogid.ToString().Trim() == null || intindustryCatelogid.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intindustryCatelogid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intindustryCatelogid", SqlDbType.VarChar).Value = intindustryCatelogid.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getIndustryDetTrans(string intindustryCatelogid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIndustryCatelogTrans", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intindustryCatelogid.Trim().ToString() == "" || intindustryCatelogid.ToString().Trim() == null || intindustryCatelogid.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intindustryCatelogid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intindustryCatelogid", SqlDbType.VarChar).Value = intindustryCatelogid.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //public int insertIndustryCatelog(string intIndustrialCatalogueid, string intIPOid, string NoofUnitsCaptures, string YettoCaptured, string VI_Year, string VI_Month, string Created_by)
    //{

    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insertIndustrialcatelog";

    //    if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.Trim();

    //    if (intIndustrialCatalogueid.Trim() == "" || intIndustrialCatalogueid.Trim() == null)
    //        com.Parameters.Add("@intIndustrialCatalogueid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intIndustrialCatalogueid", SqlDbType.VarChar).Value = intIndustrialCatalogueid.Trim();

    //    if (NoofUnitsCaptures.Trim() == "" || NoofUnitsCaptures.Trim() == null)
    //        com.Parameters.Add("@NoofUnitsCaptures", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@NoofUnitsCaptures", SqlDbType.VarChar).Value = NoofUnitsCaptures.Trim();

    //    if (YettoCaptured.Trim() == "" || YettoCaptured.Trim() == null)
    //        com.Parameters.Add("@YettoCaptured", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@YettoCaptured", SqlDbType.VarChar).Value = YettoCaptured.Trim();


    //    if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year.Trim() == "--Select--")
    //        com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.Trim();

    //    if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month.Trim() == "--Select--")
    //        com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.Trim();

    //    if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }




    //}


    public int insertIndustryCatelog(string intIndustrialCatalogueid, string intIPOid, string NoofUnitsCaptures, string YettoCaptured, string VI_Year, string VI_Month, string Created_by, string NoofUnitsMandal, string NoofUnitsIPOJuridiction)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertIndustrialcatelog";

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
            com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.Trim();

        if (intIndustrialCatalogueid.Trim() == "" || intIndustrialCatalogueid.Trim() == null)
            com.Parameters.Add("@intIndustrialCatalogueid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intIndustrialCatalogueid", SqlDbType.VarChar).Value = intIndustrialCatalogueid.Trim();

        if (NoofUnitsCaptures.Trim() == "" || NoofUnitsCaptures.Trim() == null)
            com.Parameters.Add("@NoofUnitsCaptures", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofUnitsCaptures", SqlDbType.VarChar).Value = NoofUnitsCaptures.Trim();

        if (NoofUnitsMandal.Trim() == "" || NoofUnitsMandal.Trim() == null)
            com.Parameters.Add("@NoofUnitsMandal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofUnitsMandal", SqlDbType.VarChar).Value = NoofUnitsMandal.Trim();

        if (NoofUnitsIPOJuridiction.Trim() == "" || NoofUnitsIPOJuridiction.Trim() == null)
            com.Parameters.Add("@NoofUnitsIPOJuridiction", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofUnitsIPOJuridiction", SqlDbType.VarChar).Value = NoofUnitsIPOJuridiction.Trim();



        if (YettoCaptured.Trim() == "" || YettoCaptured.Trim() == null)
            com.Parameters.Add("@YettoCaptured", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@YettoCaptured", SqlDbType.VarChar).Value = YettoCaptured.Trim();


        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year.Trim() == "--Select--")
            com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.Trim();

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month.Trim() == "--Select--")
            com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }




    }

    public DataSet GetBankVisitoutofTarget(string Year, string Month, string user, string formid)
    {


        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIPOtargetbyform", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();


            if (formid.Trim() == "" || formid.Trim() == null || formid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@formid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@formid", SqlDbType.VarChar).Value = formid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet FatechtargetofIPO(string Year, string Month, string user, string formid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchDetailswiseTarget", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();


            if (formid.Trim() == "" || formid.Trim() == null || formid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@formid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@formid", SqlDbType.VarChar).Value = formid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet getcountoftarget(string Year, string Month, string user, string formid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCountofTarger", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();


            if (formid.Trim() == "" || formid.Trim() == null || formid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@formid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@formid", SqlDbType.VarChar).Value = formid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public int UpdateAdvancedSubsidyStatus(string intApplicationid, string Modified_by, string Status)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdateAdvancedSubsidyStatus";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")

            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet GetSubsidydetailsByIpo(string Month, string Year, string intIPOid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetSubsidydetailsByIpo", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "All" || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();

            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }





    //public int InsertTsipassIPO(string UID_No, string intQuessionaireid, string Unitname, string UnitAddress, string DateofIssue, string Currentstatus, string Remarks, string created_by, string req)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "InsertTsipassIPO";

    //    if (req == "" || req == null || req == "--Select--")
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

    //    if (UID_No == "" || UID_No == null)
    //        com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.Trim();


    //    if (intQuessionaireid == "" || intQuessionaireid == null)
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

    //    if (Unitname == "" || Unitname == null || Unitname == "--Select--")
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


    //    if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

    //    if (DateofIssue == "" || DateofIssue == null)
    //        com.Parameters.Add("@DateofIssue", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DateofIssue", SqlDbType.DateTime).Value = DateofIssue;

    //    if (Currentstatus == "" || Currentstatus == null || Currentstatus == "--Select--")
    //        com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Currentstatus", SqlDbType.Decimal).Value = Currentstatus;

    //    if (Remarks == "" || Remarks == null || Remarks == "--Select--")
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Remarks", SqlDbType.Decimal).Value = Remarks;

    //    if (created_by == "" || created_by == null || created_by == "--Select--")
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();



    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}

    public DataSet getTsipassRepor4Lockup(string Created_by, string intIPOid, string NameofUnit)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getTsipassreport4", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();

            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();

            if (NameofUnit.Trim() == "" || NameofUnit.Trim() == null || NameofUnit.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = NameofUnit.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public DataSet getadvancedSubsidyLoockp(string Created_by, string txtPromoterName, string intIPOid, string Month, string Year)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("getadvancedSubsidyLoockp", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (txtPromoterName.Trim() == "" || txtPromoterName.Trim() == null || txtPromoterName.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@txtPromoterName", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@txtPromoterName", SqlDbType.VarChar).Value = txtPromoterName.ToString();

    //        if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();

    //        if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();

    //        if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();



    //        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();




    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet getadvancedSubsidyLoockp(string Created_by, string txtPromoterName, string intIPOid, string Month, string Year)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getadvancedSubsidyLoockp", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (txtPromoterName.Trim() == "" || txtPromoterName.Trim() == null || txtPromoterName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@txtPromoterName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@txtPromoterName", SqlDbType.VarChar).Value = txtPromoterName.ToString();

            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();

            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();

            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();



            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIPoSubsidydetails(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetIPoSubsidydetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();





            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public int InsertAdvancedSubsidy(string Month, string Year, string Promoter_Name, string Unitname, string UnitAddress, string DateofIstInstal, string IstAmount, string DateofIIndinstal, string IIndAmount, string Caste, string Currentstatus, string Remarks, string intLineofActivity, string created_by, string req)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "InsertAdvancedSubsidy";

    //    if (req == "" || req == null || req == "--Select--")
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

    //    if (Month == "" || Month == null || Month == "--Select--")
    //        com.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

    //    if (Year == "" || Year == null || Year == "--Select--")
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

    //    if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

    //    if (DateofIIndinstal == "" || DateofIIndinstal == null)
    //        com.Parameters.Add("@DateofIIndinstal", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DateofIIndinstal", SqlDbType.VarChar).Value = DateofIIndinstal.Trim();

    //    if (IIndAmount == "" || IIndAmount == null)
    //        com.Parameters.Add("@IIndAmount", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@IIndAmount", SqlDbType.VarChar).Value = IIndAmount.Trim();

    //    if (Caste == "" || Caste == null || Caste == "--Select--")
    //        com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.Trim();

    //    if (Promoter_Name == "" || Promoter_Name == null)
    //        com.Parameters.Add("@Promoter_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Promoter_Name", SqlDbType.VarChar).Value = Promoter_Name.Trim();


    //    if (DateofIstInstal == "" || DateofIstInstal == null)
    //        com.Parameters.Add("@DateofIstInstal", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DateofIstInstal", SqlDbType.VarChar).Value = DateofIstInstal.Trim();

    //    if (Unitname == "" || Unitname == null || Unitname == "--Select--")
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


    //    if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

    //    if (IstAmount == "" || IstAmount == null)
    //        com.Parameters.Add("@IstAmount", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@IstAmount", SqlDbType.Decimal).Value = IstAmount;

    //    if (Currentstatus == "" || Currentstatus == null || Currentstatus == "--Select--")
    //        com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Currentstatus", SqlDbType.Decimal).Value = Currentstatus;

    //    if (Remarks == "" || Remarks == null || Remarks == "--Select--")
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Remarks", SqlDbType.Decimal).Value = Remarks;

    //    if (created_by == "" || created_by == null || created_by == "--Select--")
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();



    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}

    public DataSet getTsipassreportDet(string intTSiPASSid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getTsipassreportDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intTSiPASSid.Trim() == "" || intTSiPASSid.Trim() == null || intTSiPASSid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = intTSiPASSid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetTSiPASSReport4TOIpo(string Month, string Year, string intIPOid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetTSiPASSReport4TOIpo", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "All" || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();

            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateTSiPASSReport4Status(string intApplicationid, string Modified_by, string Status)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdateTSiPASSReport4Status";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")

            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int InsertTsipassIPO(string UID_No, string intQuessionaireid, string Unitname, string UnitAddress, string DateofIssue, string Currentstatus, string Remarks, string created_by, string req, string Month, string Year, string DistId, string MandalId, string VillageId)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertTsipassIPO";

        if (req == "" || req == null || req == "--Select--")
            com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

        if (UID_No == "" || UID_No == null)
            com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.Trim();


        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (Unitname == "" || Unitname == null || Unitname == "--Select--")
            com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


        if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
            com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

        if (DateofIssue == "" || DateofIssue == null)
            com.Parameters.Add("@DateofIssue", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DateofIssue", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofIssue.Trim());

        if (Currentstatus == "" || Currentstatus == null || Currentstatus == "--Select--")
            com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = Currentstatus;

        if (Remarks == "" || Remarks == null || Remarks == "--Select--")
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks;

        if (created_by == "" || created_by == null || created_by == "--Select--")
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();

        if (Month == "" || Month == null || Month == "--Select--")
            com.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

        if (Year == "" || Year == null || Year == "--Select--")
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();


        if (DistId == "" || DistId == null || DistId == "--Select--")
            com.Parameters.Add("@District_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@District_Id", SqlDbType.VarChar).Value = DistId.Trim();

        if (MandalId == "" || MandalId == null || MandalId == "--Select--")
            com.Parameters.Add("@Mandal_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mandal_Id", SqlDbType.VarChar).Value = MandalId.Trim();

        if (VillageId == "" || VillageId == null || VillageId == "--Select--")
            com.Parameters.Add("@Village_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Village_Id", SqlDbType.VarChar).Value = VillageId.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //public int InsertTsipassIPO(string UID_No, string intQuessionaireid, string Unitname, string UnitAddress, string DateofIssue, string Currentstatus, string Remarks, string created_by, string req)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "InsertTsipassIPO";

    //    if (req == "" || req == null || req == "--Select--")
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

    //    if (UID_No == "" || UID_No == null)
    //        com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UID_No", SqlDbType.VarChar).Value = UID_No.Trim();


    //    if (intQuessionaireid == "" || intQuessionaireid == null)
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

    //    if (Unitname == "" || Unitname == null || Unitname == "--Select--")
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


    //    if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

    //    if (DateofIssue == "" || DateofIssue == null)
    //        com.Parameters.Add("@DateofIssue", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DateofIssue", SqlDbType.Decimal).Value = DateofIssue;

    //    if (Currentstatus == "" || Currentstatus == null || Currentstatus == "--Select--")
    //        com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Currentstatus", SqlDbType.Decimal).Value = Currentstatus;

    //    if (Remarks == "" || Remarks == null || Remarks == "--Select--")
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Remarks", SqlDbType.Decimal).Value = Remarks;

    //    if (created_by == "" || created_by == null || created_by == "--Select--")
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();



    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}

    //public int InsertAdvancedSubsidy(string Ipoid, string Month, string Year, string Promoter_Name, string Unitname,
    //    string UnitAddress, string DateofIstInstal, string IstAmount, string DateofIIndinstal, string IIndAmount,
    //    string Caste, string Currentstatus, string Remarks, string intLineofActivity, string created_by,
    //    string req, string District, string Mandal, string Village)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "InsertAdvancedSubsidy";

    //    if (Ipoid == "" || Ipoid == null || Ipoid == "--Select--")
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = Ipoid.Trim();

    //    if (req == "" || req == null || req == "--Select--")
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

    //    if (Month == "" || Month == null || Month == "--Select--")
    //        com.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

    //    if (Year == "" || Year == null || Year == "--Select--")
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

    //    if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

    //    if (DateofIIndinstal == "" || DateofIIndinstal == null)
    //        com.Parameters.Add("@DateofIIndinstal", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DateofIIndinstal", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofIIndinstal.Trim());

    //    if (IIndAmount == "" || IIndAmount == null)
    //        com.Parameters.Add("@IIndAmount", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@IIndAmount", SqlDbType.VarChar).Value = IIndAmount.Trim();

    //    if (Caste == "" || Caste == null || Caste == "--Select--")
    //        com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.Trim();

    //    if (Promoter_Name == "" || Promoter_Name == null)
    //        com.Parameters.Add("@Promoter_Name", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Promoter_Name", SqlDbType.VarChar).Value = Promoter_Name.Trim();


    //    if (DateofIstInstal == "" || DateofIstInstal == null)
    //        com.Parameters.Add("@DateofIstInstal", SqlDbType.DateTime).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@DateofIstInstal", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofIstInstal.Trim());

    //    if (Unitname == "" || Unitname == null || Unitname == "--Select--")
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


    //    if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

    //    if (IstAmount == "" || IstAmount == null)
    //        com.Parameters.Add("@IstAmount", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@IstAmount", SqlDbType.Decimal).Value = IstAmount;

    //    if (Currentstatus == "" || Currentstatus == null || Currentstatus == "--Select--")
    //        com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = Currentstatus;

    //    if (Remarks == "" || Remarks == null || Remarks == "--Select--")
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks;

    //    if (created_by == "" || created_by == null || created_by == "--Select--")
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();


    //    if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
    //        com.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
    //    if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
    //        com.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
    //    if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
    //        com.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();

    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}
    public int InsertAdvancedSubsidy(string Ipoid, string Month, string Year, string Promoter_Name, string Unitname,
        string UnitAddress, string DateofIstInstal, string IstAmount, string DateofIIndinstal, string IIndAmount,
        string Caste, string Currentstatus, string Remarks, string intLineofActivity, string created_by,
        string req, string District, string Mandal, string Village, string RBT_ADVANCE)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertAdvancedSubsidy";

        if (Ipoid == "" || Ipoid == null || Ipoid == "--Select--")
            com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = Ipoid.Trim();

        if (req == "" || req == null || req == "--Select--")
            com.Parameters.Add("@req", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@req", SqlDbType.VarChar).Value = req.Trim();

        if (Month == "" || Month == null || Month == "--Select--")
            com.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

        if (Year == "" || Year == null || Year == "--Select--")
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

        if (intLineofActivity == "" || intLineofActivity == null || intLineofActivity == "--Select--")
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();

        if (DateofIIndinstal == "" || DateofIIndinstal == null)
            com.Parameters.Add("@DateofIIndinstal", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@DateofIIndinstal", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofIIndinstal.Trim());

        if (IIndAmount == "" || IIndAmount == null)
            com.Parameters.Add("@IIndAmount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IIndAmount", SqlDbType.VarChar).Value = IIndAmount.Trim();

        if (Caste == "" || Caste == null || Caste == "--Select--")
            com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.Trim();

        if (Promoter_Name == "" || Promoter_Name == null)
            com.Parameters.Add("@Promoter_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Promoter_Name", SqlDbType.VarChar).Value = Promoter_Name.Trim();


        if (DateofIstInstal == "" || DateofIstInstal == null)
            com.Parameters.Add("@DateofIstInstal", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@DateofIstInstal", SqlDbType.DateTime).Value = cmf.convertDateIndia(DateofIstInstal.Trim());

        if (Unitname == "" || Unitname == null || Unitname == "--Select--")
            com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Unitname", SqlDbType.VarChar).Value = Unitname.Trim();


        if (UnitAddress == "" || UnitAddress == null || UnitAddress == "--Select--")
            com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UnitAddress", SqlDbType.VarChar).Value = UnitAddress.Trim();

        if (IstAmount == "" || IstAmount == null)
            com.Parameters.Add("@IstAmount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IstAmount", SqlDbType.Decimal).Value = IstAmount;

        if (Currentstatus == "" || Currentstatus == null || Currentstatus == "--Select--")
            com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Currentstatus", SqlDbType.VarChar).Value = Currentstatus;

        if (Remarks == "" || Remarks == null || Remarks == "--Select--")
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks;

        if (created_by == "" || created_by == null || created_by == "--Select--")
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = created_by.Trim();


        if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
            com.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
        if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
            com.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
        if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
            com.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
        if (RBT_ADVANCE.Trim().ToString() == "" || RBT_ADVANCE.ToString().Trim() == null)
            com.Parameters.Add("@rbtadvance", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@rbtadvance", SqlDbType.VarChar).Value = RBT_ADVANCE.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    //public DataSet getTsipassRepor4Lockup(string Created_by)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("getTsipassreport4", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();




    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    //public DataSet GetIPoSubsidydetails(string Created_by, string Month, string Year)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetIPoSubsidydetails", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();

    //        if (Month.Trim() == "" || Month.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();

    //        if (Year.Trim() == "" || Year.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet Getbanks()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getbanks", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet Searchclosedunitdetails1(string intIPOid, string VI_Month, string VI_Year)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("Searchclosedunitdetails1", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month;

        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

        //if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = intMandalid.ToString();

        //if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.ToString();




        myDataAdapter.Fill(ds);
        con.CloseConnection();
        return ds;


    }


    public DataSet Searchadvsubsidydetails1(string intIPOid, string VI_Month, string VI_Year)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("Searchadvsubsidydetails1", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month;

        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

        //if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = intMandalid.ToString();

        //if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.ToString();




        myDataAdapter.Fill(ds);
        con.CloseConnection();
        return ds;


    }


    public DataSet Searchadvsubsidydetails1Pending(string intIPOid, string VI_Month, string VI_Year)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("Searchadvsubsidydetails1Penidng", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month;

        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

        //if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = intMandalid.ToString();

        //if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.ToString();




        myDataAdapter.Fill(ds);
        con.CloseConnection();
        return ds;


    }
    public DataSet SearchPMEGPdetails1(string intIPOid, string VI_Month, string VI_Year)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("SearchPMEGPdetails1", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month;

        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

        //if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = intMandalid.ToString();

        //if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.ToString();




        myDataAdapter.Fill(ds);
        con.CloseConnection();
        return ds;


    }




    public DataSet Searchdetails1(string intIPOid, string VI_Month, string VI_Year)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("fillgridview", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month;

        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

        //if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = intMandalid.ToString();

        //if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.ToString();




        myDataAdapter.Fill(ds);
        con.CloseConnection();
        return ds;


    }

    public DataSet Searchdetails1Pendinglat(string intIPOid, string VI_Month, string VI_Year)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("fillgridviewIpassPending", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month;

        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

        //if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = intMandalid.ToString();

        //if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.ToString();




        myDataAdapter.Fill(ds);
        con.CloseConnection();
        return ds;


    }

    //added by rajinikar 

    public DataSet insepctionreport(string mailid, string mobileno)
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {
            da = new SqlDataAdapter("GETGRIDDETAILS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@mobileno", SqlDbType.VarChar).Value = mobileno.ToString();
            da.SelectCommand.Parameters.Add("@mailid", SqlDbType.VarChar).Value = mailid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public string checkMobileFORINSPECTION(string mobileNo, string emailID)  //NK
    {

        con.OpenConnection();

        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("checkMobileINSPECTION", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;

        cmd.Connection = con.GetConnection;
        try
        {
            cmd.Parameters.Add("@mobile", SqlDbType.VarChar).Value = mobileNo.ToString();
            cmd.Parameters.Add("@email", SqlDbType.VarChar).Value = emailID.ToString();

            string val = cmd.ExecuteScalar().ToString();
            return val;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIPOPMAppIPODashboard(string intIPOid, string VMonth, string VYear, string VForm)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetIPOPMAppIPODashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();


            if (VMonth.Trim() == "" || VMonth.Trim() == null)
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VMonth.ToString();


            if (VYear.Trim() == "" || VYear.Trim() == null)
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VYear.ToString();


            if (VForm.Trim() == "" || VForm.Trim() == null)
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = VForm.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }




    public DataSet fetchIPOPMDashboardDril(string intIPOid, string VMonth, string VYear, string intFormid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchIPOPMDashboardDril", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "All" || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();


            if (VMonth.Trim() == "" || VMonth.Trim() == null || VMonth.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@VMonth", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VMonth", SqlDbType.VarChar).Value = VMonth.ToString();

            if (VYear.Trim() == "" || VYear.Trim() == null || VYear.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@VYear", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VYear", SqlDbType.VarChar).Value = VYear.ToString();

            if (intFormid.Trim() == "" || intFormid.Trim() == null || intFormid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = intFormid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet Searchbankvisitdetails1(string intIPOid, string VI_Month, string VI_Year)
    {

        con.OpenConnection();
        SqlDataAdapter myDataAdapter;
        myDataAdapter = new SqlDataAdapter("Searchbankvisitdetails1", con.GetConnection);

        myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
        DataSet ds = new DataSet();

        if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid;

        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month;

        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year == "--Select--")
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
        else
            myDataAdapter.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

        //if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intMandalID", SqlDbType.VarChar).Value = intMandalid.ToString();

        //if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid == "--Select--")
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = "%";
        //else
        //    myDataAdapter.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.ToString();




        myDataAdapter.Fill(ds);
        con.CloseConnection();
        return ds;
    }


    public int insertGMtoIPOTarget(string GMid, string IpoId, string Formid, string Month, string Year, string Target, string Created_by)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("insertGMtoIPOTarget", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {


            if (GMid.Trim().ToString() == "" || GMid.ToString().Trim() == null)
                cmd.Parameters.Add("@intGMid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intGMid", SqlDbType.Int).Value = Convert.ToInt32(GMid.Trim());

            if (IpoId.Trim().ToString() == "" || IpoId.ToString().Trim() == null || IpoId.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpoId.Trim());

            if (Formid.Trim().ToString() == "" || Formid.ToString().Trim() == null || Formid.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@intFormid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intFormid", SqlDbType.Int).Value = Convert.ToInt32(Formid.Trim());

            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@Month", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Month", SqlDbType.Int).Value = Convert.ToInt32(Month.Trim());

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@Year", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Year", SqlDbType.Int).Value = Convert.ToInt32(Year.Trim());

            if (Target.Trim().ToString() == "" || Target.ToString().Trim() == null)
                cmd.Parameters.Add("@Target", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Target", SqlDbType.Int).Value = Convert.ToInt32(Target.Trim());

            if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }

    public int updateGMtoIPOTarget(string GMid, string IpoId, string Formid, string Month, string Year, string Target, string Created_by, string id)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("updateGMtoIPOTarget", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {
            if (id.Trim().ToString() == "" || id.ToString().Trim() == null)
                cmd.Parameters.Add("@GMtoIPOid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@GMtoIPOid", SqlDbType.Int).Value = Convert.ToInt32(id.Trim());

            if (GMid.Trim().ToString() == "" || GMid.ToString().Trim() == null)
                cmd.Parameters.Add("@intGMid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intGMid", SqlDbType.Int).Value = Convert.ToInt32(GMid.Trim());

            if (IpoId.Trim().ToString() == "" || IpoId.ToString().Trim() == null || IpoId.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpoId.Trim());

            if (Formid.Trim().ToString() == "" || Formid.ToString().Trim() == null || Formid.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@intFormid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intFormid", SqlDbType.Int).Value = Convert.ToInt32(Formid.Trim());

            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@Month", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Month", SqlDbType.Int).Value = Convert.ToInt32(Month.Trim());

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@Year", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Year", SqlDbType.Int).Value = Convert.ToInt32(Year.Trim());

            if (Target.Trim().ToString() == "" || Target.ToString().Trim() == null)
                cmd.Parameters.Add("@Target", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Target", SqlDbType.Int).Value = Convert.ToInt32(Target.Trim());

            if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }

    public DataSet GetIPOS(string intUserid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetIPOS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intUserid.Trim() == "" || intUserid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intUserid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intUserid", SqlDbType.VarChar).Value = intUserid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getGMtoIPOTargetLockup(string IPO, string Month, string Year, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getGMtoIPOTargetLookup", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (IPO.Trim().ToString() == "" || IPO.ToString().Trim() == null || IPO.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IPO", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IPO", SqlDbType.VarChar).Value = IPO.Trim();

            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getGMtoIPOTarget(string intTSiPASSid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getGMtoIPOTarget", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intTSiPASSid.Trim() == "" || intTSiPASSid.Trim() == null || intTSiPASSid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = intTSiPASSid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getTsipassreport4(string intTSiPASSid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getTsipassreport4new", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intTSiPASSid.Trim() == "" || intTSiPASSid.Trim() == null || intTSiPASSid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = intTSiPASSid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int bulkVehicleInspection(DataTable dt)
    {

        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("intIPOid", "intIPOid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("intVehicleInspectionid", "intVehicleInspectionid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("NameofUnit", "NameofUnit");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("AddressofUnit", "AddressofUnit");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("DetailsofVehicle", "DetailsofVehicle");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("DateofInspection", "DateofInspection");

            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("TypeofIncentive", "TypeofIncentive");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("CurrentStatus", "CurrentStatus");

            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Remarks", "Remarks");
            SqlBulkCopyColumnMapping mapping10 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            SqlBulkCopyColumnMapping mapping11 = new SqlBulkCopyColumnMapping("MandalId", "MandalId");
            SqlBulkCopyColumnMapping mapping12 = new SqlBulkCopyColumnMapping("DistrictId", "DistrictId");
            SqlBulkCopyColumnMapping mapping13 = new SqlBulkCopyColumnMapping("VillageId", "VillageId");
            SqlBulkCopyColumnMapping mapping14 = new SqlBulkCopyColumnMapping("WhetherYorN", "WhetherYorN");
            SqlBulkCopyColumnMapping mapping15 = new SqlBulkCopyColumnMapping("FilePath", "FilePath");
            //SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Girth", "Girth");
            //SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Est_FireWood", "Est_FireWood");
            //SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Forest_Pole", "Forest_Pole");
            //  SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            //SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            //bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);
            bulkCopy.ColumnMappings.Add(mapping10);

            bulkCopy.ColumnMappings.Add(mapping11);
            bulkCopy.ColumnMappings.Add(mapping12);
            bulkCopy.ColumnMappings.Add(mapping13);
            bulkCopy.ColumnMappings.Add(mapping14);
            bulkCopy.ColumnMappings.Add(mapping15);


            bulkCopy.DestinationTableName = ("tr_VehicleInspectionDet");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;




    }
    //public DataSet GETINCENTIVESCHECKLIST(string createdby, string incentiveid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_INCENTIVES_CHECKLST", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (createdby != null)
    //            da.SelectCommand.Parameters.Add("@CSCreatedBy", SqlDbType.VarChar).Value = createdby.ToString();

    //        if (incentiveid != null)
    //            da.SelectCommand.Parameters.Add("@CSIncentiveId", SqlDbType.VarChar).Value = incentiveid.ToString();
    //        else
    //            da.SelectCommand.Parameters.Add("@CSIncentiveId", SqlDbType.VarChar).Value = null;

    //        da.Fill(ds);
    //        return ds;

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public int updateIPOStatusDetails(string intIPOid, string Year, string Month, string Status, string Remarks, string Created_by)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("insertIPOAcceptance", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {
            if (intIPOid.Trim().ToString() == "" || intIPOid.ToString().Trim() == null)
                cmd.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.Trim();

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null)
                cmd.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null)
                cmd.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();
            if (Status.Trim().ToString() == "" || Status.ToString().Trim() == null)
                cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


            if (Remarks.Trim().ToString() == "" || Remarks.ToString().Trim() == null)
                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();


            if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;



    }

    public int DeleteGMtargetbyId(string id, string year, string Month)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DeleteGMtargetsbyId";

        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;

        cmd.Parameters.Add("@year", SqlDbType.VarChar).Value = year;

        cmd.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }


    }



    //public int updateBankVisitDet(string IpodId, string BankID, string BankName,
    //    string BankVisitMonth, string BankVisitYear, string NatureofLoan, string PromoterName, string LineofActivityid, string LoanAmount, string DateofSanction, string Created_by, string intBankVisitReport, string nameofunit, string unitaddress)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("updateBankVisitDet", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (nameofunit.Trim().ToString() == "" || nameofunit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();


    //        if (unitaddress.Trim().ToString() == "" || unitaddress.ToString().Trim() == null)
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@unitaddress", SqlDbType.VarChar).Value = unitaddress.Trim();

    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (BankID.Trim().ToString() == "" || BankID.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(BankID.Trim());

    //        if (BankName.Trim().ToString() == "" || BankName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BankName.Trim();

    //        if (BankVisitMonth.Trim().ToString() == "" || BankVisitMonth.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Month", SqlDbType.Int).Value = Convert.ToInt32(BankVisitMonth.Trim());

    //        if (BankVisitYear.Trim().ToString() == "" || BankVisitYear.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BankVisit_Year", SqlDbType.Int).Value = Convert.ToInt32(BankVisitYear.Trim());

    //        if (NatureofLoan.Trim().ToString() == "" || NatureofLoan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intNatureofLoan", SqlDbType.Int).Value = Convert.ToInt32(NatureofLoan.Trim());

    //        if (PromoterName.Trim().ToString() == "" || PromoterName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.Trim();

    //        if (LineofActivityid.Trim().ToString() == "" || LineofActivityid.ToString().Trim() == null || BankID.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intLineofActivityid", SqlDbType.Int).Value = Convert.ToInt32(LineofActivityid.Trim());

    //        if (LoanAmount.Trim().ToString() == "" || LoanAmount.ToString().Trim() == null)
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@LoanAmount", SqlDbType.Decimal).Value = Convert.ToDecimal(LoanAmount.Trim());

    //        if (DateofSanction.Trim().ToString() == "" || DateofSanction.ToString().Trim() == null)
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@DateofSanction", SqlDbType.DateTime).Value = Convert.ToDateTime(DateofSanction.Trim());

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

    //        if (intBankVisitReport.Trim().ToString() == "" || intBankVisitReport.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intBankVisitReport", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankVisitReport", SqlDbType.Int).Value = Convert.ToInt32(intBankVisitReport.Trim());


    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}
    //commented by rajinikar on 21 04 2020
    //public DataSet getClosedUnitsLoockp(string Created_by, string HTLT, string txtPromoterName, string Month, string Year)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("getClosedUnitsLoockp", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (HTLT.Trim() == "" || HTLT.Trim() == null || HTLT.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@HTLT", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@HTLT", SqlDbType.VarChar).Value = HTLT.ToString();


    //        if (txtPromoterName.Trim() == "" || txtPromoterName.Trim() == null || txtPromoterName.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@txtPromoterName", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@txtPromoterName", SqlDbType.VarChar).Value = txtPromoterName.ToString();

    //        if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();

    //        if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();



    //        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();




    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet getClosedUnitsLoockp(string Created_by, string Month, string Year)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getClosedUnitsLoockp", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();

            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();



            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowBankVisitDet(string intBankVisitReport)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBankVisitDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intBankVisitReport.Trim() == "" || intBankVisitReport.Trim() == null)
                da.SelectCommand.Parameters.Add("@intBankVisitReport", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intBankVisitReport", SqlDbType.VarChar).Value = intBankVisitReport.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //commented by rajinikar on 21 04 2020
    //public DataSet GetBankVisit(string Branch, string Bank, string Month, string Year, string Created_by) // 
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetBankVisitLookUP", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (Bank.Trim().ToString() == "" || Bank.ToString().Trim() == null || Bank.ToString().Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Bank", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Bank", SqlDbType.VarChar).Value = Bank.Trim();

    //        if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

    //        if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

    //        if (Branch.Trim() == "" || Branch.Trim() == null || Branch.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Branch", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Branch", SqlDbType.VarChar).Value = Branch.ToString();

    //        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet GetBankVisit(string Branch, string Bank, string Month, string Year, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBankVisitLookUP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Bank.Trim().ToString() == "" || Bank.ToString().Trim() == null || Bank.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Bank", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Bank", SqlDbType.VarChar).Value = Bank.Trim();

            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

            if (Branch.Trim() == "" || Branch.Trim() == null || Branch.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Branch", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Branch", SqlDbType.VarChar).Value = Branch.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //commented by rajinikar on 21 04 2020
    //public DataSet GetPMEGPandMUDRALookup(string Branch, string Bank, string Month, string Year, string Created_by) // 
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("GetPMEGPandMUDRALookup", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (Bank.Trim().ToString() == "" || Bank.ToString().Trim() == null || Bank.ToString().Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Bank", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Bank", SqlDbType.VarChar).Value = Bank.Trim();

    //        if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

    //        if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

    //        if (Branch.Trim() == "" || Branch.Trim() == null || Branch.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Branch", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Branch", SqlDbType.VarChar).Value = Branch.ToString();

    //        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet GetPMEGPandMUDRALookup(string Branch, string Bank, string Month, string Year, string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetPMEGPandMUDRALookup", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Bank.Trim().ToString() == "" || Bank.ToString().Trim() == null || Bank.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Bank", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Bank", SqlDbType.VarChar).Value = Bank.Trim();

            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();

            if (Branch.Trim() == "" || Branch.Trim() == null || Branch.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Branch", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Branch", SqlDbType.VarChar).Value = Branch.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIPOPMAppIPODashboardTsiPASS(string intIPOid, string VMonth, string VYear, string VForm)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetIPOPMAppIPODashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();


            if (VMonth.Trim() == "" || VMonth.Trim() == null)
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VMonth.ToString();


            if (VYear.Trim() == "" || VYear.Trim() == null)
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VYear.ToString();


            if (VForm.Trim() == "" || VForm.Trim() == null)
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = VForm.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet UpdateCFOUID()
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("UpdateCFOUID", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();

        }
        return ds;
    }
    public int updatePMEGPMUDRA(string IpodId, string Month, string Year,
     string NameofUnit, string AddressofUnit, string ProjectCost, string AmountSanctioned,
     string Bankid, string BranchName, string CurrentStatus, string Remarks, string Created_by, string intPMEGPid,
        string District, string Mandal, string Village, string Typeofloan, string TypeofloanOther, string Unitstatusother, string RBT_PMEGP, string groundeddate)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("updatePMEGPMUDRA", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;


        try
        {
            if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

            if (Month.ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = Convert.ToInt32(Month.Trim());

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = Convert.ToInt32(Year.Trim());

            if (NameofUnit.Trim().ToString() == "" || NameofUnit.ToString().Trim() == null)
                cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = NameofUnit.Trim();

            if (AddressofUnit.Trim().ToString() == "" || AddressofUnit.ToString().Trim() == null)
                cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = AddressofUnit.Trim();

            if (ProjectCost.Trim().ToString() == "" || ProjectCost.ToString().Trim() == null)
                cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = Convert.ToDecimal(ProjectCost.Trim());

            if (AmountSanctioned.Trim().ToString() == "" || AmountSanctioned.ToString().Trim() == null)
                cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = AmountSanctioned.Trim();

            if (Bankid.Trim().ToString() == "" || Bankid.ToString().Trim() == null)
                cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(Bankid.Trim());

            if (BranchName.Trim().ToString() == "" || BranchName.ToString().Trim() == null)
                cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BranchName.Trim();


            if (CurrentStatus.Trim().ToString() == "" || CurrentStatus.ToString().Trim() == null)
                cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();


            if (Remarks.Trim().ToString() == "" || Remarks.ToString().Trim() == null)
                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

            if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

            if (intPMEGPid.Trim().ToString() == "" || intPMEGPid.ToString().Trim() == null)
                cmd.Parameters.Add("@intPMEGPid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@intPMEGPid", SqlDbType.VarChar).Value = intPMEGPid.Trim();


            if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
                cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
            if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
                cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
            if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
                cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
            if (Typeofloan.Trim().ToString() == "" || Typeofloan.ToString().Trim() == null)
                cmd.Parameters.Add("@typeofloan", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@typeofloan", SqlDbType.VarChar).Value = Typeofloan.Trim();
            if (TypeofloanOther.Trim().ToString() == "" || TypeofloanOther.ToString().Trim() == null)
                cmd.Parameters.Add("@typeofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@typeofloanothers", SqlDbType.VarChar).Value = TypeofloanOther.Trim();
            if (Unitstatusother.Trim().ToString() == "" || Unitstatusother.ToString().Trim() == null)
                cmd.Parameters.Add("@unitstatusothers", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@unitstatusothers", SqlDbType.VarChar).Value = Unitstatusother.Trim();
            if (RBT_PMEGP.Trim().ToString() == "" || RBT_PMEGP.ToString().Trim() == null)
                cmd.Parameters.Add("@rbtpmegp", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@rbtpmegp", SqlDbType.VarChar).Value = RBT_PMEGP.Trim();

            if (groundeddate.Trim().ToString() == "" || groundeddate.Trim().ToString() == null)
                cmd.Parameters.Add("@groundeddate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@groundeddate", SqlDbType.DateTime).Value = cmf.convertDateIndia(groundeddate.Trim());


            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
            //cmd.ExecuteNonQuery();

        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }
    //public int updatePMEGPMUDRA(string IpodId, string Month, string Year,
    // string NameofUnit, string AddressofUnit, string ProjectCost, string AmountSanctioned,
    // string Bankid, string BranchName, string CurrentStatus, string Remarks, string Created_by, string intPMEGPid,
    //    string District, string Mandal, string Village, string Typeofloan, string TypeofloanOther, string Unitstatusother)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("updatePMEGPMUDRA", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (Month.ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = Convert.ToInt32(Month.Trim());

    //        if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = Convert.ToInt32(Year.Trim());

    //        if (NameofUnit.Trim().ToString() == "" || NameofUnit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = NameofUnit.Trim();

    //        if (AddressofUnit.Trim().ToString() == "" || AddressofUnit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = AddressofUnit.Trim();

    //        if (ProjectCost.Trim().ToString() == "" || ProjectCost.ToString().Trim() == null)
    //            cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = Convert.ToDecimal(ProjectCost.Trim());

    //        if (AmountSanctioned.Trim().ToString() == "" || AmountSanctioned.ToString().Trim() == null)
    //            cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = AmountSanctioned.Trim();

    //        if (Bankid.Trim().ToString() == "" || Bankid.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(Bankid.Trim());

    //        if (BranchName.Trim().ToString() == "" || BranchName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BranchName.Trim();


    //        if (CurrentStatus.Trim().ToString() == "" || CurrentStatus.ToString().Trim() == null)
    //            cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();


    //        if (Remarks.Trim().ToString() == "" || Remarks.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

    //        if (intPMEGPid.Trim().ToString() == "" || intPMEGPid.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intPMEGPid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intPMEGPid", SqlDbType.VarChar).Value = intPMEGPid.Trim();


    //        if (District.Trim().ToString() == "" || District.ToString().Trim() == null)
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@district", SqlDbType.VarChar).Value = District.Trim();
    //        if (Mandal.Trim().ToString() == "" || Mandal.ToString().Trim() == null)
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@mandal", SqlDbType.VarChar).Value = Mandal.Trim();
    //        if (Village.Trim().ToString() == "" || Village.ToString().Trim() == null)
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@village", SqlDbType.VarChar).Value = Village.Trim();
    //        if (Typeofloan.Trim().ToString() == "" || Typeofloan.ToString().Trim() == null)
    //            cmd.Parameters.Add("@typeofloan", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@typeofloan", SqlDbType.VarChar).Value = Typeofloan.Trim();
    //        if (TypeofloanOther.Trim().ToString() == "" || TypeofloanOther.ToString().Trim() == null)
    //            cmd.Parameters.Add("@typeofloanothers", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@typeofloanothers", SqlDbType.VarChar).Value = TypeofloanOther.Trim();
    //        if (Unitstatusother.Trim().ToString() == "" || Unitstatusother.ToString().Trim() == null)
    //            cmd.Parameters.Add("@unitstatusothers", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@unitstatusothers", SqlDbType.VarChar).Value = Unitstatusother.Trim();

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //        //cmd.ExecuteNonQuery();

    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}

    //public int updatePMEGPMUDRA(string IpodId, string Month, string Year,
    // string NameofUnit, string AddressofUnit, string ProjectCost, string AmountSanctioned,
    // string Bankid, string BranchName, string CurrentStatus, string Remarks, string Created_by, string intPMEGPid)
    //{
    //    con.OpenConnection();// dbu.openCon();
    //    SqlCommand cmd = new SqlCommand("updatePMEGPMUDRA", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    int value = 0;
    //    cmd.Connection = con.GetConnection;


    //    try
    //    {
    //        if (IpodId.Trim().ToString() == "" || IpodId.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intIPOid", SqlDbType.Int).Value = Convert.ToInt32(IpodId.Trim());

    //        if (Month.ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@VI_Month", SqlDbType.Int).Value = Convert.ToInt32(Month.Trim());

    //        if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
    //            cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@VI_Year", SqlDbType.Int).Value = Convert.ToInt32(Year.Trim());

    //        if (NameofUnit.Trim().ToString() == "" || NameofUnit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = NameofUnit.Trim();

    //        if (AddressofUnit.Trim().ToString() == "" || AddressofUnit.ToString().Trim() == null)
    //            cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@AddressofUnit", SqlDbType.VarChar).Value = AddressofUnit.Trim();

    //        if (ProjectCost.Trim().ToString() == "" || ProjectCost.ToString().Trim() == null)
    //            cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@ProjectCost", SqlDbType.Decimal).Value = Convert.ToDecimal(ProjectCost.Trim());

    //        if (AmountSanctioned.Trim().ToString() == "" || AmountSanctioned.ToString().Trim() == null)
    //            cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@AmountSanctioned", SqlDbType.Decimal).Value = AmountSanctioned.Trim();

    //        if (Bankid.Trim().ToString() == "" || Bankid.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intBankid", SqlDbType.Int).Value = Convert.ToInt32(Bankid.Trim());

    //        if (BranchName.Trim().ToString() == "" || BranchName.ToString().Trim() == null)
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@BranchName", SqlDbType.VarChar).Value = BranchName.Trim();


    //        if (CurrentStatus.Trim().ToString() == "" || CurrentStatus.ToString().Trim() == null)
    //            cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@CurrentStatus", SqlDbType.VarChar).Value = CurrentStatus.Trim();


    //        if (Remarks.Trim().ToString() == "" || Remarks.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();

    //        if (Created_by.Trim().ToString() == "" || Created_by.ToString().Trim() == null)
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@Created_by", SqlDbType.Int).Value = Convert.ToInt32(Created_by.Trim());

    //        if (intPMEGPid.Trim().ToString() == "" || intPMEGPid.ToString().Trim() == null)
    //            cmd.Parameters.Add("@intPMEGPid", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            cmd.Parameters.Add("@intPMEGPid", SqlDbType.VarChar).Value = intPMEGPid.Trim();

    //        string val = cmd.ExecuteScalar().ToString();
    //        if (val != string.Empty)
    //            value = Int32.Parse(val);
    //        //con.CloseConnection();
    //        return value;
    //    }
    //    catch (Exception ex)
    //    {
    //        //    con.CloseConnection();
    //        //    throw ex;
    //        return 0;
    //    }

    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    //return value;
    //}


    public DataSet GetIPOPMAppIPODashboardTSiPASS(string intIPOid, string VMonth, string VYear, string VForm)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetIPOPMAppIPODashboardTSiPASS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();


            if (VMonth.Trim() == "" || VMonth.Trim() == null)
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VMonth.ToString();


            if (VYear.Trim() == "" || VYear.Trim() == null)
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VYear.ToString();


            if (VForm.Trim() == "" || VForm.Trim() == null)
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = VForm.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIPOPMAppIPODashboardSubSidy(string intIPOid, string VMonth, string VYear, string VForm)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetIPOPMAppIPODashboardSubSidy", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intIPOid.Trim() == "" || intIPOid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();


            if (VMonth.Trim() == "" || VMonth.Trim() == null)
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VMonth.ToString();


            if (VYear.Trim() == "" || VYear.Trim() == null)
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VYear.ToString();


            if (VForm.Trim() == "" || VForm.Trim() == null)
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intFormid", SqlDbType.VarChar).Value = VForm.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetPMEGPandMUDRA(string intTSiPASSid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetPMEGPandMUDRA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intTSiPASSid.Trim() == "" || intTSiPASSid.Trim() == null || intTSiPASSid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intTSiPASSid", SqlDbType.VarChar).Value = intTSiPASSid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getUnitInspLookUp(string Year, string Month, string Created_by)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getUnitLookUp", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Month.Trim().ToString() == "" || Month.ToString().Trim() == null || Month.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.Trim();

            if (Year.Trim().ToString() == "" || Year.ToString().Trim() == null || Year.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.Trim();



            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = Created_by.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getIPOTargetBankvisit(string Year, string Month, string user)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIPOTargets", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet GetVehicleInspectionTarget(string Year, string Month, string user)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIPOVehicleTargets", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet getIPOUnitTargets(string Year, string Month, string user)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIPOUnitTargets", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }
    public int InsertUnitinsepection(string id, string NoofApplicationAssigned, string InspectionbyGM, string Inspectionscarriedout, string InspectionreporttoGM, string Inspectionnotdone, string Created_by, string VI_Year, string VI_Month)
    {

        int v = 0;
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertUnitinsepection";

        if (id == "" || id == null)

            com.Parameters.Add("@id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@id", SqlDbType.VarChar).Value = id.Trim();


        if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year.Trim() == "--Select--")

            com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.Trim();


        if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month.Trim() == "--Select--")

            com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.Trim();

        if (Created_by == "" || Created_by == null)

            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (NoofApplicationAssigned == "" || NoofApplicationAssigned == null)
            com.Parameters.Add("@NoofApplicationAssigned", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofApplicationAssigned", SqlDbType.VarChar).Value = NoofApplicationAssigned.Trim();

        if (InspectionbyGM == "" || InspectionbyGM == null)
            com.Parameters.Add("@InspectionbyGM", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionbyGM", SqlDbType.VarChar).Value = InspectionbyGM.Trim();

        if (Inspectionscarriedout == "" || Inspectionscarriedout == null)
            com.Parameters.Add("@Inspectionscarriedout", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Inspectionscarriedout", SqlDbType.VarChar).Value = Inspectionscarriedout.Trim();

        if (InspectionreporttoGM == "" || InspectionreporttoGM == null)
            com.Parameters.Add("@InspectionreporttoGM", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionreporttoGM", SqlDbType.VarChar).Value = InspectionreporttoGM.Trim();

        if (Inspectionnotdone == "" || Inspectionnotdone == null)
            com.Parameters.Add("@Inspectionnotdone", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Inspectionnotdone", SqlDbType.VarChar).Value = Inspectionnotdone.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public int bulkUnitInspection(DataTable dt)
    {
        con.OpenConnection();

        int i = 0;

        try
        {
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);

            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("NameofUnit", "NameofUnit");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("AddressofUnit", "AddressofUnit");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("lineactivity", "lineactivity");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("DateofInspection", "DateofInspection");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("TypeofIncentive", "TypeofIncentive");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("CurrentStatus", "CurrentStatus");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Remarks", "Remarks");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("intUnitInspectionid", "intUnitInspectionid");
            // SqlBulkCopyColumnMapping mapping10 = new SqlBulkCopyColumnMapping("Modified_by", "Modified_by");
            // SqlBulkCopyColumnMapping mapping11 = new SqlBulkCopyColumnMapping("Modified_dt", "Modified_dt");
            //SqlBulkCopyColumnMapping mapping12 = new SqlBulkCopyColumnMapping("EstCost", "EstCost");
            //SqlBulkCopyColumnMapping mapping13 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");

            //SqlBulkCopyColumnMapping mapping14 = new SqlBulkCopyColumnMapping("EquipmntQuantity", "EquipmntQuantity");
            //SqlBulkCopyColumnMapping mapping15 = new SqlBulkCopyColumnMapping("MaterialQuantity", "MaterialQuantity");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);

            // bulkCopy.ColumnMappings.Add(mapping10);
            //bulkCopy.ColumnMappings.Add(mapping11);
            //bulkCopy.ColumnMappings.Add(mapping12);
            //bulkCopy.ColumnMappings.Add(mapping13);

            //bulkCopy.ColumnMappings.Add(mapping14);
            //bulkCopy.ColumnMappings.Add(mapping15);


            bulkCopy.DestinationTableName = ("tr_UnitInspectionDetChild");
            bulkCopy.WriteToServer(dt);
            i = 1;

        }
        catch (Exception ex)
        {
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }

        return i;


    }
    public DataSet getUnitInspectioniddet(string id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getUnitInspectioniddet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (id.Trim().ToString() == "" || id.ToString().Trim() == null || id.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = id.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }
    public DataSet getunitinspectionSearch(string InspectionbyGM, string Inspectionscarriedout)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getunitinspectionSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (InspectionbyGM.Trim() == "" || InspectionbyGM.Trim() == null || InspectionbyGM.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@InspectionbyGM", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@InspectionbyGM", SqlDbType.VarChar).Value = InspectionbyGM.ToString();

            if (Inspectionscarriedout.Trim() == "" || Inspectionscarriedout.Trim() == null || Inspectionscarriedout.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Inspectionscarriedout", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Inspectionscarriedout", SqlDbType.VarChar).Value = Inspectionscarriedout.ToString();

            //if (WorkActivity.Trim() == "" || WorkActivity.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@WorkActivity", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@WorkActivity", SqlDbType.VarChar).Value = WorkActivity.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int deleteunitInspection(string intUnitInspectionid)
    {
        int a = 0;
        SqlCommand cmd = new SqlCommand("deleteunitInspection", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        if (intUnitInspectionid == "" || intUnitInspectionid == null)
            cmd.Parameters.Add("@intUnitInspectionid", SqlDbType.VarChar).Value = DBNull.Value.ToString();
        else
            cmd.Parameters.Add("@intUnitInspectionid", SqlDbType.VarChar).Value = intUnitInspectionid;
        con.OpenConnection();
        try
        {
            int b = cmd.ExecuteNonQuery();
            if (b != 0)
                a = b;
            con.CloseConnection();
        }
        catch (Exception e)
        {

        }
        finally
        {
            con.CloseConnection();
        }
        return a;
    }


    public DataSet GetInitialCatelogTarget(string Year, string Month, string user)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getIntialCatelogTargets", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Year", SqlDbType.VarChar).Value = Year.ToString();


            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Month", SqlDbType.VarChar).Value = Month.ToString();


            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetIPOwiseDashboard(string VI_Year, string VI_Month, string intIPOid, string Status, string user)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getGMDashboardbyIPOS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

            if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.ToString();


            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public int UpdateAdditionalpaymentsBeforePre_BP(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string Reason, string IPAddress, string docs)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewBeforePre";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();

        if (Reason.Trim() == "" || Reason.Trim() == null)
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = Reason.Trim();
        //selectedDocuments_Rej
        if (docs.Trim() == "" || docs.Trim() == null)
            com.Parameters.Add("@docs", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@docs", SqlDbType.VarChar).Value = docs.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int UpdateAdditionalpaymentsBeforePre(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string Reason, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewBeforePre";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();

        if (Reason.Trim() == "" || Reason.Trim() == null)
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = Reason.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public DataSet getCESSVillages(string intVillageid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCESSVillages", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intVillageid.Trim().ToString() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet GetCommissionerwiseDashboard(string VI_Year, string VI_Month, string intIPOid, string Status, string user)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCommissionerDashboardbyIPOS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

            if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.ToString();


            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public DataSet GetIPOPeriodicalAbstract(string VI_Year, string VI_Month)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetIPOPeriodicalAbstract", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

            if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetpreRejectedDetailsCFO(string intCFEEnterpid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetpreRejectedDetailsCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetpreRejectedDetails(string intCFEEnterpid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetpreRejectedDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApprovalRejectedDetails(string intCFEEnterpid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetApprovalRejectedDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApprovalRejectedDetailsCFO(string intCFEEnterpid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetApprovalRejectedDetailsCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateAppealDepartmentProcess(string intCFEEnterpid, string intDeptid, string intApprovalid, string AppealDescription, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdateAppealDepartmentProcess";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();



        if (AppealDescription == "" || AppealDescription == null)
            com.Parameters.Add("@AppealDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AppealDescription", SqlDbType.VarChar).Value = AppealDescription.Trim(); ;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int UpdateAppealDepartmentProcessCFO(string intCFEEnterpid, string intDeptid, string intApprovalid, string AppealDescription, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdateAppealDepartmentProcessCFO";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();



        if (AppealDescription == "" || AppealDescription == null)
            com.Parameters.Add("@AppealDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AppealDescription", SqlDbType.VarChar).Value = AppealDescription.Trim(); ;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int UpdatetAppealApprovalnew(string intCFEEnterpid, string Status, string Created_by, string stageid, string dept, string Approval)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetAppealApprovalnew";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();



        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int UpdatetAppealApprovalnewCFO(string intCFEEnterpid, string Status, string Created_by, string stageid, string dept, string Approval)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetAppealApprovalnewCFO";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();



        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetShowAppealedFiles()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowAppealedFiles", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;





            //if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowAppealedFilesCFO()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowAppealedFilesCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;





            //if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIPODashboard(string VI_Year, string VI_Month, string intIPOid, string Status, string user)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetIPODashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (VI_Year.Trim() == "" || VI_Year.Trim() == null || VI_Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Year", SqlDbType.VarChar).Value = VI_Year.ToString();

            if (VI_Month.Trim() == "" || VI_Month.Trim() == null || VI_Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VI_Month", SqlDbType.VarChar).Value = VI_Month.ToString();


            if (intIPOid.Trim() == "" || intIPOid.Trim() == null || intIPOid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intIPOid", SqlDbType.VarChar).Value = intIPOid.ToString();

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (user.Trim() == "" || user.Trim() == null || user.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@user", SqlDbType.VarChar).Value = user.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetRptGlance()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("GetRptGlance", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetRptGlance_New(string status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("GetRptGlance2", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int ExistingUsers(string userid)
    {
        int valid;
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "SP_DISTREFORMSEXIST";

        if (userid.Trim() == "" || userid.Trim() == null)
            com.Parameters.Add("@USERID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@USERID", SqlDbType.VarChar).Value = userid.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();
            valid = (Int32)com.Parameters["@Valid"].Value;
            return valid;
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            //return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet getGWMCVillages(string intVillageid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getGWMCVillages", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intVillageid.Trim().ToString() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }



    public DataSet GetIncentives()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetIncentives", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetIncentiveTypebyIncentive(string Incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetIncentiveTypebyIncentive", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Incentiveid.Trim() == "" || Incentiveid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Incentiveid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Incentiveid", SqlDbType.VarChar).Value = Incentiveid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetHelpdeskReport()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetHelpdeskReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet GetHelpdeskReportDrildown(string id, string Status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetHelpdeskReportDrildown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (id.Trim() == "" || id.Trim() == null || id.Trim() == "All" || id.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = id.ToString();

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet searchAaprovalname(string Aprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("searchopnaaprovalbame", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Aprovalid.Trim() == "" || Aprovalid.Trim() == null || Aprovalid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Aprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Aprovalid", SqlDbType.VarChar).Value = Aprovalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getApproval()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getApproval", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            //if (UID.Trim() == "" || UID.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@enterprenuerUID", SqlDbType.VarChar).Value = UID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getAcknowledgeRawmaterial(string id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getAcknowledgeRawmaterial", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (id.Trim() == "" || id.Trim() == null)
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@id", SqlDbType.VarChar).Value = id.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet getAcknowledgeRawmaterialReport(string distid, string UdyogNo, string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRawmeterialsdata1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (UdyogNo.Trim() == "" || UdyogNo.Trim() == null)
                da.SelectCommand.Parameters.Add("@UdyogNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UdyogNo", SqlDbType.VarChar).Value = UdyogNo.ToString();



            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();



            if (distid.Trim() == "" || distid.Trim() == null || distid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public int UpdCommissionerApprovalNew(string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Trans_Date, string Created_by, string intQid)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdCommissionerApprovalNew";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();

        if (Trans_Date == "" || Trans_Date == null)
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = cmf.convertDateIndia(Trans_Date);

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (intQid == "" || intQid == null)
            com.Parameters.Add("@intQid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQid", SqlDbType.VarChar).Value = intQid.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetStatusforCertificate(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetStatusforCertificate", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();


            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int UpdCommissionerApprovalCFONew(string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Trans_Date, string Created_by, string intQid)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdCommissionerApprovalCFONew";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();

        if (Trans_Date == "" || Trans_Date == null)
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = cmf.convertDateIndia(Trans_Date);

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (intQid == "" || intQid == null)
            com.Parameters.Add("@intQid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQid", SqlDbType.VarChar).Value = intQid.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public DataSet GetStatusforCertificateCFO(string intQuessionaireCFOid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetStatusforCertificateCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireCFOid.Trim() == "" || intQuessionaireCFOid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.ToString();


            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet DistrictWiseCerGenReport()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DistrictWiseCerGenReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseCerGenReportCFO()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DistrictWiseCerGenReportCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseCerGenDrildownReport(string intStageid, string Districtid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DistrictWiseCerGenDrildownReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (Districtid.Trim() == "" || Districtid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = Districtid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseCerGenDrildownReportCFO(string intStageid, string Districtid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DistrictWiseCerGenDrildownReportCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (Districtid.Trim() == "" || Districtid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = Districtid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //ADDED BY MADHURI
    public string Encrypt(string strPassword, string EncKey)
    {
        byte[] clearBytes = System.Text.Encoding.Unicode.GetBytes(strPassword);

        PasswordDeriveBytes pdb = new PasswordDeriveBytes(EncKey,
            new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d,
            0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76});

        byte[] encryptedData = Encrypt(clearBytes, pdb.GetBytes(32), pdb.GetBytes(16));

        return Convert.ToBase64String(encryptedData);

    }

    private byte[] Encrypt(byte[] clearData, byte[] Key, byte[] IV)
    {
        MemoryStream ms = new MemoryStream();
        Rijndael alg = Rijndael.Create();

        alg.Key = Key;
        alg.IV = IV;

        CryptoStream cs = new CryptoStream(ms, alg.CreateEncryptor(), CryptoStreamMode.Write);

        cs.Write(clearData, 0, clearData.Length);
        cs.Close();

        byte[] encryptedData = ms.ToArray();
        return encryptedData;
    }

    public string Decrypt(string strPassword, string EncKey)
    {

        byte[] cipherBytes = Convert.FromBase64String(strPassword);

        PasswordDeriveBytes pdb = new PasswordDeriveBytes(EncKey,
            new byte[] {0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65,
            0x64, 0x76, 0x65, 0x64, 0x65, 0x76});

        byte[] decryptedData = Decrypt(cipherBytes,
            pdb.GetBytes(32), pdb.GetBytes(16));

        return System.Text.Encoding.Unicode.GetString(decryptedData);

    }

    private byte[] Decrypt(byte[] cipherData, byte[] Key, byte[] IV)
    {
        MemoryStream ms = new MemoryStream();
        Rijndael alg = Rijndael.Create();

        alg.Key = Key;
        alg.IV = IV;

        CryptoStream cs = new CryptoStream(ms, alg.CreateDecryptor(), CryptoStreamMode.Write);

        cs.Write(cipherData, 0, cipherData.Length);
        cs.Close();

        byte[] decryptedData = ms.ToArray();
        return decryptedData;
    }

    public DataSet GetUserSearch(string username)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_SEARCH_USER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (username.Trim() != "" || username.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@USERNAME", SqlDbType.VarChar).Value = username.ToString();
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentonuid(string uidno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_DEPARTMENTS_UID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getdepartmentdetailsonuid(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GETDETAILS_DEPARTMENT_SERVICE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getfiremeanofescapedetailsonuid(string uidno, string applid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_MEANSOFESCAPE_FIRE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (applid.Trim() != "" || applid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@APPID", SqlDbType.VarChar).Value = applid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getattachmentdetailsonuid(string uidno, string deptid, string applid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ATTACHMENTS_UID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            if (applid.Trim() != "" || applid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@APPLID", SqlDbType.VarChar).Value = applid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@APPLID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateDepartwebserviceflag(string uidno, string deptid, string flag, string output, string statusflag)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_UPD_DEPTCOMMONFEILDS";

        if (uidno == "" || uidno == null)
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.Trim();

        if (deptid == "" || deptid == null)
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = deptid.Trim();

        if (flag == "" || flag == null)
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = flag.Trim();

        if (statusflag == "" || statusflag == null)
            com.Parameters.Add("@STATUSFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@STATUSFLAG", SqlDbType.VarChar).Value = statusflag.Trim();

        if (output == "" || output == null)
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = output.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int UpdateDepartwebserviceflagCFO(string uidno, string deptid, string flag, string output)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_UPD_DEPTCOMMONFEILDS_CFO";

        if (uidno == "" || uidno == null)
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.Trim();

        if (deptid == "" || deptid == null)
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = deptid.Trim();

        if (flag == "" || flag == null)
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = flag.Trim();

        if (output == "" || output == null)
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = output.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public DataSet DeptReportDepartmentWiseGrievanceSub(string intDistrictid, string Category, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_New_export"
            da = new SqlDataAdapter("USP_GET_Grievance_Report_SUB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet RetriveStatusByTypeDistrictNewGrievanceSub(string status, string dept, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_Grievance_Report_DRILL_SUB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.ToString();

            if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = dept.ToString();

            da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetDepartmentonuidCFO(string uidno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_DEPARTMENTS_UID_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getdepartmentdetailsonuidCFO(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GETDETAILS_DEPARTMENT_SERVICE_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getattachmentdetailsonuidCFO(string uidno, string deptid, string applid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ATTACHMENTS_UID_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateDepartwebserviceflagCFO(string uidno, string deptid, string flag)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_UPD_DEPTCOMMONFEILDS_CFO";

        if (uidno == "" || uidno == null)
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.Trim();

        if (deptid == "" || deptid == null)
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = deptid.Trim();

        if (flag == "" || flag == null)
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = flag.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public DataSet getAdditionalPaymentDetails(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ADDITIONALPAYMENTDETAILS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetQueryStatusByTransactionIDCFOResponse(string User_id, string approvalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDCFO_RESPONSE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";

            if (approvalid.Trim() == "" || approvalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Approvalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Approvalid", SqlDbType.VarChar).Value = approvalid.ToString();

            da.Fill(ds);
            return ds;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateDepartwebserviceflagCFO(string uidno, string deptid, string flag, string output, string statusflag)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_UPD_DEPTCOMMONFEILDS_CFO";

        if (uidno == "" || uidno == null)
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.Trim();

        if (deptid == "" || deptid == null)
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = deptid.Trim();

        if (flag == "" || flag == null)
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = flag.Trim();

        if (statusflag == "" || statusflag == null)
            com.Parameters.Add("@STATUSFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@STATUSFLAG", SqlDbType.VarChar).Value = statusflag.Trim();

        if (output == "" || output == null)
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = output.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetAmmendmentsFinal(int DEPTID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_AMMENDMENTS_FINAL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (DEPTID != null && DEPTID != 0)
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.Int).Value = DEPTID;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetUserCommentsofAmmendmentsid(int ammendentid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_Comments_Ammendment_ID]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (ammendentid != null && ammendentid != 0)
                da.SelectCommand.Parameters.Add("@Ammendment_Id", SqlDbType.Int).Value = ammendentid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetExpansionCFE(decimal Val_Land, decimal Val_Build, decimal Val_Plant, decimal Tot_PrjCost, string ProposalForQue, decimal Val_LandExpansion, decimal Val_BuildExpansion, decimal Val_PlantExpansion, decimal Tot_PrjCostExpansion)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_EXPANSIONDTLS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Val_Land != null && Val_Land != 0)
                da.SelectCommand.Parameters.Add("@Val_Land", SqlDbType.Decimal).Value = Val_Land;

            if (Val_Build != null && Val_Build != 0)
                da.SelectCommand.Parameters.Add("@Val_Build", SqlDbType.Decimal).Value = Val_Build;

            if (Val_Plant != null && Val_Plant != 0)
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.Decimal).Value = Val_Plant;

            if (Tot_PrjCost != null && Tot_PrjCost != 0)
                da.SelectCommand.Parameters.Add("@Tot_PrjCost", SqlDbType.Decimal).Value = Tot_PrjCost;

            if (ProposalForQue != null && ProposalForQue != "")
                da.SelectCommand.Parameters.Add("@ProposalForQue", SqlDbType.VarChar).Value = ProposalForQue;

            if (Val_LandExpansion != null && Val_LandExpansion != 0)
                da.SelectCommand.Parameters.Add("@Val_LandExpansion", SqlDbType.Decimal).Value = Val_LandExpansion;

            if (Val_BuildExpansion != null && Val_BuildExpansion != 0)
                da.SelectCommand.Parameters.Add("@Val_BuildExpansion", SqlDbType.Decimal).Value = Val_BuildExpansion;

            if (Val_PlantExpansion != null && Val_PlantExpansion != 0)
                da.SelectCommand.Parameters.Add("@Val_PlantExpansion", SqlDbType.Decimal).Value = Val_PlantExpansion;

            if (Tot_PrjCostExpansion != null && Tot_PrjCostExpansion != 0)
                da.SelectCommand.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.Decimal).Value = Tot_PrjCostExpansion;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetExpansionCFO(decimal Val_Land, decimal Val_Build, decimal Val_Plant, decimal Tot_PrjCost, string ProposalForQue, decimal Val_LandExpansion, decimal Val_BuildExpansion, decimal Val_PlantExpansion, decimal Tot_PrjCostExpansion)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_EXPANSIONDTLS_CFO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Val_Land != null && Val_Land != 0)
                da.SelectCommand.Parameters.Add("@Val_Land", SqlDbType.Decimal).Value = Val_Land;

            if (Val_Build != null && Val_Build != 0)
                da.SelectCommand.Parameters.Add("@Val_Build", SqlDbType.Decimal).Value = Val_Build;

            if (Val_Plant != null && Val_Plant != 0)
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.Decimal).Value = Val_Plant;

            if (Tot_PrjCost != null && Tot_PrjCost != 0)
                da.SelectCommand.Parameters.Add("@Tot_PrjCost", SqlDbType.Decimal).Value = Tot_PrjCost;

            if (ProposalForQue != null && ProposalForQue != "")
                da.SelectCommand.Parameters.Add("@ProposalForQue", SqlDbType.VarChar).Value = ProposalForQue;

            if (Val_LandExpansion != null && Val_LandExpansion != 0)
                da.SelectCommand.Parameters.Add("@Val_LandExpansion", SqlDbType.Decimal).Value = Val_LandExpansion;

            if (Val_BuildExpansion != null && Val_BuildExpansion != 0)
                da.SelectCommand.Parameters.Add("@Val_BuildExpansion", SqlDbType.Decimal).Value = Val_BuildExpansion;

            if (Val_PlantExpansion != null && Val_PlantExpansion != 0)
                da.SelectCommand.Parameters.Add("@Val_PlantExpansion", SqlDbType.Decimal).Value = Val_PlantExpansion;

            if (Tot_PrjCostExpansion != null && Tot_PrjCostExpansion != 0)
                da.SelectCommand.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.Decimal).Value = Tot_PrjCostExpansion;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetYEARS()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_YEARS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetMONTHS()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_MONTHS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCentralInspectionAbstractReport(string month, string Year, string Department, string District, string status, string inspectionformdate, string inspectiontodate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_CENTRALINSPECTION_ABSTRACT]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (month != null && month.Trim().ToString() != "" && month.ToString().Trim() != "--Select--")
                da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = month.Trim();
            else
                da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = DBNull.Value;


            if (Year != null && Year.Trim().ToString() != "" && Year.ToString().Trim() != "--Select--")
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = Year.Trim();
            else
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = DBNull.Value;


            if (Department != null && Department != "")
                da.SelectCommand.Parameters.Add("@DEPARTMENT", SqlDbType.VarChar).Value = Department.Trim();
            else
                da.SelectCommand.Parameters.Add("@DEPARTMENT", SqlDbType.VarChar).Value = DBNull.Value;


            if (District != null && District != "")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = District.Trim();
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = DBNull.Value;

            if (status != null && status != "")
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.Trim();
            else
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = DBNull.Value;

            if (inspectionformdate != null && inspectionformdate != string.Empty && inspectionformdate != "")
                da.SelectCommand.Parameters.Add("@INSPECTIONDATE", SqlDbType.VarChar).Value = inspectionformdate.ToString();
            else
                da.SelectCommand.Parameters.Add("@INSPECTIONDATE", SqlDbType.VarChar).Value = DBNull.Value;

            if (inspectiontodate != null && inspectiontodate != string.Empty && inspectiontodate != "")
                da.SelectCommand.Parameters.Add("@INSPECTIONTODATE", SqlDbType.VarChar).Value = inspectiontodate.ToString();
            else
                da.SelectCommand.Parameters.Add("@INSPECTIONTODATE", SqlDbType.VarChar).Value = DBNull.Value;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBoilerUploadDetailsCFO(string intCFEEnterpid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetBoilerUploadDetailsCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBoilerErectionCFOResponse(string User_id, string approvalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDCFO_ErectionUpload", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";

            if (approvalid.Trim() == "" || approvalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Approvalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Approvalid", SqlDbType.VarChar).Value = approvalid.ToString();

            da.Fill(ds);
            return ds;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertErectionPermissionUploadCFO(string intEnterpreniourApprovalid,
string intQuessionaireid,
string intCFEEnterpid,
string intDeptid,
string intApprovalid,
string QueryRaiseDate,
string QueryDescription,
string QueryStatus,
string QueryAttachmentFileName,
string QueryAttachmentFilePath,
string QueryRespondDate,
string QueryRespondRemarks,
string Created_by,
string Created_dt,
string Modified_by, string Modified_dt, string IPAddress)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertErectionPermissionUpload", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IPAddress.Trim() == "" || IPAddress.Trim() == null || IPAddress.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();
            }



            if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            //-------------------------------------------------
            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}
            //if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            //}

            //if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            //}

            //if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            //}

            //if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            //}

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            //if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            //if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            //if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            //if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            //if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            ////-------------------------------------------------
            //if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            //}

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            //if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            //}

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetGreivanceAck_Data(int Grievanceid, int DeptId)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_Grievance_Acknowledge", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@gRIEVANCEiD", SqlDbType.Int).Value = Grievanceid.ToString();
            da.SelectCommand.Parameters.Add("@DEPTID", SqlDbType.Int).Value = DeptId.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetUIDDataforGreivance(string uidno)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_Grievance_Uidnodata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@Uidno", SqlDbType.VarChar).Value = uidno.ToString();
            //da.SelectCommand.Parameters.Add("@DEPTID", SqlDbType.Int).Value = DeptId.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FeedBackQueries_Dashboard(string intDeptid, string Created_by, string RegisterAs)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FeedbackQuery_Dashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();

            if (RegisterAs.Trim() == "" || RegisterAs.Trim() == null)
                da.SelectCommand.Parameters.Add("@RegisterAs", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@RegisterAs", SqlDbType.VarChar).Value = RegisterAs.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet FeedbackQuery_DeptwiseDashboard(string RegisterAs)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FeedBackQuery_DeptwiseDashboard", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (RegisterAs.Trim() == "" || RegisterAs.Trim() == null)
                da.SelectCommand.Parameters.Add("@RegisterAs", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@RegisterAs", SqlDbType.VarChar).Value = RegisterAs.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet fetch_FeedbackQuerydet(string Status, string intDistrictid, string IndustryName, string intDeptid, string intGrievanceid, string Created_by, string ForwardTo, string RegisterAs)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetch_FeedBack_Querydet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%" + IndustryName.ToString() + "%";

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intGrievanceid.Trim() == "" || intGrievanceid.Trim() == null || intGrievanceid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intGrievanceid", SqlDbType.VarChar).Value = intGrievanceid.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();
            //Jyotshna for Commissioner login on 13-05-2016
            if (ForwardTo.Trim() == "" || ForwardTo.Trim() == null || ForwardTo.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@ForwardTo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ForwardTo", SqlDbType.VarChar).Value = ForwardTo.ToString();
            //Jyotshna for Commissioner login on 13-05-2016
            if (RegisterAs.Trim() == "" || RegisterAs.Trim() == null)
                da.SelectCommand.Parameters.Add("@RegisterAs", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@RegisterAs", SqlDbType.VarChar).Value = RegisterAs.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet Bussinessregulationmis()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_BUSSINESSREGULATION_MISREPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GeneralQueryMis(string intDeptid, string Created_by, string RegisterAs)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_GeneralQuery_Mis", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();

            if (RegisterAs.Trim() == "" || RegisterAs.Trim() == null)
                da.SelectCommand.Parameters.Add("@RegisterAs", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@RegisterAs", SqlDbType.VarChar).Value = RegisterAs.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet Tsipassapplicationsmis(string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_CFECFO_MISREPORT", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet TsipassapplicationsmisInc(string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_MISINCENTIVE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet ViewAttachmentREN(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("[sp_RetriveRENAttachment]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            da.Fill(ds);

            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    #region Renewal Method Madhuri

    public DataSet GetRenewalServices(string createdby)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_RENEWALAPPROVALS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (createdby == "" || createdby == null)
                da.SelectCommand.Parameters.Add("@createdby", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@createdby", SqlDbType.VarChar).Value = createdby.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public int insertRenewalBoiler(
 string intCFOBoilerid,
    string intQuessionaireCFOid,
    string intCFOEnterpid,
    string Uid_No,
    string Reg_Id,
    string Reg_No_Boiler,
    string Name_Owner,
    string Location,
    string Date_Inpec_Desirable,
    string Desc_Boiler_Age,
    string Makers_name,
    string Type_Boiler,
    string Boiler_User_for,
    string Boiler_ration,
    string Place_Manfacture,
    string Year_Manfacture,
    string Allowed_Max_Presure,
    string Econ_Maker_Number,
    string Heating_Surface_boiler,
    string Max_Conti_Evapron,
    string Class_Erector,
    string Name_of_Erector,
    string State_Erector,
    string Max_Presure_Econ,
    string Tot_Lenght_Steam_PipeLine,
    string Created_by,
    string Modified_by,
  string componentperson,
  string inspectingauthority,
   string nameofunit,
   string PropintDistrictid,
   string PropintMandalid,
  string PropintVillageid,
    string regnoofsteampipeline, string ur376, string fee, string repairerflag, string repairername, string repairerclass,
    string thirdparttype, string feedetails, string modeofpayment, string Boename, string CertificateNo, string Address, string MobileNo, string Emailid)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertRenewalBoilersDet";


        if (intCFOBoilerid.ToString().Trim() == "" || intCFOBoilerid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = intCFOBoilerid.Trim();

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

        if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

        if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

        if (Reg_No_Boiler.ToString().Trim() == "" || Reg_No_Boiler.ToString().Trim() == null)
            com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = Reg_No_Boiler.Trim();

        if (Name_Owner.ToString().Trim() == "" || Name_Owner.ToString().Trim() == null)
            com.Parameters.Add("@Name_Owner", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Name_Owner", SqlDbType.VarChar).Value = Name_Owner.Trim();

        if (Location.ToString().Trim() == "" || Location.ToString().Trim() == null)
            com.Parameters.Add("@Location", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Location", SqlDbType.VarChar).Value = Location.Trim();

        if (Date_Inpec_Desirable.ToString().Trim() == "" || Date_Inpec_Desirable.ToString().Trim() == null)
            com.Parameters.Add("@Date_Inpec_Desirable", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date_Inpec_Desirable", SqlDbType.DateTime).Value = cmf.convertDateIndia(Date_Inpec_Desirable.Trim());

        if (Desc_Boiler_Age.ToString().Trim() == "" || Desc_Boiler_Age.ToString().Trim() == null)
            com.Parameters.Add("@Desc_Boiler_Age", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Desc_Boiler_Age", SqlDbType.VarChar).Value = Desc_Boiler_Age.Trim();

        if (Makers_name.ToString().Trim() == "" || Makers_name.ToString().Trim() == null)
            com.Parameters.Add("@Makers_name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Makers_name", SqlDbType.VarChar).Value = Makers_name.Trim();

        if (Type_Boiler.ToString().Trim() == "" || Type_Boiler.ToString().Trim() == null || Type_Boiler.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Type_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type_Boiler", SqlDbType.VarChar).Value = Type_Boiler.Trim();

        if (Boiler_User_for.ToString().Trim() == "" || Boiler_User_for.ToString().Trim() == null || Boiler_User_for.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = Boiler_User_for.Trim();

        if (Boiler_ration.ToString().Trim() == "" || Boiler_ration.ToString().Trim() == null)
            com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = Boiler_ration.Trim();

        if (Place_Manfacture.ToString().Trim() == "" || Place_Manfacture.ToString().Trim() == null)
            com.Parameters.Add("@Place_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Place_Manfacture", SqlDbType.VarChar).Value = Place_Manfacture.Trim();

        if (Year_Manfacture.ToString().Trim() == "" || Year_Manfacture.ToString().Trim() == null)
            com.Parameters.Add("@Year_Manfacture", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Year_Manfacture", SqlDbType.VarChar).Value = Year_Manfacture.Trim();

        if (Allowed_Max_Presure.ToString().Trim() == "" || Allowed_Max_Presure.ToString().Trim() == null)
            com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = Allowed_Max_Presure.Trim();

        if (Econ_Maker_Number.ToString().Trim() == "" || Econ_Maker_Number.ToString().Trim() == null)
            com.Parameters.Add("@Econ_Maker_Number", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Econ_Maker_Number", SqlDbType.VarChar).Value = Econ_Maker_Number.Trim();

        if (Heating_Surface_boiler.ToString().Trim() == "" || Heating_Surface_boiler.ToString().Trim() == null)
            com.Parameters.Add("@Heating_Surface_boiler", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Heating_Surface_boiler", SqlDbType.VarChar).Value = Heating_Surface_boiler.Trim();

        if (Max_Conti_Evapron.ToString().Trim() == "" || Max_Conti_Evapron.ToString().Trim() == null)
            com.Parameters.Add("@Max_Conti_Evapron", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Max_Conti_Evapron", SqlDbType.VarChar).Value = Max_Conti_Evapron.Trim();

        if (Class_Erector.ToString().Trim() == "" || Class_Erector.ToString().Trim() == null)
            com.Parameters.Add("@Class_Erector", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Class_Erector", SqlDbType.VarChar).Value = Class_Erector.Trim();

        if (Name_of_Erector.ToString().Trim() == "" || Name_of_Erector.ToString().Trim() == null)
            com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = Name_of_Erector.Trim();

        if (State_Erector.ToString().Trim() == "" || State_Erector.ToString().Trim() == null || State_Erector.ToString().Trim() == "--Select--")
            com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = State_Erector.Trim();

        if (Max_Presure_Econ.ToString().Trim() == "" || Max_Presure_Econ.ToString().Trim() == null)
            com.Parameters.Add("@Max_Presure_Econ", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Max_Presure_Econ", SqlDbType.VarChar).Value = Max_Presure_Econ.Trim();

        if (Tot_Lenght_Steam_PipeLine.ToString().Trim() == "" || Tot_Lenght_Steam_PipeLine.ToString().Trim() == null)
            com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = Tot_Lenght_Steam_PipeLine.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (componentperson.ToString().Trim() == "" || componentperson.ToString().Trim() == null)
            com.Parameters.Add("@ComponentPerson", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ComponentPerson", SqlDbType.VarChar).Value = componentperson.Trim();

        if (inspectingauthority.ToString().Trim() == "" || inspectingauthority.ToString().Trim() == null)
            com.Parameters.Add("@InspectingAuthorityType", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectingAuthorityType", SqlDbType.VarChar).Value = inspectingauthority.Trim();

        if (nameofunit.ToString().Trim() == "" || nameofunit.ToString().Trim() == null)
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();

        if (PropintDistrictid.ToString().Trim() == "" || PropintDistrictid.ToString().Trim() == null || PropintDistrictid.Trim() == "--District--")
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = PropintDistrictid.Trim();

        if (PropintMandalid.ToString().Trim() == "" || PropintMandalid.ToString().Trim() == null || PropintMandalid.ToString().Trim() == "--Mandal--")
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = PropintMandalid.Trim();

        if (PropintVillageid.ToString().Trim() == "" || PropintVillageid.ToString().Trim() == null || PropintVillageid.ToString().Trim() == "--Village--")
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = PropintVillageid.Trim();

        if (regnoofsteampipeline.ToString().Trim() == "" || regnoofsteampipeline.ToString().Trim() == null)
            com.Parameters.Add("@regnoofsteampipeline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@regnoofsteampipeline", SqlDbType.VarChar).Value = regnoofsteampipeline.Trim();

        if (ur376.ToString().Trim() == "" || ur376.ToString().Trim() == null)
            com.Parameters.Add("@ur376", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ur376", SqlDbType.VarChar).Value = ur376.Trim();

        if (fee.ToString().Trim() == "" || fee.ToString().Trim() == null)
            com.Parameters.Add("@Fee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fee", SqlDbType.VarChar).Value = fee.Trim();

        if (repairerflag.ToString().Trim() == "" || repairerflag.ToString().Trim() == null)
            com.Parameters.Add("@repairerflag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@repairerflag", SqlDbType.VarChar).Value = repairerflag.Trim();

        if (repairername.ToString().Trim() == "" || repairername.ToString().Trim() == null)
            com.Parameters.Add("@repairername", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@repairername", SqlDbType.VarChar).Value = repairername.Trim();

        if (repairerclass.ToString().Trim() == "" || repairerclass.ToString().Trim() == null)
            com.Parameters.Add("@repairerclass", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@repairerclass", SqlDbType.VarChar).Value = repairerclass.Trim();


        if (thirdparttype.ToString().Trim() == "" || thirdparttype.ToString().Trim() == null)
            com.Parameters.Add("@thirdparttype", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@thirdparttype", SqlDbType.VarChar).Value = thirdparttype.Trim();

        if (feedetails.ToString().Trim() == "" || feedetails.ToString().Trim() == null)
            com.Parameters.Add("@feedetails", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@feedetails", SqlDbType.VarChar).Value = feedetails.Trim();

        if (modeofpayment.ToString().Trim() == "" || modeofpayment.ToString().Trim() == null)
            com.Parameters.Add("@modeofpayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@modeofpayment", SqlDbType.VarChar).Value = modeofpayment.Trim();




        //added by rainikar on 11-11-2020
        if (Boename.ToString().Trim() == "" || Boename.ToString().Trim() == null)
            com.Parameters.Add("@Boename", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Boename", SqlDbType.VarChar).Value = Boename.Trim();

        if (CertificateNo.ToString().Trim() == "" || CertificateNo.ToString().Trim() == null)
            com.Parameters.Add("@CertificateNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CertificateNo", SqlDbType.VarChar).Value = CertificateNo.Trim();

        if (Address.ToString().Trim() == "" || Address.ToString().Trim() == null)
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Address", SqlDbType.VarChar).Value = Address.Trim();

        if (MobileNo.ToString().Trim() == "" || MobileNo.ToString().Trim() == null)
            com.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = MobileNo.Trim();

        if (Emailid.ToString().Trim() == "" || Emailid.ToString().Trim() == null)
            com.Parameters.Add("@Emailid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Emailid", SqlDbType.VarChar).Value = Emailid.Trim();


        //end of new added columns(rajinikar)

        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }


    public DataSet GetdataofRENEWALBoiler(string intQuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofRENEWALBoilersDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetdataofBoilerCommon(string intQuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofBoilersDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesLabouractRenewal(string SerchVer, string LabourActId, string numberofEmployees, string CommencementDate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesLabour_Renewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();

            if (LabourActId.Trim() == "" || LabourActId.Trim() == null)
                da.SelectCommand.Parameters.Add("@LabourActId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@LabourActId", SqlDbType.VarChar).Value = LabourActId.ToString();

            if (numberofEmployees.ToString().Trim() == null)//|| numberofEmployees.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@NoOfEmployees", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@NoOfEmployees", SqlDbType.VarChar).Value = numberofEmployees.Trim();

            if (CommencementDate.ToString().Trim() == null)//|| numberofEmployees.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@CommencementDate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@CommencementDate", SqlDbType.VarChar).Value = CommencementDate.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public void InsertLabourRenewal(RenewalVo labourenvo)
    {

        try
        {
            SqlConnection connection = new SqlConnection(str);
            SqlTransaction transaction = null;
            connection.Open();
            transaction = connection.BeginTransaction();
            SqlCommand cmdEnj = new SqlCommand("[USP_INS_LABOUR_RENEWAL]", connection);
            cmdEnj.CommandType = CommandType.StoredProcedure;
            cmdEnj.Transaction = transaction;
            cmdEnj.Connection = connection;

            if (labourenvo.questionnaire_id != 0 && labourenvo.questionnaire_id != null)
            {
                cmdEnj.Parameters.AddWithValue("intQuessionaireid", SqlDbType.Int).Value = labourenvo.questionnaire_id;
            }

            if (labourenvo.Intenterprenurid != 0 && labourenvo.Intenterprenurid != null)
            {
                cmdEnj.Parameters.AddWithValue("@Intenterprenurid", SqlDbType.Int).Value = labourenvo.Intenterprenurid;
            }
            if (labourenvo.uidno != "" && labourenvo.uidno != null)
            {
                cmdEnj.Parameters.AddWithValue("@Uidno", SqlDbType.VarChar).Value = labourenvo.uidno;
            }
            if (labourenvo.stageid != 0 && labourenvo.stageid != null)
            {
                cmdEnj.Parameters.AddWithValue("@Stageid", SqlDbType.Int).Value = labourenvo.stageid;
            }
            if (labourenvo.renewalCaseType != "" && labourenvo.renewalCaseType != null)
            {
                cmdEnj.Parameters.AddWithValue("@renewalCaseType", SqlDbType.VarChar).Value = labourenvo.renewalCaseType;
            }
            if (labourenvo.actID != "" && labourenvo.actID != null)
            {
                cmdEnj.Parameters.AddWithValue("@actID", SqlDbType.VarChar).Value = labourenvo.actID;
            }
            if (labourenvo.ClassificationofEstablishment != "" && labourenvo.ClassificationofEstablishment != null)
            {
                cmdEnj.Parameters.AddWithValue("@ClassificationofEstablishment", SqlDbType.Int).Value = labourenvo.ClassificationofEstablishment;
            }
            if (labourenvo.CategoryofEstablishments != "" && labourenvo.CategoryofEstablishments != null)
            {
                cmdEnj.Parameters.AddWithValue("@CategoryofEstablishments", SqlDbType.Int).Value = labourenvo.CategoryofEstablishments;
            }
            if (labourenvo.Natureofbusiness != "" && labourenvo.Natureofbusiness != null)
            {
                cmdEnj.Parameters.AddWithValue("@Natureofbusiness", SqlDbType.VarChar).Value = labourenvo.Natureofbusiness;
            }
            if (labourenvo.Dateofcommencement != "" && labourenvo.Dateofcommencement != null)
            {
                cmdEnj.Parameters.AddWithValue("@Dateofcommencement", SqlDbType.VarChar).Value = cmf.convertDateIndia(labourenvo.Dateofcommencement);
            }
            if (labourenvo.employer_age != "" && labourenvo.employer_age != null)
            {
                cmdEnj.Parameters.AddWithValue("@employer_age", SqlDbType.Int).Value = labourenvo.employer_age;
            }
            if (labourenvo.employer_agent_so_do_wo != "" && labourenvo.employer_agent_so_do_wo != null)
            {
                cmdEnj.Parameters.AddWithValue("@employer_agent_so_do_wo", SqlDbType.VarChar).Value = labourenvo.employer_agent_so_do_wo;
            }
            if (labourenvo.employer_email != "" && labourenvo.employer_email != null)
            {
                cmdEnj.Parameters.AddWithValue("@employer_email", SqlDbType.VarChar).Value = labourenvo.employer_email;
            }
            if (labourenvo.employer_mobile != "" && labourenvo.employer_mobile != null)
            {
                cmdEnj.Parameters.AddWithValue("@employer_mobile", SqlDbType.VarChar).Value = labourenvo.employer_mobile;
            }
            if (labourenvo.employer_mobile != "" && labourenvo.employer_mobile != null)
            {
                cmdEnj.Parameters.AddWithValue("@employer_name", SqlDbType.VarChar).Value = labourenvo.employer_name;
            }
            if (labourenvo.employer_permanent_door != "" && labourenvo.employer_permanent_door != null)
            {
                cmdEnj.Parameters.AddWithValue("@employer_permanent_door", SqlDbType.VarChar).Value = labourenvo.employer_permanent_door;
            }
            if (labourenvo.employer_permanent_locality != "" && labourenvo.employer_permanent_locality != null)
            {
                cmdEnj.Parameters.AddWithValue("@employer_permanent_locality", SqlDbType.VarChar).Value = labourenvo.employer_permanent_locality;
            }
            if (labourenvo.employer_permanent_pincode != "" && labourenvo.employer_permanent_pincode != null)
            {
                cmdEnj.Parameters.AddWithValue("@employer_permanent_pincode", SqlDbType.VarChar).Value = labourenvo.employer_permanent_pincode;
            }
            if (labourenvo.establishment_name != "" && labourenvo.establishment_name != null)
            {
                cmdEnj.Parameters.AddWithValue("@establishment_name", SqlDbType.VarChar).Value = labourenvo.establishment_name;
            }
            if (labourenvo.establishment_postal_district != "" && labourenvo.establishment_postal_district != null)
            {
                cmdEnj.Parameters.AddWithValue("@establishment_postal_district", SqlDbType.Int).Value = labourenvo.establishment_postal_district;
            }
            if (labourenvo.establishment_postal_mandal != "" && labourenvo.establishment_postal_mandal != null)
            {
                cmdEnj.Parameters.AddWithValue("@establishment_postal_mandal", SqlDbType.Int).Value = labourenvo.establishment_postal_mandal;
            }
            if (labourenvo.establishment_postal_village != "" && labourenvo.establishment_postal_village != null)
            {
                cmdEnj.Parameters.AddWithValue("@establishment_postal_village", SqlDbType.Int).Value = labourenvo.establishment_postal_village;
            }
            if (labourenvo.establishment_postal_door != "" && labourenvo.establishment_postal_door != null)
            {
                cmdEnj.Parameters.AddWithValue("@establishment_postal_door", SqlDbType.VarChar).Value = labourenvo.establishment_postal_door;
            }
            if (labourenvo.establishment_postal_locality != "" && labourenvo.establishment_postal_locality != null)
            {
                cmdEnj.Parameters.AddWithValue("@establishment_postal_locality", SqlDbType.VarChar).Value = labourenvo.establishment_postal_locality;
            }
            if (labourenvo.establishment_postal_pincode != "" && labourenvo.establishment_postal_pincode != null)
            {
                cmdEnj.Parameters.AddWithValue("@establishment_postal_pincode", SqlDbType.VarChar).Value = labourenvo.establishment_postal_pincode;
            }
            if (labourenvo.manager_agent_age != "" && labourenvo.manager_agent_age != null)
            {
                cmdEnj.Parameters.AddWithValue("@manager_agent_age", SqlDbType.Int).Value = labourenvo.manager_agent_age;
            }
            if (labourenvo.manager_agent_name != "" && labourenvo.manager_agent_name != null)
            {
                cmdEnj.Parameters.AddWithValue("@manager_agent_name", SqlDbType.VarChar).Value = labourenvo.manager_agent_name;
            }
            if (labourenvo.manager_agent_so_do_wo != "" && labourenvo.manager_agent_so_do_wo != null)
            {
                cmdEnj.Parameters.AddWithValue("@manager_agent_so_do_wo", SqlDbType.VarChar).Value = labourenvo.manager_agent_so_do_wo;
            }
            if (labourenvo.manager_agent_Mobile != "" && labourenvo.manager_agent_Mobile != null)
            {
                cmdEnj.Parameters.AddWithValue("@manager_agent_Mobile", SqlDbType.VarChar).Value = labourenvo.manager_agent_Mobile;
            }
            if (labourenvo.manager_agent_Email != "" && labourenvo.manager_agent_Email != null)
            {
                cmdEnj.Parameters.AddWithValue("@manager_agent_Email", SqlDbType.VarChar).Value = labourenvo.manager_agent_Email;
            }
            if (labourenvo.max_employees_aday != "" && labourenvo.max_employees_aday != null)
            {
                cmdEnj.Parameters.AddWithValue("@max_employees_aday", SqlDbType.VarChar).Value = labourenvo.max_employees_aday;
            }
            if (labourenvo.AdultMale != 0 && labourenvo.AdultMale != null)
            {
                cmdEnj.Parameters.AddWithValue("@AdultMale", SqlDbType.Int).Value = labourenvo.AdultMale;
            }
            if (labourenvo.AdultFemale != 0 && labourenvo.AdultFemale != null)
            {
                cmdEnj.Parameters.AddWithValue("@AdultFemale", SqlDbType.Int).Value = labourenvo.AdultFemale;
            }
            if (labourenvo.YoungMale != 0 && labourenvo.YoungMale != null)
            {
                cmdEnj.Parameters.AddWithValue("@YoungMale", SqlDbType.Int).Value = labourenvo.YoungMale;
            }
            if (labourenvo.YoungFemale != 0 && labourenvo.YoungFemale != null)
            {
                cmdEnj.Parameters.AddWithValue("@YoungFemale", SqlDbType.Int).Value = labourenvo.YoungFemale;
            }
            if (labourenvo.TotalAdult != 0 && labourenvo.TotalAdult != null)
            {
                cmdEnj.Parameters.AddWithValue("@TotalAdult", SqlDbType.Int).Value = labourenvo.TotalAdult;
            }
            if (labourenvo.TotalYoung != 0 && labourenvo.TotalYoung != null)
            {
                cmdEnj.Parameters.AddWithValue("@TotalYoung", SqlDbType.Int).Value = labourenvo.TotalYoung;
            }
            if (labourenvo.newPenalityAmount2017 != 0 && labourenvo.newPenalityAmount2017 != null)
            {
                cmdEnj.Parameters.AddWithValue("@newPenalityAmount2017", SqlDbType.Int).Value = labourenvo.newPenalityAmount2017;
            }
            if (labourenvo.newPenalityYears2017 != 0 && labourenvo.newPenalityYears2017 != null)
            {
                cmdEnj.Parameters.AddWithValue("@newPenalityYears2017", SqlDbType.Int).Value = labourenvo.newPenalityYears2017;
            }
            if (labourenvo.newRegistrationAmount2017 != 0 && labourenvo.newRegistrationAmount2017 != null)
            {
                cmdEnj.Parameters.AddWithValue("@newRegistrationAmount2017", SqlDbType.Int).Value = labourenvo.newRegistrationAmount2017;
            }
            if (labourenvo.newRegistrationYears2017 != 0 && labourenvo.newRegistrationYears2017 != null)
            {
                cmdEnj.Parameters.AddWithValue("@newRegistrationYears2017", SqlDbType.Int).Value = labourenvo.newRegistrationYears2017;
            }
            if (labourenvo.oldPenalityAmount2016 != 0 && labourenvo.oldPenalityAmount2016 != null)
            {
                cmdEnj.Parameters.AddWithValue("@oldPenalityAmount2016", SqlDbType.Int).Value = labourenvo.oldPenalityAmount2016;
            }
            if (labourenvo.oldPenalityYears2016 != 0 && labourenvo.oldPenalityYears2016 != null)
            {
                cmdEnj.Parameters.AddWithValue("@oldPenalityYears2016", SqlDbType.Int).Value = labourenvo.oldPenalityYears2016;
            }
            if (labourenvo.oldRegistrationAmount2016 != 0 && labourenvo.oldRegistrationAmount2016 != null)
            {
                cmdEnj.Parameters.AddWithValue("@oldRegistrationAmount2016", SqlDbType.Int).Value = labourenvo.oldRegistrationAmount2016;
            }
            if (labourenvo.oldRegistrationYears2016 != 0 && labourenvo.oldRegistrationYears2016 != null)
            {
                cmdEnj.Parameters.AddWithValue("@oldRegistrationYears2016", SqlDbType.Int).Value = labourenvo.oldRegistrationYears2016;
            }
            if (labourenvo.penality_percentage != 0 && labourenvo.penality_percentage != null)
            {
                cmdEnj.Parameters.AddWithValue("@penality_percentage", SqlDbType.Int).Value = labourenvo.penality_percentage;
            }
            if (labourenvo.penality_years != 0 && labourenvo.penality_years != null)
            {
                cmdEnj.Parameters.AddWithValue("@penality_years", SqlDbType.Int).Value = labourenvo.penality_years;
            }
            if (labourenvo.previous_Renewaldate != "" && labourenvo.previous_Renewaldate != null)
            {
                cmdEnj.Parameters.AddWithValue("@previous_Renewaldate", SqlDbType.VarChar).Value = cmf.convertDateIndia(labourenvo.previous_Renewaldate);
            }
            if (labourenvo.previous_RenewalYear != "" && labourenvo.previous_RenewalYear != null)
            {
                cmdEnj.Parameters.AddWithValue("@previous_RenewalYear", SqlDbType.Int).Value = labourenvo.previous_RenewalYear;
            }
            if (labourenvo.previous_certificate_valid_from != "" && labourenvo.previous_certificate_valid_from != null)
            {
                cmdEnj.Parameters.AddWithValue("@previous_certificate_valid_from", SqlDbType.VarChar).Value = cmf.convertDateIndia(labourenvo.previous_certificate_valid_from);
            }
            if (labourenvo.previous_certificate_valid_to != "" && labourenvo.previous_certificate_valid_to != null)
            {
                cmdEnj.Parameters.AddWithValue("@previous_certificate_valid_to", SqlDbType.VarChar).Value = cmf.convertDateIndia(labourenvo.previous_certificate_valid_to);
            }
            if (labourenvo.previous_registration_no != "" && labourenvo.previous_registration_no != null)
            {
                cmdEnj.Parameters.AddWithValue("@previous_registration_no", SqlDbType.VarChar).Value = labourenvo.previous_registration_no;
            }
            if (labourenvo.compound_fee != 0 && labourenvo.compound_fee != null)
            {
                cmdEnj.Parameters.AddWithValue("@compound_fee", SqlDbType.Int).Value = labourenvo.compound_fee;
            }
            if (labourenvo.registration_fee != 0 && labourenvo.registration_fee != null)
            {
                cmdEnj.Parameters.AddWithValue("@registration_fee", SqlDbType.Int).Value = labourenvo.registration_fee;
            }
            if (labourenvo.registration_years != 0 && labourenvo.registration_years != null)
            {
                cmdEnj.Parameters.AddWithValue("@registration_years", SqlDbType.Int).Value = labourenvo.registration_years;
            }
            //if (labourenvo.renewalExpired != "" && labourenvo.renewalExpired != null)
            //{
            cmdEnj.Parameters.AddWithValue("@renewalExpired", SqlDbType.Int).Value = labourenvo.renewalExpired;
            //}
            if (labourenvo.total_amount_payable != 0 && labourenvo.total_amount_payable != null)
            {
                cmdEnj.Parameters.AddWithValue("@total_amount_payable", SqlDbType.Int).Value = labourenvo.total_amount_payable;
            }
            if (labourenvo.total_penality_amount != 0 && labourenvo.total_penality_amount != null)
            {
                cmdEnj.Parameters.AddWithValue("@total_penality_amount", SqlDbType.Int).Value = labourenvo.total_penality_amount;
            }
            if (labourenvo.total_registration_fee != 0 && labourenvo.total_registration_fee != null)
            {
                cmdEnj.Parameters.AddWithValue("@total_registration_fee", SqlDbType.Int).Value = labourenvo.total_registration_fee;
            }
            if (labourenvo.totalAmount != "" && labourenvo.totalAmount != null)
            {
                cmdEnj.Parameters.AddWithValue("@totalAmount", SqlDbType.VarChar).Value = labourenvo.totalAmount;
            }
            if (labourenvo.unpaid_balance_welfare != 0 && labourenvo.unpaid_balance_welfare != null)
            {
                cmdEnj.Parameters.AddWithValue("@unpaid_balance_welfare", SqlDbType.VarChar).Value = labourenvo.unpaid_balance_welfare;
            }
            if (labourenvo.valid_from_date != "" && labourenvo.valid_from_date != null)
            {
                cmdEnj.Parameters.AddWithValue("@valid_from_date", SqlDbType.VarChar).Value = cmf.convertDateIndia(labourenvo.valid_from_date);
            }
            if (labourenvo.valid_to_date != "" && labourenvo.valid_to_date != null)
            {
                cmdEnj.Parameters.AddWithValue("@valid_to_date", SqlDbType.VarChar).Value = cmf.convertDateIndia(labourenvo.valid_to_date);
            }
            if (labourenvo.Created_by != "" && labourenvo.Created_by != null)
            {
                cmdEnj.Parameters.AddWithValue("@Created_by", SqlDbType.Int).Value = labourenvo.Created_by;
            }

            cmdEnj.ExecuteNonQuery();
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            // cmdEnj.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet Getenterpreneurdetailsrenewals(string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getQuesssionerDetailsRen", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (createdby.Trim() == "" || createdby.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = createdby.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public int InsertRenewalEnterprenurDetails(
    //   string NameofIndustrialUnder, string NameofthePromoter, string SoWo, string intDistrictid, string intMandalid, string intVillageid, string StreetName,
    //    string Door_No, string Pincode, string MobileNumber, string Email, string designation, string age, string status, string intCFOEnterpid, string Uid_No, string Created_by, string intQuessionaireid,
    //    string Sector_Ent, string Tot_PrjCost, string Val_Land, string Val_Build, string Val_Plant, string Ent_is, string CurrencyType,
    //    string Val_Land_Actul, string Val_Build_Actul, string Val_Plant_Actul, string induamount, string intLineofActivity, string Pol_Category)
    //{
    //    try
    //    {

    //        //con.OpenConnection();
    //        //SqlDataAdapter myDataAdapter;
    //        //SqlCommand com = new SqlCommand();
    //        //com.CommandType = CommandType.StoredProcedure;
    //        //myDataAdapter = new SqlDataAdapter("[insertEnterPrenuerRenewaldetails]", con.GetConnection);
    //        //myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "insertEnterPrenuerRenewaldetails";

    //        if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
    //        {
    //            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = Uid_No.Trim();
    //        }

    //        if (NameofIndustrialUnder.Trim() == "" || NameofIndustrialUnder.Trim() == null)
    //        {
    //            com.Parameters.Add("@INDUSNAME", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@INDUSNAME", SqlDbType.VarChar).Value = NameofIndustrialUnder.Trim();
    //        }

    //        if (NameofthePromoter.Trim() == "" || NameofthePromoter.Trim() == null)
    //        {
    //            com.Parameters.Add("@PROMOTORNAME", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@PROMOTORNAME", SqlDbType.VarChar).Value = NameofthePromoter.Trim();
    //        }

    //        if (SoWo.Trim() == "" || SoWo.Trim() == null)
    //        {
    //            com.Parameters.Add("@SONOF", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@SONOF", SqlDbType.VarChar).Value = SoWo.Trim();
    //        }

    //        if (age.Trim() == "" || age.Trim() == null || age.Trim() == "--Select--")
    //        {
    //            com.Parameters.Add("@AGE", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@AGE", SqlDbType.VarChar).Value = age.Trim();
    //        }

    //        if (Door_No.Trim() == "" || Door_No.Trim() == null || Door_No.Trim() == "--Select--")
    //        {
    //            com.Parameters.Add("@SURVEYNO", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@SURVEYNO", SqlDbType.VarChar).Value = Door_No.Trim();
    //        }

    //        if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
    //        {
    //            com.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = intDistrictid.Trim();
    //        }

    //        if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid.Trim() == "--Select--")
    //        {
    //            com.Parameters.Add("@VILLAGE", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@VILLAGE", SqlDbType.VarChar).Value = intVillageid.Trim();
    //        }

    //        if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid.Trim() == "--Select--")
    //        {
    //            com.Parameters.Add("@MANDAL", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@MANDAL", SqlDbType.VarChar).Value = intMandalid.Trim();
    //        }


    //        if (StreetName.Trim() == "" || StreetName.Trim() == null)
    //        {
    //            com.Parameters.Add("@EXTENTAREA", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@EXTENTAREA", SqlDbType.VarChar).Value = StreetName.Trim();
    //        }
    //        if (Pincode.Trim() == "" || Pincode == null)
    //        {
    //            com.Parameters.Add("@PINCODE", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@PINCODE", SqlDbType.VarChar).Value = Pincode.Trim();
    //        }
    //        //if (Address.Trim() == "" || Address == null)
    //        //{
    //        //    com.Parameters.Add("@ADDRESS", SqlDbType.VarChar).Value = DBNull.Value;
    //        //}
    //        //else
    //        //{
    //        //    com.Parameters.Add("@ADDRESS", SqlDbType.VarChar).Value = Address.Trim();
    //        //}
    //        if (designation.Trim() == "" || designation.Trim() == null)
    //        {
    //            com.Parameters.Add("@DESIGNATION", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@DESIGNATION", SqlDbType.VarChar).Value = designation.Trim();
    //        }
    //        if (MobileNumber.Trim() == "" || MobileNumber.Trim() == null)
    //        {
    //            com.Parameters.Add("@MOBILENO", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@MOBILENO", SqlDbType.VarChar).Value = MobileNumber.Trim();
    //        }
    //        if (Email.Trim() == "" || Email.Trim() == null)
    //        {
    //            com.Parameters.Add("@EMAILID", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@EMAILID", SqlDbType.VarChar).Value = Email.Trim();
    //        }
    //        if (Created_by.Trim() == "" || Created_by.Trim() == null)
    //        {
    //            com.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = Created_by.Trim();
    //        }

    //        if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
    //        {
    //            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();
    //        }

    //        //---------------------------------------------------------------------------------------------------------------
    //        if (Sector_Ent.Trim() == "" || Sector_Ent.Trim() == null)
    //        {
    //            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();
    //        }
    //        if (Val_Land.Trim() == "" || Val_Land.Trim() == null)
    //        {
    //            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();
    //        }

    //        if (Val_Build.Trim() == "" || Val_Build.Trim() == null)
    //        {
    //            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();
    //        }
    //        if (Val_Plant.Trim() == "" || Val_Plant.Trim() == null)
    //        {
    //            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();
    //        }
    //        if (Tot_PrjCost.Trim() == "" || Tot_PrjCost.Trim() == null)
    //        {
    //            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();
    //        }
    //        if (Ent_is.Trim() == "" || Ent_is.Trim() == null)
    //        {
    //            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = Ent_is.Trim();
    //        }
    //        if (CurrencyType.Trim() == "" || CurrencyType.Trim() == null)
    //        {
    //            com.Parameters.Add("@CurrencyType", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@CurrencyType", SqlDbType.VarChar).Value = CurrencyType.Trim();
    //        }
    //        if (Val_Land_Actul.Trim() == "" || Val_Land_Actul.Trim() == null)
    //        {
    //            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = Val_Land_Actul.Trim();
    //        }
    //        if (Val_Build_Actul.Trim() == "" || Val_Build_Actul.Trim() == null)
    //        {
    //            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = Val_Build_Actul.Trim();
    //        }
    //        if (Val_Plant_Actul.Trim() == "" || Val_Plant_Actul.Trim() == null)
    //        {
    //            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = Val_Plant_Actul.Trim();
    //        }
    //        if (induamount.Trim() == "" || induamount.Trim() == null)
    //        {
    //            com.Parameters.Add("@induamount", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@induamount", SqlDbType.VarChar).Value = induamount.Trim();
    //        }
    //        if (intLineofActivity.Trim() == "" || intLineofActivity.Trim() == null)
    //        {
    //            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();
    //        }
    //        if (Pol_Category.Trim() == "" || Pol_Category.Trim() == null)
    //        {
    //            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
    //        }
    //        else
    //        {
    //            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();
    //        }
    //        con.OpenConnection();
    //        com.Connection = con.GetConnection;

    //        try
    //        {
    //            //return Convert.ToInt32(com.ExecuteScalar());
    //            //if (returnvalue == DBNull.Value || returnvalue == null)
    //            //    return 0;
    //            //else
    //            //    return Convert.ToInt32(returnvalue);

    //            object returnvalue = com.ExecuteScalar();
    //            if (returnvalue == DBNull.Value || returnvalue == null)
    //                return 0;
    //            else
    //                return Convert.ToInt32(returnvalue);

    //        }
    //        catch (Exception ex)
    //        {
    //            throw ex;
    //            //return 0;
    //            return 0;
    //        }
    //        finally
    //        {
    //            com.Dispose();
    //            con.CloseConnection();
    //        }

    //    }
    //    catch (Exception ex)
    //    {
    //        con.CloseConnection();
    //        throw ex;

    //    }
    //    finally
    //    {

    //        con.CloseConnection();

    //    }
    //}

    //public int insertRenewalDepartmentAprroval(string intQuessionaireid, string intDeptid, string intApprovalid, string IsPayment, string Created_by, string IsOffline, string tourismflag)
    //{

    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "insDepartmentApprovalsRenewals";

    //    if (intQuessionaireid == "" || intQuessionaireid == null)
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

    //    if (intDeptid == "" || intDeptid == null)
    //        com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

    //    if (intApprovalid == "" || intApprovalid == null)
    //        com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

    //    //if (Approval_Fee == "" || Approval_Fee == null)
    //    //    com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
    //    //else
    //    //    com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = Approval_Fee.Trim();

    //    if (IsPayment == "" || IsPayment == null)
    //        com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

    //    if (Created_by == "" || Created_by == null)
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    if (IsOffline == "" || IsOffline == null)
    //        com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();


    //    if (tourismflag == "" || tourismflag == null)
    //        com.Parameters.Add("@tourismflag", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@tourismflag", SqlDbType.VarChar).Value = tourismflag.Trim();


    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }


    //}
    public int InsertRenewalEnterprenurDetails(
      string NameofIndustrialUnder, string NameofthePromoter, string SoWo, string intDistrictid, string intMandalid, string intVillageid, string StreetName,
       string Door_No, string Pincode, string MobileNumber, string Email, string designation, string age, string status, string intCFOEnterpid, string Uid_No, string Created_by, string intQuessionaireid,
       string Sector_Ent, string Tot_PrjCost, string Val_Land, string Val_Build, string Val_Plant, string Ent_is, string CurrencyType,
       string Val_Land_Actul, string Val_Build_Actul, string Val_Plant_Actul, string induamount, string intLineofActivity, string Pol_Category, string Commissionerate, string Pol_Zone, string Pol_Division, string Pol_Station, string Tra_Station, string Tra_Division, string Tra_Police, string PoliceNoc)
    {
        try
        {

            //con.OpenConnection();
            //SqlDataAdapter myDataAdapter;
            //SqlCommand com = new SqlCommand();
            //com.CommandType = CommandType.StoredProcedure;
            //myDataAdapter = new SqlDataAdapter("[insertEnterPrenuerRenewaldetails]", con.GetConnection);
            //myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "insertEnterPrenuerRenewaldetails";

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
            {
                com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = Uid_No.Trim();
            }

            if (NameofIndustrialUnder.Trim() == "" || NameofIndustrialUnder.Trim() == null)
            {
                com.Parameters.Add("@INDUSNAME", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@INDUSNAME", SqlDbType.VarChar).Value = NameofIndustrialUnder.Trim();
            }

            if (NameofthePromoter.Trim() == "" || NameofthePromoter.Trim() == null)
            {
                com.Parameters.Add("@PROMOTORNAME", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@PROMOTORNAME", SqlDbType.VarChar).Value = NameofthePromoter.Trim();
            }

            if (SoWo.Trim() == "" || SoWo.Trim() == null)
            {
                com.Parameters.Add("@SONOF", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@SONOF", SqlDbType.VarChar).Value = SoWo.Trim();
            }

            if (age.Trim() == "" || age.Trim() == null || age.Trim() == "--Select--")
            {
                com.Parameters.Add("@AGE", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@AGE", SqlDbType.VarChar).Value = age.Trim();
            }

            if (Door_No.Trim() == "" || Door_No.Trim() == null || Door_No.Trim() == "--Select--")
            {
                com.Parameters.Add("@SURVEYNO", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@SURVEYNO", SqlDbType.VarChar).Value = Door_No.Trim();
            }

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
            {
                com.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = intDistrictid.Trim();
            }

            if (intVillageid.Trim() == "" || intVillageid.Trim() == null || intVillageid.Trim() == "--Select--")
            {
                com.Parameters.Add("@VILLAGE", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@VILLAGE", SqlDbType.VarChar).Value = intVillageid.Trim();
            }

            if (intMandalid.Trim() == "" || intMandalid.Trim() == null || intMandalid.Trim() == "--Select--")
            {
                com.Parameters.Add("@MANDAL", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@MANDAL", SqlDbType.VarChar).Value = intMandalid.Trim();
            }


            if (StreetName.Trim() == "" || StreetName.Trim() == null)
            {
                com.Parameters.Add("@EXTENTAREA", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@EXTENTAREA", SqlDbType.VarChar).Value = StreetName.Trim();
            }
            if (Pincode.Trim() == "" || Pincode == null)
            {
                com.Parameters.Add("@PINCODE", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@PINCODE", SqlDbType.VarChar).Value = Pincode.Trim();
            }
            //if (Address.Trim() == "" || Address == null)
            //{
            //    com.Parameters.Add("@ADDRESS", SqlDbType.VarChar).Value = DBNull.Value;
            //}
            //else
            //{
            //    com.Parameters.Add("@ADDRESS", SqlDbType.VarChar).Value = Address.Trim();
            //}
            if (designation.Trim() == "" || designation.Trim() == null)
            {
                com.Parameters.Add("@DESIGNATION", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@DESIGNATION", SqlDbType.VarChar).Value = designation.Trim();
            }
            if (MobileNumber.Trim() == "" || MobileNumber.Trim() == null)
            {
                com.Parameters.Add("@MOBILENO", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@MOBILENO", SqlDbType.VarChar).Value = MobileNumber.Trim();
            }
            if (Email.Trim() == "" || Email.Trim() == null)
            {
                com.Parameters.Add("@EMAILID", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@EMAILID", SqlDbType.VarChar).Value = Email.Trim();
            }
            if (Created_by.Trim() == "" || Created_by.Trim() == null)
            {
                com.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = Created_by.Trim();
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
            {
                com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();
            }

            //---------------------------------------------------------------------------------------------------------------
            if (Sector_Ent.Trim() == "" || Sector_Ent.Trim() == null)
            {
                com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();
            }
            if (Val_Land.Trim() == "" || Val_Land.Trim() == null)
            {
                com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();
            }

            if (Val_Build.Trim() == "" || Val_Build.Trim() == null)
            {
                com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();
            }
            if (Val_Plant.Trim() == "" || Val_Plant.Trim() == null)
            {
                com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();
            }
            if (Tot_PrjCost.Trim() == "" || Tot_PrjCost.Trim() == null)
            {
                com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();
            }
            if (Ent_is.Trim() == "" || Ent_is.Trim() == null)
            {
                com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = Ent_is.Trim();
            }
            if (CurrencyType.Trim() == "" || CurrencyType.Trim() == null)
            {
                com.Parameters.Add("@CurrencyType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@CurrencyType", SqlDbType.VarChar).Value = CurrencyType.Trim();
            }
            if (Val_Land_Actul.Trim() == "" || Val_Land_Actul.Trim() == null)
            {
                com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = Val_Land_Actul.Trim();
            }
            if (Val_Build_Actul.Trim() == "" || Val_Build_Actul.Trim() == null)
            {
                com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = Val_Build_Actul.Trim();
            }
            if (Val_Plant_Actul.Trim() == "" || Val_Plant_Actul.Trim() == null)
            {
                com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = Val_Plant_Actul.Trim();
            }
            if (induamount.Trim() == "" || induamount.Trim() == null)
            {
                com.Parameters.Add("@induamount", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@induamount", SqlDbType.VarChar).Value = induamount.Trim();
            }
            if (intLineofActivity.Trim() == "" || intLineofActivity.Trim() == null)
            {
                com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = intLineofActivity.Trim();
            }
            if (Pol_Category.Trim() == "" || Pol_Category.Trim() == null)
            {
                com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();
            }
            if (Commissionerate.Trim() == "" || Commissionerate.Trim() == null)
            {
                com.Parameters.Add("@Commissionerate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Commissionerate", SqlDbType.VarChar).Value = Commissionerate.Trim();
            }
            if (Pol_Zone.Trim() == "" || Pol_Zone.Trim() == null)
            {
                com.Parameters.Add("@Pol_Zone", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Pol_Zone", SqlDbType.VarChar).Value = Pol_Zone.Trim();
            }
            if (Pol_Division.Trim() == "" || Pol_Division.Trim() == null)
            {
                com.Parameters.Add("@Pol_Division", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Pol_Division", SqlDbType.VarChar).Value = Pol_Division.Trim();
            }
            if (Pol_Station.Trim() == "" || Pol_Station.Trim() == null)
            {
                com.Parameters.Add("@Pol_Station", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Pol_Station", SqlDbType.VarChar).Value = Pol_Station.Trim();
            }
            if (Tra_Station.Trim() == "" || Tra_Station.Trim() == null)
            {
                com.Parameters.Add("@Tra_Station", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Tra_Station", SqlDbType.VarChar).Value = Tra_Station.Trim();
            }
            if (Tra_Division.Trim() == "" || Tra_Division.Trim() == null)
            {
                com.Parameters.Add("@Tra_Division", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Tra_Division", SqlDbType.VarChar).Value = Tra_Division.Trim();
            }
            if (Tra_Police.Trim() == "" || Tra_Police.Trim() == null)
            {
                com.Parameters.Add("@Tra_Police", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@Tra_Police", SqlDbType.VarChar).Value = Tra_Police.Trim();
            }
            if (PoliceNoc.Trim() == "" || PoliceNoc.Trim() == null)
            {
                com.Parameters.Add("@PoliceNoc", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                com.Parameters.Add("@PoliceNoc", SqlDbType.VarChar).Value = PoliceNoc.Trim();
            }

            con.OpenConnection();
            com.Connection = con.GetConnection;

            try
            {
                //return Convert.ToInt32(com.ExecuteScalar());
                //if (returnvalue == DBNull.Value || returnvalue == null)
                //    return 0;
                //else
                //    return Convert.ToInt32(returnvalue);

                object returnvalue = com.ExecuteScalar();
                if (returnvalue == DBNull.Value || returnvalue == null)
                    return 0;
                else
                    return Convert.ToInt32(returnvalue);

            }
            catch (Exception ex)
            {
                throw ex;
                //return 0;
                return 0;
            }
            finally
            {
                com.Dispose();
                con.CloseConnection();
            }

        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }
    }

    public int insertRenewalDepartmentAprroval(string intQuessionaireid, string intDeptid, string intApprovalid, string IsPayment, string Created_by, string IsOffline, string tourismflag)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insDepartmentApprovalsRenewals";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        //if (Approval_Fee == "" || Approval_Fee == null)
        //    com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = Approval_Fee.Trim();

        if (IsPayment == "" || IsPayment == null)
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (IsOffline == "" || IsOffline == null)
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();


        if (tourismflag == "" || tourismflag == null)
            com.Parameters.Add("@tourismflag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@tourismflag", SqlDbType.VarChar).Value = tourismflag.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet RetriveCinematographicDetailsRenewal(string intCFOEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCinematoographicLicenseDetailsRenewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public int InsertCinematographicLicenseDetailsRenewal(string intQuessionaireCFOid, string intCFOEnterpid, string ExpYear, string Fileno_9B,
    string Rererancedate, string LongevityCertificateDate, string ElectricalCertificateDate, string NocDate, string LicensePeriod,
    string TheatreType, string Noofscreens, string Noofshows, string Commissionerate, string Zone, string Division, string Policestation,
    string TrafficZone, string TrafficDivision, string TrafficPolicestation, string cinemalicenseid, string Created_by, List<Screendetails> lstscreendetails)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "SP_INSERT_CINEMATOGRAPHICLICENSE_DETAILS_RENEWAL";
        String FileNumber = "2";

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

        if (ExpYear.ToString().Trim() == "0" || ExpYear.ToString().Trim() == null || ExpYear.ToString().Trim() == "--Select--")
            com.Parameters.Add("@ExpYear", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ExpYear", SqlDbType.VarChar).Value = ExpYear.Trim();

        if (Fileno_9B.ToString().Trim() == "" || Fileno_9B.ToString().Trim() == null)
            com.Parameters.Add("@Fileno_9B", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fileno_9B", SqlDbType.VarChar).Value = Fileno_9B.Trim();

        if (Rererancedate.ToString().Trim() == "" || Rererancedate.ToString().Trim() == null)
            com.Parameters.Add("@Rererancedate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Rererancedate", SqlDbType.DateTime).Value = Rererancedate.Trim();

        if (LongevityCertificateDate.ToString().Trim() == "" || LongevityCertificateDate.ToString().Trim() == null)
            com.Parameters.Add("@LongevityCertificateDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@LongevityCertificateDate", SqlDbType.DateTime).Value = LongevityCertificateDate.Trim();

        if (ElectricalCertificateDate.ToString().Trim() == "" || ElectricalCertificateDate.ToString().Trim() == null)
            com.Parameters.Add("@ElectricalCertificateDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@ElectricalCertificateDate", SqlDbType.DateTime).Value = ElectricalCertificateDate.Trim();

        if (NocDate.ToString().Trim() == "" || NocDate.ToString().Trim() == null)
            com.Parameters.Add("@NocDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@NocDate", SqlDbType.DateTime).Value = NocDate.Trim();

        if (LicensePeriod.ToString().Trim() == "0" || LicensePeriod.ToString().Trim() == null || LicensePeriod.ToString().Trim() == "--Select--")
            com.Parameters.Add("@LicensePeriod", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LicensePeriod", SqlDbType.VarChar).Value = LicensePeriod.Trim();

        if (TheatreType.ToString().Trim() == "" || TheatreType.ToString().Trim() == null)
            com.Parameters.Add("@TheatreType", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TheatreType", SqlDbType.VarChar).Value = TheatreType.Trim();

        if (Noofscreens.ToString().Trim() == "" || Noofscreens.ToString().Trim() == null)
            com.Parameters.Add("@Noofscreens", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Noofscreens", SqlDbType.VarChar).Value = Noofscreens.Trim();

        if (Noofshows.ToString().Trim() == "" || Noofshows.ToString().Trim() == null)
            com.Parameters.Add("@Noofshows", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Noofshows", SqlDbType.VarChar).Value = Noofshows.Trim();

        if (Commissionerate.ToString().Trim() == "0" || Commissionerate.ToString().Trim() == null || Commissionerate.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Commissionerate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Commissionerate", SqlDbType.VarChar).Value = Commissionerate.Trim();

        if (Zone.ToString().Trim() == "0" || Zone.ToString().Trim() == null || Zone.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Zone", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Zone", SqlDbType.VarChar).Value = Zone.Trim();

        if (Division.ToString().Trim() == "0" || Division.ToString().Trim() == null || Division.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Division", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Division", SqlDbType.VarChar).Value = Division.Trim();

        if (Policestation.ToString().Trim() == "0" || Policestation.ToString().Trim() == null || Policestation.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Policestation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Policestation", SqlDbType.VarChar).Value = Policestation.Trim();

        if (TrafficZone.ToString().Trim() == "0" || TrafficZone.ToString().Trim() == null || TrafficZone.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TrafficZone", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TrafficZone", SqlDbType.VarChar).Value = TrafficZone.Trim();

        if (TrafficDivision.ToString().Trim() == "0" || TrafficDivision.ToString().Trim() == null || TrafficDivision.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TrafficDivision", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TrafficDivision", SqlDbType.VarChar).Value = TrafficDivision.Trim();

        if (TrafficPolicestation.ToString().Trim() == "0" || TrafficPolicestation.ToString().Trim() == null || TrafficPolicestation.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TrafficPolicestation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TrafficPolicestation", SqlDbType.VarChar).Value = TrafficPolicestation.Trim();


        if (cinemalicenseid.ToString().Trim() == "" || cinemalicenseid.ToString().Trim() == null)
            com.Parameters.Add("@cinemalicenseid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@cinemalicenseid", SqlDbType.VarChar).Value = cinemalicenseid.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();
        if (FileNumber.ToString().Trim() == "" || FileNumber.ToString().Trim() == null)
            com.Parameters.Add("@File_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_No", SqlDbType.VarChar).Value = FileNumber.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {


            int n = Convert.ToInt32(com.ExecuteScalar());


            if (n > 0)
            {
                int valid = 0;
                con.OpenConnection();
                SqlCommand cmd = null;

                foreach (Screendetails fromvo in lstscreendetails)
                {
                    cmd = new SqlCommand("USP_INSERT_ScreenDetails_Renewal", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@intQuessionaireCFOid", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@intCFEEnterpid", Convert.ToString(intCFOEnterpid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@ScreenNO", Convert.ToString(fromvo.ScreenNO));
                    cmd.Parameters.AddWithValue("@SeatCapacity", Convert.ToString(fromvo.SeatCapacity));
                    cmd.Parameters.AddWithValue("@ScreenFee", Convert.ToString(fromvo.ScreenFee));
                    cmd.Parameters.AddWithValue("@TotalFee", Convert.ToString(fromvo.TotalFee));

                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(fromvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }


            }


            //object returnvalue = com.ExecuteScalar();
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            return n;

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int UpdDepartmentRenewalAprrovalNew(string intQuessionaireid, string intDeptid, string intApprovalid, string IsPayment, string Created_by, string IsOffline)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdDepartmentRenewalAprrovalNew";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        //if (Approval_Fee == "" || Approval_Fee == null)
        //    com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = Approval_Fee.Trim();

        if (IsPayment == "" || IsPayment == null)
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (IsOffline == "" || IsOffline == null)
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetQuestionaryRenewalsAprovalsApplyData(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQuestionaryRenewalsAprovalsApplyData", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowRenewalQuestionaries(string Created_by, string INTAPPLICATIONID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowRenewalQuestionaries", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();

            if (INTAPPLICATIONID.Trim() == "" || INTAPPLICATIONID.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTAPPLICATIONID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@INTAPPLICATIONID", SqlDbType.VarChar).Value = INTAPPLICATIONID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getdataofidentityREN(string intQuessioneryid, string deptid)
    {


        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("GetDeptOrderREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessioneryid.Trim() == "" || intQuessioneryid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = intQuessioneryid.ToString();



            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

        //}



    }

    public DataSet getdataofRemewalDashboard(string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("USP_GET_LIST_APPLIEDRENEWAL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (createdby.Trim() == "" || createdby.Trim() == null)
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getEnterprenuerRenewaldashboarddrilldown(string intEntid, string status, string intQuessionaireid, string createddt)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerRenewaldashboarddrilldown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (intEntid.Trim() == "" || intEntid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = intEntid.ToString();

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (createddt.Trim() == "" || createddt.Trim() == null)
                da.SelectCommand.Parameters.Add("@createddt", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@createddt", SqlDbType.VarChar).Value = createddt.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertRenewalQuestionnaireAprroval(string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_GET_QUESTIONNAIREID";

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetUidnumberRen(string intQuessionaireid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getUIDNumberdataRenewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPreneurdatabyQueRenewal(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerdatabyQuesRenewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetQuestionaryAprovalsApplyDataRenewal(string intQuessionaireid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQuestionaryAprovalsApplyDataRenewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPreniourPayDetailsPaidDetRenewal(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetailsPaidDetRenewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPreniourPayDetailsAddtionalPaymentRenewal(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetEnterPreniourPayDetails_AddtionalPaymentRenewal]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPreniourPayDetailsRenewal(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetailsRenewals", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertUIDGenerationRenewal(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[sp_InsertUIDGenerationRenewal]";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int UpdateAdditionalpaymentsUIDRenewal(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewRenewal";


        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int InsertPaymentDisbusmentSBIRenewal(string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string IsActive, string Created_by, string intApprovalid)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentDisbusmentSBIRenewal";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());



        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();

        if (IsActive.ToString().Trim() == "" || IsActive.ToString().Trim() == null)
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsActive", SqlDbType.VarChar).Value = IsActive.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetEnterprinerpaymentDtls_OtherServices(string UID, string Orderno, string AdditionalPaymentflg)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_Builldesc_PaymentDtls_OtherServices]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UID.Trim();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = Orderno.Trim();
            da.SelectCommand.Parameters.Add("@AdditionalPaymentflg", SqlDbType.VarChar).Value = AdditionalPaymentflg.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterprinerpaymentDtlsRenewal(string UID, string Orderno, string AdditionalPaymentflg)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_Builldesc_PaymentDtls_DESE_Renewal]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UID.Trim();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = Orderno.Trim();
            da.SelectCommand.Parameters.Add("@AdditionalPaymentflg", SqlDbType.VarChar).Value = AdditionalPaymentflg.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryStatusByTransactionIDRenewal(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDRENEWAL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertQueryDetailsRenewal(string intEnterpreniourApprovalid,
string intQuessionaireid,
string intCFEEnterpid,
string intDeptid,
string intApprovalid,
string QueryRaiseDate,
string QueryDescription,
string QueryStatus,
string QueryAttachmentFileName,
string QueryAttachmentFilePath,
string QueryRespondDate,
string QueryRespondRemarks,
string Created_by,
string Created_dt,
string Modified_by, string Modified_dt, string IPAddress)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertQueryDetailsRenewal", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IPAddress.Trim() == "" || IPAddress.Trim() == null || IPAddress.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();
            }



            if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            //-------------------------------------------------
            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}
            //if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            //}

            //if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            //}

            //if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            //}

            //if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            //}

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            //if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            //if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            //if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            //if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            //if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            ////-------------------------------------------------
            //if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            //}

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            //if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            //}

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetQueryStatusByTransactionIDRenewalResponse(string User_id, string approvalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDRENEWAL_RESPONSE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";

            if (approvalid.Trim() == "" || approvalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Approvalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Approvalid", SqlDbType.VarChar).Value = approvalid.ToString();

            da.Fill(ds);
            return ds;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterprenuerDetailsRenewal(string intSBenid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("GetEnterprenuerDetailsRenewal", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intSBenid.Trim() == "" || intSBenid.Trim() == null || intSBenid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterprenuerid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterprenuerid", SqlDbType.VarChar).Value = intSBenid;
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();

        }
        return ds;
    }

    public DataSet GetEnterpreneourDashboardDetailsRenewal(string intEntid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetEnterpreneourDashboardDetails_Renewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intEntid.Trim() == "" || intEntid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = intEntid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public void InsertFactoryRenewal(RenewalVo factoryrenvo)
    {

        try
        {
            SqlConnection connection = new SqlConnection(str);
            SqlTransaction transaction = null;
            connection.Open();
            transaction = connection.BeginTransaction();
            SqlCommand cmdEnj = new SqlCommand("USP_INS_FACTORY_RENEWAL", connection);
            cmdEnj.CommandType = CommandType.StoredProcedure;
            cmdEnj.Transaction = transaction;
            cmdEnj.Connection = connection;

            if (factoryrenvo.questionnaire_id != 0 && factoryrenvo.questionnaire_id != null)
            {
                cmdEnj.Parameters.AddWithValue("@intQuessionaireCFOid", SqlDbType.Int).Value = factoryrenvo.questionnaire_id;
            }

            if (factoryrenvo.Intenterprenurid != 0 && factoryrenvo.Intenterprenurid != null)
            {
                cmdEnj.Parameters.AddWithValue("@intCFOEnterpid", SqlDbType.Int).Value = factoryrenvo.Intenterprenurid;
            }
            if (factoryrenvo.uidno != "" && factoryrenvo.uidno != null)
            {
                cmdEnj.Parameters.AddWithValue("@Uid_No", SqlDbType.VarChar).Value = factoryrenvo.uidno;
            }
            if (factoryrenvo.stageid != 0 && factoryrenvo.stageid != null)
            {
                cmdEnj.Parameters.AddWithValue("@intStageid", SqlDbType.Int).Value = factoryrenvo.stageid;
            }
            if (factoryrenvo.regid != "" && factoryrenvo.regid != null)
            {
                cmdEnj.Parameters.AddWithValue("@Reg_Id", SqlDbType.VarChar).Value = factoryrenvo.regid;
            }
            if (factoryrenvo.annualLicenceFee != "" && factoryrenvo.annualLicenceFee != null)
            {
                cmdEnj.Parameters.AddWithValue("@annualLicenceFee", SqlDbType.VarChar).Value = factoryrenvo.annualLicenceFee;
            }
            if (factoryrenvo.arrearsAmount != "" && factoryrenvo.arrearsAmount != null)
            {
                cmdEnj.Parameters.AddWithValue("@arrearsAmount", SqlDbType.Int).Value = factoryrenvo.arrearsAmount;
            }
            if (factoryrenvo.interestOnAnnualLicenceFee != "" && factoryrenvo.interestOnAnnualLicenceFee != null)
            {
                cmdEnj.Parameters.AddWithValue("@interestOnAnnualLicenceFee", SqlDbType.Int).Value = factoryrenvo.interestOnAnnualLicenceFee;
            }
            if (factoryrenvo.interestOnArrearsAmount != "" && factoryrenvo.interestOnArrearsAmount != null)
            {
                cmdEnj.Parameters.AddWithValue("@interestOnArrearsAmount", SqlDbType.VarChar).Value = factoryrenvo.interestOnArrearsAmount;
            }
            if (factoryrenvo.totalFee != "" && factoryrenvo.totalFee != null)
            {
                cmdEnj.Parameters.AddWithValue("@totalFee", SqlDbType.VarChar).Value = factoryrenvo.totalFee;
            }
            if (factoryrenvo.factoryCircleID != "" && factoryrenvo.factoryCircleID != null)
            {
                cmdEnj.Parameters.AddWithValue("@factoryCircleID", SqlDbType.VarChar).Value = factoryrenvo.factoryCircleID;
            }
            if (factoryrenvo.factoryCircleName != "" && factoryrenvo.factoryCircleName != null)
            {
                cmdEnj.Parameters.AddWithValue("@factoryCircleName", SqlDbType.VarChar).Value = factoryrenvo.factoryCircleName;
            }
            if (factoryrenvo.factoryAddress != "" && factoryrenvo.factoryAddress != null)
            {
                cmdEnj.Parameters.AddWithValue("@factoryAddress", SqlDbType.VarChar).Value = factoryrenvo.factoryAddress;
            }
            if (factoryrenvo.factoryHP != "" && factoryrenvo.factoryHP != null)
            {
                cmdEnj.Parameters.AddWithValue("@factoryHP", SqlDbType.VarChar).Value = factoryrenvo.factoryHP;
            }
            if (factoryrenvo.factoryLicenseNumber != "" && factoryrenvo.factoryLicenseNumber != null)
            {
                cmdEnj.Parameters.AddWithValue("@factoryLicenseNumber", SqlDbType.VarChar).Value = factoryrenvo.factoryLicenseNumber;
            }
            if (factoryrenvo.factoryName != "" && factoryrenvo.factoryName != null)
            {
                cmdEnj.Parameters.AddWithValue("@factoryName", SqlDbType.VarChar).Value = factoryrenvo.factoryName;
            }
            if (factoryrenvo.factoryNumberOfEmployees != "" && factoryrenvo.factoryNumberOfEmployees != null)
            {
                cmdEnj.Parameters.AddWithValue("@factoryNumberOfEmployees", SqlDbType.VarChar).Value = factoryrenvo.factoryNumberOfEmployees;
            }
            if (factoryrenvo.factoryRegistrationNumber != "" && factoryrenvo.factoryRegistrationNumber != null)
            {
                cmdEnj.Parameters.AddWithValue("@factoryRegistrationNumber", SqlDbType.VarChar).Value = factoryrenvo.factoryRegistrationNumber;
            }
            if (factoryrenvo.licenceValidFrom != "" && factoryrenvo.licenceValidFrom != null)
            {
                cmdEnj.Parameters.AddWithValue("@licenceValidFrom", SqlDbType.VarChar).Value = cmf.convertDateIndia(factoryrenvo.licenceValidFrom);
            }
            if (factoryrenvo.licenceValidUpto != "" && factoryrenvo.licenceValidUpto != null)
            {
                cmdEnj.Parameters.AddWithValue("@licenceValidUpto", SqlDbType.VarChar).Value = cmf.convertDateIndia(factoryrenvo.licenceValidUpto);
            }
            if (factoryrenvo.selectedCalendarYear != "" && factoryrenvo.selectedCalendarYear != null)
            {
                cmdEnj.Parameters.AddWithValue("@selectedCalendarYear", SqlDbType.VarChar).Value = factoryrenvo.selectedCalendarYear;
            }
            if (factoryrenvo.selectedNumberOfLicenseYears != "" && factoryrenvo.selectedNumberOfLicenseYears != null)
            {
                cmdEnj.Parameters.AddWithValue("@selectedNumberOfLicenseYears", SqlDbType.VarChar).Value = factoryrenvo.selectedNumberOfLicenseYears;
            }
            if (factoryrenvo.Created_by != "" && factoryrenvo.Created_by != null)
            {
                cmdEnj.Parameters.AddWithValue("@Created_by", SqlDbType.VarChar).Value = factoryrenvo.Created_by;
            }

            cmdEnj.ExecuteNonQuery();
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            // cmdEnj.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetShowDepartmentFilesREN(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryResponseDetailsByEnterpIDDeptREN(string intCFEEnterpid, string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveQueriesDetailsAndEntDetByIDDeptRENNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryRaisedRENOneTime(string intCFEEnterpid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQueryRaisedRENbyOnetime", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetPaymentDetailsREN(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FetchEntrpPaymentDetails_REN]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (UID.Trim() == "" || UID.Trim() == null || UID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertDepartmentProcessREN(string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Trans_Date, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertDepartmentProcessREN";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();

        if (Trans_Date == "" || Trans_Date == null)
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = cmf.convertDateIndia(Trans_Date);

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int UpdateAdditionalpaymentsREN(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string ipaddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewREN";

        if (ipaddress.Trim() == "" || ipaddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = ipaddress.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public int InsertPaymentTransactionREN(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertPaymentTransactionREN";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int insertQueryResponsedataREN(string intEnterpreniourApprovalid, string intCFEEnterpid, string QueryDescription, string QueryStatus, string Created_by, string intDeptid, string intApprovalid, string intQuessionaireid)
    {


        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQueriesDetailsREN";

        if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null)
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = intEnterpreniourApprovalid.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (QueryDescription.Trim() == "" || QueryDescription.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();


        if (QueryStatus.Trim() == "" || QueryStatus.Trim() == null)
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetShowEmailidandMobileNumberREN(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowEmailidandMobileNumberREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCompletedbyApprovalREN2A(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataREN2A", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }


    public DataSet GetCompletedbyApprovalREN3A(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataREN3A", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public DataSet GetCompletedbyApprovalREN(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdataREN", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }


    public int insertApprovalDataREN(string Enterprenuer, string RefNo, string Status, string Modified_by, string intApprovalid, string intDeptid, string Remarks, string ipaddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "updateApprovaldataREN";

        if (Enterprenuer.Trim() == "" || Enterprenuer.Trim() == null)
            com.Parameters.Add("@Enterprenuer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Enterprenuer", SqlDbType.VarChar).Value = Enterprenuer.Trim();

        if (ipaddress.Trim() == "" || ipaddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = ipaddress.Trim();

        if (RefNo.Trim() == "" || RefNo.Trim() == null)
            com.Parameters.Add("@RefNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@RefNo", SqlDbType.VarChar).Value = RefNo.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int UpdateAdditionalpaymentsBeforePreREN(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string Reason, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewBeforePreREN";

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();

        if (Reason.Trim() == "" || Reason.Trim() == null)
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = Reason.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetQueryResponseDetailsByEnterpIDREN(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveQueriesDetailsAndEntDetByIDREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet Getstatusonuidno(string uidno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_STATUS_UIDNO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (uidno.Trim() == "" || uidno.Trim() == null)
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetNotUpdatedDatatodept(string frmdate, string todate, string deptid, string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_WEBSERVICE_REPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (frmdate.Trim() == "" || frmdate.Trim() == null)
                da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = frmdate.ToString();
            if (todate.Trim() == "" || todate.Trim() == null)
                da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = todate.ToString();

            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentDashboardDetailsREN(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetDepartmentDashboardDetailsREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApplicationFormRenewalDetails(string intSBenid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;
            myDataAdapter = new SqlDataAdapter("Usp_Get_Application_Form_Dtls_Renewal", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (intSBenid.Trim() == "" || intSBenid.Trim() == null || intSBenid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intSBenid;
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();

        }
        return ds;
    }

    public DataSet getreceiptDetailsREN(string TransNo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getreceiptDetailsREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (TransNo.Trim() == "" || TransNo.Trim() == null)
                da.SelectCommand.Parameters.Add("@TransNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TransNo", SqlDbType.VarChar).Value = TransNo.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    #endregion

    public DataSet GetFeedBackReport(string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FEEDREPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet GetFeedBackReportProspective(string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_FEEDREPORT_Prospective]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet ApplicationWiseDetailedTrakerREN(string Quesionary_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveR4ReportRENNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Quesionary_id.Trim() == "" || Quesionary_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = Quesionary_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetdataofApprovaldataAprovalRENbyID(string enterprenuer, string intDeptid)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyidAprovalsRENNew", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }


            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;
    }

    public int InsertRENAttachementApproval(
            string intQuessionaireCFOid,
            string intCFOEnterpid,
            string Uid_No,
            string Reg_Id,
            string AttachmentTypeName,
            string AttachmentFilename,
            string AttachmentFilePath,
            string Status,
            string Created_by,
            string FileDescription, string intDeptid, string intApprovalid)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_RENAttachmentDetDeptApproval", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = intDeptid.Trim();
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = intApprovalid.Trim();
            }


            if (intQuessionaireCFOid.Trim() == "" || intQuessionaireCFOid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireCFOid.Trim());
            }

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFOEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();
            }

            if (AttachmentTypeName.Trim() == "" || AttachmentTypeName.Trim() == null || AttachmentTypeName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = AttachmentTypeName.Trim();
            }

            if (AttachmentFilename.Trim() == "" || AttachmentFilename.Trim() == null || AttachmentFilename.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = AttachmentFilename.Trim();
            }

            if (AttachmentFilePath.Trim() == "" || AttachmentFilePath.Trim() == null || AttachmentFilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = AttachmentFilePath.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Int32.Parse(Created_by.Trim());
            }

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();
            }


            if (FileDescription.Trim() == "" || FileDescription.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }
            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }
    }

    public DataSet GetdataRENApprovaldocument(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveApprovallinkREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdatabyDeptinRENdocument(string intEnterprenuerid, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptidRENbyapporval", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            if (deptid.Trim() == "" || deptid.Trim() == null || deptid.Trim() == "10" || deptid.Trim() == "1000")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = deptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetdatabyDeptinRENdocumentRespondDetails(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptidRENbyRespondant", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetRegulations()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_REGULATIONS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetVolations(string regulationid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_VOLATIONS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (regulationid.Trim() == "" || regulationid.Trim() == null)
                da.SelectCommand.Parameters.Add("@regulationid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@regulationid", SqlDbType.VarChar).Value = regulationid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetPlants(string regulationid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PLANT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (regulationid.Trim() == "" || regulationid.Trim() == null)
                da.SelectCommand.Parameters.Add("@regulationid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@regulationid", SqlDbType.VarChar).Value = regulationid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetdataRedirectionurltopcb(string questionniareid, string enterprenurid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_DATAFROMPCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (questionniareid.Trim() == "" || questionniareid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = questionniareid.ToString();

            if (enterprenurid.Trim() == "" || enterprenurid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTENTERID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@INTENTERID", SqlDbType.VarChar).Value = enterprenurid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetApplicationTrackerDetailedDetails(string intQuessionaireid, string intStageid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetTrackerDetailedDetails_CFENEW]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();
            da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();
            da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetApplicationTrackerDetailedDetailsCFO(string intQuessionaireid, string intStageid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetTrackerDetailedDetails_CFONEW]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();
            da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();
            da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int InsertLabourCenteralInspection(CenteralInspectionVo centralvo)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_LABOURCENTRALINSPECTION";

        if (centralvo.slno == "" || centralvo.slno == null)
            com.Parameters.Add("@slno", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@slno", SqlDbType.VarChar).Value = centralvo.slno.Trim();

        if (centralvo.act_name == "" || centralvo.act_name == null)
            com.Parameters.Add("@act_name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@act_name", SqlDbType.VarChar).Value = centralvo.act_name.Trim();

        if (centralvo.registration_no == "" || centralvo.registration_no == null)
            com.Parameters.Add("@registration_no", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@registration_no", SqlDbType.VarChar).Value = centralvo.registration_no.Trim();

        if (centralvo.name_of_establishment == "" || centralvo.name_of_establishment == null)
            com.Parameters.Add("@name_of_establishment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@name_of_establishment", SqlDbType.VarChar).Value = centralvo.name_of_establishment.Trim();

        if (centralvo.district_id == "" || centralvo.district_id == null)
            com.Parameters.Add("@district_id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@district_id", SqlDbType.VarChar).Value = centralvo.district_id.Trim();

        if (centralvo.address == "" || centralvo.address == null)
            com.Parameters.Add("@address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@address", SqlDbType.VarChar).Value = centralvo.address.Trim();

        if (centralvo.no_of_workers_employees == "" || centralvo.no_of_workers_employees == null)
            com.Parameters.Add("@no_of_workers_employees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@no_of_workers_employees", SqlDbType.VarChar).Value = centralvo.no_of_workers_employees.Trim();

        if (centralvo.takedar_principalemployer_name == "" || centralvo.takedar_principalemployer_name == null)
            com.Parameters.Add("@takedar_principalemployer_name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@takedar_principalemployer_name", SqlDbType.VarChar).Value = centralvo.takedar_principalemployer_name.Trim();

        if (centralvo.inspection_officer_alloted == "" || centralvo.inspection_officer_alloted == null)
            com.Parameters.Add("@inspection_officer_alloted", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@inspection_officer_alloted", SqlDbType.VarChar).Value = centralvo.inspection_officer_alloted.Trim();

        if (centralvo.inspection_alloted_time == "" || centralvo.inspection_alloted_time == null)
            com.Parameters.Add("@inspection_alloted_time", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@inspection_alloted_time", SqlDbType.DateTime).Value = centralvo.inspection_alloted_time.Trim();

        if (centralvo.inspection_completed == "" || centralvo.inspection_completed == null)
            com.Parameters.Add("@inspection_completed", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@inspection_completed", SqlDbType.VarChar).Value = centralvo.inspection_completed.Trim();

        if (centralvo.inspection_week == "" || centralvo.inspection_week == null)
            com.Parameters.Add("@inspection_week", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@inspection_week", SqlDbType.VarChar).Value = centralvo.inspection_week.Trim();

        if (centralvo.risk_level == "" || centralvo.risk_level == null)
            com.Parameters.Add("@risk_level", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@risk_level", SqlDbType.VarChar).Value = centralvo.risk_level.Trim();

        //if (centralvo.ci1_generated_path == "" || centralvo.ci1_generated_path == null)
        //    com.Parameters.Add("@ci_1_generated_path", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@ci_1_generated_path", SqlDbType.VarChar).Value = centralvo.ci1_generated_path.Trim();

        if (centralvo.factory_inspecting_officer == "" || centralvo.factory_inspecting_officer == null)
            com.Parameters.Add("@factory_inspecting_officer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@factory_inspecting_officer", SqlDbType.VarChar).Value = centralvo.factory_inspecting_officer.Trim();

        if (centralvo.factory_inspecting_officer_mobile == "" || centralvo.factory_inspecting_officer_mobile == null)
            com.Parameters.Add("@factory_inspecting_officer_mobile", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@factory_inspecting_officer_mobile", SqlDbType.VarChar).Value = centralvo.factory_inspecting_officer_mobile.Trim();

        if (centralvo.labourinspectiontype == "" || centralvo.labourinspectiontype == null)
            com.Parameters.Add("@labourinspectiontype", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@labourinspectiontype", SqlDbType.VarChar).Value = centralvo.labourinspectiontype.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int InsertFactoryCenteralInspection(CenteralInspectionVo centralvo)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_FACTORYCENTRALINSPECTION";

        if (centralvo.inspectionMonth == "" || centralvo.inspectionMonth == null)
            com.Parameters.Add("@inspectionMonth", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@inspectionMonth", SqlDbType.VarChar).Value = centralvo.inspectionMonth.Trim();

        if (centralvo.inspectionYear == "" || centralvo.inspectionYear == null)
            com.Parameters.Add("@inspectionYear", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@inspectionYear", SqlDbType.VarChar).Value = centralvo.inspectionYear.Trim();

        if (centralvo.allottedInspectionOfficer == "" || centralvo.allottedInspectionOfficer == null)
            com.Parameters.Add("@allottedInspectionOfficer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@allottedInspectionOfficer", SqlDbType.VarChar).Value = centralvo.allottedInspectionOfficer.Trim();

        if (centralvo.registrationNumber == "" || centralvo.registrationNumber == null)
            com.Parameters.Add("@registrationNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@registrationNumber", SqlDbType.VarChar).Value = centralvo.registrationNumber.Trim();

        //if (centralvo.inspectionReportUploadedTime == "" || centralvo.inspectionReportUploadedTime == null)
        //    com.Parameters.Add("@inspectionReportUploadedTime", SqlDbType.DateTime).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@inspectionReportUploadedTime", SqlDbType.DateTime).Value = centralvo.inspectionReportUploadedTime.Trim();

        if (centralvo.inspectionScheduledTime == "" || centralvo.inspectionScheduledTime == null)
            com.Parameters.Add("@inspectionScheduledTime", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@inspectionScheduledTime", SqlDbType.DateTime).Value = centralvo.inspectionScheduledTime.Trim();

        if (centralvo.actionTaken == "" || centralvo.actionTaken == null)
            com.Parameters.Add("@action_taken", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@action_taken", SqlDbType.VarChar).Value = centralvo.actionTaken.Trim();

        if (centralvo.complianceAction == "" || centralvo.complianceAction == null)
            com.Parameters.Add("@complianceAction", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@complianceAction", SqlDbType.VarChar).Value = centralvo.complianceAction.Trim();

        if (centralvo.complianceActionTakenBy == "" || centralvo.complianceActionTakenBy == null)
            com.Parameters.Add("@complianceActionTakenBy", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@complianceActionTakenBy", SqlDbType.VarChar).Value = centralvo.complianceActionTakenBy.Trim();

        if (centralvo.complianceFilepath == "" || centralvo.complianceFilepath == null)
            com.Parameters.Add("@compliance_filepath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@compliance_filepath", SqlDbType.VarChar).Value = centralvo.complianceFilepath.Trim();

        //if (centralvo.complianceDate == "" || centralvo.complianceDate == null)
        //    com.Parameters.Add("@compliance_date", SqlDbType.DateTime).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@compliance_date", SqlDbType.DateTime).Value = centralvo.complianceDate.Trim();

        if (centralvo.complianceGeneratedIP == "" || centralvo.complianceGeneratedIP == null)
            com.Parameters.Add("@compliance_generated_ip", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@compliance_generated_ip", SqlDbType.VarChar).Value = centralvo.complianceGeneratedIP.Trim();

        if (centralvo.complianceRemarksByOfficer == "" || centralvo.complianceRemarksByOfficer == null)
            com.Parameters.Add("@compliance_remarks_by_officer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@compliance_remarks_by_officer", SqlDbType.VarChar).Value = centralvo.complianceRemarksByOfficer.Trim();

        if (centralvo.complianceSubmitted == "" || centralvo.complianceSubmitted == null)
            com.Parameters.Add("@complianceSubmitted", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@complianceSubmitted", SqlDbType.VarChar).Value = centralvo.complianceSubmitted.Trim();

        if (centralvo.complianceVerificationRemarksByOfficer == "" || centralvo.complianceVerificationRemarksByOfficer == null)
            com.Parameters.Add("@comp_verig_remarks_by_officer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@comp_verig_remarks_by_officer", SqlDbType.VarChar).Value = centralvo.complianceVerificationRemarksByOfficer.Trim();

        if (centralvo.descriptionOfEconomicActivity == "" || centralvo.descriptionOfEconomicActivity == null)
            com.Parameters.Add("@description_of_economic_activity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@description_of_economic_activity", SqlDbType.VarChar).Value = centralvo.descriptionOfEconomicActivity.Trim();

        if (centralvo.dofAction == "" || centralvo.dofAction == null)
            com.Parameters.Add("@dof_action", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dof_action", SqlDbType.VarChar).Value = centralvo.dofAction.Trim();

        if (centralvo.dofRemarks == "" || centralvo.dofRemarks == null)
            com.Parameters.Add("@dof_remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dof_remarks", SqlDbType.VarChar).Value = centralvo.dofRemarks.Trim();

        //if (centralvo.dofActionDate == "" || centralvo.dofActionDate == null)
        //    com.Parameters.Add("@dofActionDate", SqlDbType.DateTime).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@dofActionDate", SqlDbType.DateTime).Value = centralvo.dofActionDate.Trim();

        if (centralvo.factoryAddress == "" || centralvo.factoryAddress == null)
            com.Parameters.Add("@factoryAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@factoryAddress", SqlDbType.VarChar).Value = centralvo.factoryAddress.Trim();

        if (centralvo.factorycircleName == "" || centralvo.factorycircleName == null)
            com.Parameters.Add("@factorycircleName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@factorycircleName", SqlDbType.VarChar).Value = centralvo.factorycircleName.Trim();

        if (centralvo.factoryDistrictName == "" || centralvo.factoryDistrictName == null)
            com.Parameters.Add("@factoryDistrictName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@factoryDistrictName", SqlDbType.VarChar).Value = centralvo.factoryDistrictName.Trim();

        if (centralvo.factoryMandalId == "" || centralvo.factoryMandalId == null)
            com.Parameters.Add("@factoryMandalId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@factoryMandalId", SqlDbType.VarChar).Value = centralvo.factoryMandalId.Trim();

        if (centralvo.factoryMandalName == "" || centralvo.factoryMandalName == null)
            com.Parameters.Add("@factoryMandalName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@factoryMandalName", SqlDbType.VarChar).Value = centralvo.factoryMandalName.Trim();

        if (centralvo.factoryName == "" || centralvo.factoryName == null)
            com.Parameters.Add("@factoryName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@factoryName", SqlDbType.VarChar).Value = centralvo.factoryName.Trim();

        if (centralvo.generalRemarks == "" || centralvo.generalRemarks == null)
            com.Parameters.Add("@generalRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@generalRemarks", SqlDbType.VarChar).Value = centralvo.generalRemarks.Trim();

        if (centralvo.inspectionReportUploaded == "" || centralvo.inspectionReportUploaded == null)
            com.Parameters.Add("@inspectionReportUploaded", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@inspectionReportUploaded", SqlDbType.VarChar).Value = centralvo.inspectionReportUploaded.Trim();


        if (centralvo.ownerComplianceRemarks == "" || centralvo.ownerComplianceRemarks == null)
            com.Parameters.Add("@owner_compliance_remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@owner_compliance_remarks", SqlDbType.VarChar).Value = centralvo.ownerComplianceRemarks.Trim();

        if (centralvo.riskFactor == "" || centralvo.riskFactor == null)
            com.Parameters.Add("@risk_factor", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@risk_factor", SqlDbType.VarChar).Value = centralvo.riskFactor.Trim();

        if (centralvo.showcausePostalReference == "" || centralvo.showcausePostalReference == null)
            com.Parameters.Add("@showcausePostalReference", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@showcausePostalReference", SqlDbType.VarChar).Value = centralvo.showcausePostalReference.Trim();

        if (centralvo.workingOrClosedFactory == "" || centralvo.workingOrClosedFactory == null)
            com.Parameters.Add("@workingOrClosedFactory", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@workingOrClosedFactory", SqlDbType.VarChar).Value = centralvo.workingOrClosedFactory.Trim();

        if (centralvo.showcausePostalReference == "" || centralvo.showcausePostalReference == null)
            com.Parameters.Add("@showcause_postal_reference", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@showcause_postal_reference", SqlDbType.VarChar).Value = centralvo.showcausePostalReference.Trim();

        if (centralvo.labourinspectiontype == "" || centralvo.labourinspectiontype == null)
            com.Parameters.Add("@labourinspectiontype", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@labourinspectiontype", SqlDbType.VarChar).Value = centralvo.labourinspectiontype.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int InsertPCBCenteralInspection(CenteralInspectionVo centralvo)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_PCBCENTRALINSPECTION";


        if (centralvo.AssignedForMonthYr == "" || centralvo.AssignedForMonthYr == null)
            com.Parameters.Add("@AssignedForMonthYr", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AssignedForMonthYr", SqlDbType.VarChar).Value = centralvo.AssignedForMonthYr.Trim();

        if (centralvo.AllocationMonth == "" || centralvo.AllocationMonth == null)
            com.Parameters.Add("@AllocationMonth", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AllocationMonth", SqlDbType.VarChar).Value = centralvo.AllocationMonth.Trim();

        if (centralvo.AllocationYear == "" || centralvo.AllocationYear == null)
            com.Parameters.Add("@AllocationYear", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AllocationYear", SqlDbType.VarChar).Value = centralvo.AllocationYear.Trim();

        if (centralvo.InspectionAllocatedToEmp == "" || centralvo.InspectionAllocatedToEmp == null)
            com.Parameters.Add("@InspectionAllocatedToEmp", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionAllocatedToEmp", SqlDbType.VarChar).Value = centralvo.InspectionAllocatedToEmp.Trim();

        if (centralvo.InspectionAllocatedToName == "" || centralvo.InspectionAllocatedToName == null)
            com.Parameters.Add("@InspectionAllocatedToName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionAllocatedToName", SqlDbType.VarChar).Value = centralvo.InspectionAllocatedToName.Trim();

        if (centralvo.IndustryId == "" || centralvo.IndustryId == null)
            com.Parameters.Add("@IndustryId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IndustryId", SqlDbType.VarChar).Value = centralvo.IndustryId.Trim();


        if (centralvo.IndustryDetails == "" || centralvo.IndustryDetails == null)
            com.Parameters.Add("@IndustryDetails", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IndustryDetails", SqlDbType.VarChar).Value = centralvo.IndustryDetails.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet Getverifyfactoryrenewaldata(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyfactoryrenewaldata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetverifyBoilerrenewaldata(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyBoilerrenewaldata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetverifyLabourrenewaldata(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyLabourrenewaldata", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public string RetriveStatusRenewal(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveStatus_Renewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();


            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();


        }
        catch (Exception ex)
        {
            //throw ex;
            return "0";
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DeptReportDepartmentWise_NewREN(string intDistrictid, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_NewCFO_export"
            da = new SqlDataAdapter("DeptReportDepartmentWise_NewREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DeptReportDepartmentWise_NewREN_Export(string intDistrictid, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DeptReportDepartmentWise_NewREN_Export", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByTypeDistrictREN(string status, string type, string Category, string dept, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRIDrillDownPhase2DeptREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByTypedeptREN(string status, string type, string intDeptid, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1DrillDownPhase3DeptREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetHelpDeskStatusReport(string fromdate, string todate, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_New_export"
            da = new SqlDataAdapter("USP_GET_HELPDESK_REPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            if (Category.Trim() == "" || Category.Trim() == null)
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = Category.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesTSIIC(string SerchVer, string EnterpriseType, string intquestionnaireid, string Builduparea, string TotalArea)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees_TSIIC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (intquestionnaireid.Trim() == "" || intquestionnaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intquestionnaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intquestionnaireid", SqlDbType.VarChar).Value = intquestionnaireid.ToString();

            if (Builduparea.Trim() == "" || Builduparea.Trim() == null)
                da.SelectCommand.Parameters.Add("@BuildUpArea", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BuildUpArea", SqlDbType.VarChar).Value = Builduparea.ToString();

            if (TotalArea.Trim() == "" || TotalArea.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotalArea", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotalArea", SqlDbType.VarChar).Value = TotalArea.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApprovalsDetails(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetApprovalsDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetShowApprovalandFeesPCBNew(string SerchVer, string EnterpriseType, string Pol_Category, string GeneratorType, string Val_Plant, string intquestionnaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesPCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (Pol_Category.Trim() == "" || Pol_Category.Trim() == null)
                da.SelectCommand.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.ToString();

            if (GeneratorType.Trim() == "" || GeneratorType.Trim() == null)
                da.SelectCommand.Parameters.Add("@GeneratorType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@GeneratorType", SqlDbType.VarChar).Value = GeneratorType.ToString();

            if (Val_Plant.Trim() == "" || Val_Plant.Trim() == null)
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Val_Plant", SqlDbType.Decimal).Value = Convert.ToDecimal(Val_Plant.ToString());

            if (intquestionnaireid.Trim() == "" || intquestionnaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = intquestionnaireid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetdataRedirectionurltopcbCFO(string questionniareid, string enterprenurid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_DATAFROMPCB_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (questionniareid.Trim() == "" || questionniareid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = questionniareid.ToString();

            if (enterprenurid.Trim() == "" || enterprenurid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTENTERID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@INTENTERID", SqlDbType.VarChar).Value = enterprenurid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCorporationbydistrict(string intstateid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCorporationbydistrict", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intstateid.Trim() == "" || intstateid.Trim() == null || intstateid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intdistid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intdistid", SqlDbType.VarChar).Value = intstateid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet Getwardbycorporation(string corportaionid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getwardbyCorporation", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (corportaionid.Trim() == "" || corportaionid.Trim() == null || corportaionid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intdistid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intdistid", SqlDbType.VarChar).Value = corportaionid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetdatabyDeptinCFEdocumentDigitalDetails(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptidDigitalSigningDocument", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdatabyDeptinCFEdocumentDPMSPlans(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptidDPMSPlans", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int insertProductsfromPCB(string intQuessionaireid, string intCFEEnterpid, string Uid_No, string Reg_id, string Manf_ItemName, string Manf_Item_Quantity, string Manf_Item_Quantity_In,
        string Manf_Item_Quantity_Per, string Created_by, string Modified_by, string OtherItemName)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_PRODUCTS";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Uid_No == "" || Uid_No == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();


        if (Reg_id == "" || Reg_id == null)
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = Reg_id.Trim();

        if (Manf_ItemName == "" || Manf_ItemName == null)
            com.Parameters.Add("@Manf_ItemName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Manf_ItemName", SqlDbType.VarChar).Value = Manf_ItemName.Trim();

        if (Manf_Item_Quantity == "" || Manf_Item_Quantity == null)
            com.Parameters.Add("@Manf_Item_Quantity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Manf_Item_Quantity", SqlDbType.VarChar).Value = Manf_Item_Quantity.Trim();

        if (Manf_Item_Quantity_In == "" || Manf_Item_Quantity_In == null)
            com.Parameters.Add("@Manf_Item_Quantity_In", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Manf_Item_Quantity_In", SqlDbType.VarChar).Value = Manf_Item_Quantity_In.Trim();

        if (Manf_Item_Quantity_Per == "" || Manf_Item_Quantity_Per == null)
            com.Parameters.Add("@Manf_Item_Quantity_Per", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Manf_Item_Quantity_Per", SqlDbType.VarChar).Value = Manf_Item_Quantity_Per.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by == "" || Modified_by == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (OtherItemName == "" || OtherItemName == null)
            com.Parameters.Add("@OtherItemName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OtherItemName", SqlDbType.VarChar).Value = OtherItemName.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public int insertRawMaterialfromPCB(string intQuessionaireid, string intCFEEnterpid, string Uid_No, string Reg_id, string Raw_ItemName, string Raw_Item_Quantity, string Raw_Item_Quantity_In,
       string Raw_Item_Quantity_Per, string Created_by, string Modified_by, string OtherItemName)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_RAWMATERIAL";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Uid_No == "" || Uid_No == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();


        if (Reg_id == "" || Reg_id == null)
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = Reg_id.Trim();

        if (Raw_ItemName == "" || Raw_ItemName == null)
            com.Parameters.Add("@Raw_ItemName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Raw_ItemName", SqlDbType.VarChar).Value = Raw_ItemName.Trim();

        if (Raw_Item_Quantity == "" || Raw_Item_Quantity == null)
            com.Parameters.Add("@Raw_Item_Quantity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Raw_Item_Quantity", SqlDbType.VarChar).Value = Raw_Item_Quantity.Trim();

        if (Raw_Item_Quantity_In == "" || Raw_Item_Quantity_In == null)
            com.Parameters.Add("@Raw_Item_Quantity_In", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Raw_Item_Quantity_In", SqlDbType.VarChar).Value = Raw_Item_Quantity_In.Trim();

        if (Raw_Item_Quantity_Per == "" || Raw_Item_Quantity_Per == null)
            com.Parameters.Add("@Raw_Item_Quantity_Per", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Raw_Item_Quantity_Per", SqlDbType.VarChar).Value = Raw_Item_Quantity_Per.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by == "" || Modified_by == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (OtherItemName == "" || OtherItemName == null)
            com.Parameters.Add("@OtherItemName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OtherItemName", SqlDbType.VarChar).Value = OtherItemName.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public int insertProductsfromPCBCFO(string intQuessionaireid, string intCFEEnterpid, string Uid_No, string Reg_id, string Manf_ItemName, string Manf_Item_Quantity, string Manf_Item_Quantity_In,
      string Manf_Item_Quantity_Per, string Created_by, string Modified_by, string OtherItemName)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_PRODUCTS_CFO";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Uid_No == "" || Uid_No == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();


        if (Reg_id == "" || Reg_id == null)
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = Reg_id.Trim();

        if (Manf_ItemName == "" || Manf_ItemName == null)
            com.Parameters.Add("@Manf_ItemName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Manf_ItemName", SqlDbType.VarChar).Value = Manf_ItemName.Trim();

        if (Manf_Item_Quantity == "" || Manf_Item_Quantity == null)
            com.Parameters.Add("@Manf_Item_Quantity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Manf_Item_Quantity", SqlDbType.VarChar).Value = Manf_Item_Quantity.Trim();

        if (Manf_Item_Quantity_In == "" || Manf_Item_Quantity_In == null)
            com.Parameters.Add("@Manf_Item_Quantity_In", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Manf_Item_Quantity_In", SqlDbType.VarChar).Value = Manf_Item_Quantity_In.Trim();

        if (Manf_Item_Quantity_Per == "" || Manf_Item_Quantity_Per == null)
            com.Parameters.Add("@Manf_Item_Quantity_Per", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Manf_Item_Quantity_Per", SqlDbType.VarChar).Value = Manf_Item_Quantity_Per.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by == "" || Modified_by == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (OtherItemName == "" || OtherItemName == null)
            com.Parameters.Add("@OtherItemName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OtherItemName", SqlDbType.VarChar).Value = OtherItemName.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public int insertRawMaterialfromPCBCFO(string intQuessionaireid, string intCFEEnterpid, string Uid_No, string Reg_id, string Raw_ItemName, string Raw_Item_Quantity, string Raw_Item_Quantity_In,
       string Raw_Item_Quantity_Per, string Created_by, string Modified_by, string OtherItemName)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_RAWMATERIAL_CFO";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Uid_No == "" || Uid_No == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();


        if (Reg_id == "" || Reg_id == null)
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_id", SqlDbType.VarChar).Value = Reg_id.Trim();

        if (Raw_ItemName == "" || Raw_ItemName == null)
            com.Parameters.Add("@Raw_ItemName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Raw_ItemName", SqlDbType.VarChar).Value = Raw_ItemName.Trim();

        if (Raw_Item_Quantity == "" || Raw_Item_Quantity == null)
            com.Parameters.Add("@Raw_Item_Quantity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Raw_Item_Quantity", SqlDbType.VarChar).Value = Raw_Item_Quantity.Trim();

        if (Raw_Item_Quantity_In == "" || Raw_Item_Quantity_In == null)
            com.Parameters.Add("@Raw_Item_Quantity_In", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Raw_Item_Quantity_In", SqlDbType.VarChar).Value = Raw_Item_Quantity_In.Trim();

        if (Raw_Item_Quantity_Per == "" || Raw_Item_Quantity_Per == null)
            com.Parameters.Add("@Raw_Item_Quantity_Per", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Raw_Item_Quantity_Per", SqlDbType.VarChar).Value = Raw_Item_Quantity_Per.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by == "" || Modified_by == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (OtherItemName == "" || OtherItemName == null)
            com.Parameters.Add("@OtherItemName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OtherItemName", SqlDbType.VarChar).Value = OtherItemName.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public int insertMortgagedata(string intQuessionaireid, string intCFEEnterpid, string MortgageNumber, string FLoorDetails, string Area, string SRO, string Date,
    string PlotNumber, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_MORTGAGEDATA";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (MortgageNumber == "" || MortgageNumber == null)
            com.Parameters.Add("@MortgageNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@MortgageNumber", SqlDbType.VarChar).Value = MortgageNumber.Trim();


        if (FLoorDetails == "" || FLoorDetails == null)
            com.Parameters.Add("@FLoorDetails", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FLoorDetails", SqlDbType.VarChar).Value = FLoorDetails.Trim();

        if (Area == "" || Area == null)
            com.Parameters.Add("@Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Area", SqlDbType.VarChar).Value = Area.Trim();

        if (SRO == "" || SRO == null)
            com.Parameters.Add("@SRO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SRO", SqlDbType.VarChar).Value = SRO.Trim();

        if (Date == "" || Date == null)
            com.Parameters.Add("@Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date", SqlDbType.VarChar).Value = Date.Trim();

        if (PlotNumber == "" || PlotNumber == null)
            com.Parameters.Add("@PlotNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PlotNumber", SqlDbType.VarChar).Value = PlotNumber.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public DataSet getMortgagedetailsonuid(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_MORTGAGEDETAILS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getdataofidentityCFONewApproval(string intQuessioneryid, string deptid)
    {


        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("getdeptOrderCFOnewApproval", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessioneryid.Trim() == "" || intQuessioneryid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = intQuessioneryid.ToString();



            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

        //}

    }

    public int UpdateAdditionalpaymentsInterest(string intCFEEnterpid, string Amount, string Created_by, string dept, string Approval, string ipaddress, string penaltyamount)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[UpdatetDeptApprovalnew_InterestAmount_Websrvc]";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (ipaddress.Trim() == "" || ipaddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = ipaddress.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();

        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();

        if (penaltyamount.Trim() == "" || penaltyamount.Trim() == null)
            com.Parameters.Add("@PenaltyAmount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PenaltyAmount", SqlDbType.VarChar).Value = penaltyamount.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet getuidforhmda(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GETDETAILS_UIDNUMBER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertCFOBoilerSteampipeline(
       string intCFOBoilerid,
          string intQuessionaireCFOid,
          string intCFOEnterpid,
          string Uid_No,
          string Reg_Id,
          string Reg_No_Boiler,
         string Boiler_User_for,
          string Boiler_ration,
          string Allowed_Max_Presure,
          string ErectorClass,
          string Name_of_Erector,
          string State_Erector,
          string Tot_Lenght_Steam_PipeLine,
                  string Numberofvessels,
          string Created_by,
          string Modified_by, string totalupto, string totalabove)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFOBoilersSteamPipeline";


        if (intCFOBoilerid.ToString().Trim() == "" || intCFOBoilerid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOBoilerid", SqlDbType.VarChar).Value = intCFOBoilerid.Trim();

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

        if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

        if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

        if (Reg_No_Boiler.ToString().Trim() == "" || Reg_No_Boiler.ToString().Trim() == null)
            com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_No_Boiler", SqlDbType.VarChar).Value = Reg_No_Boiler.Trim();

        if (Boiler_User_for.ToString().Trim() == "" || Boiler_User_for.ToString().Trim() == null || Boiler_User_for.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Boiler_User_for", SqlDbType.VarChar).Value = Boiler_User_for.Trim();

        if (Boiler_ration.ToString().Trim() == "" || Boiler_ration.ToString().Trim() == null)
            com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Boiler_ration", SqlDbType.VarChar).Value = Boiler_ration.Trim();

        if (Allowed_Max_Presure.ToString().Trim() == "" || Allowed_Max_Presure.ToString().Trim() == null)
            com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Allowed_Max_Presure", SqlDbType.VarChar).Value = Allowed_Max_Presure.Trim();

        if (ErectorClass.ToString().Trim() == "" || ErectorClass.ToString().Trim() == null)
            com.Parameters.Add("@ErectorClass", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ErectorClass", SqlDbType.VarChar).Value = ErectorClass.Trim();

        if (Name_of_Erector.ToString().Trim() == "" || Name_of_Erector.ToString().Trim() == null)
            com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Name_of_Erector", SqlDbType.VarChar).Value = Name_of_Erector.Trim();

        if (State_Erector.ToString().Trim() == "" || State_Erector.ToString().Trim() == null || State_Erector.ToString().Trim() == "--Select--")
            com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@State_Erector", SqlDbType.VarChar).Value = State_Erector.Trim();

        if (Numberofvessels.ToString().Trim() == "" || Numberofvessels.ToString().Trim() == null)
            com.Parameters.Add("@Totalnoofvessels", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Totalnoofvessels", SqlDbType.VarChar).Value = Numberofvessels.Trim();

        if (Tot_Lenght_Steam_PipeLine.ToString().Trim() == "" || Tot_Lenght_Steam_PipeLine.ToString().Trim() == null)
            com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_Lenght_Steam_PipeLine", SqlDbType.VarChar).Value = Tot_Lenght_Steam_PipeLine.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (totalabove.ToString().Trim() == "" || totalabove.ToString().Trim() == null)
            com.Parameters.Add("@totalabove", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@totalabove", SqlDbType.VarChar).Value = totalabove.Trim();

        if (totalupto.ToString().Trim() == "" || totalupto.ToString().Trim() == null)
            com.Parameters.Add("@totalupto", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@totalupto", SqlDbType.VarChar).Value = totalupto.Trim();

        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public DataSet GetdataofCFOBoilerSteam(string intQuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofCFOBoilersSteamPipelineDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetverifyofqueBoiler9SteamCFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyqueboiler9SteamCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getdataofidentityCFONewBoiler(string intQuessioneryid, string deptid)
    {


        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("getdeptOrderCFOnewBoiler", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessioneryid.Trim() == "" || intQuessioneryid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = intQuessioneryid.ToString();



            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryStatusByTransactionIDPCBCFE(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionID_PCBCFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            //if (User_id.Trim() == "" || User_id.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = User_id.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryStatusByTransactionIDPCBCFO(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDCFO_PCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            //if (User_id.Trim() == "" || User_id.Trim() == null)
            //    da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = User_id.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    #region Developed By Rajesh Patnaik
    public int InsertFireDetailsCFO(string number, string intQuessionaireid, string intCFEEnterpid,
string Uid_No,
string Reg_Id,
string Hight_Building,
string Hight_EachFloor,
string Inter_Stairs,
string Exernal_Stairs,
string Width_Stairs,
string Width_Stairs1,
string NoofExits,
string Width_eachExit,
string Fire_East,
string Fire_West,
string Fire_South,
string Fire_North,
string Level_ground,
string Fire_Detection,
string Fire_Alaram,
string Sprinkler,
string Foam,
string CO2,
string DCP,
string Fire_Service_Inlet,
string Under_ground,
string Court_yard_hydrants,
string Fire_pumps_Electrical_15,
string Fire_pumps_Diesel,
string Fire_pumps_Electrical_30,
string Trolley_45,
string Fencing,
string SoakPit,
string Lightning_Prot,
string Cont_Room,
string Hydraulic_Platform,
     string Created_by, string Created_dt, string Modified_by, string Modified_dt, List<Stairecases> lststire, string frontsidedir, string HoseReel,
string WetRiser,
string DownCorner,
string YardHydrant,
string ManuallyOperatedelectricalfirealaramsystem,
string AutomaticDetectionSystem,
string Undergroundwatersump,
string TerraceTank,
string TerracePumps,
string Electricalpumps,
string DieselPumps,
string JockeyPumps, string NoofFireLifts
)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_FireDetails_CFO", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (number.Trim() == "" || number.Trim() == null || number.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null || Uid_No.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.Int).Value = Int32.Parse(Uid_No.Trim());
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null || Reg_Id.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.Int).Value = Int32.Parse(Reg_Id.Trim());
            }

            //----------------------------------

            if (Hight_Building.Trim() == "" || Hight_Building.Trim() == null || Hight_Building.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.Decimal).Value = Decimal.Parse(Hight_Building.Trim());
            }

            if (Hight_EachFloor.Trim() == "" || Hight_EachFloor.Trim() == null || Hight_EachFloor.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_EachFloor", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_EachFloor", SqlDbType.Decimal).Value = Decimal.Parse(Hight_EachFloor.Trim());
            }

            if (Inter_Stairs.Trim() == "" || Inter_Stairs.Trim() == null || Inter_Stairs.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Inter_Stairs", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Inter_Stairs", SqlDbType.Decimal).Value = Decimal.Parse(Inter_Stairs.Trim());
            }

            if (Exernal_Stairs.Trim() == "" || Exernal_Stairs.Trim() == null || Exernal_Stairs.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Exernal_Stairs", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Exernal_Stairs", SqlDbType.Decimal).Value = Decimal.Parse(Exernal_Stairs.Trim());
            }

            if (Width_Stairs.Trim() == "" || Width_Stairs.Trim() == null || Width_Stairs.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_Stairs", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_Stairs", SqlDbType.Decimal).Value = Decimal.Parse(Width_Stairs.Trim());
            }

            if (Width_Stairs1.Trim() == "" || Width_Stairs1.Trim() == null || Width_Stairs1.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_Stairs1", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_Stairs1", SqlDbType.Decimal).Value = Decimal.Parse(Width_Stairs1.Trim());
            }

            if (NoofExits.Trim() == "" || NoofExits.Trim() == null || NoofExits.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@NoofExits", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@NoofExits", SqlDbType.Decimal).Value = Decimal.Parse(NoofExits.Trim());
            }

            if (Width_eachExit.Trim() == "" || Width_eachExit.Trim() == null || Width_eachExit.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_eachExit", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Width_eachExit", SqlDbType.Decimal).Value = Decimal.Parse(Width_eachExit.Trim());
            }

            if (Fire_East.Trim() == "" || Fire_East.Trim() == null || Fire_East.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_East", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_East", SqlDbType.Decimal).Value = Decimal.Parse(Fire_East.Trim());
            }

            if (Fire_West.Trim() == "" || Fire_West.Trim() == null || Fire_West.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_West", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_West", SqlDbType.Decimal).Value = Decimal.Parse(Fire_West.Trim());
            }

            if (Fire_South.Trim() == "" || Fire_South.Trim() == null || Fire_South.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_South", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_South", SqlDbType.Decimal).Value = Decimal.Parse(Fire_South.Trim());
            }

            if (Fire_North.Trim() == "" || Fire_North.Trim() == null || Fire_North.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_North", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_North", SqlDbType.Decimal).Value = Decimal.Parse(Fire_North.Trim());
            }
            //-------------------------------------

            //--------------------------------------
            if (Level_ground.Trim() == "" || Level_ground.Trim() == null || Level_ground.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Level_ground", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Level_ground", SqlDbType.Int).Value = Int32.Parse(Level_ground.Trim());
            }

            //---------------------------------------

            if (Fire_Detection.Trim() == "" || Fire_Detection.Trim() == null || Fire_Detection.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Detection", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Detection", SqlDbType.VarChar).Value = Fire_Detection.Trim();
            }

            if (Fire_Alaram.Trim() == "" || Fire_Alaram.Trim() == null || Fire_Alaram.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Alaram", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Alaram", SqlDbType.VarChar).Value = Fire_Alaram.Trim();
            }

            //-----------------------------------------
            if (Sprinkler.Trim() == "" || Sprinkler.Trim() == null || Sprinkler.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Sprinkler", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Sprinkler", SqlDbType.Char).Value = Char.Parse(Sprinkler.Trim());
            }

            if (Foam.Trim() == "" || Foam.Trim() == null || Foam.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Foam", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Foam", SqlDbType.Char).Value = Char.Parse(Foam.Trim());
            }


            if (CO2.Trim() == "" || CO2.Trim() == null || CO2.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@CO2", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@CO2", SqlDbType.Char).Value = Char.Parse(CO2.Trim());
            }


            if (DCP.Trim() == "" || DCP.Trim() == null || DCP.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@DCP", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@DCP", SqlDbType.Char).Value = Char.Parse(DCP.Trim());
            }


            if (Fire_Service_Inlet.Trim() == "" || Fire_Service_Inlet.Trim() == null || Fire_Service_Inlet.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Service_Inlet", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_Service_Inlet", SqlDbType.Char).Value = Char.Parse(Fire_Service_Inlet.Trim());
            }


            //----------------------------------------

            //          @Trolley_45 char(1),
            //@Fencing char(1),
            //@SoakPit char(1),
            //@Lightning_Prot char(1),
            //@Cont_Room char(1),
            //@Hydraulic_Platform char(1),


            if (Trolley_45.Trim() == "" || Trolley_45.Trim() == null || Trolley_45.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Trolley_45", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Trolley_45", SqlDbType.Char).Value = Char.Parse(Trolley_45.Trim());
            }

            if (Fencing.Trim() == "" || Fencing.Trim() == null || Fencing.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fencing", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fencing", SqlDbType.Char).Value = Char.Parse(Fencing.Trim());
            }


            if (SoakPit.Trim() == "" || SoakPit.Trim() == null || SoakPit.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@SoakPit", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@SoakPit", SqlDbType.Char).Value = Char.Parse(SoakPit.Trim());
            }


            if (Lightning_Prot.Trim() == "" || Lightning_Prot.Trim() == null || Lightning_Prot.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Lightning_Prot", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Lightning_Prot", SqlDbType.Char).Value = Char.Parse(Lightning_Prot.Trim());
            }


            if (Cont_Room.Trim() == "" || Cont_Room.Trim() == null || Cont_Room.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Cont_Room", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Cont_Room", SqlDbType.Char).Value = Char.Parse(Cont_Room.Trim());
            }

            if (Hydraulic_Platform.Trim() == "" || Hydraulic_Platform.Trim() == null || Hydraulic_Platform.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hydraulic_Platform", SqlDbType.Char).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Hydraulic_Platform", SqlDbType.Char).Value = Char.Parse(Hydraulic_Platform.Trim());
            }

            //--------------------------------------------
            //@Under_ground decimal(18, 2),
            //@Court_yard_hydrants decimal(18, 2),
            //@Fire_pumps_Electrical_15 decimal(18, 2),
            //@Fire_pumps_Diesel decimal(18, 2),
            //@Fire_pumps_Electrical_30 decimal(18, 2),



            if (Under_ground.Trim() == "" || Under_ground.Trim() == null || Under_ground.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Under_ground", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Under_ground", SqlDbType.Decimal).Value = Decimal.Parse(Under_ground.Trim());
            }

            if (Court_yard_hydrants.Trim() == "" || Court_yard_hydrants.Trim() == null || Court_yard_hydrants.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Court_yard_hydrants", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Court_yard_hydrants", SqlDbType.Decimal).Value = Decimal.Parse(Court_yard_hydrants.Trim());
            }

            if (Fire_pumps_Electrical_15.Trim() == "" || Fire_pumps_Electrical_15.Trim() == null || Fire_pumps_Electrical_15.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Electrical_15", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Electrical_15", SqlDbType.Decimal).Value = Decimal.Parse(Fire_pumps_Electrical_15.Trim());
            }

            if (Fire_pumps_Diesel.Trim() == "" || Fire_pumps_Diesel.Trim() == null || Fire_pumps_Diesel.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Diesel", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Diesel", SqlDbType.Decimal).Value = Decimal.Parse(Fire_pumps_Diesel.Trim());
            }

            if (Fire_pumps_Electrical_30.Trim() == "" || Fire_pumps_Electrical_30.Trim() == null || Fire_pumps_Electrical_30.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Electrical_30", SqlDbType.Decimal).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Fire_pumps_Electrical_30", SqlDbType.Decimal).Value = Decimal.Parse(Fire_pumps_Electrical_30.Trim());
            }

            if (frontsidedir.Trim() == "" || frontsidedir.Trim() == null || frontsidedir.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@frontsidedir", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@frontsidedir", SqlDbType.VarChar).Value = frontsidedir.Trim();
            }
            //----------------------------------------------

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            myDataAdapter.SelectCommand.Parameters.Add("@HoseReel", SqlDbType.VarChar).Value = HoseReel.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@WetRiser", SqlDbType.VarChar).Value = WetRiser.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@DownCorner", SqlDbType.VarChar).Value = DownCorner.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@YardHydrant", SqlDbType.VarChar).Value = YardHydrant.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@ManuallyOperatedelectricalfirealaramsystem", SqlDbType.VarChar).Value = ManuallyOperatedelectricalfirealaramsystem.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@AutomaticDetectionSystem", SqlDbType.VarChar).Value = AutomaticDetectionSystem.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@Undergroundwatersump", SqlDbType.VarChar).Value = Undergroundwatersump.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@TerraceTank", SqlDbType.VarChar).Value = TerraceTank.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@TerracePumps", SqlDbType.VarChar).Value = TerracePumps.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@Electricalpumps", SqlDbType.VarChar).Value = Electricalpumps.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@DieselPumps", SqlDbType.VarChar).Value = DieselPumps.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@JockeyPumps", SqlDbType.VarChar).Value = JockeyPumps.Trim();
            myDataAdapter.SelectCommand.Parameters.Add("@NoofFireLifts", SqlDbType.VarChar).Value = NoofFireLifts.Trim();


            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                int valid = 0;
                con.OpenConnection();
                SqlCommand cmd = null;

                foreach (Stairecases fromvo in lststire)
                {
                    cmd = new SqlCommand("USP_INSERT_StaireCases_CFO", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@intQuessionaireid", Convert.ToString(intQuessionaireid));
                    cmd.Parameters.AddWithValue("@intCFEEnterpid", Convert.ToString(intCFEEnterpid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@Staireid", Convert.ToString(fromvo.Staireid));
                    cmd.Parameters.AddWithValue("@StaireName", Convert.ToString(fromvo.StaireName));
                    cmd.Parameters.AddWithValue("@NoofStairecases", Convert.ToString(fromvo.NoofStairecases));
                    cmd.Parameters.AddWithValue("@Width", Convert.ToString(fromvo.Width));
                    cmd.Parameters.AddWithValue("@id", Convert.ToString(fromvo.id));
                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(fromvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }
                return 1;

            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    #endregion

    public DataSet Getverifyofque5CFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyque5CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveFiredataCFO(string intCFEEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("RetriveFireDataCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdataofFireenterprenuerCFO(string intQuerid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetdataoffiredetCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuerid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdatetAppealApprovalnewCOIReject(string intCFEEnterpid, string Status, string Created_by, string stageid, string dept, string Approval, string Remarks, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetAppealApprovalnew_COIReject";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();



        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@COIRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@COIRemarks", SqlDbType.VarChar).Value = Remarks.Trim();
        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
        {
            com.Parameters.Add("@COIIP", SqlDbType.VarChar).Value = "";
        }
        else
        {
            com.Parameters.Add("@COIIP", SqlDbType.VarChar).Value = IPAddress;
        }
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public int UpdatetAppealApprovalnewCFOCOIReject(string intCFEEnterpid, string Status, string Created_by, string stageid, string dept, string Approval, string Remarks, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetAppealApprovalnewCFO_COIReject";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();



        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();
        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@COIRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@COIRemarks", SqlDbType.VarChar).Value = Remarks.Trim();
        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
        {
            com.Parameters.Add("@COIIP", SqlDbType.VarChar).Value = "";
        }
        else
        {
            com.Parameters.Add("@COIIP", SqlDbType.VarChar).Value = IPAddress;
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet GetdataRedirectionurltopcbREN(string questionniareid, string enterprenurid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_DATAFROMPCB_REN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (questionniareid.Trim() == "" || questionniareid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@INTQUESTIONNAIREID", SqlDbType.VarChar).Value = questionniareid.ToString();

            if (enterprenurid.Trim() == "" || enterprenurid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTENTERID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@INTENTERID", SqlDbType.VarChar).Value = enterprenurid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insetCFEPowerDetCeig(
          string intCFEPoweridCeig,
          string intQuessionaireid,
          string intCFEEnterpid,
          string Uid_No,
          string Reg_Id,
          string Cont_Demand_Max_Already,
          string Cont_Demand_Max_Proposed,
          string Cont_Demand_Max_Total,
          string Connect_Load_A,
          string Connect_Load_B,
          string Connect_Load_C,
          string Prop_Location,
          string intDistrictid,
          string intMandalid,
          string Village_Name,
          string Street_Name,
          string Pincode,
          string Telephonce_No,
          string Nearest_Tel_No,
          string Date_Comm_Production,
          string Created_by,
          string Modified_by,
          string Extent,
          string Type_of_connect_Load,
       string Survey_No,
       string Regulation_type, string Plant_slno, string Voltage_Slno, string aggregatecapacity)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFEPowerDetCEIG";

        if (intCFEPoweridCeig.ToString().Trim() == "" || intCFEPoweridCeig.ToString().Trim() == null)
            com.Parameters.Add("@intCFEPoweridCeig", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEPoweridCeig", SqlDbType.VarChar).Value = intCFEPoweridCeig.Trim();

        if (intCFEEnterpid.ToString().Trim() == "" || intCFEEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


        if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

        if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

        if (Cont_Demand_Max_Already.ToString().Trim() == "" || Cont_Demand_Max_Already.ToString().Trim() == null)
            com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cont_Demand_Max_Already", SqlDbType.VarChar).Value = Cont_Demand_Max_Already.Trim();

        if (Cont_Demand_Max_Proposed.ToString().Trim() == "" || Cont_Demand_Max_Proposed.ToString().Trim() == null)
            com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cont_Demand_Max_Proposed", SqlDbType.VarChar).Value = Cont_Demand_Max_Proposed.Trim();

        if (Cont_Demand_Max_Total.ToString().Trim() == "" || Cont_Demand_Max_Total.ToString().Trim() == null)
            com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cont_Demand_Max_Total", SqlDbType.VarChar).Value = Cont_Demand_Max_Total.Trim();

        if (Connect_Load_A.ToString().Trim() == "" || Connect_Load_A.ToString().Trim() == null)
            com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Connect_Load_A", SqlDbType.VarChar).Value = Connect_Load_A.Trim();

        if (Connect_Load_B.ToString().Trim() == "" || Connect_Load_B.ToString().Trim() == null)
            com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Connect_Load_B", SqlDbType.VarChar).Value = Connect_Load_B.Trim();

        if (Connect_Load_C.ToString().Trim() == "" || Connect_Load_C.ToString().Trim() == null)
            com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Connect_Load_C", SqlDbType.VarChar).Value = Connect_Load_C.Trim();

        if (Prop_Location.ToString().Trim() == "" || Prop_Location.ToString().Trim() == null)
            com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Location", SqlDbType.VarChar).Value = Prop_Location.Trim();


        if (intDistrictid.ToString().Trim() == "" || intDistrictid.ToString().Trim() == null || intDistrictid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.Trim();

        if (intMandalid.ToString().Trim() == "" || intMandalid.ToString().Trim() == null || intMandalid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intMandalid", SqlDbType.VarChar).Value = intMandalid.Trim();

        if (Village_Name.ToString().Trim() == "" || Village_Name.ToString().Trim() == null || Village_Name.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Village_Name", SqlDbType.VarChar).Value = Village_Name.Trim();



        if (Street_Name.ToString().Trim() == "" || Street_Name.ToString().Trim() == null)
            com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Street_Name", SqlDbType.VarChar).Value = Street_Name.Trim();

        if (Pincode.ToString().Trim() == "" || Pincode.ToString().Trim() == null)
            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pincode", SqlDbType.VarChar).Value = Pincode.Trim();

        if (Telephonce_No.ToString().Trim() == "" || Telephonce_No.ToString().Trim() == null)
            com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Telephonce_No", SqlDbType.VarChar).Value = Telephonce_No.Trim();

        if (Nearest_Tel_No.ToString().Trim() == "" || Nearest_Tel_No.ToString().Trim() == null)
            com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Nearest_Tel_No", SqlDbType.VarChar).Value = Nearest_Tel_No.Trim();

        if (Date_Comm_Production.ToString().Trim() == "" || Date_Comm_Production.ToString().Trim() == null)
            com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date_Comm_Production", SqlDbType.DateTime).Value = Date_Comm_Production.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Extent.ToString().Trim() == "" || Extent.ToString().Trim() == null)
            com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = Extent.Trim();

        if (Type_of_connect_Load.ToString().Trim() == "" || Type_of_connect_Load.ToString().Trim() == null || Type_of_connect_Load.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type_of_connect_Load", SqlDbType.VarChar).Value = Type_of_connect_Load.Trim();

        if (Survey_No.ToString().Trim() == "" || Survey_No.ToString().Trim() == null)
            com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Survey_No", SqlDbType.VarChar).Value = Survey_No.Trim();

        if (Regulation_type.ToString().Trim() == "" || Regulation_type.ToString().Trim() == null)
            com.Parameters.Add("@Regulation_type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Regulation_type", SqlDbType.VarChar).Value = Regulation_type.Trim();

        if (Plant_slno.ToString().Trim() == "" || Plant_slno.ToString().Trim() == null)
            com.Parameters.Add("@Plant_slno", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Plant_slno", SqlDbType.VarChar).Value = Plant_slno.Trim();

        if (Voltage_Slno.ToString().Trim() == "" || Voltage_Slno.ToString().Trim() == null)
            com.Parameters.Add("@Voltage_Slno", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Voltage_Slno", SqlDbType.VarChar).Value = Voltage_Slno.Trim();

        if (aggregatecapacity.ToString().Trim() == "" || aggregatecapacity.ToString().Trim() == null)
            com.Parameters.Add("@AggregateCapacity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AggregateCapacity", SqlDbType.VarChar).Value = aggregatecapacity.Trim();

        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return Convert.ToInt32(com.ExecuteScalar());
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet Getverifyofqueceigcfe(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyqueceigcfe", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet getdataofPowerDetailsCEIG(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofPowerDetCEIG", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetShowApprovalandFeesCEIGCFE(string SerchVer, string EnterpriseType, string RegulationId, string VoltageId, string NewExpansion, string Aggregatecapacity)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesceigcfe", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (RegulationId.Trim() == "" || RegulationId.Trim() == null)
                da.SelectCommand.Parameters.Add("@RegulationId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@RegulationId", SqlDbType.VarChar).Value = RegulationId.ToString();

            if (VoltageId.Trim() == "" || VoltageId.Trim() == null)
                da.SelectCommand.Parameters.Add("@VoltageId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@VoltageId", SqlDbType.VarChar).Value = VoltageId.ToString();

            if (NewExpansion.Trim() == "" || NewExpansion.Trim() == null)
                da.SelectCommand.Parameters.Add("@NewExpansion", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@NewExpansion", SqlDbType.VarChar).Value = NewExpansion.ToString();

            if (Aggregatecapacity.Trim() == "" || Aggregatecapacity == null)
                da.SelectCommand.Parameters.Add("@Aggregatecapacity", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Aggregatecapacity", SqlDbType.VarChar).Value = Aggregatecapacity.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet HelpdescReport_up(string Fromdate, string Todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_New_export"
            da = new SqlDataAdapter("USP_GET_HELPDESCSTATUS_UP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = Fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = Todate.ToString();

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertDeptDateTracingREN(string DepartmentId, string QuessionaireId, string Uid_No, string Apply_Date, string PreScrutinity_Date, string QueryRaised_Date, string QueryRespond_Date, string Approval_Date, string Application_Type, string ApprovalId)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = null;
        try
        {
            cmd = new SqlCommand("USP_INS_DASHBOARDDATA_REN", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
            //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
            cmd.Parameters.AddWithValue("@DepartmentId", Convert.ToString(DepartmentId));
            cmd.Parameters.AddWithValue("@QuessionaireId", Convert.ToString(QuessionaireId));
            cmd.Parameters.AddWithValue("@Uid_No", Convert.ToString(Uid_No));
            cmd.Parameters.AddWithValue("@Apply_Date", Apply_Date);
            //cmd.Parameters.AddWithValue("@PreScrutinity_Date", Convert.ToString(cmf.convertDateIndia(formvoobj.BillDate)));
            cmd.Parameters.AddWithValue("@PreScrutinity_Date", PreScrutinity_Date);
            cmd.Parameters.AddWithValue("@QueryRaised_Date", QueryRaised_Date);
            cmd.Parameters.AddWithValue("@QueryRespond_Date", QueryRespond_Date);
            cmd.Parameters.AddWithValue("@Approval_Date", Approval_Date);
            cmd.Parameters.AddWithValue("@Application_Type", Application_Type);
            cmd.Parameters.AddWithValue("@ApprovalId", ApprovalId);

            //cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            //cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            // valid = (Int32)cmd.Parameters["@Valid"].Value;

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }

    public DataSet GetShowDepartmentFilesIndusSearchNew(string Deptid, string intStageid, string intDistrictid, string NameofUnit, string UIDNUmber, string District_Id, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFilesIndusSearchNew", con.GetConnection);
            //da = new SqlDataAdapter("GetShowDepartmentFilesIndusSearch", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();

            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (District_Id.Trim() == "" || District_Id.Trim() == null || District_Id.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District_Id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District_Id", SqlDbType.VarChar).Value = District_Id.ToString();

            if (NameofUnit.Trim() == "" || NameofUnit.Trim() == null)
                da.SelectCommand.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@NameofUnit", SqlDbType.VarChar).Value = "%" + NameofUnit.ToString() + "%";


            if (UIDNUmber.Trim() == "" || UIDNUmber.Trim() == null)
                da.SelectCommand.Parameters.Add("@UIDNUmber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UIDNUmber", SqlDbType.VarChar).Value = "%" + UIDNUmber.ToString() + "%";

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetNotUpdatedDatatodeptCFO(string frmdate, string todate, string deptid, string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_WEBSERVICE_REPORT_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (frmdate.Trim() == "" || frmdate.Trim() == null)
                da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = frmdate.ToString();
            if (todate.Trim() == "" || todate.Trim() == null)
                da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = todate.ToString();

            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertQuetieneroesDeptEdited(string intQuessionaireid, string intDeptid, string intApprovalid, string Created_by, string Approval_Fee, string remarks, string modifiedby)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQuetieneroesDeptEdit";

        if (remarks == "" || remarks == null || remarks == "--Select--")
            com.Parameters.Add("@remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@remarks", SqlDbType.VarChar).Value = remarks.Trim();

        if (modifiedby == "" || modifiedby == null || modifiedby == "--Select--")
            com.Parameters.Add("@modifiedby", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@modifiedby", SqlDbType.VarChar).Value = modifiedby.Trim();

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.Decimal).Value = Convert.ToDecimal(Approval_Fee.Trim());

        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public int insertQuetieneroesEdit(QuesionerVO quesionervoobj)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertQuestioneriesEdit";

        if (quesionervoobj.intQuessionaireid == "" || quesionervoobj.intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = quesionervoobj.intQuessionaireid.Trim();

        if (quesionervoobj.Const_of_unit == "" || quesionervoobj.Const_of_unit == null || quesionervoobj.Const_of_unit == "--Select--")
            com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = quesionervoobj.Const_of_unit.Trim();

        if (quesionervoobj.Sector_Ent == "" || quesionervoobj.Sector_Ent == null || quesionervoobj.Sector_Ent == "--Select--")
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = quesionervoobj.Sector_Ent.Trim();

        if (quesionervoobj.Tot_Extent == "" || quesionervoobj.Tot_Extent == null || quesionervoobj.Tot_Extent == "--Select--")
            com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = quesionervoobj.Tot_Extent.Trim();

        if (quesionervoobj.Prop_intDistrictid == "" || quesionervoobj.Prop_intDistrictid == null || quesionervoobj.Prop_intDistrictid == "--Select--")
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = quesionervoobj.Prop_intDistrictid.Trim();

        if (quesionervoobj.Prop_intMandalid == "" || quesionervoobj.Prop_intMandalid == null || quesionervoobj.Prop_intMandalid == "--Select--")
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = quesionervoobj.Prop_intMandalid.Trim();

        if (quesionervoobj.Prop_intVillageid == "" || quesionervoobj.Prop_intVillageid == null || quesionervoobj.Prop_intVillageid == "--Select--")
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = quesionervoobj.Prop_intVillageid.Trim();

        if (quesionervoobj.Prop_Emp == "" || quesionervoobj.Prop_Emp == null || quesionervoobj.Prop_Emp == "--Select--")
            com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = quesionervoobj.Prop_Emp.Trim();

        if (quesionervoobj.Val_Land == "" || quesionervoobj.Val_Land == null || quesionervoobj.Val_Land == "--Select--")
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = quesionervoobj.Val_Land.Trim();

        if (quesionervoobj.Val_Build == "" || quesionervoobj.Val_Build == null || quesionervoobj.Val_Build == "--Select--")
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = quesionervoobj.Val_Build.Trim();

        if (quesionervoobj.Val_Plant == "" || quesionervoobj.Val_Plant == null || quesionervoobj.Val_Plant == "--Select--")
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = quesionervoobj.Val_Plant.Trim();

        if (quesionervoobj.Tot_PrjCost == "" || quesionervoobj.Tot_PrjCost == null || quesionervoobj.Tot_PrjCost == "--Select--")
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = quesionervoobj.Tot_PrjCost.Trim();

        if (quesionervoobj.Ent_is == "" || quesionervoobj.Ent_is == null || quesionervoobj.Ent_is == "--Select--")
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = quesionervoobj.Ent_is.Trim();

        if (quesionervoobj.intLineofActivity == "" || quesionervoobj.intLineofActivity == null || quesionervoobj.intLineofActivity == "--Select--")
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = quesionervoobj.intLineofActivity.Trim();

        if (quesionervoobj.Pol_Indus == "" || quesionervoobj.Pol_Indus == null || quesionervoobj.Pol_Indus == "--Select--")
            com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = quesionervoobj.Pol_Indus.Trim();

        if (quesionervoobj.Pol_Category == "" || quesionervoobj.Pol_Category == null || quesionervoobj.Pol_Category == "--Select--")
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = quesionervoobj.Pol_Category.Trim();

        if (quesionervoobj.Power_Req == "" || quesionervoobj.Power_Req == null || quesionervoobj.Power_Req == "--Select--")
            com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = quesionervoobj.Power_Req.Trim();

        if (quesionervoobj.Loc_of_unit == "" || quesionervoobj.Loc_of_unit == null || quesionervoobj.Loc_of_unit == "--Select--")
            com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = quesionervoobj.Loc_of_unit.Trim();

        if (quesionervoobj.Water_req_Perday == "" || quesionervoobj.Water_req_Perday == null || quesionervoobj.Water_req_Perday == "--Select--")
            com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday.Trim();

        // added by shankar
        if (quesionervoobj.Water_req_Perday1 == "" || quesionervoobj.Water_req_Perday1 == null || quesionervoobj.Water_req_Perday1 == "--Select--")
            com.Parameters.Add("@Water_req_Perday1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday1", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday1.Trim();

        if (quesionervoobj.Water_req_Perday2 == "" || quesionervoobj.Water_req_Perday2 == null || quesionervoobj.Water_req_Perday2 == "--Select--")
            com.Parameters.Add("@Water_req_Perday2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday2", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday2.Trim();

        if (quesionervoobj.Water_req_Perday3 == "" || quesionervoobj.Water_req_Perday3 == null || quesionervoobj.Water_req_Perday3 == "--Select--")
            com.Parameters.Add("@Water_req_Perday3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday3", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday3.Trim();
        // end

        if (quesionervoobj.Water_reg_from1 == "" || quesionervoobj.Water_reg_from1 == null || quesionervoobj.Water_reg_from1 == "--Select--")
            com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from1.Trim();

        if (quesionervoobj.Water_reg_from2 == "" || quesionervoobj.Water_reg_from2 == null || quesionervoobj.Water_reg_from2 == "--Select--")
            com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from2.Trim();

        if (quesionervoobj.Water_reg_from3 == "" || quesionervoobj.Water_reg_from3 == null || quesionervoobj.Water_reg_from3 == "--Select--")
            com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from3.Trim();

        if (quesionervoobj.Do_Store_Kerosine == "" || quesionervoobj.Do_Store_Kerosine == null || quesionervoobj.Do_Store_Kerosine == "--Select--")
            com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = quesionervoobj.Do_Store_Kerosine.Trim();

        if (quesionervoobj.Gen_Reqired == "" || quesionervoobj.Gen_Reqired == null || quesionervoobj.Gen_Reqired == "--Select--")
            com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = quesionervoobj.Gen_Reqired.Trim();

        if (quesionervoobj.Hight_Build == "" || quesionervoobj.Hight_Build == null || quesionervoobj.Hight_Build == "--Select--")
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = quesionervoobj.Hight_Build.Trim();


        if (quesionervoobj.Built_up_Area == "" || quesionervoobj.Built_up_Area == null || quesionervoobj.Built_up_Area == "--Select--")
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = quesionervoobj.Built_up_Area.Trim();


        if (quesionervoobj.Fall_in_Municipal == "" || quesionervoobj.Fall_in_Municipal == null || quesionervoobj.Fall_in_Municipal == "--Select--")
            com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = quesionervoobj.Fall_in_Municipal.Trim();


        if (quesionervoobj.Prop_Site == "" || quesionervoobj.Prop_Site == null || quesionervoobj.Prop_Site == "--Select--")
            com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = quesionervoobj.Prop_Site.Trim();


        if (quesionervoobj.Appl_Status == "" || quesionervoobj.Appl_Status == null || quesionervoobj.Appl_Status == "--Select--")
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = quesionervoobj.Appl_Status.Trim();

        if (quesionervoobj.Appl_no == "" || quesionervoobj.Appl_no == null || quesionervoobj.Appl_no == "--Select--")
            com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = quesionervoobj.Appl_no.Trim();


        if (quesionervoobj.Created_by == "" || quesionervoobj.Created_by == null || quesionervoobj.Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = quesionervoobj.Created_by.Trim();

        if (quesionervoobj.NoofTrees == "" || quesionervoobj.NoofTrees == null || quesionervoobj.NoofTrees == "--Select--")
            com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = quesionervoobj.NoofTrees.Trim();

        if (quesionervoobj.Non_Exempted == "" || quesionervoobj.Non_Exempted == null || quesionervoobj.Appl_Type == "--Select--")
            com.Parameters.Add("@NonExmTrees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NonExmTrees", SqlDbType.VarChar).Value = quesionervoobj.Non_Exempted.Trim();

        if (quesionervoobj.Appl_Type == "" || quesionervoobj.Appl_Type == null || quesionervoobj.Appl_Type == "--Select--")
            com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = quesionervoobj.Appl_Type.Trim();

        if (quesionervoobj.nameofunit == "" || quesionervoobj.nameofunit == null || quesionervoobj.nameofunit == "--Select--")
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = quesionervoobj.nameofunit.Trim();

        if (quesionervoobj.TypeofMesurement == "" || quesionervoobj.TypeofMesurement == null || quesionervoobj.TypeofMesurement == "--Select--")
            com.Parameters.Add("@TypeofMesurement", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofMesurement", SqlDbType.VarChar).Value = quesionervoobj.TypeofMesurement.Trim();

        if (quesionervoobj.Val_Land_Actul == "" || quesionervoobj.Val_Land_Actul == null || quesionervoobj.Val_Land_Actul == "--Select--")
            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = quesionervoobj.Val_Land_Actul.Trim();

        if (quesionervoobj.Val_Build_Actul == "" || quesionervoobj.Val_Build_Actul == null || quesionervoobj.Val_Build_Actul == "--Select--")
            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = quesionervoobj.Val_Build_Actul.Trim();

        if (quesionervoobj.Val_Plant_Actul == "" || quesionervoobj.Val_Plant_Actul == null || quesionervoobj.Val_Plant_Actul == "--Select--")
            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = quesionervoobj.Val_Plant_Actul.Trim();

        com.Parameters.Add("@CurrencyType", SqlDbType.VarChar).Value = quesionervoobj.CurrencyType.Trim();

        if (quesionervoobj.TxtTot_ExtentNew == "" || quesionervoobj.TxtTot_ExtentNew == null || quesionervoobj.TxtTot_ExtentNew == "--Select--")
            com.Parameters.Add("@TxtTot_ExtentNew", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TxtTot_ExtentNew", SqlDbType.VarChar).Value = quesionervoobj.TxtTot_ExtentNew.Trim();

        if (quesionervoobj.TxtTot_Gunthas == "" || quesionervoobj.TxtTot_Gunthas == null || quesionervoobj.TxtTot_Gunthas == "--Select--")
            com.Parameters.Add("@TxtTot_Gunthas", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TxtTot_Gunthas", SqlDbType.VarChar).Value = quesionervoobj.TxtTot_Gunthas.Trim();
        if (quesionervoobj.IALAFlag == "" || quesionervoobj.IALAFlag == null || quesionervoobj.IALAFlag == "0")
            com.Parameters.Add("@IALAFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IALAFLAG", SqlDbType.VarChar).Value = quesionervoobj.IALAFlag.Trim();
        if (quesionervoobj.IALA_Code == "" || quesionervoobj.IALA_Code == null || quesionervoobj.IALA_Code == "0")
            com.Parameters.Add("@IALA_Code", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IALA_Code", SqlDbType.VarChar).Value = quesionervoobj.IALA_Code.Trim();

        if (quesionervoobj.LabourActID == "" || quesionervoobj.LabourActID == null || quesionervoobj.LabourActID == "0")
            com.Parameters.Add("@LabourAct_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LabourAct_Id", SqlDbType.VarChar).Value = quesionervoobj.LabourActID.Trim();

        // expansion
        if (quesionervoobj.Val_LandExpansion == "" || quesionervoobj.Val_LandExpansion == null || quesionervoobj.Val_LandExpansion == "0")
            com.Parameters.Add("@Val_LandExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_LandExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_LandExpansion;

        if (quesionervoobj.Val_BuildExpansion == "" || quesionervoobj.Val_BuildExpansion == null || quesionervoobj.Val_BuildExpansion == "0")
            com.Parameters.Add("@Val_BuildExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_BuildExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_BuildExpansion;

        if (quesionervoobj.Val_PlantExpansion == "" || quesionervoobj.Val_PlantExpansion == null || quesionervoobj.Val_PlantExpansion == "0")
            com.Parameters.Add("@Val_PlantExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_PlantExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_PlantExpansion;

        if (quesionervoobj.Val_Land_ActulExpansion == "" || quesionervoobj.Val_Land_ActulExpansion == null || quesionervoobj.Val_Land_ActulExpansion == "0")
            com.Parameters.Add("@Val_Land_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Land_ActulExpansion;

        if (quesionervoobj.Val_Build_ActulExpansion == "" || quesionervoobj.Val_Build_ActulExpansion == null || quesionervoobj.Val_Build_ActulExpansion == "0")
            com.Parameters.Add("@Val_Build_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Build_ActulExpansion;

        if (quesionervoobj.Val_Plant_ActulExpansion == "" || quesionervoobj.Val_Plant_ActulExpansion == null || quesionervoobj.Val_Plant_ActulExpansion == "0")
            com.Parameters.Add("@Val_Plant_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Plant_ActulExpansion;

        if (quesionervoobj.Tot_PrjCostExpansion == "" || quesionervoobj.Tot_PrjCostExpansion == null || quesionervoobj.Tot_PrjCostExpansion == "0")
            com.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.VarChar).Value = quesionervoobj.Tot_PrjCostExpansion;

        if (quesionervoobj.ProposalFor == "" || quesionervoobj.ProposalFor == null || quesionervoobj.ProposalFor == "0")
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = quesionervoobj.ProposalFor;
        if (quesionervoobj.LabelConfirmation != null && quesionervoobj.LabelConfirmation != "")
            com.Parameters.Add("@LabelConfirmation", SqlDbType.VarChar).Value = quesionervoobj.LabelConfirmation.Trim();

        if (quesionervoobj.TotalNoofWorkes != null && quesionervoobj.TotalNoofWorkes != "")
            com.Parameters.Add("@TotalNoofWorkes", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkes.Trim();

        if (quesionervoobj.TotalNoofWorkesforContractLbr != null && quesionervoobj.TotalNoofWorkesforContractLbr != "")
            com.Parameters.Add("@TotalNoofWorkesforContractLbr", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesforContractLbr.Trim();

        if (quesionervoobj.TotalNoofWorkesformigrantact != null && quesionervoobj.TotalNoofWorkesformigrantact != "")
            com.Parameters.Add("@TotalNoofWorkesformigrantact", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesformigrantact.Trim();

        if (quesionervoobj.MarketValue != null && quesionervoobj.MarketValue != "")
            com.Parameters.Add("@MarketValue", SqlDbType.VarChar).Value = quesionervoobj.MarketValue.Trim();

        if (quesionervoobj.TsiicPlotno != null && quesionervoobj.TsiicPlotno != "")
            com.Parameters.Add("@TsiicPlotno", SqlDbType.VarChar).Value = quesionervoobj.TsiicPlotno.Trim();

        if (quesionervoobj.TotalNoofWorkesformigrantact20d != null && quesionervoobj.TotalNoofWorkesformigrantact20d != "")
            com.Parameters.Add("@InterStateContractWorker", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesformigrantact20d.Trim();

        if (quesionervoobj.VicinityWater != null && quesionervoobj.VicinityWater != "")
            com.Parameters.Add("@VicitnyWaterBodyFlag", SqlDbType.VarChar).Value = quesionervoobj.VicinityWater.Trim();

        if (quesionervoobj.TotalNoofWorkesContractLabourAct_Lisense != null && quesionervoobj.TotalNoofWorkesContractLabourAct_Lisense != "")
            com.Parameters.Add("@ContractWorkerLicense", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesContractLabourAct_Lisense.Trim();

        if (quesionervoobj.CEIG != null && quesionervoobj.CEIG != "")
            com.Parameters.Add("@CEIG", SqlDbType.VarChar).Value = quesionervoobj.CEIG.Trim();

        if (quesionervoobj.RegulationType != null && quesionervoobj.RegulationType != "")
            com.Parameters.Add("@Regulation_type", SqlDbType.VarChar).Value = quesionervoobj.RegulationType.Trim();

        if (quesionervoobj.VoltageType != null && quesionervoobj.VoltageType != "")
            com.Parameters.Add("@Voltage_Slno", SqlDbType.VarChar).Value = quesionervoobj.VoltageType.Trim();

        if (quesionervoobj.AggregateCapacity != null && quesionervoobj.AggregateCapacity != "")
            com.Parameters.Add("@AggregateCapacity", SqlDbType.VarChar).Value = quesionervoobj.AggregateCapacity.Trim();

        if (quesionervoobj.Remarks != null && quesionervoobj.Remarks != "")
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = quesionervoobj.Remarks.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int insertCFOQuestionerrieEdit(string intQuessionaireCFOid, string Sector_Ent, string Prop_intDistrictid, string Prop_intMandalid, string Prop_intVillageid, string Val_Land, string Val_Build, string Val_Plant, string Tot_PrjCost,
                   string HaveyourTakePolution, string intLineofActivityid, string Pol_Category, string License_Factory, string High_Tension_Meter, string Building_Height, string NOC_Fire, string Product_Drugs, string Bioler_Industry, string Created_by, string nameofunit, string enterprisetype, string Appl_Status, string fisiability, string service,
       string Val_Land_Actul, string Val_Build_Actul, string Val_Plant_Actul, string CurrencyType, QuesionerVO quesionervoobj)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFOQuessionaryEdit";


        if (intQuessionaireCFOid == "" || intQuessionaireCFOid == null || intQuessionaireCFOid.Trim() == "--Select--")
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


        if (enterprisetype == "" || enterprisetype == null || enterprisetype.Trim() == "--Select--")
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = enterprisetype.Trim();

        if (Appl_Status == "" || Appl_Status == null || Appl_Status.Trim() == "--Select--")
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = Appl_Status.Trim();


        if (fisiability == "" || fisiability == null || fisiability.Trim() == "--Select--")
            com.Parameters.Add("@fisiability", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@fisiability", SqlDbType.VarChar).Value = fisiability.Trim();

        if (service == "" || service == null || service.Trim() == "--Select--")
            com.Parameters.Add("@service", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@service", SqlDbType.VarChar).Value = service.Trim();




        if (nameofunit == "" || nameofunit == null || nameofunit.Trim() == "--Select--")
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();

        if (Sector_Ent == "" || Sector_Ent == null || Sector_Ent.Trim() == "--Select--")
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();

        if (Prop_intDistrictid == "" || Prop_intDistrictid == null || Prop_intDistrictid.Trim() == "--Select--")
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = Prop_intDistrictid.Trim();

        if (Prop_intMandalid == "" || Prop_intMandalid == null || Prop_intMandalid.Trim() == "--Select--")
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = Prop_intMandalid.Trim();

        if (Prop_intVillageid == "" || Prop_intVillageid == null || Prop_intVillageid.Trim() == "--Select--")
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = Prop_intVillageid.Trim();

        //if (PolCategory == "" || PolCategory == null || PolCategory.Trim()=="--Select--")
        //    com.Parameters.Add("@PolCategory", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@PolCategory", SqlDbType.VarChar).Value = PolCategory.Trim();

        if (Val_Land == "" || Val_Land == null || Val_Land.Trim() == "--Select--")
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();

        if (Val_Build == "" || Val_Build == null || Val_Build.Trim() == "--Select--")
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();

        if (Val_Plant == "" || Val_Plant == null || Val_Plant.Trim() == "--Select--")
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();


        if (Tot_PrjCost == "" || Tot_PrjCost == null || Tot_PrjCost.Trim() == "--Select--")
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();


        if (HaveyourTakePolution == "" || HaveyourTakePolution == null || HaveyourTakePolution.Trim() == "--Select--")
            com.Parameters.Add("@HaveyourTakePolution", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@HaveyourTakePolution", SqlDbType.VarChar).Value = HaveyourTakePolution.Trim();
        //string intLineofActivityid, string Pol_Category, string License_Factory, string High_Tension_Meter, string NOC_Fire, string Product_Drugs, string Bioler_Industry
        if (intLineofActivityid == "" || intLineofActivityid == null || intLineofActivityid.Trim() == "--Select--")
            com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = intLineofActivityid.Trim();

        if (Pol_Category == "" || Pol_Category == null || Pol_Category.Trim() == "--Select--")
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();

        if (License_Factory == "" || License_Factory == null || License_Factory.Trim() == "--Select--")
            com.Parameters.Add("@License_Factory", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@License_Factory", SqlDbType.VarChar).Value = License_Factory.Trim();

        if (High_Tension_Meter == "" || High_Tension_Meter == null || High_Tension_Meter.Trim() == "--Select--")
            com.Parameters.Add("@High_Tension_Meter", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@High_Tension_Meter", SqlDbType.VarChar).Value = High_Tension_Meter.Trim();

        if (Building_Height == "" || Building_Height == null || Building_Height.Trim() == "--Select--")
            com.Parameters.Add("@Building_Height", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Building_Height", SqlDbType.VarChar).Value = NOC_Fire.Trim();

        if (NOC_Fire == "" || NOC_Fire == null || NOC_Fire.Trim() == "--Select--")
            com.Parameters.Add("@NOC_Fire", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NOC_Fire", SqlDbType.VarChar).Value = NOC_Fire.Trim();

        if (Product_Drugs == "" || Product_Drugs == null || NOC_Fire.Trim() == "--Select--")
            com.Parameters.Add("@Product_Drugs", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Product_Drugs", SqlDbType.VarChar).Value = Product_Drugs.Trim();

        if (Bioler_Industry == "" || Bioler_Industry == null || Bioler_Industry.Trim() == "--Select--")
            com.Parameters.Add("@Bioler_Industry", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Bioler_Industry", SqlDbType.VarChar).Value = Bioler_Industry.Trim();


        if (Created_by == "" || Created_by == null || Created_by.Trim() == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Val_Land_Actul == "" || Val_Land_Actul == null || Val_Land_Actul == "--Select--")
            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = Val_Land_Actul.Trim();

        if (Val_Build_Actul == "" || Val_Build_Actul == null || Val_Build_Actul == "--Select--")
            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = Val_Build_Actul.Trim();

        if (Val_Plant_Actul == "" || Val_Plant_Actul == null || Val_Plant_Actul == "--Select--")
            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = Val_Plant_Actul.Trim();

        com.Parameters.Add("@CurrencyType", SqlDbType.VarChar).Value = CurrencyType.Trim();

        if (quesionervoobj.LabourActID == "" || quesionervoobj.LabourActID == null || quesionervoobj.LabourActID == "0")
            com.Parameters.Add("@LabourAct_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LabourAct_Id", SqlDbType.VarChar).Value = quesionervoobj.LabourActID.Trim();

        // expansion
        if (quesionervoobj.Val_LandExpansion == "" || quesionervoobj.Val_LandExpansion == null || quesionervoobj.Val_LandExpansion == "0")
            com.Parameters.Add("@Val_LandExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_LandExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_LandExpansion;

        if (quesionervoobj.Val_BuildExpansion == "" || quesionervoobj.Val_BuildExpansion == null || quesionervoobj.Val_BuildExpansion == "0")
            com.Parameters.Add("@Val_BuildExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_BuildExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_BuildExpansion;

        if (quesionervoobj.Val_PlantExpansion == "" || quesionervoobj.Val_PlantExpansion == null || quesionervoobj.Val_PlantExpansion == "0")
            com.Parameters.Add("@Val_PlantExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_PlantExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_PlantExpansion;

        if (quesionervoobj.Val_Land_ActulExpansion == "" || quesionervoobj.Val_Land_ActulExpansion == null || quesionervoobj.Val_Land_ActulExpansion == "0")
            com.Parameters.Add("@Val_Land_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Land_ActulExpansion;

        if (quesionervoobj.Val_Build_ActulExpansion == "" || quesionervoobj.Val_Build_ActulExpansion == null || quesionervoobj.Val_Build_ActulExpansion == "0")
            com.Parameters.Add("@Val_Build_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Build_ActulExpansion;

        if (quesionervoobj.Val_Plant_ActulExpansion == "" || quesionervoobj.Val_Plant_ActulExpansion == null || quesionervoobj.Val_Plant_ActulExpansion == "0")
            com.Parameters.Add("@Val_Plant_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Plant_ActulExpansion;

        if (quesionervoobj.Tot_PrjCostExpansion == "" || quesionervoobj.Tot_PrjCostExpansion == null || quesionervoobj.Tot_PrjCostExpansion == "0")
            com.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.VarChar).Value = quesionervoobj.Tot_PrjCostExpansion;

        if (quesionervoobj.ProposalFor == "" || quesionervoobj.ProposalFor == null || quesionervoobj.ProposalFor == "0")
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = quesionervoobj.ProposalFor;

        if (quesionervoobj.LabelConfirmation != null && quesionervoobj.LabelConfirmation != "")
            com.Parameters.Add("@LabelConfirmation", SqlDbType.VarChar).Value = quesionervoobj.LabelConfirmation.Trim();

        if (quesionervoobj.TotalNoofWorkes != null && quesionervoobj.TotalNoofWorkes != "")
            com.Parameters.Add("@TotalNoofWorkes", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkes.Trim();

        if (quesionervoobj.TotalNoofWorkesforContractLbr != null && quesionervoobj.TotalNoofWorkesforContractLbr != "")
            com.Parameters.Add("@TotalNoofWorkesforContractLbr", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesforContractLbr.Trim();

        if (quesionervoobj.TotalNoofWorkesformigrantact != null && quesionervoobj.TotalNoofWorkesformigrantact != "")
            com.Parameters.Add("@TotalNoofWorkesformigrantact", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesformigrantact.Trim();

        if (quesionervoobj.txtDateofCommenceAct1 == null || quesionervoobj.txtDateofCommenceAct1 == "" || quesionervoobj.txtDateofCommenceAct1 == "0")
            com.Parameters.Add("@txtDateofCommenceAct1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@txtDateofCommenceAct1", SqlDbType.VarChar).Value = quesionervoobj.txtDateofCommenceAct1.Trim();

        if (quesionervoobj.SteamPipeline != null && quesionervoobj.SteamPipeline != "")
            com.Parameters.Add("@SteamPipeline", SqlDbType.VarChar).Value = quesionervoobj.SteamPipeline.Trim();

        if (quesionervoobj.Remarks != null && quesionervoobj.Remarks != "")
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = quesionervoobj.Remarks.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public int insertQuetieneroesDeptCFOEdit(string intQuessionaireid, string intDeptid, string intApprovalid, string Created_by, string Approval_Fee, string remarks, string modifiedby)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQuetieneroesDeptCFOEdit";

        if (remarks == "" || remarks == null)
            com.Parameters.Add("@remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@remarks", SqlDbType.VarChar).Value = remarks.Trim();

        if (modifiedby == "" || modifiedby == null)
            com.Parameters.Add("@modifiedby", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@modifiedby", SqlDbType.VarChar).Value = modifiedby.Trim();

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.Decimal).Value = Convert.ToDecimal(Approval_Fee.Trim());

        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet GetQueryStatusByTransactionIDPCBREN(string User_id, string intcfeid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDREN_PCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intcfeid.Trim() == "" || intcfeid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intcfeid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intcfeid", SqlDbType.VarChar).Value = intcfeid.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = User_id.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet getdepartmentdetailsonuidREN(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GETDETAILS_DEPARTMENT_SERVICE_REN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateDepartwebserviceflagREN(string uidno, string deptid, string flag, string output, string statusflag)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_UPD_DEPTCOMMONFEILDS_REN";

        if (uidno == "" || uidno == null)
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.Trim();

        if (deptid == "" || deptid == null)
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = deptid.Trim();

        if (flag == "" || flag == null)
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = flag.Trim();

        if (statusflag == "" || statusflag == null)
            com.Parameters.Add("@STATUSFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@STATUSFLAG", SqlDbType.VarChar).Value = statusflag.Trim();

        if (output == "" || output == null)
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = output.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet GetBillDeskNotUpdateReportCFO(string fromdate, string todate, string OnlineOrderNo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_BILLDESKPAYMENT_NOTUPDATEDCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getAdditionalPaymentDetailsREN(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ADDITIONALPAYMENTDETAILS_REN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentonuidREN(string uidno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_DEPARTMENTS_UID_REN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchTotalDistrictwise_New_NewWithoutDuplicate(string status, string fromdate, string todate, string EnterPriseType)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTotalDistrictwise_New_New_WithoutDuplicate", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchDistrictwiseDrildownNewWithoutDuplicate(string status, string District, string fromdate, string todate, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchDistrictwiseDrildownNew_CFE_WithoutDuplicate", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertKotakSplitPayment(string UidNo, string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string Created_by, string intApprovalid, string ApplType, string AdditionalPayment, string SplitOnlineOrderNo, string Accountnumber, string IFSCCODE)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[USP_INSERT_KotakSplit_PaymentDtls]";

        if (UidNo.Trim() == "" || UidNo.Trim() == null)
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UidNo.Trim();
        }
        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }
        if (AdditionalPayment == "" || AdditionalPayment == null)
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = AdditionalPayment.Trim();

        if (SplitOnlineOrderNo == "" || SplitOnlineOrderNo == null)
            com.Parameters.Add("@SplitOnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SplitOnlineOrderNo", SqlDbType.VarChar).Value = SplitOnlineOrderNo.Trim();

        com.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.Trim();

        if (Accountnumber == "" || Accountnumber == null)
            com.Parameters.Add("@Accountnumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Accountnumber", SqlDbType.VarChar).Value = Accountnumber.Trim();

        if (IFSCCODE == "" || IFSCCODE == null)
            com.Parameters.Add("@IFSCCODE", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IFSCCODE", SqlDbType.VarChar).Value = IFSCCODE.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet getAdditionalAttachmentsHMDA(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_AdditionalAttachmentsHMDA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertProfessionalTaxDetails(proffecionaltaxBankDetails objvo, List<Professiontaxaddressdetails> proftaxAdressDetails, List<Professiontaxpromoterdetails> listProftaxpromotional)
    {

        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand("usp_userbankdetails", connection, transaction);
            com.CommandType = CommandType.StoredProcedure;
            // com.CommandText = "[usp_userbankdetails]";


            if (objvo.ESTimatedannualturnover.Trim() == "" || objvo.ESTimatedannualturnover.Trim() == null)
                com.Parameters.Add("@ESTimatedannualturnover", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@ESTimatedannualturnover", SqlDbType.VarChar).Value = objvo.ESTimatedannualturnover.Trim();




            if (objvo.panofindustrial.Trim() == "" || objvo.panofindustrial.Trim() == null)
                com.Parameters.Add("@panofindustrial", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@panofindustrial", SqlDbType.VarChar).Value = objvo.panofindustrial.Trim();


            if (objvo.BankName.Trim() == "" || objvo.BankName.Trim() == null)
                com.Parameters.Add("@bankname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@bankname", SqlDbType.VarChar).Value = objvo.BankName.Trim();

            if (objvo.BranchName.Trim() == "" || objvo.BranchName.Trim() == null)
                com.Parameters.Add("@branch", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@branch", SqlDbType.VarChar).Value = objvo.BranchName.Trim();

            if (objvo.AccNo.Trim() == "" || objvo.AccNo.Trim() == null)
                com.Parameters.Add("@acountno", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@acountno", SqlDbType.VarChar).Value = objvo.AccNo.Trim();

            if (objvo.IFSCCode.Trim() == "" || objvo.IFSCCode.Trim() == null)
                com.Parameters.Add("@IFSCcode", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@IFSCcode", SqlDbType.VarChar).Value = objvo.IFSCCode.Trim();

            if (objvo.QuestionnaireId != 0)
            {
                com.Parameters.AddWithValue("@intquestionarrieid", SqlDbType.Int).Value = objvo.QuestionnaireId;
            }

            if (objvo.Intenterprenuerid != 0)
            {
                com.Parameters.AddWithValue("@intenterprenuerid", SqlDbType.Int).Value = objvo.Intenterprenuerid;
            }

            if (objvo.CreatedBy != 0)
            {
                com.Parameters.AddWithValue("@Createdby", SqlDbType.Int).Value = objvo.CreatedBy;
            }

            if (objvo.modified != 0)
            {
                com.Parameters.AddWithValue("@modifiedby", SqlDbType.Int).Value = objvo.modified;
            }


            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = Convert.ToInt32(com.Parameters["@Valid"].Value);

            if (valid != 0)
            {

                SqlCommand cmdDelPromoterdetails = new SqlCommand("[USP_DEL_Promoterdtls_proffesionalTax]", connection);
                cmdDelPromoterdetails.CommandType = CommandType.StoredProcedure;
                cmdDelPromoterdetails.Transaction = transaction;
                cmdDelPromoterdetails.Connection = connection;
                cmdDelPromoterdetails.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = objvo.QuestionnaireId; //objProfftaxtpromdetails.QuestionnaireId;
                cmdDelPromoterdetails.ExecuteNonQuery();

                foreach (Professiontaxpromoterdetails objProfftaxtpromdetails in listProftaxpromotional)
                {
                    SqlCommand cmdEnj = new SqlCommand("[usp_Promoterdtls_proffesionalTax]", connection);
                    cmdEnj.CommandType = CommandType.StoredProcedure;
                    cmdEnj.Transaction = transaction;
                    cmdEnj.Connection = connection;

                    cmdEnj.Parameters.AddWithValue("@intquestionarrieid", SqlDbType.Int).Value = objProfftaxtpromdetails.QuestionnaireId;

                    if (objProfftaxtpromdetails.Intenterprenuerid != 0)
                        cmdEnj.Parameters.AddWithValue("@intenterprenuerid", objProfftaxtpromdetails.Intenterprenuerid);
                    if (objProfftaxtpromdetails.Doorno != null)
                        cmdEnj.Parameters.AddWithValue("@Name", objProfftaxtpromdetails.Name);

                    if (objProfftaxtpromdetails.dob != null)
                        cmdEnj.Parameters.AddWithValue("@dob", objProfftaxtpromdetails.dob);
                    if (objProfftaxtpromdetails.patnertype != null)
                        cmdEnj.Parameters.AddWithValue("@patnertype", objProfftaxtpromdetails.patnertype);

                    if (objProfftaxtpromdetails.gender != null)
                        cmdEnj.Parameters.AddWithValue("@gender", objProfftaxtpromdetails.gender);

                    if (objProfftaxtpromdetails.Doorno != null)
                        cmdEnj.Parameters.AddWithValue("@Door_no", objProfftaxtpromdetails.Doorno);
                    if (objProfftaxtpromdetails.pan != null)
                        cmdEnj.Parameters.AddWithValue("@pan", objProfftaxtpromdetails.pan);
                    if (objProfftaxtpromdetails.road != null)
                        cmdEnj.Parameters.AddWithValue("@Road", objProfftaxtpromdetails.road);
                    if (objProfftaxtpromdetails.country != null)
                        cmdEnj.Parameters.AddWithValue("@country", objProfftaxtpromdetails.country);
                    if (objProfftaxtpromdetails.state != null)
                        cmdEnj.Parameters.AddWithValue("@state", objProfftaxtpromdetails.state);
                    if (objProfftaxtpromdetails.district != null)
                        cmdEnj.Parameters.AddWithValue("@district", objProfftaxtpromdetails.district);

                    if (objProfftaxtpromdetails.city != null)
                        cmdEnj.Parameters.AddWithValue("@city", objProfftaxtpromdetails.city);
                    if (objProfftaxtpromdetails.pin != null)
                        cmdEnj.Parameters.AddWithValue("@pin", objProfftaxtpromdetails.pin);
                    if (objProfftaxtpromdetails.CreatedBy != 0)
                        cmdEnj.Parameters.AddWithValue("@Createdby", objProfftaxtpromdetails.CreatedBy);
                    if (objProfftaxtpromdetails.modified != 0)
                        cmdEnj.Parameters.AddWithValue("@modifiedby", objProfftaxtpromdetails.modified);

                    if (objProfftaxtpromdetails.Email != null)
                        cmdEnj.Parameters.AddWithValue("@Email", objProfftaxtpromdetails.Email);

                    if (objProfftaxtpromdetails.MobileNo != null)
                        cmdEnj.Parameters.AddWithValue("@MobileNo", objProfftaxtpromdetails.MobileNo);

                    if (objProfftaxtpromdetails.AadharNo != null)
                        cmdEnj.Parameters.AddWithValue("@AadharNo", objProfftaxtpromdetails.AadharNo);
                    cmdEnj.ExecuteNonQuery();
                }



                SqlCommand cmdDelBusinessPlace = new SqlCommand("[USP_DEL_BusinessAddress_proffesionalTax]", connection);
                cmdDelBusinessPlace.CommandType = CommandType.StoredProcedure;
                cmdDelBusinessPlace.Transaction = transaction;
                cmdDelBusinessPlace.Connection = connection;
                cmdDelBusinessPlace.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = objvo.QuestionnaireId;
                cmdDelBusinessPlace.ExecuteNonQuery();

                foreach (Professiontaxaddressdetails objProfftaxAdress in proftaxAdressDetails)
                {
                    SqlCommand cmdEnj = new SqlCommand("[usp_BusinessAddress_proffesionalTax]", connection);
                    cmdEnj.CommandType = CommandType.StoredProcedure;
                    cmdEnj.Transaction = transaction;
                    cmdEnj.Connection = connection;

                    cmdEnj.Parameters.AddWithValue("@intquestionarrieid", SqlDbType.Int).Value = objProfftaxAdress.QuestionnaireId;
                    if (objProfftaxAdress.Intenterprenuerid != 0)
                        cmdEnj.Parameters.AddWithValue("@intenterprenuerid", objProfftaxAdress.Intenterprenuerid);
                    if (objProfftaxAdress.Doorno != null)
                        cmdEnj.Parameters.AddWithValue("@Door_no", objProfftaxAdress.Doorno);

                    if (objProfftaxAdress.road != null)
                        cmdEnj.Parameters.AddWithValue("@Road", objProfftaxAdress.road);
                    if (objProfftaxAdress.locality != null)
                        cmdEnj.Parameters.AddWithValue("@locality", objProfftaxAdress.locality);

                    if (objProfftaxAdress.mandal != null)
                        cmdEnj.Parameters.AddWithValue("@mandal", objProfftaxAdress.mandal);

                    if (objProfftaxAdress.state != null)
                        cmdEnj.Parameters.AddWithValue("@state", objProfftaxAdress.state);
                    if (objProfftaxAdress.district != null)
                        cmdEnj.Parameters.AddWithValue("@district", objProfftaxAdress.district);
                    if (objProfftaxAdress.city != null)
                        cmdEnj.Parameters.AddWithValue("@city", objProfftaxAdress.city);
                    if (objProfftaxAdress.pin != null)
                        cmdEnj.Parameters.AddWithValue("@pin", objProfftaxAdress.pin);
                    if (objProfftaxAdress.CreatedBy != 0)
                        cmdEnj.Parameters.AddWithValue("@Createdby", objProfftaxAdress.CreatedBy);
                    if (objProfftaxAdress.modified != 0)
                        cmdEnj.Parameters.AddWithValue("@modifiedby", objProfftaxAdress.modified);
                    //  connection.Open();
                    cmdEnj.ExecuteNonQuery();
                }





            }

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    //public int InsertProfessionalTaxDetails(proffecionaltaxBankDetails objvo, List<Professiontaxaddressdetails> proftaxAdressDetails, List<Professiontaxpromoterdetails> listProftaxpromotional)
    //{

    //    int valid = 0;
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand("usp_userbankdetails", connection, transaction);
    //        com.CommandType = CommandType.StoredProcedure;
    //        // com.CommandText = "[usp_userbankdetails]";


    //        if (objvo.ESTimatedannualturnover.Trim() == "" || objvo.ESTimatedannualturnover.Trim() == null)
    //            com.Parameters.Add("@ESTimatedannualturnover", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            com.Parameters.Add("@ESTimatedannualturnover", SqlDbType.VarChar).Value = objvo.ESTimatedannualturnover.Trim();




    //        if (objvo.panofindustrial.Trim() == "" || objvo.panofindustrial.Trim() == null)
    //            com.Parameters.Add("@panofindustrial", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            com.Parameters.Add("@panofindustrial", SqlDbType.VarChar).Value = objvo.panofindustrial.Trim();


    //        if (objvo.BankName.Trim() == "" || objvo.BankName.Trim() == null)
    //            com.Parameters.Add("@bankname", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            com.Parameters.Add("@bankname", SqlDbType.VarChar).Value = objvo.BankName.Trim();

    //        if (objvo.BranchName.Trim() == "" || objvo.BranchName.Trim() == null)
    //            com.Parameters.Add("@branch", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            com.Parameters.Add("@branch", SqlDbType.VarChar).Value = objvo.BranchName.Trim();

    //        if (objvo.AccNo.Trim() == "" || objvo.AccNo.Trim() == null)
    //            com.Parameters.Add("@acountno", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            com.Parameters.Add("@acountno", SqlDbType.VarChar).Value = objvo.AccNo.Trim();

    //        if (objvo.IFSCCode.Trim() == "" || objvo.IFSCCode.Trim() == null)
    //            com.Parameters.Add("@IFSCcode", SqlDbType.VarChar).Value = DBNull.Value;
    //        else
    //            com.Parameters.Add("@IFSCcode", SqlDbType.VarChar).Value = objvo.IFSCCode.Trim();

    //        if (objvo.QuestionnaireId != 0)
    //        {
    //            com.Parameters.AddWithValue("@intquestionarrieid", SqlDbType.Int).Value = objvo.QuestionnaireId;
    //        }

    //        if (objvo.Intenterprenuerid != 0)
    //        {
    //            com.Parameters.AddWithValue("@intenterprenuerid", SqlDbType.Int).Value = objvo.Intenterprenuerid;
    //        }

    //        if (objvo.CreatedBy != 0)
    //        {
    //            com.Parameters.AddWithValue("@Createdby", SqlDbType.Int).Value = objvo.CreatedBy;
    //        }

    //        if (objvo.modified != 0)
    //        {
    //            com.Parameters.AddWithValue("@modifiedby", SqlDbType.Int).Value = objvo.modified;
    //        }

    //        if (objvo.professiontype != "0")
    //        {
    //            com.Parameters.AddWithValue("@professiontype", SqlDbType.VarChar).Value = objvo.professiontype;
    //        }

    //        com.Parameters.Add("@Valid", SqlDbType.Int, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = Convert.ToInt32(com.Parameters["@Valid"].Value);

    //        if (valid != 0)
    //        {

    //            SqlCommand cmdDelPromoterdetails = new SqlCommand("[USP_DEL_Promoterdtls_proffesionalTax]", connection);
    //            cmdDelPromoterdetails.CommandType = CommandType.StoredProcedure;
    //            cmdDelPromoterdetails.Transaction = transaction;
    //            cmdDelPromoterdetails.Connection = connection;
    //            cmdDelPromoterdetails.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = objvo.QuestionnaireId; //objProfftaxtpromdetails.QuestionnaireId;

    //            foreach (Professiontaxpromoterdetails objProfftaxtpromdetails in listProftaxpromotional)
    //            {
    //                SqlCommand cmdEnj = new SqlCommand("[usp_Promoterdtls_proffesionalTax]", connection);
    //                cmdEnj.CommandType = CommandType.StoredProcedure;
    //                cmdEnj.Transaction = transaction;
    //                cmdEnj.Connection = connection;

    //                cmdEnj.Parameters.AddWithValue("@intquestionarrieid", SqlDbType.Int).Value = objProfftaxtpromdetails.QuestionnaireId;

    //                if (objProfftaxtpromdetails.Intenterprenuerid != 0)
    //                    cmdEnj.Parameters.AddWithValue("@intenterprenuerid", objProfftaxtpromdetails.Intenterprenuerid);
    //                if (objProfftaxtpromdetails.Doorno != null)
    //                    cmdEnj.Parameters.AddWithValue("@Name", objProfftaxtpromdetails.Name);

    //                if (objProfftaxtpromdetails.dob != null)
    //                    cmdEnj.Parameters.AddWithValue("@dob", objProfftaxtpromdetails.dob);
    //                if (objProfftaxtpromdetails.patnertype != null)
    //                    cmdEnj.Parameters.AddWithValue("@patnertype", objProfftaxtpromdetails.patnertype);

    //                if (objProfftaxtpromdetails.gender != null)
    //                    cmdEnj.Parameters.AddWithValue("@gender", objProfftaxtpromdetails.gender);

    //                if (objProfftaxtpromdetails.Doorno != null)
    //                    cmdEnj.Parameters.AddWithValue("@Door_no", objProfftaxtpromdetails.Doorno);
    //                if (objProfftaxtpromdetails.pan != null)
    //                    cmdEnj.Parameters.AddWithValue("@pan", objProfftaxtpromdetails.pan);
    //                if (objProfftaxtpromdetails.road != null)
    //                    cmdEnj.Parameters.AddWithValue("@Road", objProfftaxtpromdetails.road);
    //                if (objProfftaxtpromdetails.country != null)
    //                    cmdEnj.Parameters.AddWithValue("@country", objProfftaxtpromdetails.country);
    //                if (objProfftaxtpromdetails.state != null)
    //                    cmdEnj.Parameters.AddWithValue("@state", objProfftaxtpromdetails.state);
    //                if (objProfftaxtpromdetails.district != null)
    //                    cmdEnj.Parameters.AddWithValue("@district", objProfftaxtpromdetails.district);

    //                if (objProfftaxtpromdetails.city != null)
    //                    cmdEnj.Parameters.AddWithValue("@city", objProfftaxtpromdetails.city);
    //                if (objProfftaxtpromdetails.pin != null)
    //                    cmdEnj.Parameters.AddWithValue("@pin", objProfftaxtpromdetails.pin);
    //                if (objProfftaxtpromdetails.CreatedBy != 0)
    //                    cmdEnj.Parameters.AddWithValue("@Createdby", objProfftaxtpromdetails.CreatedBy);
    //                if (objProfftaxtpromdetails.modified != 0)
    //                    cmdEnj.Parameters.AddWithValue("@modifiedby", objProfftaxtpromdetails.modified);

    //                if (objProfftaxtpromdetails.Email != null)
    //                    cmdEnj.Parameters.AddWithValue("@Email", objProfftaxtpromdetails.Email);

    //                if (objProfftaxtpromdetails.MobileNo != null)
    //                    cmdEnj.Parameters.AddWithValue("@MobileNo", objProfftaxtpromdetails.MobileNo);

    //                if (objProfftaxtpromdetails.AadharNo != null)
    //                    cmdEnj.Parameters.AddWithValue("@AadharNo", objProfftaxtpromdetails.AadharNo);
    //                cmdEnj.ExecuteNonQuery();
    //            }

    //            SqlCommand cmdDelBusinessPlace = new SqlCommand("[USP_DEL_BusinessAddress_proffesionalTax]", connection);
    //            cmdDelBusinessPlace.CommandType = CommandType.StoredProcedure;
    //            cmdDelBusinessPlace.Transaction = transaction;
    //            cmdDelBusinessPlace.Connection = connection;
    //            cmdDelBusinessPlace.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = objvo.QuestionnaireId;
    //            cmdDelBusinessPlace.ExecuteNonQuery();

    //            foreach (Professiontaxaddressdetails objProfftaxAdress in proftaxAdressDetails)
    //            {
    //                SqlCommand cmdEnj = new SqlCommand("[usp_BusinessAddress_proffesionalTax]", connection);
    //                cmdEnj.CommandType = CommandType.StoredProcedure;
    //                cmdEnj.Transaction = transaction;
    //                cmdEnj.Connection = connection;

    //                cmdEnj.Parameters.AddWithValue("@intquestionarrieid", SqlDbType.Int).Value = objProfftaxAdress.QuestionnaireId;
    //                if (objProfftaxAdress.Intenterprenuerid != 0)
    //                    cmdEnj.Parameters.AddWithValue("@intenterprenuerid", objProfftaxAdress.Intenterprenuerid);
    //                if (objProfftaxAdress.Doorno != null)
    //                    cmdEnj.Parameters.AddWithValue("@Door_no", objProfftaxAdress.Doorno);

    //                if (objProfftaxAdress.road != null)
    //                    cmdEnj.Parameters.AddWithValue("@Road", objProfftaxAdress.road);
    //                if (objProfftaxAdress.locality != null)
    //                    cmdEnj.Parameters.AddWithValue("@locality", objProfftaxAdress.locality);

    //                if (objProfftaxAdress.mandal != null)
    //                    cmdEnj.Parameters.AddWithValue("@mandal", objProfftaxAdress.mandal);

    //                if (objProfftaxAdress.state != null)
    //                    cmdEnj.Parameters.AddWithValue("@state", objProfftaxAdress.state);
    //                if (objProfftaxAdress.district != null)
    //                    cmdEnj.Parameters.AddWithValue("@district", objProfftaxAdress.district);
    //                if (objProfftaxAdress.city != null)
    //                    cmdEnj.Parameters.AddWithValue("@city", objProfftaxAdress.city);
    //                if (objProfftaxAdress.pin != null)
    //                    cmdEnj.Parameters.AddWithValue("@pin", objProfftaxAdress.pin);
    //                if (objProfftaxAdress.CreatedBy != 0)
    //                    cmdEnj.Parameters.AddWithValue("@Createdby", objProfftaxAdress.CreatedBy);
    //                if (objProfftaxAdress.modified != 0)
    //                    cmdEnj.Parameters.AddWithValue("@modifiedby", objProfftaxAdress.modified);
    //                //  connection.Open();
    //                cmdEnj.ExecuteNonQuery();
    //            }
    //        }

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}


    public DataSet GetverifyofqueProfessionTax(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[getdataverifyque_Professiontax]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getdataofProfessionTax(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofProfessionTax", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetProfessionTaxCountries()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PTCOUNTRIES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetProfessionTaxStates()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PTSTATES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetProfessionTaxDistricts()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PTDISTRICTS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetProfessionTaxpartnertype()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PTPARTNERTYPE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetProfessionTaxBankMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PT_BANKMASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetPTDivisons(string Districtid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PT_DIVISIONS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Districtid.Trim() == "" || Districtid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Districtid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Districtid", SqlDbType.VarChar).Value = Districtid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetPTDCircles(string Divisionid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PT_CIRCLES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Divisionid.Trim() == "" || Divisionid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Divisionid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Divisionid", SqlDbType.VarChar).Value = Divisionid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetProfessionTypeMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PROFESSIONTYPE_MASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int InsertBOILERCenteralInspection(CenteralInspectionVo centralvo)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_BOILERCENTRALINSPECTION";


        if (centralvo.BoilerAllocationMonth == "" || centralvo.BoilerAllocationMonth == null)
            com.Parameters.Add("@AllocationMonth", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AllocationMonth", SqlDbType.VarChar).Value = centralvo.BoilerAllocationMonth.Trim();

        if (centralvo.BoilerAllocationYear == "" || centralvo.BoilerAllocationYear == null)
            com.Parameters.Add("@AllocationYear", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AllocationYear", SqlDbType.VarChar).Value = centralvo.BoilerAllocationYear.Trim();

        if (centralvo.BoilermakerNumber == "" || centralvo.BoilermakerNumber == null)
            com.Parameters.Add("@BoilerMakerNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BoilerMakerNo", SqlDbType.VarChar).Value = centralvo.BoilermakerNumber.Trim();

        if (centralvo.BoilerOwnerName == "" || centralvo.BoilerOwnerName == null)
            com.Parameters.Add("@OwnerName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OwnerName", SqlDbType.VarChar).Value = centralvo.BoilerOwnerName.Trim();

        if (centralvo.BoilerAddress == "" || centralvo.BoilerAddress == null)
            com.Parameters.Add("@address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@address", SqlDbType.VarChar).Value = centralvo.BoilerAddress.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public DataSet getEnterprenuerRenewalBoilerdashboarddrilldown(string intEntid, string status, string intQuessionaireid, string createddt)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getEnterprenuerRenewalBoilerdashboarddrilldown", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (intEntid.Trim() == "" || intEntid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEntid", SqlDbType.VarChar).Value = intEntid.ToString();

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (createddt.Trim() == "" || createddt.Trim() == null)
                da.SelectCommand.Parameters.Add("@createddt", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@createddt", SqlDbType.VarChar).Value = createddt.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int InsertBoilerStageDetailsRenewal(string intQuessionaireid,
string intCFEEnterpid,
string intDeptid,
string intApprovalid,
string BoilerStageid,
string Reschduleinspectiondate,
string ReschduleHydraulicTestdate,
string RespondRemarks,
string Created_by,
string Modified_by, string IPAddress)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_UpdateBoilerStagesRenewal", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IPAddress.Trim() == "" || IPAddress.Trim() == null || IPAddress.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }



            if (BoilerStageid.ToString().Trim() == "" || BoilerStageid.ToString().Trim() == null || BoilerStageid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@BoilerStageid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@BoilerStageid", SqlDbType.VarChar).Value = BoilerStageid.Trim();

            if (Reschduleinspectiondate.ToString().Trim() == "" || Reschduleinspectiondate.ToString().Trim() == null || Reschduleinspectiondate.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Reschduleinspectiondate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Reschduleinspectiondate", SqlDbType.VarChar).Value = Reschduleinspectiondate.Trim();

            if (ReschduleHydraulicTestdate.ToString().Trim() == "" || ReschduleHydraulicTestdate.ToString().Trim() == null || ReschduleHydraulicTestdate.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@ReschduleHydraulicTestdate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@ReschduleHydraulicTestdate", SqlDbType.VarChar).Value = ReschduleHydraulicTestdate.Trim();

            if (RespondRemarks.ToString().Trim() == "" || RespondRemarks.ToString().Trim() == null || RespondRemarks.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@RespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@RespondRemarks", SqlDbType.VarChar).Value = RespondRemarks.Trim();



            //-------------------------------------------------
            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }



            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetBoilerStages(string Presentstageid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("Get_Boilers_Stages", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Presentstageid.Trim() == "" || Presentstageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Presentstageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Presentstageid", SqlDbType.VarChar).Value = Presentstageid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetShowApprovalandFeesEnterPriseAmountRenewal(string SerchVer, string EnterpriseType, string TotPlantCost, string TotProjectCost, string NoofTrees)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesProjectCost_Renewal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();

            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (TotPlantCost.Trim() == "" || TotPlantCost.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotPlantCost", SqlDbType.VarChar).Value = "0";
            else
                da.SelectCommand.Parameters.Add("@TotPlantCost", SqlDbType.Decimal).Value = Convert.ToDecimal(TotPlantCost.ToString());


            if (TotProjectCost.Trim() == "" || TotProjectCost.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotProjectCost", SqlDbType.VarChar).Value = "0";
            else
                da.SelectCommand.Parameters.Add("@TotProjectCost", SqlDbType.Decimal).Value = Convert.ToDecimal(TotProjectCost.ToString());
            if (NoofTrees.Trim() == "" || NoofTrees.Trim() == null)
                da.SelectCommand.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = "0";
            else
                da.SelectCommand.Parameters.Add("@NoofTrees", SqlDbType.Decimal).Value = Convert.ToDecimal(NoofTrees.ToString());



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getattachmentdetailsonuidREN(string uidno, string deptid, string applid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ATTACHMENTS_UID_REN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            if (applid.Trim() != "" || applid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@APPLID", SqlDbType.VarChar).Value = applid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@APPLID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertQueryDetailsCFOCEIG(string intEnterpreniourApprovalid,
string intQuessionaireid,
string intCFEEnterpid,
string intDeptid,
string intApprovalid,
string QueryRaiseDate,
string QueryDescription,
string QueryStatus,
string QueryAttachmentFileName,
string QueryAttachmentFilePath,
string QueryRespondDate,
string QueryRespondRemarks,
string Created_by,
string Created_dt,
string Modified_by, string Modified_dt, string IPAddress)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertQueryDetailsCFO_CEIG", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IPAddress.Trim() == "" || IPAddress.Trim() == null || IPAddress.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();
            }



            if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }

            if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            //-------------------------------------------------
            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetQueryStatusByTransactionIDCFOCEIG(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDCFO_CEIG", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBuildingPErmissionNumber(string User_id, string Filenumber, string architectno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetBuildingPermissionNumber", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@createdby", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@createdby", SqlDbType.VarChar).Value = User_id.ToString();

            if (Filenumber.Trim() == "" || Filenumber.Trim() == null)
                da.SelectCommand.Parameters.Add("@Filenumber", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Filenumber", SqlDbType.VarChar).Value = Filenumber.ToString();

            if (architectno.Trim() == "" || architectno.Trim() == null)
                da.SelectCommand.Parameters.Add("@architectno", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@architectno", SqlDbType.VarChar).Value = architectno.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int insertbuildinglist(List<SanctionBuildingDetails> lstSanctionBuildingDetails, HmdaOcVos hmdavo)
    {
        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();
        try
        {
            SqlCommand cmdDelPromoterdetails = new SqlCommand("[USP_DEL_SactionBuildingDetails]", connection);
            cmdDelPromoterdetails.CommandType = CommandType.StoredProcedure;
            cmdDelPromoterdetails.Transaction = transaction;
            cmdDelPromoterdetails.Connection = connection;
            cmdDelPromoterdetails.Parameters.AddWithValue("@QuessionaireidCFO", SqlDbType.Int).Value = hmdavo.intQuessionaireCFOid; //objProfftaxtpromdetails.QuestionnaireId;
            cmdDelPromoterdetails.ExecuteNonQuery();

            foreach (SanctionBuildingDetails sanctionvo in lstSanctionBuildingDetails)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INSERT_HMDA_OC_BuildingDetails]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                cmdEnj.Parameters.AddWithValue("@CFOEnterpid", sanctionvo.intCFOEnterid);
                cmdEnj.Parameters.AddWithValue("@QuessionaireidCFO", sanctionvo.intQuessionaireCFOid);
                cmdEnj.Parameters.AddWithValue("@BuildingID", Convert.ToString(sanctionvo.Buildingid));
                cmdEnj.Parameters.AddWithValue("@BuildingName", Convert.ToString(sanctionvo.BuildingName));
                cmdEnj.Parameters.AddWithValue("@PlotNo", Convert.ToString(sanctionvo.PlotNo));
                cmdEnj.Parameters.AddWithValue("@Created_By ", sanctionvo.CreatedBy);
                //cmdEnj.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
                //cmdEnj.Parameters["@Valid"].Direction = ParameterDirection.Output;
                //cmdEnj.ExecuteNonQuery();
                //valid = cmdEnj.Parameters["@Valid"].Value.ToString();

                cmdEnj.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmdEnj.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmdEnj.ExecuteNonQuery();
                valid = Convert.ToInt32(cmdEnj.Parameters["@Valid"].Value);
            }

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public DataSet GetEnterPreniourPayDetailsTSIIC(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetails_TSIIC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowQuestionaries_TSIIC(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowQuestionaries_TSIIC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetUidnumberTSIIC(string intQuessionaireid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getUIDNumberdata_TSIIC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertUIDGenerationTSIIC(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertUIDGeneration_TSIIC";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate == "" || Payment_DDDate == null)
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int InsertPaymentBillDeskTSIIC(string UidNo, string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string Created_by, string intApprovalid, string ApplType, string AdditionalPayment)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[USP_INSERT_Builldesc_PaymentDtls_TSIIC]";

        if (UidNo.Trim() == "" || UidNo.Trim() == null)
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UidNo.Trim();
        }
        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }
        if (AdditionalPayment == "" || AdditionalPayment == null)
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = AdditionalPayment.Trim();

        com.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet getattachmentdetailsonuidQueryTSIIC(string ApplicationId, string QueryID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_Select_TSIICquery_DTLS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (ApplicationId.Trim() != "" || ApplicationId.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@ApplicationId", SqlDbType.VarChar).Value = ApplicationId.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@ApplicationId", SqlDbType.VarChar).Value = null;
            }
            if (QueryID.Trim() != "" || QueryID.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@QueryID", SqlDbType.VarChar).Value = QueryID.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@QueryID", SqlDbType.VarChar).Value = null;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterprinerpaymentDtlsTSIIC(string UID, string Orderno, string AdditionalPaymentflg)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_Builldesc_PaymentDtls_DESE_TSIIC]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UID.Trim();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = Orderno.Trim();
            da.SelectCommand.Parameters.Add("@AdditionalPaymentflg", SqlDbType.VarChar).Value = AdditionalPaymentflg.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryStatusByTransactionIDCFOLabour(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDCFO_Labour", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertQueryDetailsCFOLabour(string intEnterpreniourApprovalid,
string intQuessionaireid,
string intCFEEnterpid,
string intDeptid,
string intApprovalid,
string QueryRaiseDate,
string QueryDescription,
string QueryStatus,
string QueryAttachmentFileName,
string QueryAttachmentFilePath,
string QueryRespondDate,
string QueryRespondRemarks,
string Created_by,
string Created_dt,
string Modified_by, string Modified_dt, string IPAddress)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertQueryDetailsCFO_LABOUR", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IPAddress.Trim() == "" || IPAddress.Trim() == null || IPAddress.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();
            }



            if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            }

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            //-------------------------------------------------
            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}
            //if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null || intEnterpreniourApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.Int).Value = Int32.Parse(intEnterpreniourApprovalid.Trim());
            //}

            //if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            //}

            //if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null || intCFEEnterpid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());
            //}

            //if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            //}

            //if (QueryRaiseDate.Trim() == "" || QueryRaiseDate.Trim() == null || QueryRaiseDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRaiseDate", SqlDbType.DateTime).Value = QueryRaiseDate.Trim();
            //}


            //if (QueryDescription.ToString().Trim() == "" || QueryDescription.ToString().Trim() == null || QueryDescription.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();

            //if (QueryStatus.ToString().Trim() == "" || QueryStatus.ToString().Trim() == null || QueryStatus.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

            //if (QueryAttachmentFileName.ToString().Trim() == "" || QueryAttachmentFileName.ToString().Trim() == null || QueryAttachmentFileName.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFileName", SqlDbType.VarChar).Value = QueryAttachmentFileName.Trim();

            //if (QueryAttachmentFilePath.ToString().Trim() == "" || QueryAttachmentFilePath.ToString().Trim() == null || QueryAttachmentFilePath.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryAttachmentFilePath", SqlDbType.VarChar).Value = QueryAttachmentFilePath.Trim();

            //if (QueryRespondDate.Trim() == "" || QueryRespondDate.Trim() == null || QueryRespondDate.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondDate", SqlDbType.DateTime).Value = QueryRespondDate.Trim();
            //}

            //if (QueryRespondRemarks.ToString().Trim() == "" || QueryRespondRemarks.ToString().Trim() == null || QueryRespondRemarks.ToString().Trim() == "--Select--")
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    myDataAdapter.SelectCommand.Parameters.Add("@QueryRespondRemarks", SqlDbType.VarChar).Value = QueryRespondRemarks.Trim();


            ////-------------------------------------------------
            //if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            //}

            //if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            //}


            //if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            //}

            //if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            //}
            //else
            //{
            //    myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            //}

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetCategoryDetNew(string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCategoryDetNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesFactory(string SerchVer, string EnterpriseType, string hp, string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees_FACTORY", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            if (hp.Trim() == "" || hp.Trim() == null)
                da.SelectCommand.Parameters.Add("@HP", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@HP", SqlDbType.VarChar).Value = hp.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertFeedBackNew(string intPIAid, string hd_Username, string intfb_id, string hd_desc, string prjSancLetterScanFileName, string prjSancLetterScan, string usertype, string Created_by, string generateid, string anothermail, string IPAddres, string filepath, string filename)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_Instfeedback";

        if (intPIAid.Trim() == "" || intPIAid.Trim() == null)
            com.Parameters.Add("@intPIAid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intPIAid", SqlDbType.Int).Value = intPIAid.Trim();

        if (hd_Username.Trim() == "" || hd_Username.Trim() == null)
            com.Parameters.Add("@hd_Username", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@hd_Username", SqlDbType.VarChar).Value = hd_Username.Trim();

        if (intfb_id.Trim() == "" || intfb_id.Trim() == null)
            com.Parameters.Add("@intfb_id", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intfb_id", SqlDbType.Int).Value = intfb_id.Trim();

        if (hd_desc.Trim() == "" || hd_desc.Trim() == null)
            com.Parameters.Add("@hd_desc", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@hd_desc", SqlDbType.VarChar).Value = hd_desc.Trim();


        if (prjSancLetterScanFileName == "" || prjSancLetterScanFileName == null)
            com.Parameters.Add("@hd_uplddocname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@hd_uplddocname", SqlDbType.VarChar).Value = prjSancLetterScanFileName.Trim();


        if (prjSancLetterScan == "" || prjSancLetterScan == null)
            com.Parameters.Add("@hd_uplddoc", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@hd_uplddoc", SqlDbType.VarChar).Value = prjSancLetterScan;





        if (usertype.Trim() == "" || usertype.Trim() == null)
            com.Parameters.Add("@User_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@User_Type", SqlDbType.VarChar).Value = usertype.Trim();

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Created_by.Trim();

        //Begin Created By Srikanth on 17-5-2012 for Generating Number

        if (generateid.Trim() == "" || generateid.Trim() == null)
            com.Parameters.Add("@generateid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@generateid", SqlDbType.VarChar).Value = generateid.ToString().Trim();

        //End Created By Srikanth on 17-5-2012 for Generating Number

        //Begin Created By Srikanth on 15-6-2012 for Generating Number

        if (anothermail.Trim() == "" || anothermail.Trim() == null)
            com.Parameters.Add("@anothermail", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@anothermail", SqlDbType.VarChar).Value = anothermail.ToString().Trim();

        //End Created By Srikanth on 15-6-2012 for Generating Number

        if (IPAddres.Trim() == "" || IPAddres.Trim() == null)
            com.Parameters.Add("@IPAddres", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddres", SqlDbType.VarChar).Value = IPAddres.ToString().Trim();


        com.Parameters.Add("@hd_updfilepath", SqlDbType.VarChar).Value = filepath;

        if (filename.Trim() == "" || filename.Trim() == null)
            com.Parameters.Add("@hd_uploadfilename", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@hd_uploadfilename", SqlDbType.VarChar).Value = filename.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public int UpdateDepartwebserviceflagtsiic(string uidno, string Deptid, string flag, string STATUSFLAG, string output)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_UPD_DEPTCOMMONFEILDS_PLOT";

        if (uidno == "" || uidno == null)
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.Trim();

        if (Deptid == "" || Deptid == null)
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = Deptid.Trim();

        if (STATUSFLAG == "" || STATUSFLAG == null)
            com.Parameters.Add("@STATUSFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@STATUSFLAG", SqlDbType.VarChar).Value = STATUSFLAG.Trim();

        if (flag == "" || flag == null)
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FLAG", SqlDbType.VarChar).Value = flag.Trim();

        if (output == "" || output == null)
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OUTPUT", SqlDbType.VarChar).Value = output.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet FetchDistrictwiseDrildownNewDuplicate(string status, string District, string fromdate, string todate, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchDistrictwiseDrildownNew_CFEDUPLICATE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertDuplicateCFE(string uidno, string status, string dupuidno, string createdby, string remarks, string district)
    {
        int valid = 0;

        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_INS_CFEDUPLICATE", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@Uidno", uidno);
            cmd.Parameters.AddWithValue("@Status", status);
            cmd.Parameters.AddWithValue("@DuplicateUidno", dupuidno);
            cmd.Parameters.AddWithValue("@CreatedBy", createdby);
            cmd.Parameters.AddWithValue("@Remarks", remarks);
            cmd.Parameters.AddWithValue("@District", district);

            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }

    public string getCFEVaildate(string uidno, string district, string uidnotobemapped)
    {
        string valid = "";
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("[USP_GET_CHECK_DUPLICATE_CFE]", con.GetConnection);

        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@UIDNO", Convert.ToString(uidno));
            cmd.Parameters.AddWithValue("@DISTRICT", Convert.ToString(district));
            cmd.Parameters.AddWithValue("@uidnotobemapped", Convert.ToString(uidnotobemapped));

            cmd.Parameters.Add("@OUTPUT", SqlDbType.VarChar, 500);
            cmd.Parameters["@OUTPUT"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (string)cmd.Parameters["@OUTPUT"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }


    public string CHECKVALIDCFECFO(string uidno, string TYPE)
    {
        string valid = "";
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("[USP_GET_CHECK_VALID_UID]", con.GetConnection);

        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@UIDNO", Convert.ToString(uidno));
            cmd.Parameters.AddWithValue("@TYPE", Convert.ToString(TYPE));

            cmd.Parameters.Add("@OUTPUT", SqlDbType.VarChar, 500);
            cmd.Parameters["@OUTPUT"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (string)cmd.Parameters["@OUTPUT"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }

    public DataSet FetchSectorwiseDrildownNewNewDistrict(string status, string Sector, string fromdate, string todate, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchSectorwiseDrildownnew_DistrictNEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null)
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchSectorwiseDistrictDrildownNewNew(string status, string Sector, string fromdate, string todate, string EnterPriseType, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchSectorwiseDrildownnew_districtDRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null)
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            if (district.Trim() == "" || district.Trim() == null || district.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = district.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchTotalDistrictwise_New_NewCommissioner(string finyear, string District, string Sector, string Category, string color, string TYPEOFSECTOR)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_COMMISSIONER_REPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (finyear.Trim() == "" || finyear.Trim() == null || finyear.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = finyear.ToString();


            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = District.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null || Sector.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@SECTOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SECTOR", SqlDbType.VarChar).Value = Sector.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@CATEGORY", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@CATEGORY", SqlDbType.VarChar).Value = Category.ToString();

            if (color.Trim() == "" || color.Trim() == null || color.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@COLOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@COLOR", SqlDbType.VarChar).Value = color.ToString();

            if (TYPEOFSECTOR.Trim() == "" || TYPEOFSECTOR.Trim() == null || TYPEOFSECTOR.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@TYPEOFSECTOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TYPEOFSECTOR", SqlDbType.VarChar).Value = TYPEOFSECTOR.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetTypeofSector()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //  da = new SqlDataAdapter("getApplicationDataForCMO", con.GetConnection);
            da = new SqlDataAdapter("[USP_GETSECTORS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetRptGlance2_IndustryApprovals(string input, string financial, string fromdate, string todate, string Flag)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("GetRptGlance2_NewIndustrialApprls", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@InputFlg", SqlDbType.VarChar).Value = input.ToString();
            da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = financial.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@Flag", SqlDbType.VarChar).Value = Flag.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetRptGlance2_IndustryApprovalsCategoryWise(string Year)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_FINANCIALYEAR_DISTRICTWISE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = Year.ToString();


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTotalDistrictwise_New_NewCommissionerDrillDown(string finyear, string District, string Sector, string Category, string color, string TYPEOFSECTOR)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_COMMISSIONER_REPORT_DRILLDOWN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (finyear.Trim() == "" || finyear.Trim() == null || finyear.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = finyear.ToString();


            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = District.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null || Sector.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@SECTOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SECTOR", SqlDbType.VarChar).Value = Sector.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@CATEGORY", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@CATEGORY", SqlDbType.VarChar).Value = Category.ToString();

            if (color.Trim() == "" || color.Trim() == null || color.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@COLOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@COLOR", SqlDbType.VarChar).Value = color.ToString();


            if (TYPEOFSECTOR.Trim() == "" || TYPEOFSECTOR.Trim() == null || TYPEOFSECTOR.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@TYPEOFSECTOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TYPEOFSECTOR", SqlDbType.VarChar).Value = TYPEOFSECTOR.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTotalDistrictwise_New_NewCommissionerCFO(string finyear, string District, string Sector, string Category, string color, string TYPEOFSECTOR)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_COMMISSIONER_REPORT_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (finyear.Trim() == "" || finyear.Trim() == null || finyear.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = finyear.ToString();


            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = District.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null || Sector.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@SECTOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SECTOR", SqlDbType.VarChar).Value = Sector.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@CATEGORY", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@CATEGORY", SqlDbType.VarChar).Value = Category.ToString();

            if (color.Trim() == "" || color.Trim() == null || color.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@COLOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@COLOR", SqlDbType.VarChar).Value = color.ToString();

            if (TYPEOFSECTOR.Trim() == "" || TYPEOFSECTOR.Trim() == null || TYPEOFSECTOR.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@TYPEOFSECTOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TYPEOFSECTOR", SqlDbType.VarChar).Value = TYPEOFSECTOR.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTotalDistrictwise_New_NewCommissionerDrillDownCFO(string finyear, string District, string Sector, string Category, string color, string TYPEOFSECTOR)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_COMMISSIONER_REPORT_DRILLDOWN_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (finyear.Trim() == "" || finyear.Trim() == null || finyear.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@FINYEAR", SqlDbType.VarChar).Value = finyear.ToString();


            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = District.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null || Sector.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@SECTOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SECTOR", SqlDbType.VarChar).Value = Sector.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@CATEGORY", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@CATEGORY", SqlDbType.VarChar).Value = Category.ToString();

            if (color.Trim() == "" || color.Trim() == null || color.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@COLOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@COLOR", SqlDbType.VarChar).Value = color.ToString();

            if (TYPEOFSECTOR.Trim() == "" || TYPEOFSECTOR.Trim() == null || TYPEOFSECTOR.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@TYPEOFSECTOR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TYPEOFSECTOR", SqlDbType.VarChar).Value = TYPEOFSECTOR.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetHolidayList()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_HOLIDAYDATES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int InsertLoanDetails(TSLOANINDUSTRY obj)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "INSER_FROM_LOAN_DETAILS";
        if (obj.Name_of_unit == "" || obj.Name_of_unit == null)
            com.Parameters.Add("@Name_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Name_of_unit", SqlDbType.VarChar).Value = obj.Name_of_unit.Trim();
        if (obj.aadhar_number == "" || obj.aadhar_number == null)
            com.Parameters.Add("@aadhar_number", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@aadhar_number", SqlDbType.VarChar).Value = obj.aadhar_number.Trim();

        if (obj.mobile_numnber == "" || obj.mobile_numnber == null)
            com.Parameters.Add("@mobile_numnber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@mobile_numnber", SqlDbType.VarChar).Value = obj.mobile_numnber.Trim();

        if (obj.district == "" || obj.district == null)
            com.Parameters.Add("@district", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@district", SqlDbType.VarChar).Value = obj.district.Trim();

        if (obj.bank_name == "" || obj.bank_name == null)
            com.Parameters.Add("@bank_name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@bank_name", SqlDbType.VarChar).Value = obj.bank_name.Trim();

        if (obj.branch_name == "" || obj.branch_name == null)
            com.Parameters.Add("@branch_name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@branch_name", SqlDbType.VarChar).Value = obj.branch_name.Trim();
        if (obj.loan_application_date == "" || obj.loan_application_date == null)
            com.Parameters.Add("@loan_application_date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@loan_application_date", SqlDbType.VarChar).Value = obj.loan_application_date.Trim();
        if (obj.created_by == "" || obj.created_by == null)
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@created_by", SqlDbType.VarChar).Value = obj.created_by.Trim();

        com.Parameters.Add("@Status_s", SqlDbType.VarChar).Value = "P";

        if (obj.Loan_Amount == "" || obj.Loan_Amount == null)
            com.Parameters.Add("@Loan_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loan_Amount", SqlDbType.VarChar).Value = obj.Loan_Amount.Trim();

        if (obj.Name_of_Enterprenur == "" || obj.Name_of_Enterprenur == null)
            com.Parameters.Add("@entrepreneur", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@entrepreneur", SqlDbType.VarChar).Value = obj.Name_of_Enterprenur.Trim();

        if (obj.OTP == "" || obj.OTP == null)
            com.Parameters.Add("@OTP", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OTP", SqlDbType.VarChar).Value = obj.OTP.Trim();

        if (obj.TypeofLoan == "" || obj.TypeofLoan == null)
            com.Parameters.Add("@TypeofLoan", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofLoan", SqlDbType.VarChar).Value = obj.TypeofLoan.Trim();

        if (obj.Mandal == "" || obj.Mandal == null)
            com.Parameters.Add("@Mandal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mandal", SqlDbType.VarChar).Value = obj.Mandal.Trim();

        if (obj.LoanNumber == "" || obj.LoanNumber == null)
            com.Parameters.Add("@LoanNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LoanNumber", SqlDbType.VarChar).Value = obj.LoanNumber.Trim();

        //theese two lines for output parameter
        com.Parameters.Add("@Valid", SqlDbType.Int, 500);
        com.Parameters["@Valid"].Direction = ParameterDirection.Output;

        int i = 0;
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            i = com.ExecuteNonQuery();
            //i= Convert.ToInt32(com.ExecuteScalar());
            return i;
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public DataSet GetBankNames()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GET_BANK_MASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBranchkNames(string BANKID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GET_BRANCH_MASTER", con.GetConnection);
            if (BANKID.Trim() == "" || BANKID.Trim() == null || BANKID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@BANK_ID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BANK_ID", SqlDbType.VarChar).Value = BANKID.ToString();
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertBankStatus(BANKINDUSTRYSTATUS objbnankindustry)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "INSERT_BANK_INDUSTRY_STATUS";
        if (objbnankindustry.NAME_OF_THE_UNIT == "" || objbnankindustry.NAME_OF_THE_UNIT == null)
            com.Parameters.Add("@NAME_OF_THE_UNIT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NAME_OF_THE_UNIT", SqlDbType.VarChar).Value = objbnankindustry.NAME_OF_THE_UNIT.Trim();
        if (objbnankindustry.LINE_OF_ACTIVITY == "" || objbnankindustry.LINE_OF_ACTIVITY == null || objbnankindustry.LINE_OF_ACTIVITY == "--Select--")
            com.Parameters.Add("@LINE_OF_ACTIVITY", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LINE_OF_ACTIVITY", SqlDbType.VarChar).Value = objbnankindustry.LINE_OF_ACTIVITY.Trim();

        if (objbnankindustry.DISTRICT_ID == "" || objbnankindustry.DISTRICT_ID == null || objbnankindustry.DISTRICT_ID == "--District--")
            com.Parameters.Add("@DISTRICT_ID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DISTRICT_ID", SqlDbType.VarChar).Value = objbnankindustry.DISTRICT_ID.Trim();

        if (objbnankindustry.MANDAL_ID == "" || objbnankindustry.MANDAL_ID == null || objbnankindustry.MANDAL_ID == "--Mandal--")
            com.Parameters.Add("@MANDAL_ID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@MANDAL_ID", SqlDbType.VarChar).Value = objbnankindustry.MANDAL_ID.Trim();

        if (objbnankindustry.CONTACT_NO == "" || objbnankindustry.CONTACT_NO == null)
            com.Parameters.Add("@CONTACT_NO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CONTACT_NO", SqlDbType.VarChar).Value = objbnankindustry.CONTACT_NO.Trim();

        if (objbnankindustry.GMAIL_ID == "" || objbnankindustry.GMAIL_ID == null)
            com.Parameters.Add("@EMAIL_ID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@EMAIL_ID", SqlDbType.VarChar).Value = objbnankindustry.GMAIL_ID.Trim();
        if (objbnankindustry.TYPE == "" || objbnankindustry.TYPE == null)
            com.Parameters.Add("@TYPE", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TYPE", SqlDbType.VarChar).Value = objbnankindustry.TYPE.Trim();
        if (objbnankindustry.CREATED_BY == "" || objbnankindustry.CREATED_BY == null)
            com.Parameters.Add("@CREATED_BY", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CREATED_BY", SqlDbType.VarChar).Value = objbnankindustry.CREATED_BY.Trim();
        com.Parameters.Add("@IS_ACTIVE", SqlDbType.VarChar).Value = "1";
        if (objbnankindustry.DATE == "" || objbnankindustry.DATE == null)
            com.Parameters.Add("@DATE", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DATE", SqlDbType.VarChar).Value = objbnankindustry.DATE.Trim();
        com.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = "P";

        if (objbnankindustry.loan_application_date == "" || objbnankindustry.loan_application_date == null)
            com.Parameters.Add("@loan_application_date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@loan_application_date", SqlDbType.VarChar).Value = objbnankindustry.loan_application_date.Trim();
        if (objbnankindustry.Loan_Amount == "" || objbnankindustry.Loan_Amount == null)
            com.Parameters.Add("@Loan_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loan_Amount", SqlDbType.VarChar).Value = objbnankindustry.Loan_Amount.Trim();

        if (objbnankindustry.IndustrySick == "" || objbnankindustry.IndustrySick == null)
            com.Parameters.Add("@IndustrySick", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IndustrySick", SqlDbType.VarChar).Value = objbnankindustry.IndustrySick.Trim();

        //theese two lines for output parameter
        com.Parameters.Add("@Valid", SqlDbType.Int, 500);
        com.Parameters["@Valid"].Direction = ParameterDirection.Output;

        int i = 0;
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            i = com.ExecuteNonQuery();
            //i= Convert.ToInt32(com.ExecuteScalar());
            return i;
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public DataTable GET_LINE_OFACTIVITY()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataTable dt = new DataTable();
        try
        {
            da = new SqlDataAdapter("GET_LINE_OF_ACTIVITY", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(dt);
            return dt;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet ValidateForgotBridgePassword(string Email, string MobileNo, string userid)
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {

            da = new SqlDataAdapter("sp_BridgeLoanForgotPwd", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Email.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@email", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@email", SqlDbType.VarChar).Value = Email.ToString();
            }

            if (MobileNo.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@mobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@mobileNo", SqlDbType.VarChar).Value = MobileNo.ToString();
            }
            if (userid.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = userid.ToString();
            }

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int Bankersregistration(BankersRegistrationVo userregistrationvoobj)
    {
        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("sp_BankersRegistration", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        int value = 0;
        cmd.Connection = con.GetConnection;
        try
        {
            if (userregistrationvoobj.BankName.Trim().ToString() == "" || userregistrationvoobj.BankName.ToString().Trim() == null)
                cmd.Parameters.Add("@BankId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BankId", SqlDbType.VarChar).Value = userregistrationvoobj.BankName.Trim();

            if (userregistrationvoobj.District.ToString().Trim() == "" || userregistrationvoobj.District.ToString().Trim() == null)
                cmd.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = userregistrationvoobj.District.Trim();

            if (userregistrationvoobj.BranchName.ToString().Trim() == "" || userregistrationvoobj.BranchName.ToString().Trim() == null)
                cmd.Parameters.Add("@BranchId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BranchId", SqlDbType.VarChar).Value = userregistrationvoobj.BranchName.Trim();

            if (userregistrationvoobj.IFSCCode.ToString().Trim() == "" || userregistrationvoobj.IFSCCode.ToString().Trim() == null)
                cmd.Parameters.Add("@IFSCCODEId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@IFSCCODEId", SqlDbType.VarChar).Value = userregistrationvoobj.IFSCCode.Trim();


            if (userregistrationvoobj.MobileNo == null || userregistrationvoobj.MobileNo.ToString().Trim() == "" || userregistrationvoobj.MobileNo.ToString().Trim() == "--Select--")
                cmd.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MobileNo", SqlDbType.VarChar).Value = userregistrationvoobj.MobileNo.Trim();


            if (userregistrationvoobj.username.ToString().Trim() == "" || userregistrationvoobj.username.ToString().Trim() == null)
                cmd.Parameters.Add("@username", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@username", SqlDbType.VarChar).Value = userregistrationvoobj.username.Trim();

            if (userregistrationvoobj.Password.ToString().Trim() == "" || userregistrationvoobj.Password.ToString().Trim() == null)
                cmd.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Password", SqlDbType.VarChar).Value = userregistrationvoobj.Password.Trim();

            if (userregistrationvoobj.OTPMail.ToString().Trim() == "" || userregistrationvoobj.OTPMail.ToString().Trim() == null)
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Email", SqlDbType.VarChar).Value = userregistrationvoobj.OTPMail.Trim();

            if (userregistrationvoobj.OTPMail.ToString().Trim() == "" || userregistrationvoobj.OTPMail.ToString().Trim() == null)
                cmd.Parameters.Add("@MailOTP", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MailOTP", SqlDbType.VarChar).Value = userregistrationvoobj.OTPMail.Trim();


            if (userregistrationvoobj.OTPMsg.ToString().Trim() == "" || userregistrationvoobj.OTPMsg.ToString().Trim() == null)
                cmd.Parameters.Add("@MsgOTP", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@MsgOTP", SqlDbType.VarChar).Value = userregistrationvoobj.OTPMsg.Trim();

            if (userregistrationvoobj.Pwdflag.ToString().Trim() == "" || userregistrationvoobj.Pwdflag.ToString().Trim() == null)
                cmd.Parameters.Add("@Pwdflag", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@Pwdflag", SqlDbType.VarChar).Value = userregistrationvoobj.Pwdflag.Trim();

            if (userregistrationvoobj.BranchNametext.ToString().Trim() == "" || userregistrationvoobj.BranchNametext.ToString().Trim() == null)
                cmd.Parameters.Add("@BranchNametext", SqlDbType.VarChar).Value = DBNull.Value;
            else
                cmd.Parameters.Add("@BranchNametext", SqlDbType.VarChar).Value = userregistrationvoobj.BranchNametext.Trim();

            string val = cmd.ExecuteScalar().ToString();
            if (val != string.Empty)
                value = Int32.Parse(val);
            //con.CloseConnection();
            return value;
        }
        catch (Exception ex)
        {
            //    con.CloseConnection();
            //    throw ex;
            return 0;
        }

        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        //return value;
    }

    public DataSet GetBridgeBankDetails()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("SP_BridgeBankDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBranchesByBankDistrictId(string Districtid, string BankId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetBranchesByBankdist", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Districtid.Trim() == "" || Districtid.Trim() == null || Districtid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = Districtid.ToString();

            if (BankId.Trim() == "" || BankId.Trim() == null || BankId.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@BankId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@BankId", SqlDbType.VarChar).Value = BankId.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBankIdByDistricts(string BankId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetBridgeBankByDistricts", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (BankId.Trim() == "" || BankId.Trim() == null)
                da.SelectCommand.Parameters.Add("@BankId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BankId", SqlDbType.VarChar).Value = BankId.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet CheckBankersUserid(string User_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("SP_Bankers_CheckUserid", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@User_id", SqlDbType.VarChar).Value = User_id.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public string CheckBankersDetailsExist(string mobileNo, string emailID)
    {

        con.OpenConnection();

        con.OpenConnection();// dbu.openCon();
        SqlCommand cmd = new SqlCommand("sp_BankerscheckMobile", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;

        cmd.Connection = con.GetConnection;
        try
        {
            cmd.Parameters.Add("@mobile", SqlDbType.VarChar).Value = mobileNo.ToString();
            cmd.Parameters.Add("@email", SqlDbType.VarChar).Value = emailID.ToString();

            string val = cmd.ExecuteScalar().ToString();
            return val;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetIndustriallistDashboardDetails(string intDeptid, string Districtid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        // if (intDeptid == "266")
        //  intDeptid = "11";
        try
        {

            da = new SqlDataAdapter("sp_GetIndustriallistDashboardDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();
            if (Districtid.Trim() == "" || Districtid.Trim() == null || Districtid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@DistrictId", SqlDbType.VarChar).Value = Districtid.ToString();
            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public string getCFOVaildate(string uidno, string district, string uidnotobemapped)
    {
        string valid = "";
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("[USP_GET_CHECK_DUPLICATE_CFO]", con.GetConnection);

        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@UIDNO", Convert.ToString(uidno));
            cmd.Parameters.AddWithValue("@DISTRICT", Convert.ToString(district));
            cmd.Parameters.AddWithValue("@uidnotobemapped", Convert.ToString(uidnotobemapped));

            cmd.Parameters.Add("@OUTPUT", SqlDbType.VarChar, 500);
            cmd.Parameters["@OUTPUT"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (string)cmd.Parameters["@OUTPUT"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }

    public int InsertDuplicateCFO(string uidno, string status, string dupuidno, string createdby, string remarks, string district)
    {
        int valid = 0;

        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_INS_CFODUPLICATE", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@Uidno", uidno);
            cmd.Parameters.AddWithValue("@Status", status);
            cmd.Parameters.AddWithValue("@DuplicateUidno", dupuidno);
            cmd.Parameters.AddWithValue("@CreatedBy", createdby);
            cmd.Parameters.AddWithValue("@Remarks", remarks);
            cmd.Parameters.AddWithValue("@District", district);

            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }

    public DataSet GetverifyofqueLabourCFO(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyqueLabourCFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet getIPOMONTHLYREPORT(int UserId, string month, string year)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("USP_IPOMONTHLY_REPORT_UPDATE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UserId", SqlDbType.Int).Value = UserId;
            da.SelectCommand.Parameters.Add("@Month", SqlDbType.NVarChar).Value = month;
            da.SelectCommand.Parameters.Add("@Year", SqlDbType.NVarChar).Value = year;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchTotalDistrictwise_IPoListReportupdated(string Year, string Month)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_MONTHLYREPORT_STATELEVEL_UPDATED", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = Month.ToString();

            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = Year.ToString();

            //da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = Month.ToString();
            //da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = Year.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet getSectorNames()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getSectorNames", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetMSMEDetails(string MsmeNo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("MSME_PrintDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (MsmeNo.Trim() == "" || MsmeNo.Trim() == null)
                da.SelectCommand.Parameters.Add("@MsmeNo", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@MsmeNo", SqlDbType.VarChar).Value = MsmeNo.ToString();


            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public DataSet GetDepartmentDashboardDetailsOtherService(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        // if (intDeptid == "266")
        //  intDeptid = "11";
        try
        {

            da = new SqlDataAdapter("sp_GetDepartmentDashboardDetails_OtherService", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetShowDepartmentFilesOtherServices(string Deptid, string intStageid, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();


        try
        {
            da = new SqlDataAdapter("GetShowDepartmentFiles_OtherService", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Deptid.Trim() == "" || Deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Deptid", SqlDbType.VarChar).Value = Deptid.ToString();
            if (intStageid.Trim() == "" || intStageid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }


    public int insertDepartmentProcessOtherServices(string intCFEEnterpid, string intDeptid, string intApprovalid, string intStageid, string Trans_Date, string Created_by)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertDepartmentProcess_OtherServices";

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intStageid == "" || intStageid == null)
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intStageid", SqlDbType.VarChar).Value = intStageid.Trim();

        if (Trans_Date == "" || Trans_Date == null)
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trans_Date", SqlDbType.VarChar).Value = cmf.convertDateIndia(Trans_Date);

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public int UpdateAdditionalpaymentsOtherServices(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string ipaddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnew_OtherServices";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();


        if (ipaddress.Trim() == "" || ipaddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = ipaddress.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public int insertQueryResponsedataServices(string intEnterpreniourApprovalid, string intCFEEnterpid, string QueryDescription, string QueryStatus, string Created_by, string intDeptid, string intApprovalid, string intQuessionaireid)
    {


        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertQueriesDetails_OtherServices";

        if (intEnterpreniourApprovalid.Trim() == "" || intEnterpreniourApprovalid.Trim() == null)
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intEnterpreniourApprovalid", SqlDbType.VarChar).Value = intEnterpreniourApprovalid.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (QueryDescription.Trim() == "" || QueryDescription.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDescription.Trim();


        if (QueryStatus.Trim() == "" || QueryStatus.Trim() == null)
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryStatus", SqlDbType.VarChar).Value = QueryStatus.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int InsertDeptDateTracingOtherServices(string DepartmentId, string QuessionaireId, string Uid_No, string Apply_Date, string PreScrutinity_Date, string QueryRaised_Date, string QueryRespond_Date, string Approval_Date, string Application_Type, string ApprovalId)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = null;
        try
        {
            cmd = new SqlCommand("USP_INS_DASHBOARDDATA_OTHERSERVICES", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
            //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
            cmd.Parameters.AddWithValue("@DepartmentId", Convert.ToString(DepartmentId));
            cmd.Parameters.AddWithValue("@QuessionaireId", Convert.ToString(QuessionaireId));
            cmd.Parameters.AddWithValue("@Uid_No", Convert.ToString(Uid_No));
            cmd.Parameters.AddWithValue("@Apply_Date", Apply_Date);
            //cmd.Parameters.AddWithValue("@PreScrutinity_Date", Convert.ToString(cmf.convertDateIndia(formvoobj.BillDate)));
            cmd.Parameters.AddWithValue("@PreScrutinity_Date", PreScrutinity_Date);
            cmd.Parameters.AddWithValue("@QueryRaised_Date", QueryRaised_Date);
            cmd.Parameters.AddWithValue("@QueryRespond_Date", QueryRespond_Date);
            cmd.Parameters.AddWithValue("@Approval_Date", Approval_Date);
            cmd.Parameters.AddWithValue("@Application_Type", Application_Type);
            cmd.Parameters.AddWithValue("@ApprovalId", ApprovalId);

            //cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            //cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            // valid = (Int32)cmd.Parameters["@Valid"].Value;

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }


    public DataSet GetShowEmailidandMobileNumberOtherServices(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowEmailidandMobileNumber_OtherServices", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateAdditionalpaymentsBeforePreOtherServices(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string Reason, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnewBeforePre_OtherServices";


        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();

        if (Reason.Trim() == "" || Reason.Trim() == null)
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@rejected_reason", SqlDbType.VarChar).Value = Reason.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public DataSet GetQueryRaisedOtherServices(string intCFEEnterpid, string intDeptid, string intApprovalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetQueryRaised_OtherServices", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet ViewAttachmetsDataOtherServices(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveAttachmentsByCFEID_OtherServices", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetCompletedbyApproval2AOtherServices(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata2A_OtherService", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }


    public DataSet GetCompletedbyApproval3AOtherServices(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata3A_OtherServices", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }


    public DataSet GetCompletedbyApprovalOtherServices(string status, string FromDate, string Todate, string intDeptid)
    {
        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("GetApprovalProcessdata_OtherServices", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Applid", SqlDbType.VarChar).Value = status.Trim();
            }


            if (FromDate.Trim() == "" || FromDate.Trim() == null || FromDate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FromDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(FromDate);
            }

            if (Todate.Trim() == "" || Todate.Trim() == null || Todate.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate);
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;


    }

    public int insertApprovalDataOtherServices(string Enterprenuer, string RefNo, string Status, string Modified_by, string intApprovalid, string intDeptid, string Remarks, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "updateApprovaldata_OtherServices";

        if (Enterprenuer.Trim() == "" || Enterprenuer.Trim() == null)
            com.Parameters.Add("@Enterprenuer", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Enterprenuer", SqlDbType.VarChar).Value = Enterprenuer.Trim();

        if (RefNo.Trim() == "" || RefNo.Trim() == null)
            com.Parameters.Add("@RefNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@RefNo", SqlDbType.VarChar).Value = RefNo.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (Remarks.Trim() == "" || Remarks.Trim() == null)
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Remarks", SqlDbType.VarChar).Value = Remarks.Trim();


        if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public DataSet GetdataofApprovaldataAprovalbyIDOtherServices(string enterprenuer, string intDeptid)
    {

        try
        {
            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("getenterprenuerdatbyidAprovalsNew_OtherService", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (enterprenuer.Trim() == "" || enterprenuer.Trim() == null || enterprenuer.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@enterprenuer", SqlDbType.VarChar).Value = enterprenuer.Trim();
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }



            ds = new System.Data.DataSet();
            myDataAdapter.Fill(ds);
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {

            con.CloseConnection();

        }
        return ds;



    }

    public int InsertImagedataApprovalOtherService(string intQuessionaireid, string intCFEid, string FileType, string FilePath, string FileName, string FileDescription,
  string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string intDeptid, string intApprovalid)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_InsertImageApproval_OtherService", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());
            }




            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());
            }


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEid.Trim() == "" || intCFEid.Trim() == null || intCFEid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = Int32.Parse(intCFEid.Trim());
            }



            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (FileDescription.Trim() == "" || FileDescription.Trim() == null || FileDescription.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }

            if (bu.Trim() == "" || bu.Trim() == null || bu.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = bu.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }


    public DataSet GetApplicationTrackerDetailedOtherServices(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetApplicationTrackerDetailed_OTHERSERVICES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetApplicationTrackerDetailed2OtherServices(string Quesionary_id)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("GetApplicationTrackerDetailed2", con.GetConnection);
            da = new SqlDataAdapter("GetApplicationTrackerDetailed_OTHERSERVICES_NEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Quesionary_id.Trim() == "" || Quesionary_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = Quesionary_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetdataCFEApprovaldocumentOtherServices(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveApprovallink_OtherServices", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetdatabyDeptinCFEdocumentOtherServices(string intEnterprenuerid, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptid_OtherServices", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();

            if (deptid.Trim() == "" || deptid.Trim() == null || deptid.Trim() == "10" || deptid.Trim() == "1000")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = deptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetdatabyDeptinCFEdocumentRespondDetailsOtherServices(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetrivelinkbyDeptidRespondant_OtherServices", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetOtherServiceDetails(string IncentReformId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_DISTRICTREFORMAPPLICATIONDETAILS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (IncentReformId.Trim() == "" || IncentReformId.Trim() == null)
                da.SelectCommand.Parameters.Add("@IncentReformId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentReformId", SqlDbType.VarChar).Value = IncentReformId.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetPaymentDetailsOtherServices(string UID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FetchEntrpPaymentDetails_OTHER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (UID.Trim() == "" || UID.Trim() == null || UID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@UID", SqlDbType.VarChar).Value = UID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataTable GenericFillDataTable(string procedurename, SqlParameter[] sp)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataTable dt = new DataTable();
        try
        {
            da = new SqlDataAdapter(procedurename, con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (sp != null)
            {
                da.SelectCommand.Parameters.AddRange(sp);
            }

            da.Fill(dt);
            return dt;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataTable GenericFillDataTables(string procedurename)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataTable dt = new DataTable();
        try
        {
            da = new SqlDataAdapter(procedurename, con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(dt);
            return dt;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet DeptReportDepartmentWise_NewpdfREN(string intDistrictid, string Category, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_NewCFO_export"
            // da = new SqlDataAdapter("DeptReportDepartmentWise_NewCFO", con.GetConnection);
            da = new SqlDataAdapter("DeptReportDepartmentWise_NewREN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    
    public DataSet getfiremeanofescapedetailsonuidREN(string uidno, string applid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_MEANSOFESCAPE_FIRE_RENEWAL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (applid.Trim() != "" || applid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@APPID", SqlDbType.VarChar).Value = applid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertLEGALCenteralInspection(CenteralInspectionVo centralvo)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INS_LEGALCENTRALINSPECTION";


        if (centralvo.LegalAllocationMonth == "" || centralvo.LegalAllocationMonth == null)
            com.Parameters.Add("@AllocationMonth", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AllocationMonth", SqlDbType.VarChar).Value = centralvo.LegalAllocationMonth.Trim();

        if (centralvo.LegalAllocationYear == "" || centralvo.LegalAllocationYear == null)
            com.Parameters.Add("@AllocationYear", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AllocationYear", SqlDbType.VarChar).Value = centralvo.LegalAllocationYear.Trim();

        if (centralvo.LegalLicenseNumber == "" || centralvo.LegalLicenseNumber == null)
            com.Parameters.Add("@BoilerMakerNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BoilerMakerNo", SqlDbType.VarChar).Value = centralvo.LegalLicenseNumber.Trim();

        if (centralvo.LegalOwnerName == "" || centralvo.LegalOwnerName == null)
            com.Parameters.Add("@OwnerName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OwnerName", SqlDbType.VarChar).Value = centralvo.LegalOwnerName.Trim();

        if (centralvo.LegalAddress == "" || centralvo.LegalAddress == null)
            com.Parameters.Add("@address", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@address", SqlDbType.VarChar).Value = centralvo.LegalAddress.Trim();

        if (centralvo.LegalOfficer == "" || centralvo.LegalOfficer == null)
            com.Parameters.Add("@InspectionAllocatedToName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionAllocatedToName", SqlDbType.VarChar).Value = centralvo.LegalOfficer.Trim();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

   
    public DataSet GetverifyofqueBoilerCFE(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataverifyqueboilerCFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int insertmanfacturerDetails(

          string intQuessionaireid,
          string intCFEEnterpid,
          string Uid_No,
          string Reg_Id,
          string WorkShop_Area,
          string Establishment_Year,
          string Eqipment_Type,
          string Firmtoexecutejob,
          string firmtoAcceptResponsibility,
          string firmtosupplymaterials,
          string firmQualitycontrolsystem,

          string Created_by,
          string Modified_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertmanfdetails";




        if (intCFEEnterpid.ToString().Trim() == "" || intCFEEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

        if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

        if (WorkShop_Area.ToString().Trim() == "" || WorkShop_Area.ToString().Trim() == null)
            com.Parameters.Add("@WorkShop_Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WorkShop_Area", SqlDbType.VarChar).Value = WorkShop_Area.Trim();

        if (Establishment_Year.ToString().Trim() == "" || Establishment_Year.ToString().Trim() == null)
            com.Parameters.Add("@Establishment_Year", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Establishment_Year", SqlDbType.VarChar).Value = Establishment_Year.Trim();

        if (Eqipment_Type.ToString().Trim() == "" || Eqipment_Type.ToString().Trim() == null || Eqipment_Type.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Eqipment_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Eqipment_Type", SqlDbType.VarChar).Value = Eqipment_Type.Trim();

        if (Firmtoexecutejob.ToString().Trim() == "" || Firmtoexecutejob.ToString().Trim() == null)
            com.Parameters.Add("@Firmtoexecutejob", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Firmtoexecutejob", SqlDbType.VarChar).Value = (Firmtoexecutejob.Trim());

        if (firmtoAcceptResponsibility.ToString().Trim() == "" || firmtoAcceptResponsibility.ToString().Trim() == null)
            com.Parameters.Add("@firmtoAcceptResponsibility", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@firmtoAcceptResponsibility", SqlDbType.VarChar).Value = firmtoAcceptResponsibility.Trim();

        if (firmtosupplymaterials.ToString().Trim() == "" || firmtosupplymaterials.ToString().Trim() == null)
            com.Parameters.Add("@firmtosupplymaterials", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@firmtosupplymaterials", SqlDbType.VarChar).Value = firmtosupplymaterials.Trim();

        if (firmQualitycontrolsystem.ToString().Trim() == "" || firmQualitycontrolsystem.ToString().Trim() == null)
            com.Parameters.Add("@firmQualitycontrolsystem", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@firmQualitycontrolsystem", SqlDbType.VarChar).Value = firmQualitycontrolsystem.Trim();


        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();



        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }

    public DataSet ViewAttachmetsDataforManf(string intEnterprenuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveAttachmentsByCFEIDTEST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public DataSet GetdataofCFEBoiler(string intQuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofCFEBoilersDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertmanfRenewalDetails(

          string intQuessionaireid,
          string intCFEEnterpid,
          string Uid_No,
          string Reg_Id,
          string WorkShop_Area,
          string renewal_certifcate,
          string Eqipment_Type,
          string Firmtoexecutejob,
          string firmtoAcceptResponsibility,
          string firmtosupplymaterials,
          string firmQualitycontrolsystem,

          string Created_by,
          string Modified_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertmanfRENdetails";




        if (intCFEEnterpid.ToString().Trim() == "" || intCFEEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null)
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

        if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null)
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

        if (WorkShop_Area.ToString().Trim() == "" || WorkShop_Area.ToString().Trim() == null)
            com.Parameters.Add("@WorkShop_Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@WorkShop_Area", SqlDbType.VarChar).Value = WorkShop_Area.Trim();

        if (renewal_certifcate.ToString().Trim() == "" || renewal_certifcate.ToString().Trim() == null)
            com.Parameters.Add("@renewalcertifcate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@renewalcertifcate", SqlDbType.VarChar).Value = renewal_certifcate.Trim();

        if (Eqipment_Type.ToString().Trim() == "" || Eqipment_Type.ToString().Trim() == null || Eqipment_Type.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Eqipment_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Eqipment_Type", SqlDbType.VarChar).Value = Eqipment_Type.Trim();

        if (Firmtoexecutejob.ToString().Trim() == "" || Firmtoexecutejob.ToString().Trim() == null)
            com.Parameters.Add("@Firmtoexecutejob", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Firmtoexecutejob", SqlDbType.VarChar).Value = (Firmtoexecutejob.Trim());

        if (firmtoAcceptResponsibility.ToString().Trim() == "" || firmtoAcceptResponsibility.ToString().Trim() == null)
            com.Parameters.Add("@firmtoAcceptResponsibility", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@firmtoAcceptResponsibility", SqlDbType.VarChar).Value = firmtoAcceptResponsibility.Trim();

        if (firmtosupplymaterials.ToString().Trim() == "" || firmtosupplymaterials.ToString().Trim() == null)
            com.Parameters.Add("@firmtosupplymaterials", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@firmtosupplymaterials", SqlDbType.VarChar).Value = firmtosupplymaterials.Trim();

        if (firmQualitycontrolsystem.ToString().Trim() == "" || firmQualitycontrolsystem.ToString().Trim() == null)
            com.Parameters.Add("@firmQualitycontrolsystem", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@firmQualitycontrolsystem", SqlDbType.VarChar).Value = firmQualitycontrolsystem.Trim();


        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Modified_by.ToString().Trim() == "" || Modified_by.ToString().Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();



        //---------------------------------------------------------------------------------------------------------------
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }


    public DataSet GetdataofRENBoiler(string intQuerid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getdataofRENBoilersDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intQuerid.Trim() == "" || intQuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuerid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet getdataofidentityRENAPPROVALID(string intQuessioneryid, string deptid)
    {


        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("GetDeptOrderREN_APPROVAL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessioneryid.Trim() == "" || intQuessioneryid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessioneryid", SqlDbType.VarChar).Value = intQuessioneryid.ToString();



            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

        //}



    }


    public DataSet GetRENCertificatedata(string intCFEEnterpid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCertificateDetailsdataRENNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet getdetailsrenewalshopsestablishment(string IntuserID, int intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_SHOPSESTABLISHMENTACT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@CreatedBy", SqlDbType.VarChar).Value = IntuserID.Trim();
            da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getdetailsrenewalfactorydetails(string IntuserID, int intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FACTORYRENEWALACT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@CreatedBy", SqlDbType.VarChar).Value = IntuserID.Trim();
            da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetperformlicensebyTourismPerformanceLicenseIDforprint(int TourismPerformanceLicenseID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("tour_getperformlicense_print", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@TourismPerformanceLicenseID", SqlDbType.Int).Value = TourismPerformanceLicenseID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public int Insert_Tourismagent_AttachementApproval(string intQuessionaireCFOid, string intCFOEnterpid, string Uid_No, string Reg_Id,
       string AttachmentTypeName, string AttachmentFilename, string AttachmentFilePath, string Status, string Created_by, string FileDescription, string intDeptid, string intApprovalid)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("AttachmentDetDeptApprovaltourismagent", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.Int).Value = intDeptid.Trim();
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = intApprovalid.Trim();
            }


            if (intQuessionaireCFOid.Trim() == "" || intQuessionaireCFOid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireCFOid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireCFOid.Trim());
            }

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFOEnterpid.Trim());
            }

            if (Uid_No.Trim() == "" || Uid_No.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();
            }

            if (Reg_Id.Trim() == "" || Reg_Id.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();
            }

            if (AttachmentTypeName.Trim() == "" || AttachmentTypeName.Trim() == null || AttachmentTypeName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentTypeName", SqlDbType.VarChar).Value = AttachmentTypeName.Trim();
            }

            if (AttachmentFilename.Trim() == "" || AttachmentFilename.Trim() == null || AttachmentFilename.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilename", SqlDbType.VarChar).Value = AttachmentFilename.Trim();
            }

            if (AttachmentFilePath.Trim() == "" || AttachmentFilePath.Trim() == null || AttachmentFilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@AttachmentFilePath", SqlDbType.VarChar).Value = AttachmentFilePath.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Int32.Parse(Created_by.Trim());
            }

            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();
            }


            if (FileDescription.Trim() == "" || FileDescription.Trim() == null)
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }
            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }
    }
   
    public DataSet Gettouragentfortravagentidforprint(int CreatedBy)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("tour_gettouragentfortravagentidforprint", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@CreatedBy", SqlDbType.Int).Value = CreatedBy;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveCinematographicDetails(string intCFOEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCinematoographicLicenseDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int InsertCinematographicLicenseDetails(string intQuessionaireCFOid, string intCFOEnterpid, string ExpYear, string Fileno_9B,
   string Rererancedate, string LongevityCertificateDate, string ElectricalCertificateDate, string NocDate, string LicensePeriod,
   string TheatreType, string Noofscreens, string Noofshows, string Commissionerate, string Zone, string Division, string Policestation,
   string TrafficZone, string TrafficDivision, string TrafficPolicestation, string cinemalicenseid, string Created_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "SP_INSERT_CINEMATOGRAPHICLICENSE_DETAILS";

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

        if (ExpYear.ToString().Trim() == "0" || ExpYear.ToString().Trim() == null || ExpYear.ToString().Trim() == "--Select--")
            com.Parameters.Add("@ExpYear", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ExpYear", SqlDbType.VarChar).Value = ExpYear.Trim();

        if (Fileno_9B.ToString().Trim() == "" || Fileno_9B.ToString().Trim() == null)
            com.Parameters.Add("@Fileno_9B", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fileno_9B", SqlDbType.VarChar).Value = Fileno_9B.Trim();

        if (Rererancedate.ToString().Trim() == "" || Rererancedate.ToString().Trim() == null)
            com.Parameters.Add("@Rererancedate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Rererancedate", SqlDbType.DateTime).Value = Rererancedate.Trim();

        if (LongevityCertificateDate.ToString().Trim() == "" || LongevityCertificateDate.ToString().Trim() == null)
            com.Parameters.Add("@LongevityCertificateDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@LongevityCertificateDate", SqlDbType.DateTime).Value = LongevityCertificateDate.Trim();

        if (ElectricalCertificateDate.ToString().Trim() == "" || ElectricalCertificateDate.ToString().Trim() == null)
            com.Parameters.Add("@ElectricalCertificateDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@ElectricalCertificateDate", SqlDbType.DateTime).Value = ElectricalCertificateDate.Trim();

        if (NocDate.ToString().Trim() == "" || NocDate.ToString().Trim() == null)
            com.Parameters.Add("@NocDate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@NocDate", SqlDbType.DateTime).Value = NocDate.Trim();

        if (LicensePeriod.ToString().Trim() == "0" || LicensePeriod.ToString().Trim() == null || LicensePeriod.ToString().Trim() == "--Select--")
            com.Parameters.Add("@LicensePeriod", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LicensePeriod", SqlDbType.VarChar).Value = LicensePeriod.Trim();

        if (TheatreType.ToString().Trim() == "" || TheatreType.ToString().Trim() == null)
            com.Parameters.Add("@TheatreType", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TheatreType", SqlDbType.VarChar).Value = TheatreType.Trim();

        if (Noofscreens.ToString().Trim() == "" || Noofscreens.ToString().Trim() == null)
            com.Parameters.Add("@Noofscreens", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Noofscreens", SqlDbType.VarChar).Value = Noofscreens.Trim();

        if (Noofshows.ToString().Trim() == "" || Noofshows.ToString().Trim() == null)
            com.Parameters.Add("@Noofshows", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Noofshows", SqlDbType.VarChar).Value = Noofshows.Trim();

        if (Commissionerate.ToString().Trim() == "0" || Commissionerate.ToString().Trim() == null || Commissionerate.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Commissionerate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Commissionerate", SqlDbType.VarChar).Value = Commissionerate.Trim();

        if (Zone.ToString().Trim() == "0" || Zone.ToString().Trim() == null || Zone.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Zone", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Zone", SqlDbType.VarChar).Value = Zone.Trim();

        if (Division.ToString().Trim() == "0" || Division.ToString().Trim() == null || Division.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Division", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Division", SqlDbType.VarChar).Value = Division.Trim();

        if (Policestation.ToString().Trim() == "0" || Policestation.ToString().Trim() == null || Policestation.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Policestation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Policestation", SqlDbType.VarChar).Value = Policestation.Trim();

        if (TrafficZone.ToString().Trim() == "0" || TrafficZone.ToString().Trim() == null || TrafficZone.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TrafficZone", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TrafficZone", SqlDbType.VarChar).Value = TrafficZone.Trim();

        if (TrafficDivision.ToString().Trim() == "0" || TrafficDivision.ToString().Trim() == null || TrafficDivision.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TrafficDivision", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TrafficDivision", SqlDbType.VarChar).Value = TrafficDivision.Trim();

        if (TrafficPolicestation.ToString().Trim() == "0" || TrafficPolicestation.ToString().Trim() == null || TrafficPolicestation.ToString().Trim() == "--Select--")
            com.Parameters.Add("@TrafficPolicestation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TrafficPolicestation", SqlDbType.VarChar).Value = TrafficPolicestation.Trim();


        if (cinemalicenseid.ToString().Trim() == "" || cinemalicenseid.ToString().Trim() == null)
            com.Parameters.Add("@cinemalicenseid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@cinemalicenseid", SqlDbType.VarChar).Value = cinemalicenseid.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return Convert.ToInt32(com.ExecuteScalar());
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet RetriveFilmShootingDetails(string intCFOEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_Retrivefilmshootingdetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int InsertFilmShootingDetails(string intQuessionaireCFOid, string intCFOEnterpid, string CompanyGSTIN,
         string Produccername, string Tradebody, string Tradebodydetails, string Filmtitle, string Filmlanguage, string Otherlanguage, string Filmtype, string Othertype, string Shootingtime,
            string Director, string Cameraman, string Mainartists, string Totalcrewno, string Proposedshootingschedule, string intfilmshootingid, string Locationname, string LocationnameId,
            string Fromdate, string Todate, string Blockingdays, string Shootingdays, string Noofpolicepersions, string Priceperlocation, string Shootingfee, string Cautionfee,
            string Servicefee, string Policefee, string Gst, string Extrahoursamount, string Totalamount, string Created_by, string FilmDevelopmentCorporationFLAG,
string ParticularsFurnishedFLAG, string ReimbursetheDamageFLAG, string Departmentname_termsconditionsFLAG, string Departmentid, string Departmentname)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "SP_INSERT_FILMSHOOTINGDETAILS";

        if (intQuessionaireCFOid.ToString().Trim() == "" || intQuessionaireCFOid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();

        if (intCFOEnterpid.ToString().Trim() == "" || intCFOEnterpid.ToString().Trim() == null)
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.Trim();

        if (CompanyGSTIN.ToString().Trim() == "" || CompanyGSTIN.ToString().Trim() == null)
            com.Parameters.Add("@CompanyGSTIN", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CompanyGSTIN", SqlDbType.VarChar).Value = CompanyGSTIN.Trim();

        if (Produccername.ToString().Trim() == "" || Produccername.ToString().Trim() == null)
            com.Parameters.Add("@Produccername", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Produccername", SqlDbType.VarChar).Value = Produccername.Trim();

        if (Tradebody.ToString().Trim() == "" || Tradebody.ToString().Trim() == null || Tradebody.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Tradebody", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tradebody", SqlDbType.VarChar).Value = Tradebody.Trim();

        if (Tradebodydetails.ToString().Trim() == "" || Tradebodydetails.ToString().Trim() == null)
            com.Parameters.Add("@Tradebodydetails", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tradebodydetails", SqlDbType.VarChar).Value = Tradebodydetails.Trim();

        if (Filmtitle.ToString().Trim() == "" || Filmtitle.ToString().Trim() == null)
            com.Parameters.Add("@Filmtitle", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Filmtitle", SqlDbType.VarChar).Value = Filmtitle.Trim();

        if (Filmlanguage.ToString().Trim() == "" || Filmlanguage.ToString().Trim() == null || Filmlanguage.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Filmlanguage", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Filmlanguage", SqlDbType.VarChar).Value = Filmlanguage.Trim();

        if (Otherlanguage.ToString().Trim() == "" || Otherlanguage.ToString().Trim() == null || Otherlanguage.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Otherlanguage", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Otherlanguage", SqlDbType.VarChar).Value = Otherlanguage.Trim();

        if (Filmtype.ToString().Trim() == "" || Filmtype.ToString().Trim() == null || Filmtype.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Filmtype", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Filmtype", SqlDbType.VarChar).Value = Filmtype.Trim();

        if (Othertype.ToString().Trim() == "" || Othertype.ToString().Trim() == null || Othertype.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Othertype", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Othertype", SqlDbType.VarChar).Value = Othertype.Trim();

        if (Shootingtime.ToString().Trim() == "" || Shootingtime.ToString().Trim() == null || Shootingtime.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Shootingtime", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Shootingtime", SqlDbType.VarChar).Value = Shootingtime.Trim();


        if (Director.ToString().Trim() == "" || Director.ToString().Trim() == null)
            com.Parameters.Add("@Director", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Director", SqlDbType.VarChar).Value = Director.Trim();

        if (Cameraman.ToString().Trim() == "" || Cameraman.ToString().Trim() == null)
            com.Parameters.Add("@Cameraman", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cameraman", SqlDbType.VarChar).Value = Cameraman.Trim();

        if (Mainartists.ToString().Trim() == "" || Mainartists.ToString().Trim() == null)
            com.Parameters.Add("@Mainartists", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Mainartists", SqlDbType.VarChar).Value = Mainartists.Trim();

        if (Totalcrewno.ToString().Trim() == "" || Totalcrewno.ToString().Trim() == null)
            com.Parameters.Add("@Totalcrewno", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Totalcrewno", SqlDbType.VarChar).Value = Totalcrewno.Trim();

        if (Proposedshootingschedule.ToString().Trim() == "" || Proposedshootingschedule.ToString().Trim() == null)
            com.Parameters.Add("@Proposedshootingschedule", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Proposedshootingschedule", SqlDbType.VarChar).Value = Proposedshootingschedule.Trim();

        if (intfilmshootingid.ToString().Trim() == "" || intfilmshootingid.ToString().Trim() == null)
            com.Parameters.Add("@filmshootingid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@filmshootingid", SqlDbType.VarChar).Value = intfilmshootingid.Trim();


        if (Locationname.ToString().Trim() == "" || Locationname.ToString().Trim() == null || Locationname.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Locationname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Locationname", SqlDbType.VarChar).Value = Locationname.Trim();
        if (LocationnameId.ToString().Trim() == "" || LocationnameId.ToString().Trim() == null || LocationnameId.ToString().Trim() == "--Select--")
            com.Parameters.Add("@LocationnameId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LocationnameId", SqlDbType.VarChar).Value = LocationnameId.Trim();

        if (Fromdate.ToString().Trim() == "" || Fromdate.ToString().Trim() == null)
            com.Parameters.Add("@Fromdate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fromdate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Fromdate.Trim());

        if (Todate.ToString().Trim() == "" || Todate.ToString().Trim() == null)
            com.Parameters.Add("@Todate", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@Todate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Todate.Trim());

        if (Blockingdays.ToString().Trim() == "" || Blockingdays.ToString().Trim() == null)
            com.Parameters.Add("@Blockingdays", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Blockingdays", SqlDbType.VarChar).Value = Blockingdays.Trim();

        if (Shootingdays.ToString().Trim() == "" || Shootingdays.ToString().Trim() == null)
            com.Parameters.Add("@Shootingdays", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Shootingdays", SqlDbType.VarChar).Value = Shootingdays.Trim();

        if (Noofpolicepersions.ToString().Trim() == "" || Noofpolicepersions.ToString().Trim() == null)
            com.Parameters.Add("@Noofpolicepersions", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Noofpolicepersions", SqlDbType.VarChar).Value = Noofpolicepersions.Trim();

        if (Priceperlocation.ToString().Trim() == "" || Priceperlocation.ToString().Trim() == null)
            com.Parameters.Add("@Priceperlocation", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Priceperlocation", SqlDbType.VarChar).Value = Priceperlocation.Trim();

        if (Shootingfee.ToString().Trim() == "" || Shootingfee.ToString().Trim() == null)
            com.Parameters.Add("@Shootingfee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Shootingfee", SqlDbType.VarChar).Value = Shootingfee.Trim();

        if (Cautionfee.ToString().Trim() == "" || Cautionfee.ToString().Trim() == null)
            com.Parameters.Add("@Cautionfee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Cautionfee", SqlDbType.VarChar).Value = Cautionfee.Trim();

        if (Servicefee.ToString().Trim() == "" || Servicefee.ToString().Trim() == null)
            com.Parameters.Add("@Servicefee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Servicefee", SqlDbType.VarChar).Value = Servicefee.Trim();

        if (Policefee.ToString().Trim() == "" || Policefee.ToString().Trim() == null)
            com.Parameters.Add("@Policefee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Policefee", SqlDbType.VarChar).Value = Policefee.Trim();

        if (Gst.ToString().Trim() == "" || Gst.ToString().Trim() == null)
            com.Parameters.Add("@Gst", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Gst", SqlDbType.VarChar).Value = Gst.Trim();

        if (Extrahoursamount.ToString().Trim() == "" || Extrahoursamount.ToString().Trim() == null)
            com.Parameters.Add("@Extrahoursamount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Extrahoursamount", SqlDbType.VarChar).Value = Extrahoursamount.Trim();

        if (Totalamount.ToString().Trim() == "" || Totalamount.ToString().Trim() == null)
            com.Parameters.Add("@Totalamount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Totalamount", SqlDbType.VarChar).Value = Totalamount.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();


        if (FilmDevelopmentCorporationFLAG.Trim() == "" || FilmDevelopmentCorporationFLAG.Trim() == null)
            com.Parameters.Add("@FilmDevelopmentCorporationFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FilmDevelopmentCorporationFLAG", SqlDbType.VarChar).Value = FilmDevelopmentCorporationFLAG.ToString();

        if (ParticularsFurnishedFLAG.Trim() == "" || ParticularsFurnishedFLAG.Trim() == null)
            com.Parameters.Add("@ParticularsFurnishedFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ParticularsFurnishedFLAG", SqlDbType.VarChar).Value = ParticularsFurnishedFLAG.ToString();

        if (ReimbursetheDamageFLAG.Trim() == "" || ReimbursetheDamageFLAG.Trim() == null)
            com.Parameters.Add("@ReimbursetheDamageFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ReimbursetheDamageFLAG", SqlDbType.VarChar).Value = ReimbursetheDamageFLAG.ToString();

        if (Departmentname_termsconditionsFLAG.Trim() == "" || Departmentname_termsconditionsFLAG.Trim() == null)
            com.Parameters.Add("@Departmentname_termsconditionsFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Departmentname_termsconditionsFLAG", SqlDbType.VarChar).Value = Departmentname_termsconditionsFLAG.ToString();

        if (Departmentid.Trim() == "" || Departmentid.Trim() == null)
            com.Parameters.Add("@Departmentid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Departmentid", SqlDbType.VarChar).Value = Departmentid.ToString();


        if (Departmentname.Trim() == "" || Departmentname.Trim() == null)
            com.Parameters.Add("@Departmentname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Departmentname", SqlDbType.VarChar).Value = Departmentname.ToString();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return Convert.ToInt32(com.ExecuteScalar());
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);

        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet RetriveTrdeLicenseData(string intCFOEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("RetriveTradeLicenseData", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetShowApprovalandFees_Tradelicence(string tradeLicense, string ddlVillage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("GetShowApprovalandFees_trade", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@tradeLicense", SqlDbType.VarChar).Value = tradeLicense.ToString();

            da.SelectCommand.Parameters.Add("@ddlvillageid", SqlDbType.VarChar).Value = ddlVillage.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetLicenseSubType(string LicenseTypdecode)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_SubTypeMaster", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (LicenseTypdecode.Trim() == "" || LicenseTypdecode.Trim() == null)
                da.SelectCommand.Parameters.Add("@LicenseTypdecode", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@LicenseTypdecode", SqlDbType.VarChar).Value = LicenseTypdecode.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveDRUGRENEWALDETAILS(string intCFOEnterpid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDRUGRenewalDETAILS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intCFOEnterpid.Trim() == "" || intCFOEnterpid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intCFOEnterpid", SqlDbType.VarChar).Value = intCFOEnterpid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    public int InsertDrugRenewalDetails(string INTQUESSIONNIAREID, string INTENTPERID, string LICENSE_NO,
string NAMEOFFIRM, string UNIT_DISTRICT, string UNIT_MANDAL, string UNIT_VILLAGE, string UNIT_ADDRESS,
string OFFICE_DISTRICT, string OFFICE_MANDAL, string OFFICE_VILLAGE, string OFFICE_ADDRESS, string FROMDATE,
string TODATE, string TOTALPRODUCT, string DRUGRENEWALID, string CREATED_BY, string TotalAmount)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "SP_INSERT_DRUGDETAILS_RENEWAL";


        if (INTQUESSIONNIAREID.ToString().Trim() == "" || INTQUESSIONNIAREID.ToString().Trim() == null)
            com.Parameters.Add("@INTQUESSIONNIAREID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@INTQUESSIONNIAREID", SqlDbType.VarChar).Value = INTQUESSIONNIAREID.Trim();

        if (INTENTPERID.ToString().Trim() == "" || INTENTPERID.ToString().Trim() == null)
            com.Parameters.Add("@INTENTPERID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@INTENTPERID", SqlDbType.VarChar).Value = INTENTPERID.Trim();

        if (LICENSE_NO.ToString().Trim() == "" || LICENSE_NO.ToString().Trim() == null)
            com.Parameters.Add("@LICENSE_NO", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LICENSE_NO", SqlDbType.VarChar).Value = LICENSE_NO.Trim();

        if (NAMEOFFIRM.ToString().Trim() == "" || NAMEOFFIRM.ToString().Trim() == null)
            com.Parameters.Add("@NAMEOFFIRM", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NAMEOFFIRM", SqlDbType.VarChar).Value = NAMEOFFIRM.Trim();

        if (UNIT_DISTRICT.ToString().Trim() == "" || UNIT_DISTRICT.ToString().Trim() == null)
            com.Parameters.Add("@UNIT_DISTRICT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UNIT_DISTRICT", SqlDbType.VarChar).Value = UNIT_DISTRICT.Trim();

        if (UNIT_MANDAL.ToString().Trim() == "" || UNIT_MANDAL.ToString().Trim() == null)
            com.Parameters.Add("@UNIT_MANDAL", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UNIT_MANDAL", SqlDbType.VarChar).Value = UNIT_MANDAL.Trim();

        if (UNIT_VILLAGE.ToString().Trim() == "" || UNIT_VILLAGE.ToString().Trim() == null)
            com.Parameters.Add("@UNIT_VILLAGE", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UNIT_VILLAGE", SqlDbType.VarChar).Value = UNIT_VILLAGE.Trim();

        if (UNIT_ADDRESS.ToString().Trim() == "" || UNIT_ADDRESS.ToString().Trim() == null)
            com.Parameters.Add("@UNIT_ADDRESS", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UNIT_ADDRESS", SqlDbType.VarChar).Value = UNIT_ADDRESS.Trim();

        if (OFFICE_DISTRICT.ToString().Trim() == "" || OFFICE_DISTRICT.ToString().Trim() == null)
            com.Parameters.Add("@OFFICE_DISTRICT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OFFICE_DISTRICT", SqlDbType.VarChar).Value = OFFICE_DISTRICT.Trim();

        if (OFFICE_MANDAL.ToString().Trim() == "" || OFFICE_MANDAL.ToString().Trim() == null)
            com.Parameters.Add("@OFFICE_MANDAL", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OFFICE_MANDAL", SqlDbType.VarChar).Value = OFFICE_MANDAL.Trim();

        if (OFFICE_VILLAGE.ToString().Trim() == "" || OFFICE_VILLAGE.ToString().Trim() == null)
            com.Parameters.Add("@OFFICE_VILLAGE", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OFFICE_VILLAGE", SqlDbType.VarChar).Value = OFFICE_VILLAGE.Trim();

        if (OFFICE_ADDRESS.ToString().Trim() == "" || OFFICE_ADDRESS.ToString().Trim() == null)
            com.Parameters.Add("@OFFICE_ADDRESS", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OFFICE_ADDRESS", SqlDbType.VarChar).Value = OFFICE_ADDRESS.Trim();

        if (FROMDATE.ToString().Trim() == "" || FROMDATE.ToString().Trim() == null)
            com.Parameters.Add("@FROMDATE", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@FROMDATE", SqlDbType.DateTime).Value = FROMDATE.Trim();

        if (TODATE.ToString().Trim() == "" || TODATE.ToString().Trim() == null)
            com.Parameters.Add("@TODATE", SqlDbType.DateTime).Value = DBNull.Value;
        else
            com.Parameters.Add("@TODATE", SqlDbType.DateTime).Value = TODATE.Trim();

        if (TOTALPRODUCT.ToString().Trim() == "" || TOTALPRODUCT.ToString().Trim() == null)
            com.Parameters.Add("@TOTALPRODUCT", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TOTALPRODUCT", SqlDbType.VarChar).Value = TOTALPRODUCT.Trim();

        if (DRUGRENEWALID.ToString().Trim() == "" || DRUGRENEWALID.ToString().Trim() == null)
            com.Parameters.Add("@DRUGRENEWALID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DRUGRENEWALID", SqlDbType.VarChar).Value = DRUGRENEWALID.Trim();

        if (CREATED_BY.ToString().Trim() == "" || CREATED_BY.ToString().Trim() == null)
            com.Parameters.Add("@CREATED_BY", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CREATED_BY", SqlDbType.VarChar).Value = CREATED_BY.Trim();

        if (TotalAmount.ToString().Trim() == "" || TotalAmount.ToString().Trim() == null)
            com.Parameters.Add("@TotalAmount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TotalAmount", SqlDbType.VarChar).Value = TotalAmount.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {

            object returnvalue = com.ExecuteScalar();
            if (returnvalue == DBNull.Value || returnvalue == null)
                return 0;
            else
                return Convert.ToInt32(returnvalue);


        }
        catch (Exception ex)
        {
            throw ex;
            //return 0;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int DeleteMsmeDetailsByGM(string msmeno, string deleteflag, string remarks, string createdby)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "DELETEMSMEDRILLDOWN";

        cmd.Parameters.Add("@MSME_NO", SqlDbType.VarChar).Value = msmeno;
        cmd.Parameters.Add("@DELETEFLAG", SqlDbType.VarChar).Value = deleteflag;
        cmd.Parameters.Add("@DELETEREMARKS", SqlDbType.VarChar).Value = remarks;
        cmd.Parameters.Add("@MODIFIEDUSER", SqlDbType.VarChar).Value = createdby;


        con.OpenConnection();
        cmd.Connection = con.GetConnection;

        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }

    }

    public DataSet DeptReportDepartmentWise_NewRENSMS(string intDistrictid, string Category)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_New_export"
            da = new SqlDataAdapter("DeptReportDepartmentWise_New1_REN_SMSNEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryStatusByTransactionIDPCBBMW(string User_id, string intcfeid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDBMW_PCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intcfeid.Trim() == "" || intcfeid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intcfeid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intcfeid", SqlDbType.VarChar).Value = intcfeid.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = User_id.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public void DocumentPath(string filepath)
    {
        try
        {
            string encpassword = Encrypt(filepath, "SYSTIME");
            //Response.Redirect("~//CS.aspx?filepathnew=" + encpassword);
            HttpContext.Current.Response.Redirect("~//CS.aspx?filepathnew=" + encpassword);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

        }
    }

    public DataSet Sp_DistApplDatewiseTotalAppl(string fromdate, string todate, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("Sp_DistApplDatewiseTotalAppl", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.AddWithValue("@Districtid", District);


            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

            con.CloseConnection();
        }

    }
    public DataSet DistApprovalDatewiseTotalAppl(string fromdate, string todate, string District)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("Sp_DistApprovalDatewiseTotalAppl", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.AddWithValue("@Districtid", District);
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int InsertDrawingDetails(string DrawingNo, string Secretkey, string Applicationtype, string ArchitectLicenseNo, string ArchitectMobileNo, string ArchitectName, string Authority, string BuiltUpArea,
                                    string Casetype, string District, string ExistingRoadWidth, string GramPanchayat, string LocalBody, string Mandal,
                                    string MaxBuildingHeight, string Municipality, string Organisation, string PlanPDFBase64, string PlanPDFName, string PredcrDwgBase64,
                                    string PredcrDwgName, string ScrutinyReportBase64, string ScrutinyReportName, double TotalLandExtent, string Village, string Cfeid,
                                    string UserId, string sMessage, string sStatus)
    {
        int valid;
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_INSERT_DCRPORTAL_DETAILS", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@DrawingNo", Convert.ToString(DrawingNo));
            cmd.Parameters.AddWithValue("@Secretkey", Convert.ToString(Secretkey));
            cmd.Parameters.AddWithValue("@Applicationtype", Convert.ToString(Applicationtype));
            cmd.Parameters.AddWithValue("@ArchitectLicenseNo", Convert.ToString(ArchitectLicenseNo));
            cmd.Parameters.AddWithValue("@ArchitectMobileNo", Convert.ToString(ArchitectMobileNo));
            cmd.Parameters.AddWithValue("@ArchitectName", Convert.ToString(ArchitectName));
            cmd.Parameters.AddWithValue("@Authority", Convert.ToString(Authority));
            cmd.Parameters.AddWithValue("@BuiltUpArea", Convert.ToString(BuiltUpArea));
            cmd.Parameters.AddWithValue("@Casetype", Convert.ToString(Casetype));
            cmd.Parameters.AddWithValue("@District", Convert.ToString(District));
            cmd.Parameters.AddWithValue("@ExistingRoadWidth", Convert.ToString(ExistingRoadWidth));
            cmd.Parameters.AddWithValue("@GramPanchayat", Convert.ToString(GramPanchayat));
            cmd.Parameters.AddWithValue("@LocalBody", Convert.ToString(LocalBody));
            cmd.Parameters.AddWithValue("@Mandal", Convert.ToString(Mandal));
            cmd.Parameters.AddWithValue("@MaxBuildingHeight", Convert.ToString(MaxBuildingHeight));
            cmd.Parameters.AddWithValue("@Municipality", Convert.ToString(Municipality));
            cmd.Parameters.AddWithValue("@Organisation", Convert.ToString(Organisation));
            cmd.Parameters.AddWithValue("@PlanPDFBase64", Convert.ToString(PlanPDFBase64));
            cmd.Parameters.AddWithValue("@PlanPDFName", Convert.ToString(PlanPDFName));
            cmd.Parameters.AddWithValue("@PredcrDwgBase64", Convert.ToString(PredcrDwgBase64));
            cmd.Parameters.AddWithValue("@PredcrDwgName", Convert.ToString(PredcrDwgName));
            cmd.Parameters.AddWithValue("@ScrutinyReportBase64", Convert.ToString(ScrutinyReportBase64));
            cmd.Parameters.AddWithValue("@ScrutinyReportName", Convert.ToString(ScrutinyReportName));
            cmd.Parameters.AddWithValue("@TotalLandExtent", Convert.ToString(TotalLandExtent));
            cmd.Parameters.AddWithValue("@Village", Convert.ToString(Village));
            cmd.Parameters.AddWithValue("@IntCfeId", Convert.ToString(Cfeid));
            cmd.Parameters.AddWithValue("@UserId", Convert.ToString(UserId));
            cmd.Parameters.AddWithValue("@sMessage", Convert.ToString(sMessage));
            cmd.Parameters.AddWithValue("@sStatus", Convert.ToString(sStatus));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }

    public int InsertDeptDateTracingBMW(string DepartmentId, string QuessionaireId, string Uid_No, string Apply_Date, string PreScrutinity_Date, string QueryRaised_Date, string QueryRespond_Date, string Approval_Date, string Application_Type, string ApprovalId)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = null;
        try
        {
            cmd = new SqlCommand("USP_INS_DASHBOARDDATA_BWM", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
            //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
            cmd.Parameters.AddWithValue("@DepartmentId", Convert.ToString(DepartmentId));
            cmd.Parameters.AddWithValue("@QuessionaireId", Convert.ToString(QuessionaireId));
            cmd.Parameters.AddWithValue("@Uid_No", Convert.ToString(Uid_No));
            cmd.Parameters.AddWithValue("@Apply_Date", Apply_Date);
            //cmd.Parameters.AddWithValue("@PreScrutinity_Date", Convert.ToString(cmf.convertDateIndia(formvoobj.BillDate)));
            cmd.Parameters.AddWithValue("@PreScrutinity_Date", PreScrutinity_Date);
            cmd.Parameters.AddWithValue("@QueryRaised_Date", QueryRaised_Date);
            cmd.Parameters.AddWithValue("@QueryRespond_Date", QueryRespond_Date);
            cmd.Parameters.AddWithValue("@Approval_Date", Approval_Date);
            cmd.Parameters.AddWithValue("@Application_Type", Application_Type);
            cmd.Parameters.AddWithValue("@ApprovalId", ApprovalId);

            //cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            //cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            // valid = (Int32)cmd.Parameters["@Valid"].Value;

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }

    //END MADHURI

    //public DataSet getBankAccountTypeMaster()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_BANK_ACCOUNT_TYPE_MASTER", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public string ValidateOTPMail(string UserID, string OTP)
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {
            da = new SqlDataAdapter("sp_ValidUserOTP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UserID.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
            }
            if (OTP.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = OTP.ToString();
            }

            da.Fill(ds);
            return ds.Tables[0].Rows[0][0].ToString().Trim();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet GetUnderLimitsOfVillage(string intVillageid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GET_UNDERLIMITSOF_VILLAGE]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (intVillageid.Trim().ToString() == "" || intVillageid.ToString().Trim() == null || intVillageid.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@intVillageid", SqlDbType.VarChar).Value = intVillageid.Trim();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }


    }

    public DataSet GetLabourApplicationType()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LABOUR_APPLICATIONTYPE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int InsertPaymentBillDesk(string UidNo, string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string Created_by, string intApprovalid, string ApplType, string AdditionalPayment)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[USP_INSERT_Builldesc_PaymentDtls]";

        if (UidNo.Trim() == "" || UidNo.Trim() == null)
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UidNo.Trim();
        }
        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }
        if (AdditionalPayment == "" || AdditionalPayment == null)
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = AdditionalPayment.Trim();

        com.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public int UpdateAdditionalpaymentsUID_ForOtherServices(string intCFEEnterpid, string Amount, string Status, string Created_by, string stageid, string dept, string Approval, string IPAddress)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdatetDeptApprovalnew_ForOtherServices";


        if (IPAddress.Trim() == "" || IPAddress.Trim() == null)
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ipaddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (intCFEEnterpid.Trim() == "" || intCFEEnterpid.Trim() == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Amount.Trim() == "" || Amount.Trim() == null)
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = Amount.Trim();


        if (Status.Trim() == "" || Status.Trim() == null)
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (stageid.Trim() == "" || stageid.Trim() == null)
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@stageid", SqlDbType.VarChar).Value = stageid.Trim();


        if (dept.Trim() == "" || dept.Trim() == null)
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.Trim();


        if (Approval.Trim() == "" || Approval.Trim() == null)
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval", SqlDbType.VarChar).Value = Approval.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }


    public DataSet GetEnterPreniourPayDetailsAddtionalPayment_ForOtherServices(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetails_AddtionalPayment_ForOtherServices", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertPaymentBillDeskCFO(string UidNo, string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string Created_by, string intApprovalid, string ApplType, string AdditionalPayment)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[USP_INSERT_Builldesc_PaymentDtls_CFO]";

        if (UidNo.Trim() == "" || UidNo.Trim() == null)
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UidNo.Trim();
        }
        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Online_Amount.Trim();


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (AdditionalPayment == "" || AdditionalPayment == null)
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = AdditionalPayment.Trim();

        com.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public DataSet GetShowApprovalandFeesLabour(string SerchVer, string EnterpriseType, string intDistrictid, string LabourActId, string numberofEmployees)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesLabour", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (LabourActId.Trim() == "" || LabourActId.Trim() == null)
                da.SelectCommand.Parameters.Add("@LabourActId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@LabourActId", SqlDbType.VarChar).Value = LabourActId.ToString();

            if (numberofEmployees.ToString().Trim() == null)//|| numberofEmployees.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@NoOfEmployees", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@NoOfEmployees", SqlDbType.VarChar).Value = numberofEmployees.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesLabouract1(string SerchVer, string EnterpriseType, string intDistrictid, string LabourActId, string numberofEmployees, string CommencementDate, string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesLabour_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (LabourActId.Trim() == "" || LabourActId.Trim() == null)
                da.SelectCommand.Parameters.Add("@LabourActId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@LabourActId", SqlDbType.VarChar).Value = LabourActId.ToString();

            if (numberofEmployees.ToString().Trim() == null)//|| numberofEmployees.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@NoOfEmployees", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@NoOfEmployees", SqlDbType.VarChar).Value = numberofEmployees.Trim();

            if (CommencementDate.ToString().Trim() == null)//|| numberofEmployees.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@CommencementDate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@CommencementDate", SqlDbType.VarChar).Value = CommencementDate.Trim();

            if (createdby.ToString().Trim() == null)//|| numberofEmployees.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.Trim();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetEnterprinerpaymentDtls(string UID, string Orderno, string AdditionalPaymentflg)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_Builldesc_PaymentDtls_DESE]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UID.Trim();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = Orderno.Trim();
            da.SelectCommand.Parameters.Add("@AdditionalPaymentflg", SqlDbType.VarChar).Value = AdditionalPaymentflg.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterprinerpaymentDtlsAdditional(string UID, string Orderno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_Builldesc_PaymentDtls_DESE]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UID.Trim();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = Orderno.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetEnterprinerpaymentDtlsCfo(string UID, string Orderno, string AdditionalPaymentflg)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_Builldesc_PaymentDtls_DESE_CFO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UID.Trim();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = Orderno.Trim();
            da.SelectCommand.Parameters.Add("@AdditionalPaymentflg", SqlDbType.VarChar).Value = AdditionalPaymentflg.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetWorkPlaceMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_LABOUR_WORKPLACE_MASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetLabourActClassification()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LabourActEst_Classification_MASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetLabourActCategoryMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LabourActEst_Category_MASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetLabourActRelationshipMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_LabourActEst_Relationship_MASTER]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetGender()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_LabourActEst_Gender_MASTER]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetLabourActOccupationMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LabourActEst_Occupation_MASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetLabourActPersonMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LabourActEst_PersonType_MASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetverifyofqueLabour(string Created_by)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[getdataverifyque_Labour]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getLabourDetails(string intEnterprenuerid, int QuestionnaireId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[getLabourDetails]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();
            if (QuestionnaireId != null)
                da.SelectCommand.Parameters.Add("@QuestionnairId", SqlDbType.Int).Value = QuestionnaireId;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet getLabourDetailsCFO(string intEnterprenuerid, int QuestionnaireId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[getLabourDetails_CFO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();
            if (QuestionnaireId != null)
                da.SelectCommand.Parameters.Add("@QuestionnairId", SqlDbType.Int).Value = QuestionnaireId;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    string str = ConfigurationManager.ConnectionStrings["TSiPASSSkils"].ConnectionString;
    //USP_GET_PAHANIDETAILS

    public int InsertLabourDetails(LabourActVO labouractvo, LabourActVO_ContraactLicense oLabourActVO_ContraactLicense, List<LabourWorkPlace> lstworkplacevo, List<EmployeesDetails> LstLabourEmployeesvo, List<FamilyMembersAct1> lstFamilyMembers, List<ContractorDetails> lstContractorVoAct3, List<ContractorDetails> lstContractorVoAct4)
    {
        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_Questionnaire_Labour";

            com.Transaction = transaction;
            com.Connection = connection;
            if (labouractvo.intCFEEnterpid == 0 || labouractvo.intCFEEnterpid == null)
                com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = labouractvo.intCFEEnterpid;


            if (labouractvo.QuestionnaireId == 0 || labouractvo.QuestionnaireId == null)
                com.Parameters.Add("@QuestionnaireId", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            if (labouractvo.Uid_No == null || labouractvo.Uid_No.ToString().Trim() == "" || labouractvo.Uid_No.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = labouractvo.Uid_No.Trim();

            if (labouractvo.Reg_Id == null || labouractvo.Reg_Id.ToString().Trim() == "" || labouractvo.Reg_Id.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = labouractvo.Reg_Id;

            if (labouractvo.LabourActId == null || labouractvo.LabourActId.ToString().Trim() == "" || labouractvo.LabourActId.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Labour_ActId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Labour_ActId", SqlDbType.VarChar).Value = labouractvo.LabourActId.Trim();
            //----------------------------
            if (labouractvo.EstClassification == null || labouractvo.EstClassification.ToString().Trim() == "" || labouractvo.EstClassification.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Estb_Classification", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Estb_Classification", SqlDbType.VarChar).Value = labouractvo.EstClassification.Trim();

            if (labouractvo.CategoryofEstablishment == null || labouractvo.CategoryofEstablishment.ToString().Trim() == "" || labouractvo.CategoryofEstablishment.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Estb_Category", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Estb_Category", SqlDbType.VarChar).Value = labouractvo.CategoryofEstablishment.Trim();
            if (labouractvo.NameofShopAct1 == null || labouractvo.NameofShopAct1.ToString().Trim() == "" || labouractvo.NameofShopAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estb_Name", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estb_Name", SqlDbType.VarChar).Value = labouractvo.NameofShopAct1.Trim();

            if (labouractvo.ShopDoorNo == null || labouractvo.ShopDoorNo.ToString().Trim() == "" || labouractvo.ShopDoorNo.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_DoorNo", SqlDbType.VarChar).Value = labouractvo.ShopDoorNo.Trim();

            if (labouractvo.ShopLocality == null || labouractvo.ShopLocality.ToString().Trim() == "" || labouractvo.ShopLocality.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_Locality", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_Locality", SqlDbType.VarChar).Value = labouractvo.ShopLocality.Trim();

            if (labouractvo.ShopDistrict == null || labouractvo.ShopDistrict.ToString().Trim() == "" || labouractvo.ShopDistrict.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_District", SqlDbType.VarChar).Value = labouractvo.ShopDistrict.Trim();

            if (labouractvo.ShopMandal == null || labouractvo.ShopMandal.ToString().Trim() == "" || labouractvo.ShopMandal.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_Mandal", SqlDbType.VarChar).Value = labouractvo.ShopMandal.Trim();

            if (labouractvo.ShopVillage == null || labouractvo.ShopVillage.ToString().Trim() == "" || labouractvo.ShopVillage.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_Village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_Village", SqlDbType.VarChar).Value = labouractvo.ShopVillage.Trim();
            if (labouractvo.ShopPincode == null || labouractvo.ShopPincode.ToString().Trim() == "" || labouractvo.ShopPincode.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_PinCode", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_PinCode", SqlDbType.VarChar).Value = labouractvo.ShopPincode.Trim();

            if (labouractvo.NameofUnitAct1 == null || labouractvo.NameofUnitAct1.ToString().Trim() == "" || labouractvo.NameofUnitAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Name", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Name", SqlDbType.VarChar).Value = labouractvo.NameofUnitAct1.Trim();

            if (labouractvo.PGNameAct1 == null || labouractvo.PGNameAct1.ToString().Trim() == "" || labouractvo.PGNameAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Empolyer_FatherName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Empolyer_FatherName", SqlDbType.VarChar).Value = labouractvo.PGNameAct1.Trim();
            if (labouractvo.EmpDesignation == null || labouractvo.EmpDesignation.ToString().Trim() == "" || labouractvo.EmpDesignation.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Designation", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Designation", SqlDbType.VarChar).Value = labouractvo.EmpDesignation.Trim();

            if (labouractvo.AgeAct1 == null || labouractvo.AgeAct1.ToString().Trim() == "" || labouractvo.AgeAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Age", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Age", SqlDbType.VarChar).Value = labouractvo.AgeAct1.Trim();

            if (labouractvo.MobileAct1 == null || labouractvo.MobileAct1.ToString().Trim() == "" || labouractvo.MobileAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_MobileNo", SqlDbType.VarChar).Value = labouractvo.MobileAct1.Trim();

            if (labouractvo.EmailAct1 == null || labouractvo.EmailAct1.ToString().Trim() == "" || labouractvo.EmailAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_EmailID", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_EmailID", SqlDbType.VarChar).Value = labouractvo.EmailAct1.Trim();
            if (labouractvo.DoorNoResidentialAct1 == null || labouractvo.DoorNoResidentialAct1.ToString().Trim() == "" || labouractvo.DoorNoResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_DoorNo", SqlDbType.VarChar).Value = labouractvo.DoorNoResidentialAct1.Trim();
            if (labouractvo.LocalResidentialAct1 == null || labouractvo.LocalResidentialAct1.ToString().Trim() == "" || labouractvo.LocalResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Locality", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Locality", SqlDbType.VarChar).Value = labouractvo.LocalResidentialAct1.Trim();

            if (labouractvo.DistrictResidentialAct1 == null || labouractvo.DistrictResidentialAct1.ToString().Trim() == "" || labouractvo.DistrictResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_District", SqlDbType.VarChar).Value = labouractvo.DistrictResidentialAct1.Trim();

            if (labouractvo.MandalResidentialAct1 == null || labouractvo.MandalResidentialAct1.ToString().Trim() == "" || labouractvo.MandalResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Mandal", SqlDbType.VarChar).Value = labouractvo.MandalResidentialAct1.Trim();

            if (labouractvo.VillageResidentialAct1 == null || labouractvo.VillageResidentialAct1.ToString().Trim() == "" || labouractvo.VillageResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Village", SqlDbType.VarChar).Value = labouractvo.VillageResidentialAct1.Trim();

            if (labouractvo.ManagerResidenceAct1 == null || labouractvo.ManagerResidenceAct1.ToString().Trim() == "" || labouractvo.ManagerResidenceAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Agent_Flag", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Agent_Flag", SqlDbType.VarChar).Value = labouractvo.ManagerResidenceAct1.Trim();

            if (labouractvo.ManagerNameAct1 == null || labouractvo.ManagerNameAct1.ToString().Trim() == "" || labouractvo.ManagerNameAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Name", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Name", SqlDbType.VarChar).Value = labouractvo.ManagerNameAct1.Trim();
            if (labouractvo.ManagerPGNameAct1 == null || labouractvo.ManagerPGNameAct1.ToString().Trim() == "" || labouractvo.ManagerPGNameAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_FatherName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_FatherName", SqlDbType.VarChar).Value = labouractvo.ManagerPGNameAct1.Trim();

            if (labouractvo.ManagerDesignationAct1 == null || labouractvo.ManagerDesignationAct1.ToString().Trim() == "" || labouractvo.ManagerDesignationAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Designation", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Designation", SqlDbType.VarChar).Value = labouractvo.ManagerDesignationAct1.Trim();

            if (labouractvo.ManagerDoorNo == null || labouractvo.ManagerDoorNo.ToString().Trim() == "" || labouractvo.ManagerDoorNo.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_DoorNo", SqlDbType.VarChar).Value = labouractvo.ManagerDoorNo.Trim();

            if (labouractvo.ManagerLocalityAct1 == null || labouractvo.ManagerLocalityAct1.ToString().Trim() == "" || labouractvo.ManagerLocalityAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Locality", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Locality", SqlDbType.VarChar).Value = labouractvo.ManagerLocalityAct1.Trim();

            if (labouractvo.ManagerDistrictAct1 == null || labouractvo.ManagerDistrictAct1.ToString().Trim() == "" || labouractvo.ManagerDistrictAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_District", SqlDbType.VarChar).Value = labouractvo.ManagerDistrictAct1.Trim();

            if (labouractvo.ManagerMandalAct1 == null || labouractvo.ManagerMandalAct1.ToString().Trim() == "" || labouractvo.ManagerMandalAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Mandal", SqlDbType.VarChar).Value = labouractvo.ManagerMandalAct1.Trim();
            if (labouractvo.ManagerVillageAct1 == null || labouractvo.ManagerVillageAct1.ToString().Trim() == "" || labouractvo.ManagerVillageAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Village", SqlDbType.VarChar).Value = labouractvo.ManagerVillageAct1.Trim();
            if (labouractvo.NatureofBusinessAct1 == null || labouractvo.NatureofBusinessAct1.ToString().Trim() == "" || labouractvo.NatureofBusinessAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Nature_of_Business", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Nature_of_Business", SqlDbType.VarChar).Value = labouractvo.NatureofBusinessAct1.Trim();

            if (labouractvo.DateofCommenceAct1 == null || labouractvo.DateofCommenceAct1.ToString().Trim() == "" || labouractvo.DateofCommenceAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_DateofCommencement", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_DateofCommencement", SqlDbType.VarChar).Value = labouractvo.DateofCommenceAct1.Trim();

            if (labouractvo.Above18Male == null || labouractvo.Above18Male == 0)
                com.Parameters.Add("@Form1_1_Employees_Above18_Male", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Employees_Above18_Male", SqlDbType.Int).Value = labouractvo.Above18Male;

            if (labouractvo.Above18FeMale == null || labouractvo.Above18FeMale == 0)
                com.Parameters.Add("@Form1_1_Employees_Above18_Female", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Employees_Above18_Female", SqlDbType.Int).Value = labouractvo.Above18FeMale;

            if (labouractvo.Below18Male == null || labouractvo.Below18Male == 0)
                com.Parameters.Add("@Form1_1_Employees_14_18_Male", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Employees_14_18_Male", SqlDbType.Int).Value = labouractvo.Below18Male;

            if (labouractvo.Below18FeMale == null || labouractvo.Below18FeMale == 0)
                com.Parameters.Add("@Form1_1_Employees_14_18_Female", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Employees_14_18_Female", SqlDbType.Int).Value = labouractvo.Below18FeMale;

            if (labouractvo.CreatedBy == null || labouractvo.CreatedBy == 0)
                com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Created_by", SqlDbType.Int).Value = labouractvo.CreatedBy;

            if (labouractvo.TotalAbove18 == 0 || labouractvo.TotalAbove18 == null)
                com.Parameters.Add("@TotalAbove18", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@TotalAbove18", SqlDbType.Int).Value = labouractvo.TotalAbove18;

            if (labouractvo.TotalBelow18 == 0 || labouractvo.TotalBelow18 == null)
                com.Parameters.Add("@TotalBelow18Emps", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@TotalBelow18Emps", SqlDbType.Int).Value = labouractvo.TotalBelow18;

            if (labouractvo.TotalEmployees == 0 || labouractvo.TotalEmployees == null)
                com.Parameters.Add("@TotalEmployees", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@TotalEmployees", SqlDbType.Int).Value = labouractvo.TotalEmployees;
            //if (labouractvo.DateofCommenceAct1 != null && labouractvo.DateofCommenceAct1 != "")
            //    com.Parameters.Add("@Form1_1_DateofCommencement", SqlDbType.VarChar).Value = labouractvo.DateofCommenceAct1.Trim();
            com.Parameters.Add("@Created_User", SqlDbType.VarChar).Value = labouractvo.CreatedUser;

            if (labouractvo.FullNamePerAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_FullName", labouractvo.FullNamePerAct2);
            if (labouractvo.PerDoorNoAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_Per_DoorNo", labouractvo.PerDoorNoAct2);
            if (labouractvo.PerVillage != null)
                com.Parameters.AddWithValue("@Form1_2_Per_Village", labouractvo.PerVillage);
            if (labouractvo.PerMandal != null)
                com.Parameters.AddWithValue("@Form1_2_Per_Mandal", labouractvo.PerMandal);
            if (labouractvo.PerDistrict != null)
                com.Parameters.AddWithValue("@Form1_2_Per_District", labouractvo.PerDistrict);
            if (labouractvo.PerPincode != null)
                com.Parameters.AddWithValue("@Form1_2_Per_PinCode", labouractvo.PerPincode);

            if (labouractvo.CompletionDateAct2 != null && labouractvo.CompletionDateAct2 != "")
                com.Parameters.AddWithValue("@Form1_2_Est_Compltd_Dt", labouractvo.CompletionDateAct2);
            if (labouractvo.ManagerMobileNo != null)
                com.Parameters.AddWithValue("@Form1_Manager_MobileNo", labouractvo.ManagerMobileNo);
            if (labouractvo.ManagerEmail != null)
                com.Parameters.AddWithValue("@Form1_Manager_EMail", labouractvo.ManagerEmail);

            if (labouractvo.ManagerPINCode != null)
                com.Parameters.AddWithValue("@Form1_Manager_PINCode", labouractvo.ManagerPINCode);

            if (labouractvo.ManagerAddress != null)
                com.Parameters.AddWithValue("@Form1_Manager_Address", labouractvo.ManagerAddress);


            if (labouractvo.RegActId != null)
                com.Parameters.AddWithValue("@Form1_3_Registered_Act", labouractvo.RegActId);
            if (labouractvo.LicenseRegNo != null)
                com.Parameters.AddWithValue("@Form1_3_Reg_Lic", labouractvo.LicenseRegNo);

            if (labouractvo.DirNameAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_FullName", labouractvo.DirNameAct4);
            if (labouractvo.DirDoorNoAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_DoorNo", labouractvo.DirDoorNoAct4);
            if (labouractvo.DirVillageAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_Village", labouractvo.DirVillageAct4);
            if (labouractvo.DirMandalAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_Mandal", labouractvo.DirMandalAct4);
            if (labouractvo.DirDistrictAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_District", labouractvo.DirDistrictAct4);


            if (labouractvo.Firmname.IsBlankOrNull())
                com.Parameters.Add("@Form1_5_contr_Firm", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_5_contr_Firm", SqlDbType.VarChar).Value = labouractvo.Firmname;

            if (labouractvo.Mobile.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Mobile", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Mobile", SqlDbType.VarChar).Value = labouractvo.Mobile;

            if (labouractvo.Email.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Email", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Email", SqlDbType.VarChar).Value = labouractvo.Email;


            if (labouractvo.FName.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Fname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Fname", SqlDbType.VarChar).Value = labouractvo.FName;


            if (labouractvo.DoorNo.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Doorno", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Doorno", SqlDbType.VarChar).Value = labouractvo.DoorNo;



            if (labouractvo.Locality.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Locality", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Locality", SqlDbType.VarChar).Value = labouractvo.Locality;



            if (labouractvo.District.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_District", SqlDbType.VarChar).Value = labouractvo.District;


            if (labouractvo.Mandal.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Mandal", SqlDbType.VarChar).Value = labouractvo.Mandal;



            if (labouractvo.Village.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Village", SqlDbType.VarChar).Value = labouractvo.Village;



            if (labouractvo.pincode.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Pincode", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Pincode", SqlDbType.VarChar).Value = labouractvo.pincode;



            if (labouractvo.OtherStateAddress.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_contr_Othr_St_Address", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_contr_Othr_St_Address", SqlDbType.VarChar).Value = labouractvo.OtherStateAddress;



            if (labouractvo.Dob.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Dob", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Dob", SqlDbType.VarChar).Value = labouractvo.Dob;


            if (labouractvo.Age.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Age", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Age", SqlDbType.VarChar).Value = labouractvo.Age;


            if (labouractvo.TypeOfBusiness.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Type_of_Bussiness", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Type_of_Bussiness", SqlDbType.VarChar).Value = labouractvo.TypeOfBusiness;



            if (labouractvo.EstablishmentNumber.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Establishment_Number", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Establishment_Number", SqlDbType.VarChar).Value = labouractvo.EstablishmentNumber;



            if (labouractvo.EstablishmentDate.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Establishment_Date", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Establishment_Date", SqlDbType.VarChar).Value = labouractvo.EstablishmentDate;



            if (labouractvo.ConvictedFlag.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Contractor_convicted_flag", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_convicted_flag", SqlDbType.VarChar).Value = labouractvo.ConvictedFlag;



            if (labouractvo.AnyOrderFlag.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Contractor_anyorder_flag", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_anyorder_flag", SqlDbType.VarChar).Value = labouractvo.AnyOrderFlag;



            if (!labouractvo.AnyEstablishFlag.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Contractor_anyestablish_flag", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_anyestablish_flag", SqlDbType.VarChar).Value = labouractvo.AnyEstablishFlag;



            if (labouractvo.EstablishmentRegCertificateFilename.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Contractor_PERCFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_PERCFileName", SqlDbType.VarChar).Value = labouractvo.EstablishmentRegCertificateFilename;


            if (labouractvo.PEFormVFileName.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Contractor_PEFVFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_PEFVFileName", SqlDbType.VarChar).Value = labouractvo.PEFormVFileName;


            if (labouractvo.ConvictedDetails.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Contractor_convicted", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_convicted", SqlDbType.VarChar).Value = labouractvo.ConvictedDetails;


            if (labouractvo.AnyOrderDate.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Contractor_anyorder", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_anyorder", SqlDbType.VarChar).Value = labouractvo.AnyOrderDate;


            if (labouractvo.AnyEstablishDetails.IsBlankOrNull())

                com.Parameters.Add("@Form_1_5_Contractor_anyestablish", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_anyestablish", SqlDbType.VarChar).Value = labouractvo.AnyEstablishDetails;


            if (labouractvo.SecurityDepositPaid.IsBlankOrNull())

                com.Parameters.Add("@Form_1_5_Contractor_Deposit_Paid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_Deposit_Paid", SqlDbType.VarChar).Value = labouractvo.SecurityDepositPaid;


            if (labouractvo.SecurityDepositPayable.IsBlankOrNull())

                com.Parameters.Add("@Form_1_5_Contractor_Deposit_Payable", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_Deposit_Payable", SqlDbType.VarChar).Value = labouractvo.SecurityDepositPayable;


            if (labouractvo.SecurityDepositChallanNo.IsBlankOrNull())

                com.Parameters.Add("@Form_1_5_Contractor_Deposit_ChallanNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_Deposit_ChallanNo", SqlDbType.VarChar).Value = labouractvo.SecurityDepositChallanNo;

            if (labouractvo.SecurityDepositChallanDate.IsBlankOrNull())

                com.Parameters.Add("@SecurityDepositChallanDate", SqlDbType.DateTime).Value = DBNull.Value;
            else
                com.Parameters.Add("@SecurityDepositChallanDate", SqlDbType.DateTime).Value = labouractvo.SecurityDepositChallanDate;

            if (labouractvo.SecurityDepositChallanFilename.IsBlankOrNull())
                com.Parameters.Add("@Form_1_5_Contractor_Deposit_ChallanFilename", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_Deposit_ChallanFilename", SqlDbType.VarChar).Value = labouractvo.SecurityDepositChallanFilename;


            if (labouractvo.MaxNoEmployed == 0 || labouractvo.MaxNoEmployed == null)
                com.Parameters.Add("@Form_1_5_Contractor_MaxNoEmployed", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form_1_5_Contractor_MaxNoEmployed", SqlDbType.Int).Value = labouractvo.MaxNoEmployed;

            // added by shankar
            if (labouractvo.Principleempnumber.IsBlankOrNull())
                com.Parameters.Add("@Principleempnumber", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Principleempnumber", SqlDbType.VarChar).Value = labouractvo.Principleempnumber;

            if (labouractvo.PrincipleempDate.IsBlankOrNull())
                com.Parameters.Add("@PrincipleempDate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@PrincipleempDate", SqlDbType.VarChar).Value = labouractvo.PrincipleempDate;

            if (labouractvo.PrincipleempZone.IsBlankOrNull())
                com.Parameters.Add("@PrincipleempZone", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@PrincipleempZone", SqlDbType.VarChar).Value = labouractvo.PrincipleempZone;

            if (labouractvo.PrincipleempCommenceDate.IsBlankOrNull())
                com.Parameters.Add("@PrincipleempCommenceDate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@PrincipleempCommenceDate", SqlDbType.VarChar).Value = labouractvo.PrincipleempCommenceDate;

            if (labouractvo.PrincipleempCommenceEnddate.IsBlankOrNull())
                com.Parameters.Add("@PrincipleempCommenceEnddate", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@PrincipleempCommenceEnddate", SqlDbType.VarChar).Value = labouractvo.PrincipleempCommenceEnddate;

            if (labouractvo.NoofworkersunderallContractorsofthePrincipalEmployer.IsBlankOrNull())
                com.Parameters.Add("@NoofworkersunderallContractorsofthePrincipalEmployer", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@NoofworkersunderallContractorsofthePrincipalEmployer", SqlDbType.VarChar).Value = labouractvo.NoofworkersunderallContractorsofthePrincipalEmployer;



            if (oLabourActVO_ContraactLicense.MaxoEmployees_contract == null || oLabourActVO_ContraactLicense.MaxoEmployees_contract == "0")
                com.Parameters.Add("@MaxoEmployees_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@MaxoEmployees_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.MaxoEmployees_contract;

            if (oLabourActVO_ContraactLicense.contractConvict_contract == null || oLabourActVO_ContraactLicense.contractConvict_contract == "0")
                com.Parameters.Add("@contractConvict_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@contractConvict_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.contractConvict_contract;


            if (oLabourActVO_ContraactLicense.contractSuspend_contract == null || oLabourActVO_ContraactLicense.contractSuspend_contract == "0")
                com.Parameters.Add("@contractSuspend_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@contractSuspend_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.contractSuspend_contract;


            if (oLabourActVO_ContraactLicense.rblcontractEst_contract == null || oLabourActVO_ContraactLicense.rblcontractEst_contract == "0")
                com.Parameters.Add("@rblcontractEst_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@rblcontractEst_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.rblcontractEst_contract;

            if (oLabourActVO_ContraactLicense.PrinEmployPincode_contract == null || oLabourActVO_ContraactLicense.PrinEmployPincode_contract == "0")
                com.Parameters.Add("@PrinEmployPincode_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@PrinEmployPincode_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.PrinEmployPincode_contract;

            if (oLabourActVO_ContraactLicense.DistPrinEmploy_contract == null || oLabourActVO_ContraactLicense.DistPrinEmploy_contract == "0")
                com.Parameters.Add("@DistPrinEmploy_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@DistPrinEmploy_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DistPrinEmploy_contract;

            if (oLabourActVO_ContraactLicense.MandalPrinEmploy_contract == null || oLabourActVO_ContraactLicense.MandalPrinEmploy_contract == "0")
                com.Parameters.Add("@MandalPrinEmploy_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@MandalPrinEmploy_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.MandalPrinEmploy_contract;

            if (oLabourActVO_ContraactLicense.VillagePrinEmploy_contract == null || oLabourActVO_ContraactLicense.VillagePrinEmploy_contract == "0")
                com.Parameters.Add("@VillagePrinEmploy_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@VillagePrinEmploy_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.VillagePrinEmploy_contract;

            if (oLabourActVO_ContraactLicense.NamePrinEmploy_contract == null || oLabourActVO_ContraactLicense.NamePrinEmploy_contract == "0")
                com.Parameters.Add("@NamePrinEmploy_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@NamePrinEmploy_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.NamePrinEmploy_contract;


            if (oLabourActVO_ContraactLicense.DoornoPrinEmploy_contract == null || oLabourActVO_ContraactLicense.DoornoPrinEmploy_contract == "0")
                com.Parameters.Add("@DoornoPrinEmploy_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@DoornoPrinEmploy_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DoornoPrinEmploy_contract;


            if (oLabourActVO_ContraactLicense.PrinEmploytxtOtherStateAddr_contract == null || oLabourActVO_ContraactLicense.PrinEmploytxtOtherStateAddr_contract == "0")
                com.Parameters.Add("@PrinEmploytxtOtherStateAddr_contract", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@PrinEmploytxtOtherStateAddr_contract", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.PrinEmploytxtOtherStateAddr_contract;

            if (oLabourActVO_ContraactLicense.Nameofagentormanager == null || oLabourActVO_ContraactLicense.Nameofagentormanager == "")
                com.Parameters.Add("@AgentorManagerName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@AgentorManagerName", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.Nameofagentormanager;


            if (oLabourActVO_ContraactLicense.DirDoorNoofagentormanager == null || oLabourActVO_ContraactLicense.DirDoorNoofagentormanager == "")
                com.Parameters.Add("@AgentorManagerDoorNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@AgentorManagerDoorNo", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DirDoorNoofagentormanager;

            if (oLabourActVO_ContraactLicense.DirLocalityofagentormanager == null || oLabourActVO_ContraactLicense.DirLocalityofagentormanager == "")
                com.Parameters.Add("@AgentorManagerLocality", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@AgentorManagerLocality", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DirLocalityofagentormanager;

            if (oLabourActVO_ContraactLicense.DirAddressofagentormanager == null || oLabourActVO_ContraactLicense.DirAddressofagentormanager == "")
                com.Parameters.Add("@AgentorManagerAddress", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@AgentorManagerAddress", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DirAddressofagentormanager;





            if (oLabourActVO_ContraactLicense.DirDistrictofagentormanager == null || oLabourActVO_ContraactLicense.DirDistrictofagentormanager == "0")
                com.Parameters.Add("@AgentorManagerDistrict", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@AgentorManagerDistrict", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DirDistrictofagentormanager;

            if (oLabourActVO_ContraactLicense.DirMandalofagentormanager == null || oLabourActVO_ContraactLicense.DirMandalofagentormanager == "0")
                com.Parameters.Add("@AgentorManagerMandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@AgentorManagerMandal", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DirMandalofagentormanager;

            if (oLabourActVO_ContraactLicense.DirVillageofagentormanager == null || oLabourActVO_ContraactLicense.DirVillageofagentormanager == "0")
                com.Parameters.Add("@AgentorManagerVillage", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@AgentorManagerVillage", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DirVillageofagentormanager;

            if (oLabourActVO_ContraactLicense.DirPincodeofagentormanager == null || oLabourActVO_ContraactLicense.DirPincodeofagentormanager == "")
                com.Parameters.Add("@AgentorManagerPincode", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@AgentorManagerPincode", SqlDbType.VarChar).Value = oLabourActVO_ContraactLicense.DirPincodeofagentormanager;

            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            //FamilyMembersAct1
            //EmployeeDetails
            // object returnvalue = com.ExecuteScalar();

            com.ExecuteNonQuery();


            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            valid = (Int32)com.Parameters["@Valid"].Value;

            SqlCommand cmdDelWorkPlace = new SqlCommand("[USP_DEL_Godown_Labour]", connection);
            cmdDelWorkPlace.CommandType = CommandType.StoredProcedure;
            cmdDelWorkPlace.Transaction = transaction;
            cmdDelWorkPlace.Connection = connection;
            cmdDelWorkPlace.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelWorkPlace.ExecuteNonQuery();

            foreach (LabourWorkPlace workplacevo in lstworkplacevo)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INS_Godown_Labour]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
                cmdEnj.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (workplacevo.WorkPlace != null)
                    cmdEnj.Parameters.AddWithValue("@Work_Place", workplacevo.WorkPlace);
                if (workplacevo.DoorNo != null)
                    cmdEnj.Parameters.AddWithValue("@Door_No", workplacevo.DoorNo);

                if (workplacevo.Locality != null && workplacevo.Locality != "")
                    cmdEnj.Parameters.AddWithValue("@Locality", workplacevo.Locality);
                cmdEnj.ExecuteNonQuery();
            }
            SqlCommand cmdDelFamilyMembers = new SqlCommand("[USP_DEL_Family_Member_Labour]", connection);
            cmdDelFamilyMembers.CommandType = CommandType.StoredProcedure;
            cmdDelFamilyMembers.Transaction = transaction;
            cmdDelFamilyMembers.Connection = connection;
            cmdDelFamilyMembers.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelFamilyMembers.ExecuteNonQuery();

            foreach (FamilyMembersAct1 familyvo in lstFamilyMembers)
            {
                SqlCommand cmdInsFamily = new SqlCommand("[USP_INS_Family_Member_Labour]", connection);
                cmdInsFamily.CommandType = CommandType.StoredProcedure;
                cmdInsFamily.Transaction = transaction;
                cmdInsFamily.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdInsFamily);
                cmdInsFamily.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (familyvo.FamilyNameAct1 != null)
                    cmdInsFamily.Parameters.AddWithValue("@Name", familyvo.FamilyNameAct1);
                if (familyvo.RelationshipAct1 != null)
                    cmdInsFamily.Parameters.AddWithValue("@RelationShip", familyvo.RelationshipAct1);

                if (familyvo.GenderAct1 != null && familyvo.GenderAct1 != "")
                    cmdInsFamily.Parameters.AddWithValue("@Gender", familyvo.GenderAct1);
                if (familyvo.AdultAct1 != null && familyvo.AdultAct1 != "")
                    cmdInsFamily.Parameters.AddWithValue("@Adult_Flag", familyvo.AdultAct1);
                cmdInsFamily.ExecuteNonQuery();
            }
            SqlCommand cmdDelEmp = new SqlCommand("[USP_DEL_Employees_Labour]", connection);
            cmdDelEmp.CommandType = CommandType.StoredProcedure;
            cmdDelEmp.Transaction = transaction;
            cmdDelEmp.Connection = connection;
            cmdDelEmp.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelEmp.ExecuteNonQuery();

            foreach (EmployeesDetails empvo in LstLabourEmployeesvo)
            {
                SqlCommand cmdInsEmp = new SqlCommand("[USP_INS_Employees_Labour]", connection);
                cmdInsEmp.CommandType = CommandType.StoredProcedure;
                cmdInsEmp.Transaction = transaction;
                cmdInsEmp.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdInsEmp);
                cmdInsEmp.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (empvo.Occupation != null)
                    cmdInsEmp.Parameters.AddWithValue("@Occupation", empvo.Occupation);
                if (empvo.EmployeeNameAct1 != null)
                    cmdInsEmp.Parameters.AddWithValue("@Name", empvo.EmployeeNameAct1);
                if (empvo.EmployeeGenderAct1 != null && empvo.EmployeeGenderAct1 != "")
                    cmdInsEmp.Parameters.AddWithValue("@Gender", empvo.EmployeeGenderAct1);

                cmdInsEmp.ExecuteNonQuery();
            }
            SqlCommand cmdDelContractor = new SqlCommand("[USP_DEL_Contractor_Workmen_Labour]", connection);
            cmdDelContractor.CommandType = CommandType.StoredProcedure;
            cmdDelContractor.Transaction = transaction;
            cmdDelContractor.Connection = connection;
            cmdDelContractor.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelContractor.ExecuteNonQuery();

            foreach (ContractorDetails Contractorvo in lstContractorVoAct3)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INS_Contractor_Workmen_Labour]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                cmdEnj.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (Contractorvo.ContractorName != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Name", Contractorvo.ContractorName);
                if (Contractorvo.ContractorAddress != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Address", Contractorvo.ContractorAddress);
                if (Contractorvo.ContractorMobileNo != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MobileNo", Contractorvo.ContractorMobileNo);
                if (Contractorvo.ContractorWorkNature != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Work_Nature", Contractorvo.ContractorWorkNature);
                if (Contractorvo.ContractorWorkMen != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MaxWorkers", Contractorvo.ContractorWorkMen);
                if (Contractorvo.ContractorCommence != null && Contractorvo.ContractorCommence != "")
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Commence_Dt", Contractorvo.ContractorCommence);
                if (Contractorvo.ContractorComplete != null && Contractorvo.ContractorComplete != "")
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Compltd_Dt", Contractorvo.ContractorComplete);
                if (Contractorvo.ManufacturingDepts != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_ManufacturingDepts", Contractorvo.ManufacturingDepts);
                cmdEnj.ExecuteNonQuery();
            }
            foreach (ContractorDetails Contractorvo in lstContractorVoAct4)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INS_Contractor_Workmen_Labour]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                cmdEnj.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (Contractorvo.ContractorName != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Name", Contractorvo.ContractorName);
                if (Contractorvo.ContractorAddress != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Address", Contractorvo.ContractorAddress);
                if (Contractorvo.ContractorMobileNo != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MobileNo", Contractorvo.ContractorMobileNo);
                if (Contractorvo.ContractorWorkNature != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Work_Nature", Contractorvo.ContractorWorkNature);
                if (Contractorvo.ContractorWorkMen != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MaxWorkers", Contractorvo.ContractorWorkMen);
                if (Contractorvo.ContractorCommence != null && Contractorvo.ContractorCommence != "")
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Commence_Dt", Contractorvo.ContractorCommence);
                if (Contractorvo.ContractorComplete != null && Contractorvo.ContractorComplete != "")
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Compltd_Dt", Contractorvo.ContractorComplete);
                if (Contractorvo.ManufacturingDepts != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_ManufacturingDepts", Contractorvo.ManufacturingDepts);
                cmdEnj.ExecuteNonQuery();
            }
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }


    public int InsertLabourDetailsAct2(LabourAct2VO2 labouract2vo)
    {

        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INS_Questionnaire_Labour_Act2]";

            com.Transaction = transaction;
            com.Connection = connection;
            if (labouract2vo.QuestionnaireId != null)
                com.Parameters.AddWithValue("@QuestionnaireId", labouract2vo.QuestionnaireId);
            if (labouract2vo.intCFEEnterpid != null)
                com.Parameters.AddWithValue("@intCFEEnterpid", labouract2vo.intCFEEnterpid);
            if (labouract2vo.Uid_No != null)
                com.Parameters.AddWithValue("@Uid_No", labouract2vo.Uid_No);

            if (labouract2vo.Reg_Id != null)
                com.Parameters.AddWithValue("@Reg_Id", labouract2vo.Reg_Id);
            if (labouract2vo.LabourActId != null)
                com.Parameters.AddWithValue("@Labour_ActId", labouract2vo.LabourActId);
            if (labouract2vo.ShopDoorNo != null)
                com.Parameters.AddWithValue("@Form1_Estd_DoorNo", labouract2vo.ShopDoorNo);
            if (labouract2vo.ShopLocality != null)
                com.Parameters.AddWithValue("@Form1_Estd_Locality", labouract2vo.ShopLocality);
            if (labouract2vo.ShopDistrict != null)
                com.Parameters.AddWithValue("@Form1_Estd_District", labouract2vo.ShopDistrict);
            if (labouract2vo.ShopMandal != null)
                com.Parameters.AddWithValue("@Form1_Estd_Mandal", labouract2vo.ShopMandal);
            if (labouract2vo.ShopVillage != null)
                com.Parameters.AddWithValue("@Form1_Estd_Village", labouract2vo.ShopVillage);
            if (labouract2vo.ShopPincode != null)
                com.Parameters.AddWithValue("@Form1_Estd_PinCode", labouract2vo.ShopPincode);
            if (labouract2vo.NameAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_Name", labouract2vo.NameAct2);
            if (labouract2vo.LocationAct2 != null)
                com.Parameters.AddWithValue("@Form1_Location", labouract2vo.LocationAct2);

            if (labouract2vo.FullNamePerAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_FullName", labouract2vo.FullNamePerAct2);
            if (labouract2vo.PerDoorNoAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_Per_DoorNo", labouract2vo.PerDoorNoAct2);
            if (labouract2vo.PerVillage != null)
                com.Parameters.AddWithValue("@Form1_2_Per_Village", labouract2vo.PerVillage);
            if (labouract2vo.PerMandal != null)
                com.Parameters.AddWithValue("@Form1_2_Per_Mandal", labouract2vo.PerMandal);
            if (labouract2vo.PerDistrict != null)
                com.Parameters.AddWithValue("@Form1_2_Per_District", labouract2vo.PerDistrict);
            if (labouract2vo.PerPincode != null)
                com.Parameters.AddWithValue("@Form1_2_Per_PinCode", labouract2vo.PerPincode);
            if (labouract2vo.ManagerFullName != null)
                com.Parameters.AddWithValue("@Form1_Manager_Name", labouract2vo.ManagerFullName);
            if (labouract2vo.ManagerDoorNo != null)
                com.Parameters.AddWithValue("@Form1_Manager_DoorNo", labouract2vo.ManagerDoorNo);
            if (labouract2vo.ManagerStreet != null)
                com.Parameters.AddWithValue("@Form1_Manager_Street", labouract2vo.ManagerStreet);
            if (labouract2vo.ManagerVillage != null)
                com.Parameters.AddWithValue("@Form1_Manager_Village", labouract2vo.ManagerVillage);

            if (labouract2vo.ManagerMandal != null)
                com.Parameters.AddWithValue("@Form1_Manager_Mandal", labouract2vo.ManagerMandal);
            if (labouract2vo.ManagerDistrict != null)
                com.Parameters.AddWithValue("@Form1_Manager_District", labouract2vo.ManagerDistrict);
            if (labouract2vo.ManagerEmail != null)
                com.Parameters.AddWithValue("@Form1_Manager_EMail", labouract2vo.ManagerEmail);
            if (labouract2vo.ManagerMobile != null)
                com.Parameters.AddWithValue("@Form1_Manager_MobileNo", labouract2vo.ManagerMobile);
            if (labouract2vo.MaxWorkersAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_MaxWorkers", labouract2vo.MaxWorkersAct2);
            if (labouract2vo.CommensementDateAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_Est_Commence_Dt", labouract2vo.CommensementDateAct2);
            if (labouract2vo.CompletionDateAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_Est_Compltd_Dt", labouract2vo.CompletionDateAct2);
            if (labouract2vo.CreatedBy != null)
                com.Parameters.AddWithValue("@Created_by", labouract2vo.CreatedBy);

            if (labouract2vo.NatureofWork != null)
                com.Parameters.AddWithValue("@Form1_Nature_of_Business", labouract2vo.NatureofWork);


            com.Parameters.Add("@Created_User", SqlDbType.VarChar).Value = labouract2vo.CreatedUser;
            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;

            com.ExecuteNonQuery();


            valid = (Int32)com.Parameters["@Valid"].Value;

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    public DataSet getLabourRegisteredActs(string intEnterprenuerid, int QuestionnaireId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_LABOUR_RegisteredAct]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();
            if (QuestionnaireId != null)
                da.SelectCommand.Parameters.Add("@QuestionnairId", SqlDbType.Int).Value = QuestionnaireId;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public int InsertLabourDetailsAct3(LabourAct2VO2 labouract2vo)
    {

        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INS_Questionnaire_Labour_Act3]";

            com.Transaction = transaction;
            com.Connection = connection;
            if (labouract2vo.QuestionnaireId != null)
                com.Parameters.AddWithValue("@QuestionnaireId", labouract2vo.QuestionnaireId);
            if (labouract2vo.intCFEEnterpid != null)
                com.Parameters.AddWithValue("@intCFEEnterpid", labouract2vo.intCFEEnterpid);
            if (labouract2vo.Uid_No != null)
                com.Parameters.AddWithValue("@Uid_No", labouract2vo.Uid_No);

            if (labouract2vo.Reg_Id != null)
                com.Parameters.AddWithValue("@Reg_Id", labouract2vo.Reg_Id);
            if (labouract2vo.LabourActId != null)
                com.Parameters.AddWithValue("@Labour_ActId", labouract2vo.LabourActId);

            if (labouract2vo.CreatedBy != null)
                com.Parameters.AddWithValue("@Created_by", labouract2vo.CreatedBy);

            if (labouract2vo.RegActId != null)
                com.Parameters.AddWithValue("@Form1_3_Registered_Act", labouract2vo.RegActId);
            if (labouract2vo.LicenseRegNo != null)
                com.Parameters.AddWithValue("@Form1_3_Reg_Lic", labouract2vo.LicenseRegNo);

            com.Parameters.Add("@Created_User", SqlDbType.VarChar).Value = labouract2vo.CreatedUser;
            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = (Int32)com.Parameters["@Valid"].Value;

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public int InsertLabourDetailsAct4(LabourActVO labouractvo, List<ContractorDetails> lstContractorvo)
    {

        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INS_Questionnaire_Labour_Act4]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (labouractvo.QuestionnaireId != null)
                com.Parameters.AddWithValue("@QuestionnaireId", labouractvo.QuestionnaireId);
            if (labouractvo.intCFEEnterpid != null)
                com.Parameters.AddWithValue("@intCFEEnterpid", labouractvo.intCFEEnterpid);
            if (labouractvo.Uid_No != null)
                com.Parameters.AddWithValue("@Uid_No", labouractvo.Uid_No);

            if (labouractvo.Reg_Id != null)
                com.Parameters.AddWithValue("@Reg_Id", labouractvo.Reg_Id);
            if (labouractvo.LabourActId != null)
                com.Parameters.AddWithValue("@Labour_ActId", labouractvo.LabourActId);

            if (labouractvo.CreatedBy != null)
                com.Parameters.AddWithValue("@Created_by", labouractvo.CreatedBy);

            if (labouractvo.NameofShopAct1 != null)
                com.Parameters.AddWithValue("@Form1_Estb_Name", labouractvo.NameofShopAct1);
            if (labouractvo.EstdLocation != null)
                com.Parameters.AddWithValue("@Form1_Location", labouractvo.EstdLocation);
            if (labouractvo.CategoryofEstablishment != null)
                com.Parameters.AddWithValue("@Form1_1_Estb_Category", labouractvo.CategoryofEstablishment);
            if (labouractvo.EstdDoorNo != null)
                com.Parameters.AddWithValue("@Form1_Estd_DoorNo", labouractvo.EstdDoorNo);
            if (labouractvo.EstdDistrict != null)
                com.Parameters.AddWithValue("@Form1_Estd_District", labouractvo.EstdDistrict);
            if (labouractvo.EstdMandal != null)
                com.Parameters.AddWithValue("@Form1_Estd_Mandal", labouractvo.EstdMandal);
            if (labouractvo.EstdVillage != null)
                com.Parameters.AddWithValue("@Form1_Estd_Village", labouractvo.EstdVillage);
            if (labouractvo.FullNamePrincipalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Employer_Name", labouractvo.FullNamePrincipalAct4);
            if (labouractvo.FatherNamePrincipalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Empolyer_FatherName", labouractvo.FatherNamePrincipalAct4);
            if (labouractvo.MobileNoPrincipalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Employer_MobileNo", labouractvo.MobileNoPrincipalAct4);
            if (labouractvo.EmailIdPrincipalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Employer_EmailID", labouractvo.EmailIdPrincipalAct4);
            if (labouractvo.DoorNoPrincipalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Employer_DoorNo", labouractvo.DoorNoPrincipalAct4);
            if (labouractvo.DistrictPrincipalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Employer_District", labouractvo.DistrictPrincipalAct4);
            if (labouractvo.MandalPrincipalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Employer_Mandal", labouractvo.MandalPrincipalAct4);
            if (labouractvo.VillagePrincipalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Employer_Village", labouractvo.VillagePrincipalAct4);
            if (labouractvo.DirNameAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_FullName", labouractvo.DirNameAct4);
            if (labouractvo.DirDoorNoAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_DoorNo", labouractvo.DirDoorNoAct4);
            if (labouractvo.DirVillageAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_Village", labouractvo.DirVillageAct4);
            if (labouractvo.DirMandalAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_Mandal", labouractvo.DirMandalAct4);
            if (labouractvo.DirDistrictAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_District", labouractvo.DirDistrictAct4);
            if (labouractvo.ManagerFullNameAct4 != null)
                com.Parameters.AddWithValue("@Form1_Manager_Name", labouractvo.ManagerFullNameAct4);
            if (labouractvo.ManagerDoorNoAct4 != null)
                com.Parameters.AddWithValue("@Form1_Manager_DoorNo", labouractvo.ManagerDoorNoAct4);
            if (labouractvo.ManagerVillageAct4 != null)
                com.Parameters.AddWithValue("@Form1_Manager_Village", labouractvo.ManagerVillageAct4);
            if (labouractvo.ManagerMandalAct4 != null)
                com.Parameters.AddWithValue("@Form1_Manager_Mandal", labouractvo.ManagerMandalAct4);
            if (labouractvo.ManagerDistrictAct4 != null)
                com.Parameters.AddWithValue("@Form1_Manager_District", labouractvo.ManagerDistrictAct4);
            if (labouractvo.NatureofBusinessAct4 != null)
                com.Parameters.AddWithValue("@Form1_Nature_of_Business", labouractvo.NatureofBusinessAct4);
            if (labouractvo.ContractEmployeesAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Total_Con_Employees", labouractvo.ContractEmployeesAct4);

            com.Parameters.Add("@Created_User", SqlDbType.VarChar).Value = labouractvo.CreatedUser;
            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = (Int32)com.Parameters["@Valid"].Value;

            SqlCommand cmdDelContractor = new SqlCommand("[USP_DEL_Contractor_Workmen_Labour]", connection);
            cmdDelContractor.CommandType = CommandType.StoredProcedure;
            cmdDelContractor.Transaction = transaction;
            cmdDelContractor.Connection = connection;
            cmdDelContractor.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelContractor.ExecuteNonQuery();

            foreach (ContractorDetails Contractorvo in lstContractorvo)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INS_Contractor_Workmen_Labour]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                cmdEnj.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (Contractorvo.ContractorName != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Name", Contractorvo.ContractorName);
                if (Contractorvo.ContractorAddress != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Address", Contractorvo.ContractorAddress);
                if (Contractorvo.ContractorMobileNo != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MobileNo", Contractorvo.ContractorMobileNo);
                if (Contractorvo.ContractorWorkNature != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Work_Nature", Contractorvo.ContractorWorkNature);
                if (Contractorvo.ContractorWorkMen != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MaxWorkers", Contractorvo.ContractorWorkMen);
                if (Contractorvo.ContractorCommence != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Commence_Dt", Contractorvo.ContractorCommence);
                if (Contractorvo.ContractorComplete != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Compltd_Dt", Contractorvo.ContractorComplete);
                cmdEnj.ExecuteNonQuery();
            }

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    public string sendMAUD_HMDACLU(string UID)   //nikhil done..
    {
        con.OpenConnection();
        string uidnik = UID.ToString();
        SqlCommand oSqlCommand = new SqlCommand("MAUDHMDA", con.GetConnection);
        oSqlCommand.CommandType = CommandType.StoredProcedure;
        oSqlCommand.Parameters.AddWithValue("@uidNumber", UID).ToString();
        oSqlCommand.ExecuteNonQuery();
        return "success";

        //SqlDataAdapter da = new SqlDataAdapter("MAUDHMDA", con.GetConnection);
        //da.SelectCommand.CommandType = CommandType.StoredProcedure;
        //return "success";
    }
    public int InsertLegalDetails(LegalClass legalvo, List<LegalBrand> lstBrandvo, List<LegalCommodity> LstlegalCommodity, List<LegalDirectors> lstDirectors)
    {
        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INS_Questionnaire_Legal]";

            com.Transaction = transaction;
            com.Connection = connection;
            if (legalvo.intCFEEnterpid != null)
                com.Parameters.AddWithValue("@intCFEEnterpid", legalvo.intCFEEnterpid);

            if (legalvo.QuestionnaireId != null)
                com.Parameters.AddWithValue("@QuestionnaireId", legalvo.QuestionnaireId);

            if (legalvo.Uid_No != null)
                com.Parameters.AddWithValue("@Uid_No", legalvo.Uid_No);

            if (legalvo.Reg_Id != null)
                com.Parameters.AddWithValue("@Reg_Id", legalvo.Reg_Id);

            if (legalvo.Registration_cd != null)
                com.Parameters.AddWithValue("@Registration_cd", legalvo.Registration_cd);

            if (legalvo.Firm_DoorNo != null)
                com.Parameters.AddWithValue("@Firm_DoorNo", legalvo.Firm_DoorNo);

            if (legalvo.Firm_DistrictCd != null)
                com.Parameters.AddWithValue("@Firm_DistrictCd", legalvo.Firm_DistrictCd);

            if (legalvo.Firm_MandalCd != null)
                com.Parameters.AddWithValue("@Firm_MandalCd", legalvo.Firm_MandalCd);

            if (legalvo.Firm_VillageCd != null)
                com.Parameters.AddWithValue("@Firm_VillageCd", legalvo.Firm_VillageCd);

            if (legalvo.Firm_Pincode != null)
                com.Parameters.AddWithValue("@Firm_Pincode", legalvo.Firm_Pincode);

            if (legalvo.Firm_Landline != null)
                com.Parameters.AddWithValue("@Firm_Landline", legalvo.Firm_Landline);

            if (legalvo.Firm_EmailId != null)
                com.Parameters.AddWithValue("@Firm_EmailId", legalvo.Firm_EmailId);

            if (legalvo.DateofCommencement != null)
                com.Parameters.AddWithValue("@DateofCommencement", legalvo.DateofCommencement);

            if (legalvo.Premises_Name != null)
                com.Parameters.AddWithValue("@Premises_Name", legalvo.Premises_Name);

            if (legalvo.Premises_DoorNo != null)
                com.Parameters.AddWithValue("@Premises_DoorNo", legalvo.Premises_DoorNo);

            if (legalvo.Premises_DistrictCd != null)
                com.Parameters.AddWithValue("@Premises_DistrictCd", legalvo.Premises_DistrictCd);

            if (legalvo.Premises_MandalCd != null)
                com.Parameters.AddWithValue("@Premises_MandalCd", legalvo.Premises_MandalCd);

            if (legalvo.Premises_VillageCd != null)
                com.Parameters.AddWithValue("@Premises_VillageCd", legalvo.Premises_VillageCd);

            if (legalvo.Premises_Pincode != null)
                com.Parameters.AddWithValue("@Premises_Pincode", legalvo.Premises_Pincode);

            if (legalvo.Premises_LandLineNo != null)
                com.Parameters.AddWithValue("@Premises_LandLineNo", legalvo.Premises_LandLineNo);

            if (legalvo.Premises_ShortAddress != null)
                com.Parameters.AddWithValue("@Premises_ShortAddress", legalvo.Premises_ShortAddress);

            if (legalvo.Premises_TradeLicense != null)
                com.Parameters.AddWithValue("@Premises_TradeLicense", legalvo.Premises_TradeLicense);

            if (legalvo.Tin_Number != null)
                com.Parameters.AddWithValue("@Tin_Number", legalvo.Tin_Number);

            if (legalvo.Label_details != null)
                com.Parameters.AddWithValue("@Label_details", legalvo.Label_details);

            if (legalvo.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", legalvo.Created_by);

            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;

            com.ExecuteNonQuery();


            valid = (Int32)com.Parameters["@Valid"].Value;

            SqlCommand cmdDelWorkPlace = new SqlCommand("[USP_DEL_Brands_Legal]", connection);
            cmdDelWorkPlace.CommandType = CommandType.StoredProcedure;
            cmdDelWorkPlace.Transaction = transaction;
            cmdDelWorkPlace.Connection = connection;
            cmdDelWorkPlace.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = legalvo.QuestionnaireId;
            cmdDelWorkPlace.ExecuteNonQuery();

            foreach (LegalBrand brandvo in lstBrandvo)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INS_BrandNames]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
                cmdEnj.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = legalvo.QuestionnaireId;
                if (legalvo.intCFEEnterpid != null)
                    cmdEnj.Parameters.AddWithValue("@intCFEEnterpid", legalvo.intCFEEnterpid);
                if (brandvo.BrandName != null)
                    cmdEnj.Parameters.AddWithValue("@BrandName", brandvo.BrandName);
                if (legalvo.Created_by != null)
                    cmdEnj.Parameters.AddWithValue("@Created_by", legalvo.Created_by);
                cmdEnj.ExecuteNonQuery();
            }
            SqlCommand cmdDelFamilyMembers = new SqlCommand("USP_DEL_Directors_Legal", connection);
            cmdDelFamilyMembers.CommandType = CommandType.StoredProcedure;
            cmdDelFamilyMembers.Transaction = transaction;
            cmdDelFamilyMembers.Connection = connection;
            cmdDelFamilyMembers.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = legalvo.QuestionnaireId;
            cmdDelFamilyMembers.ExecuteNonQuery();

            foreach (LegalDirectors directorvo in lstDirectors)
            {
                SqlCommand comDirect = new SqlCommand("[USP_INS_Directors_Legal]", connection);
                comDirect.CommandType = CommandType.StoredProcedure;
                comDirect.Transaction = transaction;
                comDirect.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(comDirect);
                comDirect.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = legalvo.QuestionnaireId;
                if (legalvo.intCFEEnterpid != null)
                    comDirect.Parameters.AddWithValue("@intCFEEnterpid", legalvo.intCFEEnterpid);
                if (directorvo.Director_AadharNo != null)
                    comDirect.Parameters.AddWithValue("Director_AadharNo", directorvo.Director_AadharNo);

                if (directorvo.Director_Districtcd != null)
                    comDirect.Parameters.AddWithValue("Director_Districtcd", directorvo.Director_Districtcd);

                if (directorvo.Director_DoorNo != null)
                    comDirect.Parameters.AddWithValue("Director_DoorNo", directorvo.Director_DoorNo);

                if (directorvo.Director_MandalCd != null)
                    comDirect.Parameters.AddWithValue("Director_MandalCd", directorvo.Director_MandalCd);

                if (directorvo.Director_Name != null)
                    comDirect.Parameters.AddWithValue("Director_Name", directorvo.Director_Name);

                if (directorvo.Director_Pincode != null)
                    comDirect.Parameters.AddWithValue("Director_Pincode", directorvo.Director_Pincode);

                if (directorvo.Director_VillageCd != null)
                    comDirect.Parameters.AddWithValue("Director_VillageCd", directorvo.Director_VillageCd);

                comDirect.ExecuteNonQuery();
            }
            SqlCommand cmdDelCommodity = new SqlCommand("USP_DEL_Commodity_Legal", connection);
            cmdDelCommodity.CommandType = CommandType.StoredProcedure;
            cmdDelCommodity.Transaction = transaction;
            cmdDelCommodity.Connection = connection;
            cmdDelCommodity.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = legalvo.QuestionnaireId;
            cmdDelCommodity.ExecuteNonQuery();

            foreach (LegalCommodity commodityvo in LstlegalCommodity)
            {
                SqlCommand cmdCommodity = new SqlCommand("[USP_INS_Commodity_Legal]", connection);
                cmdCommodity.CommandType = CommandType.StoredProcedure;
                cmdCommodity.Transaction = transaction;
                cmdCommodity.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdCommodity);
                cmdCommodity.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = legalvo.QuestionnaireId;
                if (legalvo.intCFEEnterpid != null)
                    cmdCommodity.Parameters.AddWithValue("@intCFEEnterpid", legalvo.intCFEEnterpid);
                if (commodityvo.Commodity_Name != null)
                    cmdCommodity.Parameters.AddWithValue("Commodity_Name", commodityvo.Commodity_Name);
                if (commodityvo.Quantity != null)
                    cmdCommodity.Parameters.AddWithValue("Quantity", commodityvo.Quantity);

                if (legalvo.Created_by != null)
                    cmdCommodity.Parameters.AddWithValue("@Created_by", legalvo.Created_by);
                cmdCommodity.ExecuteNonQuery();
            }

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public DataSet GetLegalRegistrationMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LegalRegistrations", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getLegalDetails(string intEnterprenuerid, int QuestionnaireId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[getLegalDetails]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intEnterprenuerid.Trim() == "" || intEnterprenuerid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intEnterprenuerid", SqlDbType.VarChar).Value = intEnterprenuerid.ToString();
            if (QuestionnaireId != null)
                da.SelectCommand.Parameters.Add("@QuestionnairId", SqlDbType.Int).Value = QuestionnaireId;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetAmmendments(int DEPTID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_AMMENDMENTS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (DEPTID != null && DEPTID != 0)
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.Int).Value = DEPTID;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public void InsertDeptAmmendments(AmmendmentVo ammendment, List<Deptcomments> lstformvo)
    {

        try
        {
            SqlConnection connection = new SqlConnection(str);
            SqlTransaction transaction = null;
            connection.Open();
            transaction = connection.BeginTransaction();
            SqlCommand cmdEnj = new SqlCommand("[USP_INS_AMMENDMENTS]", connection);
            cmdEnj.CommandType = CommandType.StoredProcedure;
            cmdEnj.Transaction = transaction;
            cmdEnj.Connection = connection;

            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
            cmdEnj.Parameters.AddWithValue("@Dept_Id", SqlDbType.Int).Value = ammendment.Dept_ID;
            // if (legalvo.intCFEEnterpid != null)
            cmdEnj.Parameters.AddWithValue("@Dept_Name", ammendment.Dept_Name);
            //if (brandvo.BrandName != null)
            cmdEnj.Parameters.AddWithValue("@Ammendment", ammendment.Ammendment);
            //if (legalvo.Created_by != null)
            cmdEnj.Parameters.AddWithValue("@Ammendment_Date", ammendment.Ammendment_Date);
            cmdEnj.Parameters.AddWithValue("@Ammendment_Path", ammendment.Ammendment_Path);
            cmdEnj.Parameters.AddWithValue("@Created_By", ammendment.Created_By);
            cmdEnj.Parameters.AddWithValue("@Amm_FileName", ammendment.Amm_FileName);
            cmdEnj.Parameters.AddWithValue("@Amendment_Type", ammendment.Amm_Type);
            cmdEnj.Parameters.AddWithValue("@Ammendment_Id", ammendment.Ammendment_Id);

            cmdEnj.ExecuteNonQuery();

            transaction.Commit();
            connection.Close();

            con.OpenConnection();
            SqlCommand cmd = null;
            foreach (Deptcomments formvoobj in lstformvo)
            {
                cmd = new SqlCommand("USP_UPD_DEPTComments", con.GetConnection);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.AddWithValue("@DeptComments", Convert.ToString(formvoobj.DeptComments));
                cmd.Parameters.AddWithValue("@Id", Convert.ToString(formvoobj.id));
                cmd.Parameters.AddWithValue("@Created_By", Convert.ToString(formvoobj.Created_By));
                cmd.ExecuteNonQuery();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            // cmdEnj.Dispose();
            con.CloseConnection();
        }
    }
    public int InsertAmmendmentsComments(AmmendmentVo ammendment)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("[USP_INS_USERCOMMENTS_AMENDMENTS]", con.GetConnection);

        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@UserName", Convert.ToString(ammendment.UserName));
            cmd.Parameters.AddWithValue("@District", Convert.ToString(ammendment.District));
            cmd.Parameters.AddWithValue("@MobileNo", Convert.ToString(ammendment.MobileNo));
            cmd.Parameters.AddWithValue("@MailId", Convert.ToString(ammendment.MailId));
            cmd.Parameters.AddWithValue("@Comments", Convert.ToString(ammendment.Comments));

            cmd.Parameters.AddWithValue("@Dept_Id", Convert.ToInt32(ammendment.Dept_ID));
            cmd.Parameters.AddWithValue("@Ammendment_Id", Convert.ToInt32(ammendment.Ammendment_Id));
            cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(ammendment.Created_By));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }
    public DataSet GetDepartmentSofAmmendments()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_DEPARTMENTS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetUserCommentsofAmmendments(int DEPTID, string Amendamentid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_Comments_Ammendment]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (DEPTID != null && DEPTID != 0)
                da.SelectCommand.Parameters.Add("@DEPTID", SqlDbType.Int).Value = DEPTID;
            if (Amendamentid != null && Amendamentid != "0")
                da.SelectCommand.Parameters.Add("@Amendamentid", SqlDbType.VarChar).Value = Amendamentid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetAmmendaments(string DEPTID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET__AmmendmentS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (DEPTID != null && DEPTID != "0")
                da.SelectCommand.Parameters.Add("@DEPTID", SqlDbType.VarChar).Value = DEPTID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //public int InsertClusterDetails(ClusterVo cluster, List<ClusterUnitVo> lstclusterunitvo, List<ClusterExportVo> lstclusterexportvo, List<ClusterIndustryVo> lstclusterindustryvo)
    //{
    //    int valid = 0;
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_INS_CLUSTERDETAILS]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        com.Parameters.AddWithValue("@District_Cd", Convert.ToString(cluster.District_Cd));
    //        com.Parameters.AddWithValue("@Mandal_Cd", Convert.ToString(cluster.Mandal_Cd));
    //        com.Parameters.AddWithValue("@Village_Cd", Convert.ToString(cluster.Village_Cd));
    //        com.Parameters.AddWithValue("@LineofActivity", Convert.ToString(cluster.LineofActivity));
    //        com.Parameters.AddWithValue("@Infra_Power", Convert.ToString(cluster.Infra_Power));
    //        com.Parameters.AddWithValue("@Infra_SubStation", Convert.ToString(cluster.Infra_SubStation));
    //        com.Parameters.AddWithValue("@Infra_Sub_Capacity", Convert.ToString(cluster.Infra_Sub_Capacity));
    //        com.Parameters.AddWithValue("@Infra_Common_Facility", Convert.ToString(cluster.Infra_Common_Facility));
    //        com.Parameters.AddWithValue("@Infra_Training_Facility", Convert.ToString(cluster.Infra_Training_Facility));
    //        com.Parameters.AddWithValue("@Raw_Material_Source", Convert.ToString(cluster.Raw_Material_Source));
    //        com.Parameters.AddWithValue("@Major_Markets", Convert.ToString(cluster.Major_Markets));
    //        com.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //        com.Parameters.Add("@id", SqlDbType.Int, 500);
    //        com.Parameters["@id"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();
    //        valid = (Int32)com.Parameters["@id"].Value;

    //        cluster.Cluster_Id = valid;

    //        foreach (ClusterUnitVo clusterunitvo in lstclusterunitvo)
    //        {
    //            SqlCommand cmd1 = new SqlCommand("[USP_INS_CLUSTERUNIT]", connection);
    //            cmd1.CommandType = CommandType.StoredProcedure;
    //            cmd1.Transaction = transaction;
    //            cmd1.Connection = connection;

    //            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
    //            cmd1.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
    //            if (clusterunitvo.Unit_Type != null)
    //                cmd1.Parameters.AddWithValue("@Unit_Type", clusterunitvo.Unit_Type);
    //            if (clusterunitvo.No_Units != null)
    //                cmd1.Parameters.AddWithValue("@No_Units", clusterunitvo.No_Units);
    //            if (clusterunitvo.Investment != null && clusterunitvo.Investment != "")
    //                cmd1.Parameters.AddWithValue("@Investment", clusterunitvo.Investment);
    //            if (clusterunitvo.Employment != null && clusterunitvo.Employment != "")
    //                cmd1.Parameters.AddWithValue("@Employment", clusterunitvo.Employment);
    //            if (clusterunitvo.TurnOver != null && clusterunitvo.TurnOver != "")
    //                cmd1.Parameters.AddWithValue("@TurnOver", clusterunitvo.TurnOver);
    //            cmd1.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //            cmd1.ExecuteNonQuery();
    //        }

    //        foreach (ClusterExportVo clusterexportvo in lstclusterexportvo)
    //        {
    //            SqlCommand cmd2 = new SqlCommand("[USP_INS_CLUSTEREXPORT]", connection);
    //            cmd2.CommandType = CommandType.StoredProcedure;
    //            cmd2.Transaction = transaction;
    //            cmd2.Connection = connection;

    //            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
    //            cmd2.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
    //            if (clusterexportvo.Nameof_Unit != null)
    //                cmd2.Parameters.AddWithValue("@Nameof_Unit", clusterexportvo.Nameof_Unit);
    //            if (clusterexportvo.Product_Exported != null)
    //                cmd2.Parameters.AddWithValue("@Product_Exported", clusterexportvo.Product_Exported);
    //            if (clusterexportvo.Country_Exported != null && clusterexportvo.Country_Exported != "")
    //                cmd2.Parameters.AddWithValue("@Country_Exported", clusterexportvo.Country_Exported);
    //            if (clusterexportvo.QuantumofExports != null && clusterexportvo.QuantumofExports != "")
    //                cmd2.Parameters.AddWithValue("@QuantumofExports", clusterexportvo.QuantumofExports);
    //            if (clusterexportvo.ValueofExports != null && clusterexportvo.ValueofExports != "")
    //                cmd2.Parameters.AddWithValue("@ValueofExports", clusterexportvo.ValueofExports);
    //            cmd2.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //            cmd2.ExecuteNonQuery();
    //        }

    //        foreach (ClusterIndustryVo clusterindustryvo in lstclusterindustryvo)
    //        {
    //            SqlCommand cmd3 = new SqlCommand("[USP_INS_CLUSTERINDUSTRIES]", connection);
    //            cmd3.CommandType = CommandType.StoredProcedure;
    //            cmd3.Transaction = transaction;
    //            cmd3.Connection = connection;

    //            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
    //            cmd3.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
    //            if (clusterindustryvo.NameofIndustry != null)
    //                cmd3.Parameters.AddWithValue("@NameofIndustry", clusterindustryvo.NameofIndustry);
    //            if (clusterindustryvo.LineofActivity != null)
    //                cmd3.Parameters.AddWithValue("@LineofActivity", clusterindustryvo.LineofActivity);
    //            if (clusterindustryvo.Investment != null && clusterindustryvo.Investment != "")
    //                cmd3.Parameters.AddWithValue("@Investment", clusterindustryvo.Investment);
    //            if (clusterindustryvo.Employment != null && clusterindustryvo.Employment != "")
    //                cmd3.Parameters.AddWithValue("@Employment", clusterindustryvo.Employment);
    //            cmd3.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //            cmd3.ExecuteNonQuery();
    //        }
    //        transaction.Commit();

    //        con.CloseConnection();
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {

    //        con.CloseConnection();
    //    }
    //    return valid;
    //}

    //public int InsertClusterDetails(ClusterVo cluster, List<ClusterUnitVo> lstclusterunitvo, List<ClusterExportVo> lstclusterexportvo, List<ClusterIndustryVo> lstclusterindustryvo, List<ClusterCommonFacilitiesVO> lstCommonFacilities)
    //{
    //    int valid = 0;
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_INS_CLUSTERDETAILS]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        com.Parameters.AddWithValue("@District_Cd", Convert.ToString(cluster.District_Cd));
    //        com.Parameters.AddWithValue("@Mandal_Cd", Convert.ToString(cluster.Mandal_Cd));
    //        com.Parameters.AddWithValue("@Village_Cd", Convert.ToString(cluster.Village_Cd));
    //        com.Parameters.AddWithValue("@LineofActivity", Convert.ToString(cluster.LineofActivity));
    //        com.Parameters.AddWithValue("@Infra_Power", Convert.ToString(cluster.Infra_Power));
    //        com.Parameters.AddWithValue("@Infra_SubStation", Convert.ToString(cluster.Infra_SubStation));
    //        com.Parameters.AddWithValue("@Infra_Sub_Capacity", Convert.ToString(cluster.Infra_Sub_Capacity));
    //        com.Parameters.AddWithValue("@Infra_Common_Facility", Convert.ToString(cluster.Infra_Common_Facility));
    //        com.Parameters.AddWithValue("@Infra_Training_Facility", Convert.ToString(cluster.Infra_Training_Facility));
    //        com.Parameters.AddWithValue("@Raw_Material_Source", Convert.ToString(cluster.Raw_Material_Source));
    //        com.Parameters.AddWithValue("@Major_Markets", Convert.ToString(cluster.Major_Markets));
    //        com.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //        com.Parameters.Add("@id", SqlDbType.Int, 500);
    //        com.Parameters["@id"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();
    //        valid = (Int32)com.Parameters["@id"].Value;

    //        cluster.Cluster_Id = valid;

    //        foreach (ClusterUnitVo clusterunitvo in lstclusterunitvo)
    //        {
    //            SqlCommand cmd1 = new SqlCommand("[USP_INS_CLUSTERUNIT]", connection);
    //            cmd1.CommandType = CommandType.StoredProcedure;
    //            cmd1.Transaction = transaction;
    //            cmd1.Connection = connection;

    //            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
    //            cmd1.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
    //            if (clusterunitvo.Unit_Type != null)
    //                cmd1.Parameters.AddWithValue("@Unit_Type", clusterunitvo.Unit_Type);
    //            if (clusterunitvo.No_Units != null)
    //                cmd1.Parameters.AddWithValue("@No_Units", clusterunitvo.No_Units);
    //            if (clusterunitvo.Investment != null && clusterunitvo.Investment != "")
    //                cmd1.Parameters.AddWithValue("@Investment", clusterunitvo.Investment);
    //            if (clusterunitvo.Employment != null && clusterunitvo.Employment != "")
    //                cmd1.Parameters.AddWithValue("@Employment", clusterunitvo.Employment);
    //            if (clusterunitvo.TurnOver != null && clusterunitvo.TurnOver != "")
    //                cmd1.Parameters.AddWithValue("@TurnOver", clusterunitvo.TurnOver);
    //            cmd1.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //            cmd1.ExecuteNonQuery();
    //        }

    //        foreach (ClusterExportVo clusterexportvo in lstclusterexportvo)
    //        {
    //            SqlCommand cmd2 = new SqlCommand("[USP_INS_CLUSTEREXPORT]", connection);
    //            cmd2.CommandType = CommandType.StoredProcedure;
    //            cmd2.Transaction = transaction;
    //            cmd2.Connection = connection;

    //            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
    //            cmd2.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
    //            if (clusterexportvo.Nameof_Unit != null)
    //                cmd2.Parameters.AddWithValue("@Nameof_Unit", clusterexportvo.Nameof_Unit);
    //            if (clusterexportvo.Product_Exported != null)
    //                cmd2.Parameters.AddWithValue("@Product_Exported", clusterexportvo.Product_Exported);
    //            if (clusterexportvo.Country_Exported != null && clusterexportvo.Country_Exported != "")
    //                cmd2.Parameters.AddWithValue("@Country_Exported", clusterexportvo.Country_Exported);
    //            if (clusterexportvo.QuantumofExports != null && clusterexportvo.QuantumofExports != "")
    //                cmd2.Parameters.AddWithValue("@QuantumofExports", clusterexportvo.QuantumofExports);
    //            if (clusterexportvo.ValueofExports != null && clusterexportvo.ValueofExports != "")
    //                cmd2.Parameters.AddWithValue("@ValueofExports", clusterexportvo.ValueofExports);
    //            cmd2.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //            cmd2.Parameters.AddWithValue("@QuantityIn", Convert.ToString(clusterexportvo.QuantityIn));

    //            cmd2.ExecuteNonQuery();
    //        }

    //        foreach (ClusterIndustryVo clusterindustryvo in lstclusterindustryvo)
    //        {
    //            SqlCommand cmd3 = new SqlCommand("[USP_INS_CLUSTERINDUSTRIES]", connection);
    //            cmd3.CommandType = CommandType.StoredProcedure;
    //            cmd3.Transaction = transaction;
    //            cmd3.Connection = connection;

    //            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
    //            cmd3.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
    //            if (clusterindustryvo.NameofIndustry != null)
    //                cmd3.Parameters.AddWithValue("@NameofIndustry", clusterindustryvo.NameofIndustry);
    //            if (clusterindustryvo.LineofActivity != null)
    //                cmd3.Parameters.AddWithValue("@LineofActivity", clusterindustryvo.LineofActivity);
    //            if (clusterindustryvo.Investment != null && clusterindustryvo.Investment != "")
    //                cmd3.Parameters.AddWithValue("@Investment", clusterindustryvo.Investment);
    //            if (clusterindustryvo.Employment != null && clusterindustryvo.Employment != "")
    //                cmd3.Parameters.AddWithValue("@Employment", clusterindustryvo.Employment);
    //            cmd3.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //            cmd3.ExecuteNonQuery();
    //        }
    //        foreach (ClusterCommonFacilitiesVO commonfacvo in lstCommonFacilities)
    //        {
    //            SqlCommand cmd4 = new SqlCommand("USP_INS_Cluster_CommonFacilityCenters", connection);
    //            cmd4.CommandType = CommandType.StoredProcedure;
    //            cmd4.Transaction = transaction;
    //            cmd4.Connection = connection;

    //            cmd4.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
    //            if (commonfacvo.TypeCd != null)
    //                cmd4.Parameters.AddWithValue("@TypeCd", commonfacvo.TypeCd);
    //            if (commonfacvo.Details != null && commonfacvo.Details != "")
    //                cmd4.Parameters.AddWithValue("@Details", commonfacvo.Details);
    //            cmd4.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
    //            cmd4.ExecuteNonQuery();
    //        }
    //        transaction.Commit();

    //        con.CloseConnection();
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {

    //        con.CloseConnection();
    //    }
    //    return cluster.Cluster_Id;
    //}


    //public DataSet GetIncentiveDeptDetails(string incentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_DEPT_INCENTIVE_DATA", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
    //        {
    //            // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
    //            da.SelectCommand.Parameters.Add("@incentiveID", SqlDbType.VarChar).Value = incentiveID;
    //        }

    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }

    //}

    public int InsertClusterDetails(ClusterVo cluster, List<ClusterUnitVo> lstclusterunitvo, List<ClusterExportVo> lstclusterexportvo, List<ClusterIndustryVo> lstclusterindustryvo, List<ClusterCommonFacilitiesVO> lstCommonFacilities)
    {
        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INS_CLUSTERDETAILS]";

            com.Transaction = transaction;
            com.Connection = connection;

            com.Parameters.AddWithValue("@District_Cd", Convert.ToString(cluster.District_Cd));
            com.Parameters.AddWithValue("@Mandal_Cd", Convert.ToString(cluster.Mandal_Cd));
            com.Parameters.AddWithValue("@Village_Cd", Convert.ToString(cluster.Village_Cd));
            com.Parameters.AddWithValue("@LineofActivity", Convert.ToString(cluster.LineofActivity));
            com.Parameters.AddWithValue("@Infra_Power", Convert.ToString(cluster.Infra_Power));
            com.Parameters.AddWithValue("@Infra_SubStation", Convert.ToString(cluster.Infra_SubStation));
            com.Parameters.AddWithValue("@Infra_Sub_Capacity", Convert.ToString(cluster.Infra_Sub_Capacity));
            com.Parameters.AddWithValue("@Infra_Common_Facility", Convert.ToString(cluster.Infra_Common_Facility));
            com.Parameters.AddWithValue("@Infra_Training_Facility", Convert.ToString(cluster.Infra_Training_Facility));
            com.Parameters.AddWithValue("@Raw_Material_Source", Convert.ToString(cluster.Raw_Material_Source));
            com.Parameters.AddWithValue("@Major_Markets", Convert.ToString(cluster.Major_Markets));
            com.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
            com.Parameters.AddWithValue("@INSERTMODE", Convert.ToString(cluster.InsertMode));
            com.Parameters.AddWithValue("@Cluster_Id", cluster.Cluster_Id);

            com.Parameters.Add("@id", SqlDbType.Int, 500);
            com.Parameters["@id"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();
            valid = (Int32)com.Parameters["@id"].Value;
            if (cluster.InsertMode != "U")
                cluster.Cluster_Id = valid;

            SqlCommand cmdDelUnits = new SqlCommand("[USP_DEL_CLUSTER_ALLGRIDS]", connection);
            cmdDelUnits.CommandType = CommandType.StoredProcedure;
            cmdDelUnits.Transaction = transaction;
            cmdDelUnits.Connection = connection;
            cmdDelUnits.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
            cmdDelUnits.ExecuteNonQuery();

            foreach (ClusterUnitVo clusterunitvo in lstclusterunitvo)
            {
                SqlCommand cmd1 = new SqlCommand("[USP_INS_CLUSTERUNIT]", connection);
                cmd1.CommandType = CommandType.StoredProcedure;
                cmd1.Transaction = transaction;
                cmd1.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
                cmd1.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
                if (clusterunitvo.Unit_Type != null)
                    cmd1.Parameters.AddWithValue("@Unit_Type", clusterunitvo.Unit_Type);
                if (clusterunitvo.No_Units != null)
                    cmd1.Parameters.AddWithValue("@No_Units", clusterunitvo.No_Units);
                if (clusterunitvo.Investment != null && clusterunitvo.Investment != "")
                    cmd1.Parameters.AddWithValue("@Investment", clusterunitvo.Investment);
                if (clusterunitvo.Employment != null && clusterunitvo.Employment != "")
                    cmd1.Parameters.AddWithValue("@Employment", clusterunitvo.Employment);
                if (clusterunitvo.TurnOver != null && clusterunitvo.TurnOver != "")
                    cmd1.Parameters.AddWithValue("@TurnOver", clusterunitvo.TurnOver);
                cmd1.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
                cmd1.ExecuteNonQuery();
            }

            foreach (ClusterExportVo clusterexportvo in lstclusterexportvo)
            {
                SqlCommand cmd2 = new SqlCommand("[USP_INS_CLUSTEREXPORT]", connection);
                cmd2.CommandType = CommandType.StoredProcedure;
                cmd2.Transaction = transaction;
                cmd2.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
                cmd2.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
                if (clusterexportvo.Nameof_Unit != null)
                    cmd2.Parameters.AddWithValue("@Nameof_Unit", clusterexportvo.Nameof_Unit);
                if (clusterexportvo.Product_Exported != null)
                    cmd2.Parameters.AddWithValue("@Product_Exported", clusterexportvo.Product_Exported);
                if (clusterexportvo.Country_Exported != null && clusterexportvo.Country_Exported != "")
                    cmd2.Parameters.AddWithValue("@Country_Exported", clusterexportvo.Country_Exported);
                if (clusterexportvo.QuantumofExports != null && clusterexportvo.QuantumofExports != "")
                    cmd2.Parameters.AddWithValue("@QuantumofExports", clusterexportvo.QuantumofExports);
                if (clusterexportvo.ValueofExports != null && clusterexportvo.ValueofExports != "")
                    cmd2.Parameters.AddWithValue("@ValueofExports", clusterexportvo.ValueofExports);
                cmd2.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
                cmd2.Parameters.AddWithValue("@QuantityIn", Convert.ToString(clusterexportvo.QuantityIn));

                cmd2.ExecuteNonQuery();
            }

            foreach (ClusterIndustryVo clusterindustryvo in lstclusterindustryvo)
            {
                SqlCommand cmd3 = new SqlCommand("[USP_INS_CLUSTERINDUSTRIES]", connection);
                cmd3.CommandType = CommandType.StoredProcedure;
                cmd3.Transaction = transaction;
                cmd3.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
                cmd3.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
                if (clusterindustryvo.NameofIndustry != null)
                    cmd3.Parameters.AddWithValue("@NameofIndustry", clusterindustryvo.NameofIndustry);
                if (clusterindustryvo.LineofActivity != null)
                    cmd3.Parameters.AddWithValue("@LineofActivity", clusterindustryvo.LineofActivity);
                if (clusterindustryvo.Investment != null && clusterindustryvo.Investment != "")
                    cmd3.Parameters.AddWithValue("@Investment", clusterindustryvo.Investment);
                if (clusterindustryvo.Employment != null && clusterindustryvo.Employment != "")
                    cmd3.Parameters.AddWithValue("@Employment", clusterindustryvo.Employment);

                if (clusterindustryvo.NoofUnits != null && clusterindustryvo.NoofUnits != "")
                    cmd3.Parameters.AddWithValue("@NoofUnits", clusterindustryvo.NoofUnits);
                if (clusterindustryvo.Turnover != null && clusterindustryvo.Turnover != "")
                    cmd3.Parameters.AddWithValue("@Turnover", clusterindustryvo.Turnover);
                if (clusterindustryvo.Unit_Typevalue != null && clusterindustryvo.Unit_Typevalue != "")
                    cmd3.Parameters.AddWithValue("@Unit_Typevalue", clusterindustryvo.Unit_Typevalue);
                if (clusterindustryvo.UnitType != null && clusterindustryvo.UnitType != "")
                    cmd3.Parameters.AddWithValue("@Unit_Type", clusterindustryvo.UnitType);

                cmd3.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
                cmd3.ExecuteNonQuery();
            }
            foreach (ClusterCommonFacilitiesVO commonfacvo in lstCommonFacilities)
            {
                SqlCommand cmd4 = new SqlCommand("USP_INS_Cluster_CommonFacilityCenters", connection);
                cmd4.CommandType = CommandType.StoredProcedure;
                cmd4.Transaction = transaction;
                cmd4.Connection = connection;

                cmd4.Parameters.AddWithValue("@Cluster_Id", SqlDbType.Int).Value = cluster.Cluster_Id;
                if (commonfacvo.TypeCd != null)
                    cmd4.Parameters.AddWithValue("@TypeCd", commonfacvo.TypeCd);
                if (commonfacvo.Details != null && commonfacvo.Details != "")
                    cmd4.Parameters.AddWithValue("@Details", commonfacvo.Details);
                cmd4.Parameters.AddWithValue("@Created_By ", Convert.ToString(cluster.Created_By));
                cmd4.ExecuteNonQuery();
            }
            transaction.Commit();

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

            con.CloseConnection();
        }
        return cluster.Cluster_Id;
    }
    public DataSet GetClusterAbstractReport(string FromDate, string Todate, string distcd, string RetrievalFlag)//, string mandalcd, string Villagecd, string Clusterid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_CLUSTERABSTRCT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = FromDate;
            da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = Todate;
            da.SelectCommand.Parameters.Add("@DISTCD", SqlDbType.VarChar).Value = distcd;
            da.SelectCommand.Parameters.Add("@RETFLAG", SqlDbType.VarChar).Value = RetrievalFlag;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDistrictsWithoutHYD_Labour()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistricts_Labour", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetMandalsLabour(string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetMandals_Labour", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = District.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetVillagesLabour(string Mandal)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetVillages_Labour", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Mandal.Trim() == "" || Mandal.Trim() == null || Mandal.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@inMandalid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@inMandalid", SqlDbType.VarChar).Value = Mandal.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesLegal(string SerchVer, string EnterpriseType, string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesLegal", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int InsertLabourDetailsCFO(LabourActVO labouractvo, List<LabourWorkPlace> lstworkplacevo, List<EmployeesDetails> LstLabourEmployeesvo, List<FamilyMembersAct1> lstFamilyMembers, List<ContractorDetails> lstContractorVoAct3, List<ContractorDetails> lstContractorVoAct4)
    {
        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_Questionnaire_Labour_CFO";

            com.Transaction = transaction;
            com.Connection = connection;
            if (labouractvo.intCFEEnterpid == 0 || labouractvo.intCFEEnterpid == null)
                com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = labouractvo.intCFEEnterpid;


            if (labouractvo.QuestionnaireId == 0 || labouractvo.QuestionnaireId == null)
                com.Parameters.Add("@QuestionnaireId", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            if (labouractvo.Uid_No == null || labouractvo.Uid_No.ToString().Trim() == "" || labouractvo.Uid_No.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = labouractvo.Uid_No.Trim();

            if (labouractvo.Reg_Id == null || labouractvo.Reg_Id.ToString().Trim() == "" || labouractvo.Reg_Id.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = labouractvo.Reg_Id;

            if (labouractvo.LabourActId == null || labouractvo.LabourActId.ToString().Trim() == "" || labouractvo.LabourActId.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Labour_ActId", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Labour_ActId", SqlDbType.VarChar).Value = labouractvo.LabourActId.Trim();
            //----------------------------
            if (labouractvo.EstClassification == null || labouractvo.EstClassification.ToString().Trim() == "" || labouractvo.EstClassification.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Estb_Classification", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Estb_Classification", SqlDbType.VarChar).Value = labouractvo.EstClassification.Trim();

            if (labouractvo.CategoryofEstablishment == null || labouractvo.CategoryofEstablishment.ToString().Trim() == "" || labouractvo.CategoryofEstablishment.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Estb_Category", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Estb_Category", SqlDbType.VarChar).Value = labouractvo.CategoryofEstablishment.Trim();
            if (labouractvo.NameofShopAct1 == null || labouractvo.NameofShopAct1.ToString().Trim() == "" || labouractvo.NameofShopAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estb_Name", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estb_Name", SqlDbType.VarChar).Value = labouractvo.NameofShopAct1.Trim();

            if (labouractvo.ShopDoorNo == null || labouractvo.ShopDoorNo.ToString().Trim() == "" || labouractvo.ShopDoorNo.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_DoorNo", SqlDbType.VarChar).Value = labouractvo.ShopDoorNo.Trim();

            if (labouractvo.ShopLocality == null || labouractvo.ShopLocality.ToString().Trim() == "" || labouractvo.ShopLocality.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_Locality", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_Locality", SqlDbType.VarChar).Value = labouractvo.ShopLocality.Trim();

            if (labouractvo.ShopDistrict == null || labouractvo.ShopDistrict.ToString().Trim() == "" || labouractvo.ShopDistrict.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_District", SqlDbType.VarChar).Value = labouractvo.ShopDistrict.Trim();

            if (labouractvo.ShopMandal == null || labouractvo.ShopMandal.ToString().Trim() == "" || labouractvo.ShopMandal.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_Mandal", SqlDbType.VarChar).Value = labouractvo.ShopMandal.Trim();

            if (labouractvo.ShopVillage == null || labouractvo.ShopVillage.ToString().Trim() == "" || labouractvo.ShopVillage.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_Village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_Village", SqlDbType.VarChar).Value = labouractvo.ShopVillage.Trim();
            if (labouractvo.ShopPincode == null || labouractvo.ShopPincode.ToString().Trim() == "" || labouractvo.ShopPincode.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Estd_PinCode", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Estd_PinCode", SqlDbType.VarChar).Value = labouractvo.ShopPincode.Trim();

            if (labouractvo.NameofUnitAct1 == null || labouractvo.NameofUnitAct1.ToString().Trim() == "" || labouractvo.NameofUnitAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Name", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Name", SqlDbType.VarChar).Value = labouractvo.NameofUnitAct1.Trim();

            if (labouractvo.PGNameAct1 == null || labouractvo.PGNameAct1.ToString().Trim() == "" || labouractvo.PGNameAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Empolyer_FatherName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Empolyer_FatherName", SqlDbType.VarChar).Value = labouractvo.PGNameAct1.Trim();
            if (labouractvo.EmpDesignation == null || labouractvo.EmpDesignation.ToString().Trim() == "" || labouractvo.EmpDesignation.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Designation", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Designation", SqlDbType.VarChar).Value = labouractvo.EmpDesignation.Trim();

            if (labouractvo.AgeAct1 == null || labouractvo.AgeAct1.ToString().Trim() == "" || labouractvo.AgeAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Age", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Age", SqlDbType.VarChar).Value = labouractvo.AgeAct1.Trim();

            if (labouractvo.MobileAct1 == null || labouractvo.MobileAct1.ToString().Trim() == "" || labouractvo.MobileAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_MobileNo", SqlDbType.VarChar).Value = labouractvo.MobileAct1.Trim();

            if (labouractvo.EmailAct1 == null || labouractvo.EmailAct1.ToString().Trim() == "" || labouractvo.EmailAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_EmailID", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_EmailID", SqlDbType.VarChar).Value = labouractvo.EmailAct1.Trim();
            if (labouractvo.DoorNoResidentialAct1 == null || labouractvo.DoorNoResidentialAct1.ToString().Trim() == "" || labouractvo.DoorNoResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_DoorNo", SqlDbType.VarChar).Value = labouractvo.DoorNoResidentialAct1.Trim();
            if (labouractvo.LocalResidentialAct1 == null || labouractvo.LocalResidentialAct1.ToString().Trim() == "" || labouractvo.LocalResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Locality", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Locality", SqlDbType.VarChar).Value = labouractvo.LocalResidentialAct1.Trim();

            if (labouractvo.DistrictResidentialAct1 == null || labouractvo.DistrictResidentialAct1.ToString().Trim() == "" || labouractvo.DistrictResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_District", SqlDbType.VarChar).Value = labouractvo.DistrictResidentialAct1.Trim();

            if (labouractvo.MandalResidentialAct1 == null || labouractvo.MandalResidentialAct1.ToString().Trim() == "" || labouractvo.MandalResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Mandal", SqlDbType.VarChar).Value = labouractvo.MandalResidentialAct1.Trim();

            if (labouractvo.VillageResidentialAct1 == null || labouractvo.VillageResidentialAct1.ToString().Trim() == "" || labouractvo.VillageResidentialAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Employer_Village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Employer_Village", SqlDbType.VarChar).Value = labouractvo.VillageResidentialAct1.Trim();

            if (labouractvo.ManagerResidenceAct1 == null || labouractvo.ManagerResidenceAct1.ToString().Trim() == "" || labouractvo.ManagerResidenceAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Agent_Flag", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Agent_Flag", SqlDbType.VarChar).Value = labouractvo.ManagerResidenceAct1.Trim();

            if (labouractvo.ManagerNameAct1 == null || labouractvo.ManagerNameAct1.ToString().Trim() == "" || labouractvo.ManagerNameAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Name", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Name", SqlDbType.VarChar).Value = labouractvo.ManagerNameAct1.Trim();
            if (labouractvo.ManagerPGNameAct1 == null || labouractvo.ManagerPGNameAct1.ToString().Trim() == "" || labouractvo.ManagerPGNameAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_FatherName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_FatherName", SqlDbType.VarChar).Value = labouractvo.ManagerPGNameAct1.Trim();

            if (labouractvo.ManagerDesignationAct1 == null || labouractvo.ManagerDesignationAct1.ToString().Trim() == "" || labouractvo.ManagerDesignationAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Designation", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Designation", SqlDbType.VarChar).Value = labouractvo.ManagerDesignationAct1.Trim();

            if (labouractvo.ManagerDoorNo == null || labouractvo.ManagerDoorNo.ToString().Trim() == "" || labouractvo.ManagerDoorNo.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_DoorNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_DoorNo", SqlDbType.VarChar).Value = labouractvo.ManagerDoorNo.Trim();

            if (labouractvo.ManagerLocalityAct1 == null || labouractvo.ManagerLocalityAct1.ToString().Trim() == "" || labouractvo.ManagerLocalityAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Locality", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Locality", SqlDbType.VarChar).Value = labouractvo.ManagerLocalityAct1.Trim();

            if (labouractvo.ManagerDistrictAct1 == null || labouractvo.ManagerDistrictAct1.ToString().Trim() == "" || labouractvo.ManagerDistrictAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_District", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_District", SqlDbType.VarChar).Value = labouractvo.ManagerDistrictAct1.Trim();

            if (labouractvo.ManagerMandalAct1 == null || labouractvo.ManagerMandalAct1.ToString().Trim() == "" || labouractvo.ManagerMandalAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Mandal", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Mandal", SqlDbType.VarChar).Value = labouractvo.ManagerMandalAct1.Trim();
            if (labouractvo.ManagerVillageAct1 == null || labouractvo.ManagerVillageAct1.ToString().Trim() == "" || labouractvo.ManagerVillageAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_Manager_Village", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Manager_Village", SqlDbType.VarChar).Value = labouractvo.ManagerVillageAct1.Trim();
            if (labouractvo.NatureofBusinessAct1 == null || labouractvo.NatureofBusinessAct1.ToString().Trim() == "" || labouractvo.NatureofBusinessAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_Nature_of_Business", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_Nature_of_Business", SqlDbType.VarChar).Value = labouractvo.NatureofBusinessAct1.Trim();

            if (labouractvo.DateofCommenceAct1 == null || labouractvo.DateofCommenceAct1.ToString().Trim() == "" || labouractvo.DateofCommenceAct1.ToString().Trim() == "--Select--")
                com.Parameters.Add("@Form1_1_DateofCommencement", SqlDbType.VarChar).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_DateofCommencement", SqlDbType.VarChar).Value = labouractvo.DateofCommenceAct1.Trim();

            if (labouractvo.Above18Male == null || labouractvo.Above18Male == 0)
                com.Parameters.Add("@Form1_1_Employees_Above18_Male", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Employees_Above18_Male", SqlDbType.Int).Value = labouractvo.Above18Male;

            if (labouractvo.Above18FeMale == null || labouractvo.Above18FeMale == 0)
                com.Parameters.Add("@Form1_1_Employees_Above18_Female", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Employees_Above18_Female", SqlDbType.Int).Value = labouractvo.Above18FeMale;

            if (labouractvo.Below18Male == null || labouractvo.Below18Male == 0)
                com.Parameters.Add("@Form1_1_Employees_14_18_Male", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Employees_14_18_Male", SqlDbType.Int).Value = labouractvo.Below18Male;

            if (labouractvo.Below18FeMale == null || labouractvo.Below18FeMale == 0)
                com.Parameters.Add("@Form1_1_Employees_14_18_Female", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Form1_1_Employees_14_18_Female", SqlDbType.Int).Value = labouractvo.Below18FeMale;

            if (labouractvo.CreatedBy == null || labouractvo.CreatedBy == 0)
                com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@Created_by", SqlDbType.Int).Value = labouractvo.CreatedBy;

            if (labouractvo.TotalAbove18 == 0 || labouractvo.TotalAbove18 == null)
                com.Parameters.Add("@TotalAbove18", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@TotalAbove18", SqlDbType.Int).Value = labouractvo.TotalAbove18;

            if (labouractvo.TotalBelow18 == 0 || labouractvo.TotalBelow18 == null)
                com.Parameters.Add("@TotalBelow18Emps", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@TotalBelow18Emps", SqlDbType.Int).Value = labouractvo.TotalBelow18;

            if (labouractvo.TotalEmployees == 0 || labouractvo.TotalEmployees == null)
                com.Parameters.Add("@TotalEmployees", SqlDbType.Int).Value = DBNull.Value;
            else
                com.Parameters.Add("@TotalEmployees", SqlDbType.Int).Value = labouractvo.TotalEmployees;
            //if (labouractvo.DateofCommenceAct1 != null && labouractvo.DateofCommenceAct1 != "")
            //    com.Parameters.Add("@Form1_1_DateofCommencement", SqlDbType.VarChar).Value = labouractvo.DateofCommenceAct1.Trim();
            com.Parameters.Add("@Created_User", SqlDbType.VarChar).Value = labouractvo.CreatedUser;

            if (labouractvo.FullNamePerAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_FullName", labouractvo.FullNamePerAct2);
            if (labouractvo.PerDoorNoAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_Per_DoorNo", labouractvo.PerDoorNoAct2);
            if (labouractvo.PerVillage != null)
                com.Parameters.AddWithValue("@Form1_2_Per_Village", labouractvo.PerVillage);
            if (labouractvo.PerMandal != null)
                com.Parameters.AddWithValue("@Form1_2_Per_Mandal", labouractvo.PerMandal);
            if (labouractvo.PerDistrict != null)
                com.Parameters.AddWithValue("@Form1_2_Per_District", labouractvo.PerDistrict);
            if (labouractvo.PerPincode != null)
                com.Parameters.AddWithValue("@Form1_2_Per_PinCode", labouractvo.PerPincode);
            if (labouractvo.CompletionDateAct2 != "" && labouractvo.CompletionDateAct2 != null)
                com.Parameters.AddWithValue("@Form1_2_Est_Compltd_Dt", cmf.convertDateIndia(labouractvo.CompletionDateAct2));
            if (labouractvo.ManagerMobileNo != null)
                com.Parameters.AddWithValue("@Form1_Manager_MobileNo", labouractvo.ManagerMobileNo);
            if (labouractvo.ManagerEmail != null)
                com.Parameters.AddWithValue("@Form1_Manager_EMail", labouractvo.ManagerEmail);

            if (labouractvo.RegActId != null)
                com.Parameters.AddWithValue("@Form1_3_Registered_Act", labouractvo.RegActId);
            if (labouractvo.LicenseRegNo != null)
                com.Parameters.AddWithValue("@Form1_3_Reg_Lic", labouractvo.LicenseRegNo);

            if (labouractvo.DirNameAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_FullName", labouractvo.DirNameAct4);
            if (labouractvo.DirDoorNoAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_DoorNo", labouractvo.DirDoorNoAct4);
            if (labouractvo.DirVillageAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_Village", labouractvo.DirVillageAct4);
            if (labouractvo.DirMandalAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_Mandal", labouractvo.DirMandalAct4);
            if (labouractvo.DirDistrictAct4 != null)
                com.Parameters.AddWithValue("@Form1_4_Dir_District", labouractvo.DirDistrictAct4);

            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            //FamilyMembersAct1
            //EmployeeDetails
            // object returnvalue = com.ExecuteScalar();
            com.ExecuteNonQuery();
            //if (returnvalue == DBNull.Value || returnvalue == null)
            //    return 0;
            //else
            //    return Convert.ToInt32(returnvalue);

            valid = (Int32)com.Parameters["@Valid"].Value;

            SqlCommand cmdDelWorkPlace = new SqlCommand("[USP_DEL_Godown_Labour_CFO]", connection);
            cmdDelWorkPlace.CommandType = CommandType.StoredProcedure;
            cmdDelWorkPlace.Transaction = transaction;
            cmdDelWorkPlace.Connection = connection;
            cmdDelWorkPlace.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelWorkPlace.ExecuteNonQuery();

            foreach (LabourWorkPlace workplacevo in lstworkplacevo)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INS_Godown_Labour_CFO]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
                cmdEnj.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (workplacevo.WorkPlace != null)
                    cmdEnj.Parameters.AddWithValue("@Work_Place", workplacevo.WorkPlace);
                if (workplacevo.DoorNo != null)
                    cmdEnj.Parameters.AddWithValue("@Door_No", workplacevo.DoorNo);

                if (workplacevo.Locality != null && workplacevo.Locality != "")
                    cmdEnj.Parameters.AddWithValue("@Locality", workplacevo.Locality);
                cmdEnj.ExecuteNonQuery();
            }
            SqlCommand cmdDelFamilyMembers = new SqlCommand("[USP_DEL_Family_Member_Labour_CFO]", connection);
            cmdDelFamilyMembers.CommandType = CommandType.StoredProcedure;
            cmdDelFamilyMembers.Transaction = transaction;
            cmdDelFamilyMembers.Connection = connection;
            cmdDelFamilyMembers.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelFamilyMembers.ExecuteNonQuery();

            foreach (FamilyMembersAct1 familyvo in lstFamilyMembers)
            {
                SqlCommand cmdInsFamily = new SqlCommand("[USP_INS_Family_Member_Labour_CFO]", connection);
                cmdInsFamily.CommandType = CommandType.StoredProcedure;
                cmdInsFamily.Transaction = transaction;
                cmdInsFamily.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdInsFamily);
                cmdInsFamily.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (familyvo.FamilyNameAct1 != null)
                    cmdInsFamily.Parameters.AddWithValue("@Name", familyvo.FamilyNameAct1);
                if (familyvo.RelationshipAct1 != null)
                    cmdInsFamily.Parameters.AddWithValue("@RelationShip", familyvo.RelationshipAct1);

                if (familyvo.GenderAct1 != null && familyvo.GenderAct1 != "")
                    cmdInsFamily.Parameters.AddWithValue("@Gender", familyvo.GenderAct1);
                if (familyvo.AdultAct1 != null && familyvo.AdultAct1 != "")
                    cmdInsFamily.Parameters.AddWithValue("@Adult_Flag", familyvo.AdultAct1);
                cmdInsFamily.ExecuteNonQuery();
            }
            SqlCommand cmdDelEmp = new SqlCommand("[USP_DEL_Employees_Labour_CFO]", connection);
            cmdDelEmp.CommandType = CommandType.StoredProcedure;
            cmdDelEmp.Transaction = transaction;
            cmdDelEmp.Connection = connection;
            cmdDelEmp.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelEmp.ExecuteNonQuery();

            foreach (EmployeesDetails empvo in LstLabourEmployeesvo)
            {
                SqlCommand cmdInsEmp = new SqlCommand("[USP_INS_Employees_Labour_CFO]", connection);
                cmdInsEmp.CommandType = CommandType.StoredProcedure;
                cmdInsEmp.Transaction = transaction;
                cmdInsEmp.Connection = connection;

                //SqlDataAdapter da1 = new SqlDataAdapter(cmdInsEmp);
                cmdInsEmp.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (empvo.Occupation != null)
                    cmdInsEmp.Parameters.AddWithValue("@Occupation", empvo.Occupation);
                if (empvo.EmployeeNameAct1 != null)
                    cmdInsEmp.Parameters.AddWithValue("@Name", empvo.EmployeeNameAct1);
                if (empvo.EmployeeGenderAct1 != null && empvo.EmployeeGenderAct1 != "")
                    cmdInsEmp.Parameters.AddWithValue("@Gender", empvo.EmployeeGenderAct1);

                cmdInsEmp.ExecuteNonQuery();
            }
            SqlCommand cmdDelContractor = new SqlCommand("[USP_DEL_Contractor_Workmen_Labour_CFO]", connection);
            cmdDelContractor.CommandType = CommandType.StoredProcedure;
            cmdDelContractor.Transaction = transaction;
            cmdDelContractor.Connection = connection;
            cmdDelContractor.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
            cmdDelContractor.ExecuteNonQuery();

            foreach (ContractorDetails Contractorvo in lstContractorVoAct3)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INS_Contractor_Workmen_Labour_CFO]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                cmdEnj.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (Contractorvo.ContractorName != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Name", Contractorvo.ContractorName);
                if (Contractorvo.ContractorAddress != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Address", Contractorvo.ContractorAddress);
                if (Contractorvo.ContractorMobileNo != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MobileNo", Contractorvo.ContractorMobileNo);
                if (Contractorvo.ContractorWorkNature != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Work_Nature", Contractorvo.ContractorWorkNature);
                if (Contractorvo.ContractorWorkMen != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MaxWorkers", Contractorvo.ContractorWorkMen);
                if (Contractorvo.ContractorCommence != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Commence_Dt", Contractorvo.ContractorCommence);
                if (Contractorvo.ContractorComplete != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Compltd_Dt", Contractorvo.ContractorComplete);
                if (Contractorvo.ManufacturingDepts != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_ManufacturingDepts", Contractorvo.ManufacturingDepts);
                cmdEnj.ExecuteNonQuery();
            }
            foreach (ContractorDetails Contractorvo in lstContractorVoAct4)
            {
                SqlCommand cmdEnj = new SqlCommand("[USP_INS_Contractor_Workmen_Labour_CFO]", connection);
                cmdEnj.CommandType = CommandType.StoredProcedure;
                cmdEnj.Transaction = transaction;
                cmdEnj.Connection = connection;

                cmdEnj.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = labouractvo.QuestionnaireId;
                if (Contractorvo.ContractorName != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Name", Contractorvo.ContractorName);
                if (Contractorvo.ContractorAddress != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Address", Contractorvo.ContractorAddress);
                if (Contractorvo.ContractorMobileNo != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MobileNo", Contractorvo.ContractorMobileNo);
                if (Contractorvo.ContractorWorkNature != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Work_Nature", Contractorvo.ContractorWorkNature);
                if (Contractorvo.ContractorWorkMen != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_MaxWorkers", Contractorvo.ContractorWorkMen);
                if (Contractorvo.ContractorCommence != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Commence_Dt", Contractorvo.ContractorCommence);
                if (Contractorvo.ContractorComplete != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_Est_Compltd_Dt", Contractorvo.ContractorComplete);
                if (Contractorvo.ManufacturingDepts != null)
                    cmdEnj.Parameters.AddWithValue("@Contractor_ManufacturingDepts", Contractorvo.ManufacturingDepts);
                cmdEnj.ExecuteNonQuery();
            }
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }


    public DataSet GetClusterInformation(int Clusterid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_CLUSTERPRINT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@ClusterId", SqlDbType.Int).Value = Clusterid;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetClusterCommonFacilityTypes()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_COMMONFACILITY_TYPES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetQueryStatusByTransactionIDResponse(string User_id, string approvalid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetQueryStatusByTransactionIDResponse", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQueryTrnsid", SqlDbType.VarChar).Value = User_id.ToString();

            if (User_id.Trim() == "" || User_id.Trim() == null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = "%";

            if (approvalid.Trim() == "" || approvalid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Approvalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Approvalid", SqlDbType.VarChar).Value = approvalid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // Incentives New -start

    //public DataSet GetIncentivesdata(string userid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_DATA]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (userid != "" && userid != null)
    //            da.SelectCommand.Parameters.Add("@user_code", SqlDbType.VarChar).Value = userid;
    //        else
    //            da.SelectCommand.Parameters.Add("@user_code", SqlDbType.VarChar).Value = "%";

    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }

    //}


    //public string InsertCommonData(IncentivesVOs objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_INSERT_INCENTIVES_DATA_COMMON]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.User_Id != null)
    //            com.Parameters.AddWithValue("@CreatedBy", objvo1.User_Id);
    //        else
    //            com.Parameters.AddWithValue("@CreatedBy", null);
    //        if (objvo1.UnitName != null)
    //            com.Parameters.AddWithValue("@UnitName", objvo1.UnitName);
    //        else
    //            com.Parameters.AddWithValue("@UnitName", null);
    //        if (objvo1.ApplciantName != null)
    //            com.Parameters.AddWithValue("@ApplicantName", objvo1.ApplciantName);
    //        else
    //            com.Parameters.AddWithValue("@ApplicantName", null);
    //        if (objvo1.TinNO != null)
    //            com.Parameters.AddWithValue("@TinNO", objvo1.TinNO);
    //        else
    //            com.Parameters.AddWithValue("@TinNO", null);
    //        if (objvo1.PanNo != null)
    //            com.Parameters.AddWithValue("@PanNo", objvo1.PanNo);
    //        else
    //            com.Parameters.AddWithValue("@PanNo", null);
    //        if (objvo1.UnitDIstId != null)
    //            com.Parameters.AddWithValue("@UnitDIst", objvo1.UnitDIstId);
    //        else
    //            com.Parameters.AddWithValue("@UnitDIst", null);
    //        if (objvo1.UnitMandalId != null)
    //            com.Parameters.AddWithValue("@UnitMandal", objvo1.UnitMandalId);
    //        else
    //            com.Parameters.AddWithValue("@UnitMandal", null);
    //        if (objvo1.UnitVillId != null)
    //            com.Parameters.AddWithValue("@UnitVill", objvo1.UnitVillId);
    //        else
    //            com.Parameters.AddWithValue("@UnitVill", null);
    //        if (objvo1.UnitHNO != null)
    //            com.Parameters.AddWithValue("@UnitHNO", objvo1.UnitHNO);
    //        else
    //            com.Parameters.AddWithValue("@UnitHNO", null);
    //        if (objvo1.UnitStreet != null)
    //            com.Parameters.AddWithValue("@UnitStreet", objvo1.UnitStreet);
    //        else
    //            com.Parameters.AddWithValue("@UnitStreet", null);
    //        if (objvo1.OffcDIst != null)
    //            com.Parameters.AddWithValue("@OffcDIst", objvo1.OffcDIst);
    //        else
    //            com.Parameters.AddWithValue("@OffcDIst", null);
    //        if (objvo1.OffcMandal != null)
    //            com.Parameters.AddWithValue("@OffcMandal", objvo1.OffcMandal);
    //        else
    //            com.Parameters.AddWithValue("@OffcMandal", null);
    //        if (objvo1.OffcVil != null)
    //            com.Parameters.AddWithValue("@OffcVill", objvo1.OffcVil);
    //        else
    //            com.Parameters.AddWithValue("@OffcVill", null);
    //        if (objvo1.OffcHNO != null)
    //            com.Parameters.AddWithValue("@OffcHNO", objvo1.OffcHNO);
    //        else
    //            com.Parameters.AddWithValue("@OffcHNO", null);
    //        if (objvo1.OffcStreet != null)
    //            com.Parameters.AddWithValue("@OffcStreet", objvo1.OffcStreet);
    //        else
    //            com.Parameters.AddWithValue("@OffcStreet", null);
    //        if (objvo1.Category != null)
    //            com.Parameters.AddWithValue("@Category", objvo1.Category);
    //        else
    //            com.Parameters.AddWithValue("@Category", null);
    //        if (objvo1.TypeofOrg != null)
    //            com.Parameters.AddWithValue("@OrgType", objvo1.TypeofOrg);
    //        else
    //            com.Parameters.AddWithValue("@OrgType", null);
    //        if (objvo1.IdsustryStatus != null)
    //            com.Parameters.AddWithValue("@IdsustryStatus", objvo1.IdsustryStatus);
    //        else
    //            com.Parameters.AddWithValue("@IdsustryStatus", null);
    //        if (objvo1.ExistingPercentageincreaseunderExpansionORDiversification != null)
    //            com.Parameters.AddWithValue("@ExistingPercentageincreaseunderExpansionORDiversification", objvo1.ExistingPercentageincreaseunderExpansionORDiversification);
    //        else
    //            com.Parameters.AddWithValue("@ExistingPercentageincreaseunderExpansionORDiversification", null);
    //        if (objvo1.ExpansionDiversificationLOA != null)
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLOA", objvo1.ExpansionDiversificationLOA);
    //        else
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLOA", null);

    //        if (objvo1.ExistingInstalledCapacityinEnter != null)
    //            com.Parameters.AddWithValue("@ExistingInstalledCapacityinEnter", objvo1.ExistingInstalledCapacityinEnter);
    //        else
    //            com.Parameters.AddWithValue("@ExistingInstalledCapacityinEnter", null);

    //        if (objvo1.ExpanORDiversInstalledCapacityinEnter != null)
    //            com.Parameters.AddWithValue("@ExpanORDiversInstalledCapacityinEnter", objvo1.ExpanORDiversInstalledCapacityinEnter);
    //        else
    //            com.Parameters.AddWithValue("@ExpanORDiversInstalledCapacityinEnter", null);
    //        if (objvo1.ExpanORDiversPercentIncreaseunderExpansionORDiversification != null)
    //            com.Parameters.AddWithValue("@ExpanORDiversPercentIncreaseunderExpansionORDiversification", objvo1.ExpanORDiversPercentIncreaseunderExpansionORDiversification);
    //        else
    //            com.Parameters.AddWithValue("@ExpanORDiversPercentIncreaseunderExpansionORDiversification", null);
    //        if (objvo1.ExistEnterpriseLand != null)
    //            com.Parameters.AddWithValue("@ExistEnterpriseLand", objvo1.ExistEnterpriseLand);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterpriseLand", null);
    //        if (objvo1.ExistEnterpriseBuilding != null)
    //            com.Parameters.AddWithValue("@ExistEnterpriseBuilding", objvo1.ExistEnterpriseBuilding);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterpriseBuilding", null);
    //        if (objvo1.ExistEnterprisePlantMachinery != null)
    //            com.Parameters.AddWithValue("@ExistEnterprisePlantMachinery", objvo1.ExistEnterprisePlantMachinery);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterprisePlantMachinery", null);
    //        if (objvo1.ExpansionDiversificationLand != null)
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLand", objvo1.ExpansionDiversificationLand);
    //        else
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLand", null);
    //        if (objvo1.ExpDiversBuilding != null)
    //            com.Parameters.AddWithValue("@ExpDiversBuilding", objvo1.ExpDiversBuilding);
    //        else
    //            com.Parameters.AddWithValue("@ExpDiversBuilding", null);
    //        if (objvo1.ExpDiversPlantMachinery != null)
    //            com.Parameters.AddWithValue("@ExpDiversPlantMachinery", objvo1.ExpDiversPlantMachinery);
    //        else com.Parameters.AddWithValue("@ExpDiversPlantMachinery", null);
    //        //if (objvo1.Userid_No != null)

    //        com.Parameters.AddWithValue("@LandFixedCapitalInvestPercentage", "100");

    //        if (objvo1.BuildingFixedCapitalInvestPercentage != null)
    //            com.Parameters.AddWithValue("@BuildingFixedCapitalInvestPercentage", objvo1.BuildingFixedCapitalInvestPercentage);
    //        else
    //            com.Parameters.AddWithValue("@BuildingFixedCapitalInvestPercentage", null);
    //        if (objvo1.PlantMachFixedCapitalInvestPercentage != null)
    //            com.Parameters.AddWithValue("@PlantMachFixedCapitalInvestPercentage", objvo1.PlantMachFixedCapitalInvestPercentage);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachFixedCapitalInvestPercentage", null);
    //        if (objvo1.SocialStatus != null)
    //            com.Parameters.AddWithValue("@SocialStatus", Convert.ToInt32(objvo1.SocialStatus));
    //        else
    //            com.Parameters.AddWithValue("@SocialStatus", null);
    //        if (objvo1.PowerReleaseDate != null)
    //            com.Parameters.AddWithValue("@PowerReleaseDate", objvo1.PowerReleaseDate);
    //        else
    //            com.Parameters.AddWithValue("@PowerReleaseDate", null);
    //        if (objvo1.ConnectedLoad != null)
    //            com.Parameters.AddWithValue("@ConnectedLoad", objvo1.ConnectedLoad);
    //        else com.Parameters.AddWithValue("@ConnectedLoad", null);
    //        if (objvo1.ContractedLoad != null)
    //            com.Parameters.AddWithValue("@ContractedLoad", objvo1.ContractedLoad);
    //        else
    //            com.Parameters.AddWithValue("@ContractedLoad", null);
    //        if (objvo1.ManagementStaffMale != null)
    //            com.Parameters.AddWithValue("@ManagementStaffMale", objvo1.ManagementStaffMale);
    //        else
    //            com.Parameters.AddWithValue("@ManagementStaffMale", null);
    //        if (objvo1.ManagementStaffFemale != null)
    //            com.Parameters.AddWithValue("@ManagementStaffFemale", objvo1.ManagementStaffFemale);
    //        else
    //            com.Parameters.AddWithValue("@ManagementStaffFemale", null);
    //        if (objvo1.SupervisoryMale != null)
    //            com.Parameters.AddWithValue("@SupervisoryMale", objvo1.SupervisoryMale);
    //        else
    //            com.Parameters.AddWithValue("@SupervisoryMale", null);
    //        if (objvo1.SupervisoryFemale != null)
    //            com.Parameters.AddWithValue("@SupervisoryFemale", objvo1.SupervisoryFemale);
    //        else com.Parameters.AddWithValue("@SupervisoryFemale", null);
    //        if (objvo1.WorkersMale != null)
    //            com.Parameters.AddWithValue("@WorkersMale", objvo1.WorkersMale);
    //        else
    //            com.Parameters.AddWithValue("@WorkersMale", null);
    //        if (objvo1.WorkersFemale != null)
    //            com.Parameters.AddWithValue("@WorkersFemale", objvo1.WorkersFemale);
    //        else
    //            com.Parameters.AddWithValue("@WorkersFemale", null);
    //        if (objvo1.ProjectFinance != null)
    //            com.Parameters.AddWithValue("@ProjectFinance", objvo1.ProjectFinance);
    //        else
    //            com.Parameters.AddWithValue("@ProjectFinance", null);
    //        if (objvo1.TermLoanApplDate != null)
    //            com.Parameters.AddWithValue("@TermLoanApplDate", objvo1.TermLoanApplDate);
    //        else
    //            com.Parameters.AddWithValue("@TermLoanApplDate", null);
    //        if (objvo1.InstitutionName != null)
    //            com.Parameters.AddWithValue("@InstitutionName", objvo1.InstitutionName);
    //        else
    //            com.Parameters.AddWithValue("@InstitutionName", null);
    //        if (objvo1.TermLoanSancRefNo != null)
    //            com.Parameters.AddWithValue("@TermLoanSancRefNo", objvo1.TermLoanSancRefNo);
    //        else
    //            com.Parameters.AddWithValue("@TermLoanSancRefNo", null);
    //        if (objvo1.AvailedSubsidyEarlier != null)
    //            com.Parameters.AddWithValue("@AvailedSubsidyEarlier", objvo1.AvailedSubsidyEarlier);
    //        else
    //            com.Parameters.AddWithValue("@AvailedSubsidyEarlier", null);
    //        if (objvo1.TotalSubsidyAlreadyAvailedScheme != null)
    //            com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedScheme", objvo1.TotalSubsidyAlreadyAvailedScheme);
    //        else
    //            com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedScheme", null);
    //        if (objvo1.TotalSubsidyAlreadyAvailedAmount != null)
    //            com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedAmount", objvo1.TotalSubsidyAlreadyAvailedAmount);
    //        else
    //            com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedAmount", null);
    //        if (objvo1.SecondHandMachVal != null)
    //            com.Parameters.AddWithValue("@SecondHandMachVal", objvo1.SecondHandMachVal);
    //        else
    //            com.Parameters.AddWithValue("@SecondHandMachVal", null);

    //        //// '@EnterpriseTypeExisting', 
    //        if (objvo1.ExistingEnterpriseLOA != null)
    //            com.Parameters.AddWithValue("@ExistingEnterpriseLOA", objvo1.ExistingEnterpriseLOA);
    //        else
    //            com.Parameters.AddWithValue("@ExistingEnterpriseLOA", null);
    //        if (objvo1.NewMachVal != null)
    //            com.Parameters.AddWithValue("@NewMachVal", objvo1.NewMachVal);
    //        else
    //            com.Parameters.AddWithValue("@NewMachVal", null);
    //        if (objvo1.Newand2ndlMachTotVal != null)
    //            com.Parameters.AddWithValue("@Newand2ndlMachTotVal", objvo1.Newand2ndlMachTotVal);
    //        else
    //            com.Parameters.AddWithValue("@Newand2ndlMachTotVal", null);
    //        if (objvo1.PercentageSHMValinTotMachVal != null)
    //            com.Parameters.AddWithValue("@PercentageSHMValinTotMachVal", objvo1.PercentageSHMValinTotMachVal);
    //        else
    //            com.Parameters.AddWithValue("@PercentageSHMValinTotMachVal", null);
    //        if (objvo1.MachValPrchasedfromAPIDCorAPSFCBank != null)
    //            com.Parameters.AddWithValue("@MachValPrchasedfromAPIDCorAPSFCBank", objvo1.MachValPrchasedfromAPIDCorAPSFCBank);
    //        else
    //            com.Parameters.AddWithValue("@MachValPrchasedfromAPIDCorAPSFCBank", null);
    //        if (objvo1.TotalMachVal != null)
    //            com.Parameters.AddWithValue("@TotalMachVal", objvo1.TotalMachVal);
    //        else
    //            com.Parameters.AddWithValue("@TotalMachVal", null);
    //        if (objvo1.InvestimentSubsidy != null)
    //            com.Parameters.AddWithValue("@InvestimentSubsidy", objvo1.InvestimentSubsidy);
    //        else
    //            com.Parameters.AddWithValue("@InvestimentSubsidy", null);
    //        if (objvo1.AdditionalInvSubsidyForWomen != null)
    //            com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomen", objvo1.AdditionalInvSubsidyForWomen);
    //        else com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomen", null);
    //        if (objvo1.AdditionalInvSubsidyForSCORST != null)
    //            com.Parameters.AddWithValue("@AdditionalInvSubsidyForSCORST", objvo1.AdditionalInvSubsidyForSCORST);
    //        else com.Parameters.AddWithValue("@AdditionalInvSubsidyForSCORST", null);
    //        if (objvo1.AdditionalInvSubsidyForWomenInScheduledAreas != null)
    //            com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomenInScheduledAreas", objvo1.AdditionalInvSubsidyForWomenInScheduledAreas);
    //        else
    //            com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomenInScheduledAreas", null);

    //        if (objvo1.TotalAppliedIncetives != null)
    //            com.Parameters.AddWithValue("@TotalAppliedIncetives", objvo1.TotalAppliedIncetives);
    //        else
    //            com.Parameters.AddWithValue("@TotalAppliedIncetives", null);

    //        // Bank details 
    //        if (objvo1.BankName != null)
    //            com.Parameters.AddWithValue("@BankName", objvo1.BankName);
    //        else
    //            com.Parameters.AddWithValue("@BankName", null);

    //        if (objvo1.AccNo != null)
    //            com.Parameters.AddWithValue("@AccNo", objvo1.AccNo);
    //        else
    //            com.Parameters.AddWithValue("@AccNo", null);

    //        if (objvo1.BranchName != null)
    //            com.Parameters.AddWithValue("@BranchName", objvo1.BranchName);
    //        else
    //            com.Parameters.AddWithValue("@BranchName", null);

    //        if (objvo1.IFSCCode != null)
    //            com.Parameters.AddWithValue("@IFSCCode", objvo1.IFSCCode);
    //        else
    //            com.Parameters.AddWithValue("@IFSCCode", null);

    //        if (objvo1.WhetherPower != null)
    //            com.Parameters.AddWithValue("@WhetherPower", objvo1.WhetherPower);
    //        else
    //            com.Parameters.AddWithValue("@WhetherPower", null);

    //        if (objvo1.RequesttoDept != null)
    //            com.Parameters.AddWithValue("@RequesttoDept", objvo1.RequesttoDept);
    //        else
    //            com.Parameters.AddWithValue("@RequesttoDept", null);

    //        ///////
    //        if (objvo1.EMiUdyogAadhar != null)
    //            com.Parameters.AddWithValue("@EMiUdyogAadhar", objvo1.EMiUdyogAadhar);
    //        else
    //            com.Parameters.AddWithValue("@EMiUdyogAadhar", null);

    //        if (objvo1.sector != null)
    //            com.Parameters.AddWithValue("@SectorID", objvo1.sector);
    //        else
    //            com.Parameters.AddWithValue("@SectorID", null);

    //        if (objvo1.natureOfAct != null)
    //            com.Parameters.AddWithValue("@NatureOfActivity", objvo1.natureOfAct);
    //        else
    //            com.Parameters.AddWithValue("@NatureOfActivity", null);

    //        if (objvo1.NatureofBussiness != null)
    //            com.Parameters.AddWithValue("@NatureofBussiness", objvo1.NatureofBussiness);
    //        else
    //            com.Parameters.AddWithValue("@NatureofBussiness", null);

    //        if (objvo1.IsGHMCandOtherMuncpOrp != null)
    //            com.Parameters.AddWithValue("@IsGHMCandOtherMuncpOrp", objvo1.IsGHMCandOtherMuncpOrp);
    //        else
    //            com.Parameters.AddWithValue("@IsGHMCandOtherMuncpOrp", null);

    //        if (objvo1.IsDifferentlyAbled != null)
    //            com.Parameters.AddWithValue("@IsDifferentlyAbled", objvo1.IsDifferentlyAbled);
    //        else
    //            com.Parameters.AddWithValue("@IsDifferentlyAbled", null);

    //        if (objvo1.isVehicleIncentive != null)
    //            com.Parameters.AddWithValue("@isVehicleIncentive", objvo1.isVehicleIncentive);
    //        else
    //            com.Parameters.AddWithValue("@isVehicleIncentive", null);

    //        //// Vat No
    //        if (objvo1.Vatno != null)
    //            com.Parameters.AddWithValue("@VATNo", objvo1.Vatno);
    //        else
    //            com.Parameters.AddWithValue("@VATNo", null);

    //        if (objvo1.Cstno != null)
    //            com.Parameters.AddWithValue("@CSTNo", objvo1.Cstno);
    //        else
    //            com.Parameters.AddWithValue("@CSTNo", null);

    //        if (objvo1.MobileNo != null)
    //            com.Parameters.AddWithValue("@MobileNo", objvo1.MobileNo);
    //        else
    //            com.Parameters.AddWithValue("@MobileNo", null);

    //        if (objvo1.EmailID != null)
    //            com.Parameters.AddWithValue("@EmailID", objvo1.EmailID);
    //        else
    //            com.Parameters.AddWithValue("@EmailID", null);

    //        if (objvo1.Gender != null)
    //            com.Parameters.AddWithValue("@Gender", objvo1.Gender);
    //        else
    //            com.Parameters.AddWithValue("@Gender", null);
    //        //////


    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}
    //public string InsertCommonData(IncentivesVOs objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_INSERT_INCENTIVES_DATA_COMMON]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.User_Id != null)
    //            com.Parameters.AddWithValue("@CreatedBy", objvo1.User_Id);
    //        else
    //            com.Parameters.AddWithValue("@CreatedBy", null);
    //        if (objvo1.UnitName != null)
    //            com.Parameters.AddWithValue("@UnitName", objvo1.UnitName);
    //        else
    //            com.Parameters.AddWithValue("@UnitName", null);
    //        if (objvo1.ApplciantName != null)
    //            com.Parameters.AddWithValue("@ApplicantName", objvo1.ApplciantName);
    //        else
    //            com.Parameters.AddWithValue("@ApplicantName", null);
    //        if (objvo1.TinNO != null)
    //            com.Parameters.AddWithValue("@TinNO", objvo1.TinNO);
    //        else
    //            com.Parameters.AddWithValue("@TinNO", null);
    //        if (objvo1.PanNo != null)
    //            com.Parameters.AddWithValue("@PanNo", objvo1.PanNo);
    //        else
    //            com.Parameters.AddWithValue("@PanNo", null);
    //        if (objvo1.UnitDIstId != null)
    //            com.Parameters.AddWithValue("@UnitDIst", objvo1.UnitDIstId);
    //        else
    //            com.Parameters.AddWithValue("@UnitDIst", null);
    //        if (objvo1.UnitMandalId != null)
    //            com.Parameters.AddWithValue("@UnitMandal", objvo1.UnitMandalId);
    //        else
    //            com.Parameters.AddWithValue("@UnitMandal", null);
    //        if (objvo1.UnitVillId != null)
    //            com.Parameters.AddWithValue("@UnitVill", objvo1.UnitVillId);
    //        else
    //            com.Parameters.AddWithValue("@UnitVill", null);
    //        if (objvo1.UnitHNO != null)
    //            com.Parameters.AddWithValue("@UnitHNO", objvo1.UnitHNO);
    //        else
    //            com.Parameters.AddWithValue("@UnitHNO", null);
    //        if (objvo1.UnitStreet != null)
    //            com.Parameters.AddWithValue("@UnitStreet", objvo1.UnitStreet);
    //        else
    //            com.Parameters.AddWithValue("@UnitStreet", null);
    //        if (objvo1.OffcDIst != null)
    //            com.Parameters.AddWithValue("@OffcDIst", objvo1.OffcDIst);
    //        else
    //            com.Parameters.AddWithValue("@OffcDIst", null);
    //        if (objvo1.OffcMandal != null)
    //            com.Parameters.AddWithValue("@OffcMandal", objvo1.OffcMandal);
    //        else
    //            com.Parameters.AddWithValue("@OffcMandal", null);
    //        if (objvo1.OffcVil != null)
    //            com.Parameters.AddWithValue("@OffcVill", objvo1.OffcVil);
    //        else
    //            com.Parameters.AddWithValue("@OffcVill", null);
    //        if (objvo1.OffcHNO != null)
    //            com.Parameters.AddWithValue("@OffcHNO", objvo1.OffcHNO);
    //        else
    //            com.Parameters.AddWithValue("@OffcHNO", null);
    //        if (objvo1.OffcStreet != null)
    //            com.Parameters.AddWithValue("@OffcStreet", objvo1.OffcStreet);
    //        else
    //            com.Parameters.AddWithValue("@OffcStreet", null);

    //        // added newly
    //        if (objvo1.UnitMObileNo != null)
    //            com.Parameters.AddWithValue("@UnitMObileNo", objvo1.UnitMObileNo);
    //        else
    //            com.Parameters.AddWithValue("@UnitMObileNo", null);
    //        if (objvo1.UnitEmail != null)
    //            com.Parameters.AddWithValue("@UnitEmail", objvo1.UnitEmail);
    //        else
    //            com.Parameters.AddWithValue("@UnitEmail", null);

    //        if (objvo1.OffcEmail != null)
    //            com.Parameters.AddWithValue("@OffcEmail", objvo1.OffcEmail);
    //        else
    //            com.Parameters.AddWithValue("@OffcEmail", null);
    //        if (objvo1.OffcMobileNO != null)
    //            com.Parameters.AddWithValue("@OffcMobileNO", objvo1.OffcMobileNO);
    //        else
    //            com.Parameters.AddWithValue("@OffcMobileNO", null);
    //        //

    //        if (objvo1.Category != null)
    //            com.Parameters.AddWithValue("@Category", objvo1.Category);
    //        else
    //            com.Parameters.AddWithValue("@Category", null);
    //        if (objvo1.TypeofOrg != null)
    //            com.Parameters.AddWithValue("@OrgType", objvo1.TypeofOrg);
    //        else
    //            com.Parameters.AddWithValue("@OrgType", null);
    //        if (objvo1.IdsustryStatus != null)
    //            com.Parameters.AddWithValue("@IdsustryStatus", objvo1.IdsustryStatus);
    //        else
    //            com.Parameters.AddWithValue("@IdsustryStatus", null);
    //        if (objvo1.ExistingPercentageincreaseunderExpansionORDiversification != null)
    //            com.Parameters.AddWithValue("@ExistingPercentageincreaseunderExpansionORDiversification", objvo1.ExistingPercentageincreaseunderExpansionORDiversification);
    //        else
    //            com.Parameters.AddWithValue("@ExistingPercentageincreaseunderExpansionORDiversification", null);
    //        if (objvo1.ExpansionDiversificationLOA != null)
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLOA", objvo1.ExpansionDiversificationLOA);
    //        else
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLOA", null);

    //        if (objvo1.ExistingInstalledCapacityinEnter != null)
    //            com.Parameters.AddWithValue("@ExistingInstalledCapacityinEnter", objvo1.ExistingInstalledCapacityinEnter);
    //        else
    //            com.Parameters.AddWithValue("@ExistingInstalledCapacityinEnter", null);

    //        if (objvo1.ExpanORDiversInstalledCapacityinEnter != null)
    //            com.Parameters.AddWithValue("@ExpanORDiversInstalledCapacityinEnter", objvo1.ExpanORDiversInstalledCapacityinEnter);
    //        else
    //            com.Parameters.AddWithValue("@ExpanORDiversInstalledCapacityinEnter", null);
    //        if (objvo1.ExpanORDiversPercentIncreaseunderExpansionORDiversification != null)
    //            com.Parameters.AddWithValue("@ExpanORDiversPercentIncreaseunderExpansionORDiversification", objvo1.ExpanORDiversPercentIncreaseunderExpansionORDiversification);
    //        else
    //            com.Parameters.AddWithValue("@ExpanORDiversPercentIncreaseunderExpansionORDiversification", null);
    //        if (objvo1.ExistEnterpriseLand != null)
    //            com.Parameters.AddWithValue("@ExistEnterpriseLand", objvo1.ExistEnterpriseLand);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterpriseLand", null);
    //        if (objvo1.ExistEnterpriseBuilding != null)
    //            com.Parameters.AddWithValue("@ExistEnterpriseBuilding", objvo1.ExistEnterpriseBuilding);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterpriseBuilding", null);
    //        if (objvo1.ExistEnterprisePlantMachinery != null)
    //            com.Parameters.AddWithValue("@ExistEnterprisePlantMachinery", objvo1.ExistEnterprisePlantMachinery);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterprisePlantMachinery", null);
    //        if (objvo1.ExpansionDiversificationLand != null)
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLand", objvo1.ExpansionDiversificationLand);
    //        else
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLand", null);
    //        if (objvo1.ExpDiversBuilding != null)
    //            com.Parameters.AddWithValue("@ExpDiversBuilding", objvo1.ExpDiversBuilding);
    //        else
    //            com.Parameters.AddWithValue("@ExpDiversBuilding", null);
    //        if (objvo1.ExpDiversPlantMachinery != null)
    //            com.Parameters.AddWithValue("@ExpDiversPlantMachinery", objvo1.ExpDiversPlantMachinery);
    //        else com.Parameters.AddWithValue("@ExpDiversPlantMachinery", null);
    //        //if (objvo1.Userid_No != null)

    //        com.Parameters.AddWithValue("@LandFixedCapitalInvestPercentage", "100");

    //        if (objvo1.BuildingFixedCapitalInvestPercentage != null)
    //            com.Parameters.AddWithValue("@BuildingFixedCapitalInvestPercentage", objvo1.BuildingFixedCapitalInvestPercentage);
    //        else
    //            com.Parameters.AddWithValue("@BuildingFixedCapitalInvestPercentage", null);
    //        if (objvo1.PlantMachFixedCapitalInvestPercentage != null)
    //            com.Parameters.AddWithValue("@PlantMachFixedCapitalInvestPercentage", objvo1.PlantMachFixedCapitalInvestPercentage);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachFixedCapitalInvestPercentage", null);
    //        if (objvo1.SocialStatus != null)
    //            com.Parameters.AddWithValue("@SocialStatus", Convert.ToInt32(objvo1.SocialStatus));
    //        else
    //            com.Parameters.AddWithValue("@SocialStatus", null);

    //        // added newly 
    //        if (objvo1.NewPowerReleaseDate != null)
    //            com.Parameters.AddWithValue("@NewPowerReleaseDate", objvo1.NewPowerReleaseDate);
    //        else
    //            com.Parameters.AddWithValue("@NewPowerReleaseDate", null);
    //        if (objvo1.NewConnectedLoad != null)
    //            com.Parameters.AddWithValue("@NewConnectedLoad", objvo1.NewConnectedLoad);
    //        else com.Parameters.AddWithValue("@NewConnectedLoad", null);
    //        if (objvo1.NewContractedLoad != null)
    //            com.Parameters.AddWithValue("@NewContractedLoad", objvo1.NewContractedLoad);
    //        else
    //            com.Parameters.AddWithValue("@NewContractedLoad", null);

    //        if (objvo1.ServiceConnectionNO != null)
    //            com.Parameters.AddWithValue("@ServiceConnectionNO", objvo1.ServiceConnectionNO);
    //        else
    //            com.Parameters.AddWithValue("@ServiceConnectionNO", null);

    //        if (objvo1.ExistingConnectedLoad != null)
    //            com.Parameters.AddWithValue("@ExistingConnectedLoad", objvo1.ExistingConnectedLoad);
    //        else com.Parameters.AddWithValue("@ExistingConnectedLoad", null);
    //        if (objvo1.ExistingContractedLoad != null)
    //            com.Parameters.AddWithValue("@ExistingContractedLoad", objvo1.ExistingContractedLoad);
    //        else
    //            com.Parameters.AddWithValue("@ExistingContractedLoad", null);

    //        if (objvo1.ExistingPowerReleaseDate != null)
    //            com.Parameters.AddWithValue("@ExistingPowerReleaseDate", objvo1.ExistingPowerReleaseDate);
    //        else
    //            com.Parameters.AddWithValue("@ExistingPowerReleaseDate", null);
    //        if (objvo1.ExistingServiceConnectionNO != null)
    //            com.Parameters.AddWithValue("@ExistingServiceConnectionNO", objvo1.ExistingServiceConnectionNO);
    //        else
    //            com.Parameters.AddWithValue("@ExistingServiceConnectionNO", null);

    //        if (objvo1.ExpanDiverConnectedLoad != null)
    //            com.Parameters.AddWithValue("@ExpanDiverConnectedLoad", objvo1.ExpanDiverConnectedLoad);
    //        else com.Parameters.AddWithValue("@ExpanDiverConnectedLoad", null);
    //        if (objvo1.ExpanDiverContractedLoad != null)
    //            com.Parameters.AddWithValue("@ExpanDiverContractedLoad", objvo1.ExpanDiverContractedLoad);
    //        else
    //            com.Parameters.AddWithValue("@ExpanDiverContractedLoad", null);
    //        if (objvo1.ExpanDiverPowerReleaseDate != null)
    //            com.Parameters.AddWithValue("@ExpanDiverPowerReleaseDate", objvo1.ExpanDiverPowerReleaseDate);
    //        else
    //            com.Parameters.AddWithValue("@ExpanDiverPowerReleaseDate", null);
    //        if (objvo1.ExpanDiverServiceConnectionNO != null)
    //            com.Parameters.AddWithValue("@ExpanDiverServiceConnectionNO", objvo1.ExpanDiverServiceConnectionNO);
    //        else
    //            com.Parameters.AddWithValue("@ExpanDiverServiceConnectionNO", null);

    //        //

    //        if (objvo1.ManagementStaffMale != null)
    //            com.Parameters.AddWithValue("@ManagementStaffMale", objvo1.ManagementStaffMale);
    //        else
    //            com.Parameters.AddWithValue("@ManagementStaffMale", null);
    //        if (objvo1.ManagementStaffFemale != null)
    //            com.Parameters.AddWithValue("@ManagementStaffFemale", objvo1.ManagementStaffFemale);
    //        else
    //            com.Parameters.AddWithValue("@ManagementStaffFemale", null);
    //        if (objvo1.SupervisoryMale != null)
    //            com.Parameters.AddWithValue("@SupervisoryMale", objvo1.SupervisoryMale);
    //        else
    //            com.Parameters.AddWithValue("@SupervisoryMale", null);
    //        if (objvo1.SupervisoryFemale != null)
    //            com.Parameters.AddWithValue("@SupervisoryFemale", objvo1.SupervisoryFemale);
    //        else com.Parameters.AddWithValue("@SupervisoryFemale", null);

    //        // added newly
    //        if (objvo1.SkilledWorkersMale != null)
    //            com.Parameters.AddWithValue("@SkilledWorkersMale", objvo1.SkilledWorkersMale);
    //        else
    //            com.Parameters.AddWithValue("@SkilledWorkersMale", null);
    //        if (objvo1.SkilledWorkersFemale != null)
    //            com.Parameters.AddWithValue("@SkilledWorkersFemale", objvo1.SkilledWorkersFemale);
    //        else
    //            com.Parameters.AddWithValue("@SkilledWorkersFemale", null);

    //        if (objvo1.SemiSkilledWorkersMale != null)
    //            com.Parameters.AddWithValue("@SemiSkilledWorkersMale", objvo1.SemiSkilledWorkersMale);
    //        else
    //            com.Parameters.AddWithValue("@SemiSkilledWorkersMale", null);
    //        if (objvo1.SemiSkilledWorkersFemale != null)
    //            com.Parameters.AddWithValue("@SemiSkilledWorkersFemale", objvo1.SemiSkilledWorkersFemale);
    //        else
    //            com.Parameters.AddWithValue("@SemiSkilledWorkersFemale", null);
    //        //

    //        if (objvo1.ProjectFinance != null)
    //            com.Parameters.AddWithValue("@ProjectFinance", objvo1.ProjectFinance);
    //        else
    //            com.Parameters.AddWithValue("@ProjectFinance", null);
    //        if (objvo1.TermLoanApplDate != null)
    //            com.Parameters.AddWithValue("@TermLoanApplDate", objvo1.TermLoanApplDate);
    //        else
    //            com.Parameters.AddWithValue("@TermLoanApplDate", null);
    //        if (objvo1.InstitutionName != null)
    //            com.Parameters.AddWithValue("@InstitutionName", objvo1.InstitutionName);
    //        else
    //            com.Parameters.AddWithValue("@InstitutionName", null);
    //        if (objvo1.TermLoanSancRefNo != null)
    //            com.Parameters.AddWithValue("@TermLoanSancRefNo", objvo1.TermLoanSancRefNo);
    //        else
    //            com.Parameters.AddWithValue("@TermLoanSancRefNo", null);
    //        //if (objvo1.AvailedSubsidyEarlier != null)
    //        //    com.Parameters.AddWithValue("@AvailedSubsidyEarlier", objvo1.AvailedSubsidyEarlier);
    //        //else
    //        //    com.Parameters.AddWithValue("@AvailedSubsidyEarlier", null);
    //        //if (objvo1.TotalSubsidyAlreadyAvailedScheme != null)
    //        //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedScheme", objvo1.TotalSubsidyAlreadyAvailedScheme);
    //        //else
    //        //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedScheme", null);
    //        //if (objvo1.TotalSubsidyAlreadyAvailedAmount != null)
    //        //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedAmount", objvo1.TotalSubsidyAlreadyAvailedAmount);
    //        //else
    //        //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedAmount", null);
    //        if (objvo1.SecondHandMachVal != null)
    //            com.Parameters.AddWithValue("@SecondHandMachVal", objvo1.SecondHandMachVal);
    //        else
    //            com.Parameters.AddWithValue("@SecondHandMachVal", null);

    //        //// '@EnterpriseTypeExisting', 
    //        if (objvo1.ExistingEnterpriseLOA != null)
    //            com.Parameters.AddWithValue("@ExistingEnterpriseLOA", objvo1.ExistingEnterpriseLOA);
    //        else
    //            com.Parameters.AddWithValue("@ExistingEnterpriseLOA", null);
    //        if (objvo1.NewMachVal != null)
    //            com.Parameters.AddWithValue("@NewMachVal", objvo1.NewMachVal);
    //        else
    //            com.Parameters.AddWithValue("@NewMachVal", null);
    //        if (objvo1.Newand2ndlMachTotVal != null)
    //            com.Parameters.AddWithValue("@Newand2ndlMachTotVal", objvo1.Newand2ndlMachTotVal);
    //        else
    //            com.Parameters.AddWithValue("@Newand2ndlMachTotVal", null);
    //        if (objvo1.PercentageSHMValinTotMachVal != null)
    //            com.Parameters.AddWithValue("@PercentageSHMValinTotMachVal", objvo1.PercentageSHMValinTotMachVal);
    //        else
    //            com.Parameters.AddWithValue("@PercentageSHMValinTotMachVal", null);
    //        if (objvo1.MachValPrchasedfromAPIDCorAPSFCBank != null)
    //            com.Parameters.AddWithValue("@MachValPrchasedfromAPIDCorAPSFCBank", objvo1.MachValPrchasedfromAPIDCorAPSFCBank);
    //        else
    //            com.Parameters.AddWithValue("@MachValPrchasedfromAPIDCorAPSFCBank", null);

    //        if (objvo1.TotalMachVal != null)
    //            com.Parameters.AddWithValue("@TotalMachVal", objvo1.TotalMachVal);
    //        else
    //            com.Parameters.AddWithValue("@TotalMachVal", null);

    //        //if (objvo1.InvestimentSubsidy != null)
    //        //    com.Parameters.AddWithValue("@InvestimentSubsidy", objvo1.InvestimentSubsidy);
    //        //else
    //        //    com.Parameters.AddWithValue("@InvestimentSubsidy", null);

    //        //if (objvo1.AdditionalInvSubsidyForWomen != null)
    //        //    com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomen", objvo1.AdditionalInvSubsidyForWomen);
    //        //else com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomen", null);

    //        //if (objvo1.AdditionalInvSubsidyForSCORST != null)
    //        //    com.Parameters.AddWithValue("@AdditionalInvSubsidyForSCORST", objvo1.AdditionalInvSubsidyForSCORST);
    //        //else com.Parameters.AddWithValue("@AdditionalInvSubsidyForSCORST", null);

    //        //if (objvo1.AdditionalInvSubsidyForWomenInScheduledAreas != null)
    //        //    com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomenInScheduledAreas", objvo1.AdditionalInvSubsidyForWomenInScheduledAreas);
    //        //else
    //        //    com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomenInScheduledAreas", null);

    //        //if (objvo1.TotalAppliedIncetives != null)
    //        //    com.Parameters.AddWithValue("@TotalAppliedIncetives", objvo1.TotalAppliedIncetives);
    //        //else
    //        //    com.Parameters.AddWithValue("@TotalAppliedIncetives", null);

    //        // Bank details 
    //        if (objvo1.BankName != null)
    //            com.Parameters.AddWithValue("@BankName", objvo1.BankName);
    //        else
    //            com.Parameters.AddWithValue("@BankName", null);

    //        if (objvo1.AccNo != null)
    //            com.Parameters.AddWithValue("@AccNo", objvo1.AccNo);
    //        else
    //            com.Parameters.AddWithValue("@AccNo", null);

    //        if (objvo1.BranchName != null)
    //            com.Parameters.AddWithValue("@BranchName", objvo1.BranchName);
    //        else
    //            com.Parameters.AddWithValue("@BranchName", null);

    //        if (objvo1.IFSCCode != null)
    //            com.Parameters.AddWithValue("@IFSCCode", objvo1.IFSCCode);
    //        else
    //            com.Parameters.AddWithValue("@IFSCCode", null);

    //        if (objvo1.WhetherPower != null)
    //            com.Parameters.AddWithValue("@WhetherPower", objvo1.WhetherPower);
    //        else
    //            com.Parameters.AddWithValue("@WhetherPower", null);

    //        if (objvo1.RequesttoDept != null)
    //            com.Parameters.AddWithValue("@RequesttoDept", objvo1.RequesttoDept);
    //        else
    //            com.Parameters.AddWithValue("@RequesttoDept", null);

    //        ///////
    //        if (objvo1.EMiUdyogAadhar != null)
    //            com.Parameters.AddWithValue("@EMiUdyogAadhar", objvo1.EMiUdyogAadhar);
    //        else
    //            com.Parameters.AddWithValue("@EMiUdyogAadhar", null);

    //        if (objvo1.sector != null)
    //            com.Parameters.AddWithValue("@SectorID", objvo1.sector);
    //        else
    //            com.Parameters.AddWithValue("@SectorID", null);

    //        if (objvo1.natureOfAct != null)
    //            com.Parameters.AddWithValue("@NatureOfActivity", objvo1.natureOfAct);
    //        else
    //            com.Parameters.AddWithValue("@NatureOfActivity", null);

    //        if (objvo1.NatureofBussiness != null)
    //            com.Parameters.AddWithValue("@NatureofBussiness", objvo1.NatureofBussiness);
    //        else
    //            com.Parameters.AddWithValue("@NatureofBussiness", null);

    //        if (objvo1.IsGHMCandOtherMuncpOrp != null)
    //            com.Parameters.AddWithValue("@IsGHMCandOtherMuncpOrp", objvo1.IsGHMCandOtherMuncpOrp);
    //        else
    //            com.Parameters.AddWithValue("@IsGHMCandOtherMuncpOrp", null);

    //        if (objvo1.IsDifferentlyAbled != null)
    //            com.Parameters.AddWithValue("@IsDifferentlyAbled", objvo1.IsDifferentlyAbled);
    //        else
    //            com.Parameters.AddWithValue("@IsDifferentlyAbled", null);

    //        if (objvo1.isVehicleIncentive != null)
    //            com.Parameters.AddWithValue("@isVehicleIncentive", objvo1.isVehicleIncentive);
    //        else
    //            com.Parameters.AddWithValue("@isVehicleIncentive", null);

    //        //// Vat No
    //        if (objvo1.Vatno != null)
    //            com.Parameters.AddWithValue("@VATNo", objvo1.Vatno);
    //        else
    //            com.Parameters.AddWithValue("@VATNo", null);

    //        if (objvo1.Cstno != null)
    //            com.Parameters.AddWithValue("@CSTNo", objvo1.Cstno);
    //        else
    //            com.Parameters.AddWithValue("@CSTNo", null);

    //        //if (objvo1.MobileNo != null)
    //        //    com.Parameters.AddWithValue("@MobileNo", objvo1.MobileNo);
    //        //else
    //        //    com.Parameters.AddWithValue("@MobileNo", null);

    //        //if (objvo1.EmailID != null)
    //        //    com.Parameters.AddWithValue("@EmailID", objvo1.EmailID);
    //        //else
    //        //    com.Parameters.AddWithValue("@EmailID", null);

    //        if (objvo1.Gender != null)
    //            com.Parameters.AddWithValue("@Gender", objvo1.Gender);
    //        else
    //            com.Parameters.AddWithValue("@Gender", null);
    //        //////

    //        // added newly
    //        if (objvo1.CSTRegDate != null)
    //            com.Parameters.AddWithValue("@CSTRegDate", objvo1.CSTRegDate);
    //        else
    //            com.Parameters.AddWithValue("@CSTRegDate", null);
    //        if (objvo1.CSTRegAuthority != null)
    //            com.Parameters.AddWithValue("@CSTRegAuthority", objvo1.CSTRegAuthority);
    //        else
    //            com.Parameters.AddWithValue("@CSTRegAuthority", null);
    //        if (objvo1.CSTRegAuthAddress != null)
    //            com.Parameters.AddWithValue("@CSTRegAuthAddress", objvo1.CSTRegAuthAddress);
    //        else
    //            com.Parameters.AddWithValue("@CSTRegAuthAddress", null);
    //        if (objvo1.PowerStatus != null)
    //            com.Parameters.AddWithValue("@PowerType", Convert.ToInt32(objvo1.PowerStatus));
    //        else
    //            com.Parameters.AddWithValue("@PowerType", null);

    //        if (objvo1.IsMinority != null)
    //            com.Parameters.AddWithValue("@IsMinority", objvo1.IsMinority);
    //        else
    //            com.Parameters.AddWithValue("@IsMinority", null);
    //        // added
    //        if (objvo1.isSecondHandMachVal != null)
    //            com.Parameters.AddWithValue("@isSecondHandMachVal", objvo1.isSecondHandMachVal);
    //        else
    //            com.Parameters.AddWithValue("@isSecondHandMachVal", null);
    //        if (objvo1.TermLoanApplDate != null)
    //            com.Parameters.AddWithValue("@TermLoanSanDate", objvo1.TermLoanApplDate);
    //        else
    //            com.Parameters.AddWithValue("@TermLoanSanDate", null);


    //        if (objvo1.eepinscapUnit != null)
    //            com.Parameters.AddWithValue("@eepinscapUnit", objvo1.eepinscapUnit);
    //        else
    //            com.Parameters.AddWithValue("@eepinscapUnit", null);
    //        if (objvo1.edpinscapUnit != null)
    //            com.Parameters.AddWithValue("@edpinscapUnit", objvo1.edpinscapUnit);
    //        else
    //            com.Parameters.AddWithValue("@edpinscapUnit", null);

    //        if (objvo1.DateOfComm != null)
    //            com.Parameters.AddWithValue("@DCP", objvo1.DateOfComm);
    //        else
    //            com.Parameters.AddWithValue("@DCP", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    public DataSet GetPresentLandPCB()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_PresentLandPCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetLocationPCB()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_LocationPCB]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetFeaturesPCB()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_FeaturePCB]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetDisposalPointsPCB()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_DisposalPointPCB]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetLocationTypePCB()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LocationPCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetWaterSorceTypePCB()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_WaterSourcePCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetWaterConsumptionTypesPCB()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_WaterConsumptionPCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetWaterDischargeTypePCB()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_WaterDischargePCB", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int insertPCBDetailsNew(string number, string ApplNo, string intCFEEnterpid, string PCB_Water, string PCB_Washing, string PCB_BoilerBlowDown, string PCB_CollingTower, string PCB_Domastic,
                    string PCB_Total, string PCB_AP_Capcity, string PCB_FuelConsumption, string PCB_FuelStorge, string PCB_StackHight, string PCB_StackDaimeter, string PCB_AirPolution_Equipment, string PCB_EmiCharcter,
                    string PCB_Qunt_Emission, string PCB_ControlEqu, string PCB_IsPrjRequired, string Created_by, PCBDetailsVo pcbvo, List<LandFeatures> lstFeaturevo, List<ByProduct> lstByProduct)
    {
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();


        SqlCommand com = new SqlCommand("insertPCBdetails", connection);
        com.CommandType = CommandType.StoredProcedure;
        com.Transaction = transaction;
        com.Connection = connection;
        //com.CommandText = "";

        if (number.ToString().Trim() == "" || number.ToString().Trim() == null || number.ToString().Trim() == "--Select--")
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
        else
            com.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

        if (ApplNo.ToString().Trim() == "" || ApplNo.ToString().Trim() == null || ApplNo.ToString().Trim() == "--Select--")
            com.Parameters.Add("@ApplNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ApplNo", SqlDbType.VarChar).Value = ApplNo.Trim();



        if (intCFEEnterpid.ToString().Trim() == "" || intCFEEnterpid.ToString().Trim() == null || intCFEEnterpid.ToString().Trim() == "--Select--")
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();

        if (Created_by.ToString().Trim() == "" || Created_by.ToString().Trim() == null || Created_by.ToString().Trim() == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (PCB_Water.ToString().Trim() == "" || PCB_Water.ToString().Trim() == null || PCB_Water.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Water", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Water", SqlDbType.VarChar).Value = PCB_Water.Trim();
        if (PCB_Washing.ToString().Trim() == "" || PCB_Washing.ToString().Trim() == null || PCB_Washing.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Washing", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Washing", SqlDbType.VarChar).Value = PCB_Washing.Trim();

        if (PCB_BoilerBlowDown.ToString().Trim() == "" || PCB_BoilerBlowDown.ToString().Trim() == null || PCB_BoilerBlowDown.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_BoilerBlowDown", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_BoilerBlowDown", SqlDbType.VarChar).Value = PCB_BoilerBlowDown.Trim();

        if (PCB_CollingTower.ToString().Trim() == "" || PCB_CollingTower.ToString().Trim() == null || PCB_CollingTower.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_CollingTower", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_CollingTower", SqlDbType.VarChar).Value = PCB_CollingTower.Trim();

        if (PCB_Domastic.ToString().Trim() == "" || PCB_Domastic.ToString().Trim() == null || PCB_Domastic.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Domastic", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Domastic", SqlDbType.VarChar).Value = PCB_Domastic.Trim();

        if (PCB_Total.ToString().Trim() == "" || PCB_Total.ToString().Trim() == null || PCB_Total.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Total", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Total", SqlDbType.VarChar).Value = PCB_Total.Trim();
        //string PCB_AP_Capcity, string PCB_FuelConsumption, string PCB_FuelStorge, string PCB_StackHight, string PCB_StackDaimeter, string PCB_AirPolution_Equipment, string PCB_EmiCharcter,
        //           string PCB_Qunt_Emission, string PCB_ControlEqu, string PCB_IsPrjRequired

        if (PCB_AP_Capcity.ToString().Trim() == "" || PCB_AP_Capcity.ToString().Trim() == null || PCB_AP_Capcity.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_AP_Capcity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_AP_Capcity", SqlDbType.VarChar).Value = PCB_AP_Capcity.Trim();
        if (PCB_FuelConsumption.ToString().Trim() == "" || PCB_FuelConsumption.ToString().Trim() == null || PCB_FuelConsumption.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_FuelConsumption", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_FuelConsumption", SqlDbType.VarChar).Value = PCB_FuelConsumption.Trim();
        if (PCB_FuelStorge.ToString().Trim() == "" || PCB_FuelStorge.ToString().Trim() == null || PCB_FuelStorge.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_FuelStorge", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_FuelStorge", SqlDbType.VarChar).Value = PCB_FuelStorge.Trim();
        if (PCB_StackHight.ToString().Trim() == "" || PCB_StackHight.ToString().Trim() == null || PCB_StackHight.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_StackHight", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_StackHight", SqlDbType.VarChar).Value = PCB_StackHight.Trim();

        if (PCB_StackDaimeter.ToString().Trim() == "" || PCB_StackDaimeter.ToString().Trim() == null || PCB_StackDaimeter.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_StackDaimeter", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_StackDaimeter", SqlDbType.VarChar).Value = PCB_StackDaimeter.Trim();

        if (PCB_AirPolution_Equipment.ToString().Trim() == "" || PCB_AirPolution_Equipment.ToString().Trim() == null || PCB_AirPolution_Equipment.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_AirPolution_Equipment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_AirPolution_Equipment", SqlDbType.VarChar).Value = PCB_AirPolution_Equipment.Trim();

        if (PCB_EmiCharcter.ToString().Trim() == "" || PCB_EmiCharcter.ToString().Trim() == null || PCB_EmiCharcter.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_EmiCharcter", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_EmiCharcter", SqlDbType.VarChar).Value = PCB_EmiCharcter.Trim();

        if (PCB_Qunt_Emission.ToString().Trim() == "" || PCB_Qunt_Emission.ToString().Trim() == null || PCB_Qunt_Emission.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_Qunt_Emission", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_Qunt_Emission", SqlDbType.VarChar).Value = PCB_Qunt_Emission.Trim();

        if (PCB_ControlEqu.ToString().Trim() == "" || PCB_ControlEqu.ToString().Trim() == null || PCB_ControlEqu.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_ControlEqu", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_ControlEqu", SqlDbType.VarChar).Value = PCB_ControlEqu.Trim();

        if (PCB_IsPrjRequired.ToString().Trim() == "" || PCB_IsPrjRequired.ToString().Trim() == null || PCB_IsPrjRequired.ToString().Trim() == "--Select--")
            com.Parameters.Add("@PCB_IsPrjRequired", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PCB_IsPrjRequired", SqlDbType.VarChar).Value = PCB_IsPrjRequired.Trim();

        if (pcbvo.FaxNo != null && pcbvo.FaxNo != "")
            com.Parameters.Add("FaxNo", SqlDbType.VarChar).Value = pcbvo.FaxNo.Trim();
        if (pcbvo.ForeignCollab != null && pcbvo.ForeignCollab != "")
            com.Parameters.Add("ForeignCollab", SqlDbType.VarChar).Value = pcbvo.ForeignCollab.Trim();

        if (pcbvo.UseofLand != null && pcbvo.UseofLand != "")
            com.Parameters.Add("UseofLand", SqlDbType.VarChar).Value = pcbvo.UseofLand.Trim();

        if (pcbvo.Location != null && pcbvo.Location != "")
            com.Parameters.Add("Location", SqlDbType.VarChar).Value = pcbvo.Location.Trim();

        if (pcbvo.GreenBeltArea != null && pcbvo.GreenBeltArea != "")
            com.Parameters.Add("GreenBeltArea", SqlDbType.VarChar).Value = pcbvo.GreenBeltArea.Trim();

        if (pcbvo.TownShipProposal != null && pcbvo.TownShipProposal != "")
            com.Parameters.Add("TownShipProposal", SqlDbType.VarChar).Value = pcbvo.TownShipProposal.Trim();

        if (pcbvo.TownArea_Alloc != null && pcbvo.TownArea_Alloc != "")
            com.Parameters.Add("TownArea_Alloc", SqlDbType.VarChar).Value = pcbvo.TownArea_Alloc.Trim();

        if (pcbvo.DistanceFromSite != null && pcbvo.DistanceFromSite != "")
            com.Parameters.Add("DistanceFromSite", SqlDbType.VarChar).Value = pcbvo.DistanceFromSite.Trim();

        if (pcbvo.Emp_Population != null && pcbvo.Emp_Population != "")
            com.Parameters.Add("Emp_Population", SqlDbType.VarChar).Value = pcbvo.Emp_Population.Trim();

        if (pcbvo.WaterSupply != null && pcbvo.WaterSupply != "")
            com.Parameters.Add("WaterSupply", SqlDbType.VarChar).Value = pcbvo.WaterSupply.Trim();

        if (pcbvo.DisposalPoint != null && pcbvo.DisposalPoint != "")
            com.Parameters.Add("DisposalPoint", SqlDbType.VarChar).Value = pcbvo.DisposalPoint.Trim();

        if (pcbvo.SewerSys != null && pcbvo.SewerSys != "")
            com.Parameters.Add("SewerSys", SqlDbType.VarChar).Value = pcbvo.SewerSys.Trim();

        if (pcbvo.Sewage_TreatMent != null && pcbvo.Sewage_TreatMent != "")
            com.Parameters.Add("Sewage_TreatMent", SqlDbType.VarChar).Value = pcbvo.Sewage_TreatMent.Trim();

        if (pcbvo.TotalEmp_Premises != null && pcbvo.TotalEmp_Premises != "")
            com.Parameters.Add("TotalEmp_Premises", SqlDbType.VarChar).Value = pcbvo.TotalEmp_Premises.Trim();

        if (pcbvo.Prohibitted_Area != null && pcbvo.Prohibitted_Area != "")
            com.Parameters.Add("Prohibitted_Area", SqlDbType.VarChar).Value = pcbvo.Prohibitted_Area.Trim();

        if (pcbvo.Source_Energy != null && pcbvo.Source_Energy != "")
            com.Parameters.Add("Source_Energy", SqlDbType.VarChar).Value = pcbvo.Source_Energy.Trim();

        if (pcbvo.Inplant_Generationtype != null && pcbvo.Inplant_Generationtype != "")
            com.Parameters.Add("Inplant_Generationtype", SqlDbType.VarChar).Value = pcbvo.Inplant_Generationtype.Trim();
        if (pcbvo.DischargeWasteWater != null && pcbvo.DischargeWasteWater != "")
            com.Parameters.Add("DischargeWasteWater", SqlDbType.VarChar).Value = pcbvo.DischargeWasteWater.Trim();
        if (pcbvo.ModeofFinalDischarge != null && pcbvo.ModeofFinalDischarge != "")
            com.Parameters.Add("ModeofFinalDischarge", SqlDbType.VarChar).Value = pcbvo.ModeofFinalDischarge.Trim();
        if (pcbvo.PretreatmentNecessary != null && pcbvo.PretreatmentNecessary != "")
            com.Parameters.Add("PretreatmentNecessary", SqlDbType.VarChar).Value = pcbvo.PretreatmentNecessary.Trim();

        if (pcbvo.NoisePollution != null && pcbvo.NoisePollution != "")
            com.Parameters.Add("NoisePollution", SqlDbType.VarChar).Value = pcbvo.NoisePollution.Trim();

        if (pcbvo.OdourPRoblem != null && pcbvo.OdourPRoblem != "")
            com.Parameters.Add("OdourPRoblem", SqlDbType.VarChar).Value = pcbvo.OdourPRoblem.Trim();

        if (pcbvo.ThermalPollution != null && pcbvo.ThermalPollution != "")
            com.Parameters.Add("ThermalPollution", SqlDbType.VarChar).Value = pcbvo.ThermalPollution.Trim();

        if (pcbvo.PolMonitoring_Cost != null && pcbvo.PolMonitoring_Cost != "")
            com.Parameters.Add("PolMonitoring_Cost", SqlDbType.VarChar).Value = pcbvo.PolMonitoring_Cost.Trim();

        if (pcbvo.PolControl_Cost != null && pcbvo.PolControl_Cost != "")
            com.Parameters.Add("PolControl_Cost", SqlDbType.VarChar).Value = pcbvo.PolControl_Cost.Trim();

        if (pcbvo.Recurring_Cost != null && pcbvo.Recurring_Cost != "")
            com.Parameters.Add("Recurring_Cost", SqlDbType.VarChar).Value = pcbvo.Recurring_Cost.Trim();

        int Questionnaireid = Convert.ToInt32(ApplNo.Trim());
        int valid = 0;

        //con.OpenConnection();
        //com.Connection = con.GetConnection;
        object returnvalue = 0;
        try
        {
            //return com.ExecuteNonQuery();
            //  return Convert.ToInt32(com.ExecuteScalar());
            returnvalue = com.ExecuteScalar();

            SqlCommand cmdDel = new SqlCommand("USP_DEL_LandFeaturesPCB", connection);
            cmdDel.CommandType = CommandType.StoredProcedure;
            cmdDel.Transaction = transaction;
            cmdDel.Connection = connection;
            cmdDel.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = Questionnaireid;
            cmdDel.ExecuteNonQuery();
            foreach (LandFeatures featurevo in lstFeaturevo)
            {
                SqlCommand cmdInsert = new SqlCommand("[USP_INS_Features_PCB]", connection);
                cmdInsert.CommandType = CommandType.StoredProcedure;
                cmdInsert.Transaction = transaction;
                cmdInsert.Connection = connection;

                cmdInsert.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = Questionnaireid;
                if (featurevo.Feature != null)
                    cmdInsert.Parameters.AddWithValue("FeatureCd", featurevo.Feature);
                if (featurevo.Name != null)
                    cmdInsert.Parameters.AddWithValue("@Name", featurevo.Name);
                if (featurevo.Distance != null)
                    cmdInsert.Parameters.AddWithValue("@Distance", featurevo.Distance);

                cmdInsert.Parameters.AddWithValue("@Created_by", Created_by.Trim());
                cmdInsert.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmdInsert.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmdInsert.ExecuteNonQuery();
                valid = (Int32)cmdInsert.Parameters["@Valid"].Value;
            }
            SqlCommand cmdDelbyp = new SqlCommand("USP_DEL_ByProductPCB", connection);
            cmdDelbyp.CommandType = CommandType.StoredProcedure;
            cmdDelbyp.Transaction = transaction;
            cmdDelbyp.Connection = connection;
            cmdDelbyp.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = Questionnaireid;
            cmdDelbyp.ExecuteNonQuery();
            //[USP_DEL_ByProductPCB]  []
            foreach (ByProduct productvo in lstByProduct)
            {
                SqlCommand cmdInsertByp = new SqlCommand("[USP_INS_ByProduct_PCB]", connection);
                cmdInsertByp.CommandType = CommandType.StoredProcedure;
                cmdInsertByp.Transaction = transaction;
                cmdInsertByp.Connection = connection;

                cmdInsertByp.Parameters.AddWithValue("@QuestionnaireId", SqlDbType.Int).Value = Questionnaireid;
                if (productvo.Units != null)
                    cmdInsertByp.Parameters.AddWithValue("Units", productvo.Units);
                if (productvo.Name != null)
                    cmdInsertByp.Parameters.AddWithValue("Name", productvo.Name);
                if (productvo.Capacity != null)
                    cmdInsertByp.Parameters.AddWithValue("Capacity", productvo.Capacity);

                cmdInsertByp.Parameters.AddWithValue("@Created_by", Created_by.Trim());
                cmdInsertByp.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmdInsertByp.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmdInsertByp.ExecuteNonQuery();
                valid = (Int32)cmdInsertByp.Parameters["@Valid"].Value;
            }
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
            return 0;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        if (returnvalue == DBNull.Value || returnvalue == null)
            return 0;
        else
            return Convert.ToInt32(returnvalue);

    }



    public DataSet getAdditionalPaymentDetailsCFO(string uidno, string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ADDITIONALPAYMENTDETAILS_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (deptid.Trim() != "" || deptid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = deptid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getfiremeanofescapedetailsonuidCFO(string uidno, string applid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_MEANSOFESCAPE_FIRE_CFO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (uidno.Trim() != "" || uidno.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;
            }
            if (applid.Trim() != "" || applid.Trim() != null)
            {
                da.SelectCommand.Parameters.Add("@APPID", SqlDbType.VarChar).Value = applid.ToString();
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DEPARTMENTID", SqlDbType.VarChar).Value = null;
            }
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertFormIIIIncentives(string CreatedBy, int Incentiveid, string AmountClaimed, List<FormIIIPower> lstFormIIIPower, List<FormIIIEnergy> lstFormIIIEnergy)
    {
        int valid = 1;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand cmdFormIII = new SqlCommand("USP_INS_FormIII_Incentives", connection);
            cmdFormIII.CommandType = CommandType.StoredProcedure;
            cmdFormIII.Transaction = transaction;
            cmdFormIII.Connection = connection;
            cmdFormIII.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
            cmdFormIII.Parameters.AddWithValue("@AmountClaimed", SqlDbType.VarChar).Value = AmountClaimed;
            cmdFormIII.Parameters.AddWithValue("@Created_By", SqlDbType.VarChar).Value = CreatedBy;
            cmdFormIII.ExecuteNonQuery();

            SqlCommand cmdDel = new SqlCommand("USP_DEL_FormIII_Power_Incentives", connection);
            cmdDel.CommandType = CommandType.StoredProcedure;
            cmdDel.Transaction = transaction;
            cmdDel.Connection = connection;
            cmdDel.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
            cmdDel.ExecuteNonQuery();

            foreach (FormIIIPower formiiipower in lstFormIIIPower)
            {
                SqlCommand cmdInsert = new SqlCommand("USP_INS_FormIII_Power_Incentives", connection);
                cmdInsert.CommandType = CommandType.StoredProcedure;
                cmdInsert.Transaction = transaction;
                cmdInsert.Connection = connection;
                cmdInsert.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
                if (formiiipower.FinancialYear != null)
                    cmdInsert.Parameters.AddWithValue("@FinancialYear", formiiipower.FinancialYear);
                if (formiiipower.UnitsConsumed != null)
                    cmdInsert.Parameters.AddWithValue("@UnitsConsumed", formiiipower.UnitsConsumed);
                if (formiiipower.Amount != null)
                    cmdInsert.Parameters.AddWithValue("@Amount", formiiipower.Amount);

                cmdInsert.Parameters.AddWithValue("@Created_by", CreatedBy);
                cmdInsert.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmdInsert.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmdInsert.ExecuteNonQuery();
                valid = (Int32)cmdInsert.Parameters["@Valid"].Value;
            }

            SqlCommand cmdDelEnergy = new SqlCommand("USP_DEL_FormIII_Energy_Incentives", connection);
            cmdDelEnergy.CommandType = CommandType.StoredProcedure;
            cmdDelEnergy.Transaction = transaction;
            cmdDelEnergy.Connection = connection;
            cmdDelEnergy.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
            cmdDelEnergy.ExecuteNonQuery();

            foreach (FormIIIEnergy formiiienergy in lstFormIIIEnergy)
            {
                SqlCommand cmdInsert = new SqlCommand("USP_INS_FormIII_Energy_Incentives", connection);
                cmdInsert.CommandType = CommandType.StoredProcedure;
                cmdInsert.Transaction = transaction;
                cmdInsert.Connection = connection;
                cmdInsert.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
                if (formiiienergy.FinancialYear != null)
                    cmdInsert.Parameters.AddWithValue("@FinancialYear", formiiienergy.FinancialYear);
                if (formiiienergy.F_UnitsConsumed != null)
                    cmdInsert.Parameters.AddWithValue("@F_UnitsConsumed", formiiienergy.F_UnitsConsumed);
                if (formiiienergy.F_Amount != null)
                    cmdInsert.Parameters.AddWithValue("@F_Amount", formiiienergy.F_Amount);
                if (formiiienergy.S_UnitsConsumed != null)
                    cmdInsert.Parameters.AddWithValue("@S_UnitsConsumed", formiiienergy.S_UnitsConsumed);
                if (formiiienergy.S_Amount != null)
                    cmdInsert.Parameters.AddWithValue("@S_Amount", formiiienergy.S_Amount);

                cmdInsert.Parameters.AddWithValue("@Created_by", CreatedBy);
                cmdInsert.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmdInsert.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmdInsert.ExecuteNonQuery();
                valid = (Int32)cmdInsert.Parameters["@Valid"].Value;
            }

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public int InsertFormIVIncentives(string CreatedBy, int Incentiveid, List<FormIV> lstFormIV)
    {
        int valid = 1;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand cmdDel = new SqlCommand("USP_DEL_FormIV_Incentives", connection);
            cmdDel.CommandType = CommandType.StoredProcedure;
            cmdDel.Transaction = transaction;
            cmdDel.Connection = connection;
            cmdDel.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
            cmdDel.ExecuteNonQuery();

            foreach (FormIV formiv in lstFormIV)
            {
                SqlCommand cmdInsert = new SqlCommand("USP_INS_FormIV_Incentives", connection);
                cmdInsert.CommandType = CommandType.StoredProcedure;
                cmdInsert.Transaction = transaction;
                cmdInsert.Connection = connection;
                cmdInsert.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
                if (formiv.FinancialYear != null)
                    cmdInsert.Parameters.AddWithValue("@FinancialYear", formiv.FinancialYear);
                if (formiv.IntrestPaid != null)
                    cmdInsert.Parameters.AddWithValue("@IntrestPaid", formiv.IntrestPaid);
                if (formiv.RateofIntrest != null)
                    cmdInsert.Parameters.AddWithValue("@RateofIntrest", formiv.RateofIntrest);
                if (formiv.IntrestPenaltyPaid != null)
                    cmdInsert.Parameters.AddWithValue("@IntrestPenaltyPaid", formiv.IntrestPenaltyPaid);
                if (formiv.Eligible != null)
                    cmdInsert.Parameters.AddWithValue("@Eligible", formiv.Eligible);
                if (formiv.AmountClaimed != null)
                    cmdInsert.Parameters.AddWithValue("@AmountClaimed", formiv.AmountClaimed);

                cmdInsert.Parameters.AddWithValue("@Created_by", CreatedBy);
                cmdInsert.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmdInsert.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmdInsert.ExecuteNonQuery();
                valid = (Int32)cmdInsert.Parameters["@Valid"].Value;
            }

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public int InsertFormVIncentives(string CreatedBy, int Incentiveid, List<FormVProduction> lstFormVProduction, List<FormVSales> lstFormVSales)
    {
        int valid = 1;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand cmdDel = new SqlCommand("USP_DEL_FormV_Production_Incentives", connection);
            cmdDel.CommandType = CommandType.StoredProcedure;
            cmdDel.Transaction = transaction;
            cmdDel.Connection = connection;
            cmdDel.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
            cmdDel.ExecuteNonQuery();

            foreach (FormVProduction formvproduction in lstFormVProduction)
            {
                SqlCommand cmdInsert = new SqlCommand("USP_INS_FormV_Production_Incentives", connection);
                cmdInsert.CommandType = CommandType.StoredProcedure;
                cmdInsert.Transaction = transaction;
                cmdInsert.Connection = connection;
                cmdInsert.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
                if (formvproduction.FinancialYear != null)
                    cmdInsert.Parameters.AddWithValue("@FinancialYear", formvproduction.FinancialYear);
                if (formvproduction.Unit != null)
                    cmdInsert.Parameters.AddWithValue("@Unit", formvproduction.Unit);
                if (formvproduction.Value != null)
                    cmdInsert.Parameters.AddWithValue("@Value", formvproduction.Value);
                if (formvproduction.Quantity != null)
                    cmdInsert.Parameters.AddWithValue("@Quantity", formvproduction.Quantity);

                cmdInsert.Parameters.AddWithValue("@Created_by", CreatedBy);
                cmdInsert.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmdInsert.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmdInsert.ExecuteNonQuery();
                valid = (Int32)cmdInsert.Parameters["@Valid"].Value;
            }

            SqlCommand cmdDelEnergy = new SqlCommand("USP_DEL_FormV_SalesTax_Incentives", connection);
            cmdDelEnergy.CommandType = CommandType.StoredProcedure;
            cmdDelEnergy.Transaction = transaction;
            cmdDelEnergy.Connection = connection;
            cmdDelEnergy.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
            cmdDelEnergy.ExecuteNonQuery();

            foreach (FormVSales formvsales in lstFormVSales)
            {
                SqlCommand cmdInsert = new SqlCommand("USP_INS_FormV_SalesTax_Incentives", connection);
                cmdInsert.CommandType = CommandType.StoredProcedure;
                cmdInsert.Transaction = transaction;
                cmdInsert.Connection = connection;
                cmdInsert.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
                if (formvsales.FinancialYear != null)
                    cmdInsert.Parameters.AddWithValue("@FinancialYear", formvsales.FinancialYear);
                if (formvsales.F_AmountPaid != null)
                    cmdInsert.Parameters.AddWithValue("@F_AmountPaid", formvsales.F_AmountPaid);
                if (formvsales.F_AmountClaimed != null)
                    cmdInsert.Parameters.AddWithValue("@F_AmountClaimed", formvsales.F_AmountClaimed);
                if (formvsales.S_AmountPaid != null)
                    cmdInsert.Parameters.AddWithValue("@S_AmountPaid", formvsales.S_AmountPaid);
                if (formvsales.S_AmountClaimed != null)
                    cmdInsert.Parameters.AddWithValue("@S_AmountClaimed", formvsales.S_AmountClaimed);

                cmdInsert.Parameters.AddWithValue("@Created_by", CreatedBy);
                cmdInsert.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmdInsert.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmdInsert.ExecuteNonQuery();
                valid = (Int32)cmdInsert.Parameters["@Valid"].Value;
            }

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    //public DataSet GetFormIIIIncentives(int incentiveid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_FormIIIInentives", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveId", SqlDbType.Int).Value = incentiveid;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    //public DataSet GetFormIVIncentives(int incentiveid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_FormIVInentives", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveId", SqlDbType.Int).Value = incentiveid;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    //public DataSet GetFormVIncentives(int incentiveid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_FormVInentives", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveId", SqlDbType.Int).Value = incentiveid;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public void InsertIncentiveAttachment(string incentiveid, string mstid, string attachmentid, string filename, string filepath, string created_by)
    {
        try
        {
            SqlConnection connection = new SqlConnection(str);
            SqlTransaction transaction = null;
            connection.Open();
            transaction = connection.BeginTransaction();
            SqlCommand cmdEnj = new SqlCommand("[InsUpdDeltd_Incentive_Uploads_Incentives]", connection);
            cmdEnj.CommandType = CommandType.StoredProcedure;
            cmdEnj.Transaction = transaction;
            cmdEnj.Connection = connection;

            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
            cmdEnj.Parameters.AddWithValue("@IncentiveID", SqlDbType.Int).Value = Convert.ToInt32(incentiveid);
            if (mstid != "NA")
                cmdEnj.Parameters.AddWithValue("@mstid", SqlDbType.Int).Value = Convert.ToInt32(mstid);
            else if (mstid == "NA")
                cmdEnj.Parameters.AddWithValue("@mstid", mstid);
            cmdEnj.Parameters.AddWithValue("@AttachmentId", SqlDbType.Int).Value = Convert.ToInt32(attachmentid);
            cmdEnj.Parameters.AddWithValue("@FileNm", filename);
            cmdEnj.Parameters.AddWithValue("@FilePath", filepath);
            cmdEnj.Parameters.AddWithValue("@Createdby", created_by);

            cmdEnj.ExecuteNonQuery();
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            // cmdEnj.Dispose();
            con.CloseConnection();
        }
    }


    public void InsertIncentiveAttachmentQueryResponse(string incentiveid, string attachmentid, string filename, string filepath, string created_by, string Typeid, string IPAddress)
    {
        try
        {
            SqlConnection connection = new SqlConnection(str);
            SqlTransaction transaction = null;
            connection.Open();
            transaction = connection.BeginTransaction();
            SqlCommand cmdEnj = new SqlCommand("[InsUpdDeltd_Incentive_Uploads_Incentives_Query]", connection);
            cmdEnj.CommandType = CommandType.StoredProcedure;
            cmdEnj.Transaction = transaction;
            cmdEnj.Connection = connection;

            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
            cmdEnj.Parameters.AddWithValue("@IncentiveID", SqlDbType.Int).Value = Convert.ToInt32(incentiveid);
            cmdEnj.Parameters.AddWithValue("@AttachmentId", SqlDbType.Int).Value = Convert.ToInt32(attachmentid);
            cmdEnj.Parameters.AddWithValue("@FileNm", filename);
            cmdEnj.Parameters.AddWithValue("@FilePath", filepath);
            cmdEnj.Parameters.AddWithValue("@Createdby", created_by);
            cmdEnj.Parameters.AddWithValue("@MstIncentiveId", Typeid);
            cmdEnj.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

            cmdEnj.ExecuteNonQuery();
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            // cmdEnj.Dispose();
            con.CloseConnection();
        }
    }

    public void InsertIncentiveAttachmentQueryResponsenew(string incentiveid, string attachmentid, string filename, string filepath, string created_by, string Typeid, string attachmentmainid, string queryresponseattachmentid)
    {
        try
        {
            SqlConnection connection = new SqlConnection(str);
            SqlTransaction transaction = null;
            connection.Open();
            transaction = connection.BeginTransaction();
            SqlCommand cmdEnj = new SqlCommand("[InsUpdDeltd_Incentive_Uploads_Incentives_QueryResponce]", connection);
            cmdEnj.CommandType = CommandType.StoredProcedure;
            cmdEnj.Transaction = transaction;
            cmdEnj.Connection = connection;

            //SqlDataAdapter da1 = new SqlDataAdapter(cmdEnj);
            cmdEnj.Parameters.AddWithValue("@IncentiveID", SqlDbType.Int).Value = Convert.ToInt32(incentiveid);
            cmdEnj.Parameters.AddWithValue("@AttachmentId", SqlDbType.BigInt).Value = Convert.ToInt64(attachmentid);
            cmdEnj.Parameters.AddWithValue("@FileNm", filename);
            cmdEnj.Parameters.AddWithValue("@FilePath", filepath);
            cmdEnj.Parameters.AddWithValue("@Createdby", created_by);
            cmdEnj.Parameters.AddWithValue("@MstIncentiveId", Typeid);
            cmdEnj.Parameters.AddWithValue("@attachmentmainid", SqlDbType.Int).Value = Convert.ToInt32(attachmentmainid);
            cmdEnj.Parameters.AddWithValue("@queryresponseattachmentid", SqlDbType.BigInt).Value = Convert.ToInt64(queryresponseattachmentid);


            cmdEnj.ExecuteNonQuery();
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            // cmdEnj.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet GetIncentivesStampDutydata1(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_StampDuty1]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncentivesStampDutydata2(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_StampDuty2]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncentivesStampDutydata3(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_StampDuty3]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncentivesStampDutydata4(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_StampDuty4]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //22.
    // 2). Stamp Duty.aspx: method
    public string InsertIncentStampDutypsr(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_DUTY";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.AreaRegdSaledeed != null)
                com.Parameters.AddWithValue("@AreaRegdSaledeed", objvo1.AreaRegdSaledeed);
            else
                com.Parameters.AddWithValue("@AreaRegdSaledeed", null);

            if (objvo1.PlnthAreaBuild != null)
                com.Parameters.AddWithValue("@PlnthAreaBuild", objvo1.PlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@PlnthAreaBuild", null);

            if (objvo1.FivePlnthAreaBuild != null)
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", objvo1.FivePlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", null);

            if (objvo1.AreaReqdAppraisal != null)
                com.Parameters.AddWithValue("@AreaReqdAppraisal", objvo1.AreaReqdAppraisal);
            else
                com.Parameters.AddWithValue("@AreaReqdAppraisal", null);

            if (objvo1.AreaReqdTSPCB != null)
                com.Parameters.AddWithValue("@AreaReqdTSPCB", objvo1.AreaReqdTSPCB);
            else
                com.Parameters.AddWithValue("@AreaReqdTSPCB", null);

            if (objvo1.NatureofTrans != null)
                com.Parameters.AddWithValue("@NatureofTrans", objvo1.NatureofTrans);
            else
                com.Parameters.AddWithValue("@NatureofTrans", null);

            if (objvo1.SubRegOffc != null)
                com.Parameters.AddWithValue("@SubRegOffc", objvo1.SubRegOffc);
            else
                com.Parameters.AddWithValue("@SubRegOffc", null);

            if (objvo1.RegdDeedNo != null)
                com.Parameters.AddWithValue("@RegdDeedNo", objvo1.RegdDeedNo);
            else
                com.Parameters.AddWithValue("@RegdDeedNo", null);

            string date = Convert.ToDateTime(objvo1.RegnDate).ToShortDateString();

            if (objvo1.RegnDate != null)
                com.Parameters.AddWithValue("@regndate", objvo1.RegnDate);
            else
                com.Parameters.AddWithValue("@regndate", null);


            if (objvo1.StampTranfrDutyAP != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAP", objvo1.StampTranfrDutyAP);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAP", null);


            if (objvo1.MortgageHypothDutyAP != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", objvo1.MortgageHypothDutyAP);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", null);

            if (objvo1.LandConvrChrgAP != null)
                com.Parameters.AddWithValue("@LandConvrChrgAP", objvo1.LandConvrChrgAP);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAP", null);

            if (objvo1.LandCostIeIdaIpAP != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", objvo1.LandCostIeIdaIpAP);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", null);

            if (objvo1.StampTranfrDutyAC != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAC", objvo1.StampTranfrDutyAC);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAC", null);

            if (objvo1.MortgageHypothDutyAC != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", objvo1.MortgageHypothDutyAC);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", null);

            if (objvo1.LandConvrChrgAC != null)
                com.Parameters.AddWithValue("@LandConvrChrgAC", objvo1.LandConvrChrgAC);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAC", null);


            if (objvo1.LandCostIeIdaIpAC != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", objvo1.LandCostIeIdaIpAC);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);



            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public string InsertIncentStampDuty1(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_DUTY_STAMPDUTY";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.AreaRegdSaledeed != null)
                com.Parameters.AddWithValue("@AreaRegdSaledeed", objvo1.AreaRegdSaledeed);
            else
                com.Parameters.AddWithValue("@AreaRegdSaledeed", null);

            if (objvo1.PlnthAreaBuild != null)
                com.Parameters.AddWithValue("@PlnthAreaBuild", objvo1.PlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@PlnthAreaBuild", null);

            if (objvo1.FivePlnthAreaBuild != null)
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", objvo1.FivePlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", null);

            if (objvo1.AreaReqdAppraisal != null)
                com.Parameters.AddWithValue("@AreaReqdAppraisal", objvo1.AreaReqdAppraisal);
            else
                com.Parameters.AddWithValue("@AreaReqdAppraisal", null);

            if (objvo1.AreaReqdTSPCB != null)
                com.Parameters.AddWithValue("@AreaReqdTSPCB", objvo1.AreaReqdTSPCB);
            else
                com.Parameters.AddWithValue("@AreaReqdTSPCB", null);

            if (objvo1.NatureofTrans != null)
                com.Parameters.AddWithValue("@NatureofTrans", objvo1.NatureofTrans);
            else
                com.Parameters.AddWithValue("@NatureofTrans", null);

            if (objvo1.SubRegOffc != null)
                com.Parameters.AddWithValue("@SubRegOffc", objvo1.SubRegOffc);
            else
                com.Parameters.AddWithValue("@SubRegOffc", null);

            if (objvo1.RegdDeedNo != null)
                com.Parameters.AddWithValue("@RegdDeedNo", objvo1.RegdDeedNo);
            else
                com.Parameters.AddWithValue("@RegdDeedNo", null);

            string date = Convert.ToDateTime(objvo1.RegnDate).ToShortDateString();

            if (objvo1.RegnDate != null)
                com.Parameters.AddWithValue("@regndate", objvo1.RegnDate);
            else
                com.Parameters.AddWithValue("@regndate", null);


            if (objvo1.StampTranfrDutyAP != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAP", objvo1.StampTranfrDutyAP);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAP", null);


            if (objvo1.MortgageHypothDutyAP != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", objvo1.MortgageHypothDutyAP);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", null);

            if (objvo1.LandConvrChrgAP != null)
                com.Parameters.AddWithValue("@LandConvrChrgAP", objvo1.LandConvrChrgAP);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAP", null);

            if (objvo1.LandCostIeIdaIpAP != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", objvo1.LandCostIeIdaIpAP);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", null);

            if (objvo1.StampTranfrDutyAC != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAC", objvo1.StampTranfrDutyAC);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAC", null);

            if (objvo1.MortgageHypothDutyAC != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", objvo1.MortgageHypothDutyAC);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", null);

            if (objvo1.LandConvrChrgAC != null)
                com.Parameters.AddWithValue("@LandConvrChrgAC", objvo1.LandConvrChrgAC);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAC", null);


            if (objvo1.LandCostIeIdaIpAC != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", objvo1.LandCostIeIdaIpAC);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);



            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public string InsertIncentStampDuty2(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_DUTY_Mortgage";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.AreaRegdSaledeed != null)
                com.Parameters.AddWithValue("@AreaRegdSaledeed", objvo1.AreaRegdSaledeed);
            else
                com.Parameters.AddWithValue("@AreaRegdSaledeed", null);

            if (objvo1.PlnthAreaBuild != null)
                com.Parameters.AddWithValue("@PlnthAreaBuild", objvo1.PlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@PlnthAreaBuild", null);

            if (objvo1.FivePlnthAreaBuild != null)
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", objvo1.FivePlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", null);

            if (objvo1.AreaReqdAppraisal != null)
                com.Parameters.AddWithValue("@AreaReqdAppraisal", objvo1.AreaReqdAppraisal);
            else
                com.Parameters.AddWithValue("@AreaReqdAppraisal", null);

            if (objvo1.AreaReqdTSPCB != null)
                com.Parameters.AddWithValue("@AreaReqdTSPCB", objvo1.AreaReqdTSPCB);
            else
                com.Parameters.AddWithValue("@AreaReqdTSPCB", null);

            if (objvo1.NatureofTrans != null)
                com.Parameters.AddWithValue("@NatureofTrans", objvo1.NatureofTrans);
            else
                com.Parameters.AddWithValue("@NatureofTrans", null);

            if (objvo1.SubRegOffc != null)
                com.Parameters.AddWithValue("@SubRegOffc", objvo1.SubRegOffc);
            else
                com.Parameters.AddWithValue("@SubRegOffc", null);

            if (objvo1.RegdDeedNo != null)
                com.Parameters.AddWithValue("@RegdDeedNo", objvo1.RegdDeedNo);
            else
                com.Parameters.AddWithValue("@RegdDeedNo", null);

            string date = Convert.ToDateTime(objvo1.RegnDate).ToShortDateString();

            if (objvo1.RegnDate != null)
                com.Parameters.AddWithValue("@regndate", objvo1.RegnDate);
            else
                com.Parameters.AddWithValue("@regndate", null);


            if (objvo1.StampTranfrDutyAP != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAP", objvo1.StampTranfrDutyAP);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAP", null);


            if (objvo1.MortgageHypothDutyAP != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", objvo1.MortgageHypothDutyAP);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", null);

            if (objvo1.LandConvrChrgAP != null)
                com.Parameters.AddWithValue("@LandConvrChrgAP", objvo1.LandConvrChrgAP);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAP", null);

            if (objvo1.LandCostIeIdaIpAP != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", objvo1.LandCostIeIdaIpAP);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", null);

            if (objvo1.StampTranfrDutyAC != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAC", objvo1.StampTranfrDutyAC);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAC", null);

            if (objvo1.MortgageHypothDutyAC != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", objvo1.MortgageHypothDutyAC);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", null);

            if (objvo1.LandConvrChrgAC != null)
                com.Parameters.AddWithValue("@LandConvrChrgAC", objvo1.LandConvrChrgAC);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAC", null);


            if (objvo1.LandCostIeIdaIpAC != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", objvo1.LandCostIeIdaIpAC);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);



            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public int insertCentralInspectionDetails(string UnitName, string Location_District, string Location_Mandal, string Location_Village,
     string Inspection_Authority_Desg, string Date_Inspection, string Date_Uploading_Inspection,
      string File_Link, string Department, string Active_Status, string Transaction_Date, string Created_by, string Created_dt,
      string Modified_by, string Modified_dt, string Type_of_Inspection, string Loction_of_Unit, string File_Link2, string File_Link3,
  string File_Link4, string PromoterMobileNo, string PromoterEmail, string PromoterName, string InspnSub_Name, string InspnSubEMail, string InspnSubMobileNo)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "CentralInspectioninsert";

        if (UnitName.Trim() == "" || UnitName.Trim() == null)
            com.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = UnitName.ToString();


        if (Location_District.Trim() == "" || Location_District.Trim() == null || Location_District.Trim() == "--Select--")
            com.Parameters.Add("@Location_District", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Location_District", SqlDbType.VarChar).Value = Location_District.ToString();

        if (Location_Mandal.Trim() == "" || Location_Mandal.Trim() == null || Location_Mandal.Trim() == "--Select--")
            com.Parameters.Add("@Location_Mandal", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Location_Mandal", SqlDbType.VarChar).Value = Location_Mandal.ToString();

        if (Location_Village.Trim() == "" || Location_Village.Trim() == null || Location_Village.Trim() == "--Select--")
            com.Parameters.Add("@Location_Village", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Location_Village", SqlDbType.VarChar).Value = Location_Village.ToString();

        if (Inspection_Authority_Desg.Trim() == "" || Inspection_Authority_Desg.Trim() == null)
            com.Parameters.Add("@Inspection_Authority_Desg", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Inspection_Authority_Desg", SqlDbType.VarChar).Value = Inspection_Authority_Desg.ToString();

        if (Date_Inspection.Trim() == "" || Date_Inspection.Trim() == null)
            com.Parameters.Add("@Date_Inspection", SqlDbType.VarChar).Value = "%";
        else
            com.Parameters.Add("@Date_Inspection", SqlDbType.VarChar).Value = Date_Inspection.ToString();

        if (Date_Uploading_Inspection.Trim() == "" || Date_Uploading_Inspection.Trim() == null)
            com.Parameters.Add("@Date_Uploading_Inspection", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Date_Uploading_Inspection", SqlDbType.VarChar).Value = Date_Uploading_Inspection.ToString();


        if (File_Link.Trim() == "" || File_Link.Trim() == null)
            com.Parameters.Add("@File_Link", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_Link", SqlDbType.VarChar).Value = File_Link.ToString();

        if (Department.Trim() == "" || Department.Trim() == null)
            com.Parameters.Add("@Department", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();

        if (Active_Status.Trim() == "" || Active_Status.Trim() == null)
            com.Parameters.Add("@Active_Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Active_Status", SqlDbType.VarChar).Value = Active_Status.ToString();

        if (Transaction_Date.Trim() == "" || Transaction_Date.Trim() == null)
            com.Parameters.Add("@Transaction_Date", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Transaction_Date", SqlDbType.VarChar).Value = Transaction_Date.ToString();

        if (Created_by.Trim() == "" || Created_by.Trim() == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Convert.ToInt32(Created_by.ToString());

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null)
            com.Parameters.Add("@Created_dt", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_dt", SqlDbType.VarChar).Value = Created_dt.ToString();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Convert.ToInt32(Modified_by.ToString());

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null)
            com.Parameters.Add("@Modified_dt", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_dt", SqlDbType.VarChar).Value = Modified_dt.ToString();

        if (Type_of_Inspection.Trim() == "" || Type_of_Inspection.Trim() == null)
            com.Parameters.Add("@Type_of_Inspection", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Type_of_Inspection", SqlDbType.VarChar).Value = Type_of_Inspection.ToString();



        if (Loction_of_Unit.Trim() == "" || Loction_of_Unit.Trim() == null)
            com.Parameters.Add("@Loction_of_Unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loction_of_Unit", SqlDbType.VarChar).Value = Loction_of_Unit.ToString();

        if (File_Link2.Trim() == "" || File_Link2.Trim() == null)
            com.Parameters.Add("@File_Link2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_Link2", SqlDbType.VarChar).Value = File_Link2.ToString();


        if (File_Link3.Trim() == "" || File_Link3.Trim() == null)
            com.Parameters.Add("@File_Link3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_Link3", SqlDbType.VarChar).Value = File_Link3.ToString();

        if (File_Link4.Trim() == "" || File_Link4.Trim() == null)
            com.Parameters.Add("@File_Link4", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@File_Link4", SqlDbType.VarChar).Value = File_Link4.ToString();




        if (PromoterMobileNo.Trim() == "" || PromoterMobileNo.Trim() == null)
            com.Parameters.Add("@PromoterMobileNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PromoterMobileNo", SqlDbType.VarChar).Value = PromoterMobileNo.ToString();

        if (PromoterEmail.Trim() == "" || PromoterEmail.Trim() == null)
            com.Parameters.Add("@PromoterEmail", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PromoterEmail", SqlDbType.VarChar).Value = PromoterEmail.ToString();


        if (PromoterName.Trim() == "" || PromoterName.Trim() == null)
            com.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PromoterName", SqlDbType.VarChar).Value = PromoterName.ToString();

        if (InspnSub_Name.Trim() == "" || InspnSub_Name.Trim() == null)
            com.Parameters.Add("@InspSubTO_Name", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspSubTO_Name", SqlDbType.VarChar).Value = InspnSub_Name.ToString();

        if (InspnSubEMail.Trim() == "" || InspnSubEMail.Trim() == null)
            com.Parameters.Add("@InspSubTO_Email", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspSubTO_Email", SqlDbType.VarChar).Value = InspnSubEMail.ToString();

        if (InspnSubMobileNo.Trim() == "" || InspnSubMobileNo.Trim() == null)
            com.Parameters.Add("@InspSubTO_MobileNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspSubTO_MobileNo", SqlDbType.VarChar).Value = InspnSubMobileNo.ToString();



        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    public string InsertIncentStampDuty3(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_DUTY_LandConversion";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.AreaRegdSaledeed != null)
                com.Parameters.AddWithValue("@AreaRegdSaledeed", objvo1.AreaRegdSaledeed);
            else
                com.Parameters.AddWithValue("@AreaRegdSaledeed", null);

            if (objvo1.PlnthAreaBuild != null)
                com.Parameters.AddWithValue("@PlnthAreaBuild", objvo1.PlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@PlnthAreaBuild", null);

            if (objvo1.FivePlnthAreaBuild != null)
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", objvo1.FivePlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", null);

            if (objvo1.AreaReqdAppraisal != null)
                com.Parameters.AddWithValue("@AreaReqdAppraisal", objvo1.AreaReqdAppraisal);
            else
                com.Parameters.AddWithValue("@AreaReqdAppraisal", null);

            if (objvo1.AreaReqdTSPCB != null)
                com.Parameters.AddWithValue("@AreaReqdTSPCB", objvo1.AreaReqdTSPCB);
            else
                com.Parameters.AddWithValue("@AreaReqdTSPCB", null);

            if (objvo1.NatureofTrans != null)
                com.Parameters.AddWithValue("@NatureofTrans", objvo1.NatureofTrans);
            else
                com.Parameters.AddWithValue("@NatureofTrans", null);

            if (objvo1.SubRegOffc != null)
                com.Parameters.AddWithValue("@SubRegOffc", objvo1.SubRegOffc);
            else
                com.Parameters.AddWithValue("@SubRegOffc", null);

            if (objvo1.RegdDeedNo != null)
                com.Parameters.AddWithValue("@RegdDeedNo", objvo1.RegdDeedNo);
            else
                com.Parameters.AddWithValue("@RegdDeedNo", null);

            string date = Convert.ToDateTime(objvo1.RegnDate).ToShortDateString();

            if (objvo1.RegnDate != null)
                com.Parameters.AddWithValue("@regndate", objvo1.RegnDate);
            else
                com.Parameters.AddWithValue("@regndate", null);


            if (objvo1.StampTranfrDutyAP != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAP", objvo1.StampTranfrDutyAP);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAP", null);


            if (objvo1.MortgageHypothDutyAP != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", objvo1.MortgageHypothDutyAP);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", null);

            if (objvo1.LandConvrChrgAP != null)
                com.Parameters.AddWithValue("@LandConvrChrgAP", objvo1.LandConvrChrgAP);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAP", null);

            if (objvo1.LandCostIeIdaIpAP != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", objvo1.LandCostIeIdaIpAP);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", null);

            if (objvo1.StampTranfrDutyAC != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAC", objvo1.StampTranfrDutyAC);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAC", null);

            if (objvo1.MortgageHypothDutyAC != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", objvo1.MortgageHypothDutyAC);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", null);

            if (objvo1.LandConvrChrgAC != null)
                com.Parameters.AddWithValue("@LandConvrChrgAC", objvo1.LandConvrChrgAC);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAC", null);


            if (objvo1.LandCostIeIdaIpAC != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", objvo1.LandCostIeIdaIpAC);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);



            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public string InsertIncentStampDuty4(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_DUTY_LandCost";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.AreaRegdSaledeed != null)
                com.Parameters.AddWithValue("@AreaRegdSaledeed", objvo1.AreaRegdSaledeed);
            else
                com.Parameters.AddWithValue("@AreaRegdSaledeed", null);

            if (objvo1.PlnthAreaBuild != null)
                com.Parameters.AddWithValue("@PlnthAreaBuild", objvo1.PlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@PlnthAreaBuild", null);

            if (objvo1.FivePlnthAreaBuild != null)
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", objvo1.FivePlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", null);

            if (objvo1.AreaReqdAppraisal != null)
                com.Parameters.AddWithValue("@AreaReqdAppraisal", objvo1.AreaReqdAppraisal);
            else
                com.Parameters.AddWithValue("@AreaReqdAppraisal", null);

            if (objvo1.AreaReqdTSPCB != null)
                com.Parameters.AddWithValue("@AreaReqdTSPCB", objvo1.AreaReqdTSPCB);
            else
                com.Parameters.AddWithValue("@AreaReqdTSPCB", null);

            if (objvo1.NatureofTrans != null)
                com.Parameters.AddWithValue("@NatureofTrans", objvo1.NatureofTrans);
            else
                com.Parameters.AddWithValue("@NatureofTrans", null);

            if (objvo1.SubRegOffc != null)
                com.Parameters.AddWithValue("@SubRegOffc", objvo1.SubRegOffc);
            else
                com.Parameters.AddWithValue("@SubRegOffc", null);

            if (objvo1.RegdDeedNo != null)
                com.Parameters.AddWithValue("@RegdDeedNo", objvo1.RegdDeedNo);
            else
                com.Parameters.AddWithValue("@RegdDeedNo", null);

            string date = Convert.ToDateTime(objvo1.RegnDate).ToShortDateString();

            if (objvo1.RegnDate != null)
                com.Parameters.AddWithValue("@regndate", objvo1.RegnDate);
            else
                com.Parameters.AddWithValue("@regndate", null);


            if (objvo1.StampTranfrDutyAP != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAP", objvo1.StampTranfrDutyAP);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAP", null);


            if (objvo1.MortgageHypothDutyAP != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", objvo1.MortgageHypothDutyAP);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", null);

            if (objvo1.LandConvrChrgAP != null)
                com.Parameters.AddWithValue("@LandConvrChrgAP", objvo1.LandConvrChrgAP);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAP", null);

            if (objvo1.LandCostIeIdaIpAP != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", objvo1.LandCostIeIdaIpAP);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", null);

            if (objvo1.StampTranfrDutyAC != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAC", objvo1.StampTranfrDutyAC);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAC", null);

            if (objvo1.MortgageHypothDutyAC != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", objvo1.MortgageHypothDutyAC);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", null);

            if (objvo1.LandConvrChrgAC != null)
                com.Parameters.AddWithValue("@LandConvrChrgAC", objvo1.LandConvrChrgAC);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAC", null);


            if (objvo1.LandCostIeIdaIpAC != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", objvo1.LandCostIeIdaIpAC);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);



            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public DataSet GetFinancialYearIncentives(string Count)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FINANCIALYEARS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@YEARS", SqlDbType.VarChar).Value = Count;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet GetIncentivesfrom4data(string IncentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_FORM4DATA]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetIncentivesfrom9data(string IncentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_FORM9DATA]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetIncentivesfrom8data(string IncentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_FORM8DATA]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetIncentivesISdata(string IncentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_IS]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetIncentivesStampDutydata(string IncentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_StampDuty]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetIncentivesIIDFunddata(string IncentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_IIDF]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetIncentivesAdvSubsidySCST(string IncentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_AdvSubsidy_SCST]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}



    //public DataSet fetchIncentivedetIPONewINCType(string intDeptid, string Status, string IncentiveID, string IndustryName)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("fetchinsentivedetIPO_NewIncType", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

    //        if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "All" || IndustryName.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.ToString();

    //        if (IncentiveID.Trim() == "" || IncentiveID.Trim() == null || IncentiveID.Trim() == "All" || IncentiveID.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();




    //        if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public int UpdateInspectorNameNewIncType(string intApplicationid, string Deptname, string Modified_by, string EMiUdyogAadhar, string SentFrom, string Status)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        //com.CommandText = "UpdateInspectorName";
        com.CommandText = "UpdateInspectorName_NewIncType";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Deptname.Trim() == "" || Deptname.Trim() == null || Deptname.Trim() == "--Select--")
            com.Parameters.Add("@Deptname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Deptname", SqlDbType.VarChar).Value = Deptname.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();


        if (EMiUdyogAadhar.Trim() == "" || EMiUdyogAadhar.Trim() == null)

            com.Parameters.Add("@EMiUdyogAadhar", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@EMiUdyogAadhar", SqlDbType.VarChar).Value = EMiUdyogAadhar.Trim();

        if (SentFrom.Trim() == "" || SentFrom.Trim() == null)

            com.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)

            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();




        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }



        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    //public int UpdateInspectorNameNewIncTypeNew(string intApplicationid, string Deptname, string Modified_by, string EMiUdyogAadhar, string SentFrom, string Status, string MstIncentiveId, string IPAddress)
    public int UpdateInspectorNameNewIncTypeNew(string intApplicationid, string Deptname, string Modified_by, string EMiUdyogAadhar, string SentFrom, string Status, string MstIncentiveId, string IPAddress, string checkVerifyInsp)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        //com.CommandText = "UpdateInspectorName";
        com.CommandText = "[UpdateInspectorName_NewIncType_NEW]";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Deptname.Trim() == "" || Deptname.Trim() == null || Deptname.Trim() == "--Select--")
            com.Parameters.Add("@Deptname", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Deptname", SqlDbType.VarChar).Value = Deptname.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();


        if (EMiUdyogAadhar.Trim() == "" || EMiUdyogAadhar.Trim() == null)

            com.Parameters.Add("@EMiUdyogAadhar", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@EMiUdyogAadhar", SqlDbType.VarChar).Value = EMiUdyogAadhar.Trim();

        if (SentFrom.Trim() == "" || SentFrom.Trim() == null)

            com.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom.Trim();

        if (Status.Trim() == "" || Status.Trim() == null)

            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.Trim();

        com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MstIncentiveId.Trim();
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        com.Parameters.Add("@checkVerifyInsp", SqlDbType.VarChar).Value = checkVerifyInsp.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }



        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public int UpdateInspectionDateNewIncType(string intApplicationid, string InspectionDate, string Modified_by)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "UpdateInspectionDateNewIncType";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (InspectionDate.Trim() == "" || InspectionDate.Trim() == null)
            com.Parameters.Add("@InspectionDate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(InspectionDate);

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int UpdateInspectionDateNewIncTypeNew(string intApplicationid, string InspectionDate, string Modified_by, string MstIncentiveId, string IPAddress)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[UpdateInspectionDateNewIncType_new]";

        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (InspectionDate.Trim() == "" || InspectionDate.Trim() == null)
            com.Parameters.Add("@InspectionDate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@InspectionDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(InspectionDate);

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MstIncentiveId.Trim();
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public DataSet GetWaterArea(string distcd)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetHMWSSBArea]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (distcd.Trim().ToString() == "" || distcd.ToString().Trim() == null || distcd.ToString().Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Distcd", SqlDbType.VarChar).Value = DBNull.Value;
            else
                da.SelectCommand.Parameters.Add("@Distcd", SqlDbType.VarChar).Value = distcd.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetClusterReport(string FromDate, string Todate, string distcd, string mandalcd, string Villagecd, string Clusterid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_RPT_CLUSTER_REPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = FromDate;
            da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = Todate;
            da.SelectCommand.Parameters.Add("@DISTCD", SqlDbType.VarChar).Value = distcd;
            da.SelectCommand.Parameters.Add("@MANDALCD", SqlDbType.VarChar).Value = mandalcd;
            da.SelectCommand.Parameters.Add("@VILLAGECD", SqlDbType.VarChar).Value = Villagecd;

            da.SelectCommand.Parameters.Add("@CLUSTERID", SqlDbType.VarChar).Value = Clusterid;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // incentives dept flow start  


    public DataSet fetchIncentivedetnewSearchNewIncType(string intDistrictid, string intDeptid, string intstageid, string uid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("FETCHINC_DETAILS_NEWINCTYPENEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDistrictid.Trim() == "--Select--")
                intDistrictid = "0";

            if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "All" || intstageid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intStageId", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intStageId", SqlDbType.VarChar).Value = intstageid.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.SelectCommand.Parameters.Add("@uid", SqlDbType.VarChar).Value = uid.ToString();

            // da.SelectCommand.Parameters.Add("@INTDISTID", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@INTDISTID", SqlDbType.VarChar).Value = null;
            else
                da.SelectCommand.Parameters.Add("@INTDISTID", SqlDbType.VarChar).Value = intDistrictid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // incentives dept flow end
    public DataSet fetchIncentivedetIPONewINCType(string intDeptid, string Status, string IncentiveID, string IndustryName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchinsentivedetIPO_NewIncType", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "All" || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.ToString();

            if (IncentiveID.Trim() == "" || IncentiveID.Trim() == null || IncentiveID.Trim() == "All" || IncentiveID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet fetchIncentivedetIPONewINCTypeNew(string intDeptid, string Status, string IncentiveID, string IndustryName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchinsentivedetIPO_NewIncTypeNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "All" || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.ToString();

            if (IncentiveID.Trim() == "" || IncentiveID.Trim() == null || IncentiveID.Trim() == "All" || IncentiveID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //Addingmethods for OtherServices
    public DataSet GetEnterPreniourPayDetailsOtherServices(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetailsForOtherServices", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertUIDGenerationForServices(string intQuessionaireid, string intCFEEnterpid, string intDeptid, string intApprovalid, string Payment_Mode, string Payment_DDNo, string Payment_DDDate, string Payment_Amount, string BankName, string BankBranchName, string Payment_FileName, string Payment_FilePath, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string UIDNumber)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "sp_InsertUIDGenerationForOtherServices";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());

        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Payment_DDNo == "" || Payment_DDNo == null)
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_DDNo", SqlDbType.VarChar).Value = Payment_DDNo.Trim();

        if (UIDNumber.ToString().Trim() == "" || UIDNumber.ToString().Trim() == null)
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@UIDNumber", SqlDbType.VarChar).Value = UIDNumber.Trim();

        if (Payment_DDDate.Trim() == "" || Payment_DDDate.Trim() == null || Payment_DDDate.Trim() == "--Select--")
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Payment_DDDate", SqlDbType.DateTime).Value = cmf.convertDateIndia(Payment_DDDate.Trim());
        }

        if (Payment_Amount == "" || Payment_Amount == null)
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Amount", SqlDbType.Decimal).Value = Payment_Amount.Trim();

        if (Payment_Mode == "" || Payment_Mode == null)
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_Mode", SqlDbType.VarChar).Value = Payment_Mode.Trim();

        if (BankName == "" || BankName == null)
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankName", SqlDbType.VarChar).Value = BankName.Trim();

        if (BankBranchName == "" || BankBranchName == null)
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BankBranchName", SqlDbType.VarChar).Value = BankBranchName.Trim();

        if (Payment_FileName == "" || Payment_FileName == null)
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FileName", SqlDbType.VarChar).Value = Payment_FileName.Trim();

        if (Payment_FilePath == "" || Payment_FilePath == null)
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Payment_FilePath", SqlDbType.VarChar).Value = Payment_FilePath.Trim();

        if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }

        if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
        }


        if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
        }

        if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
        }

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    public int updatenonPaymentinOtherServices(string intQuessionaireCFOid, string Created_by, string HdfApprovalid, string HdfAmount)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "getUpdatedataswithoutpayments_OtherServices";

        if (intQuessionaireCFOid == "" || intQuessionaireCFOid == null)
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


        if (Created_by == "" || Created_by == null || Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = HdfApprovalid.Trim();
        com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = HdfAmount.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }

    //public int updatenonPaymentinOtherServices(string intQuessionaireCFOid, string Created_by, string HdfApprovalid, string HdfAmount)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "getUpdatedataswithoutpayments_OtherServices";

    //    if (intQuessionaireCFOid == "" || intQuessionaireCFOid == null)
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


    //    if (Created_by == "" || Created_by == null || Created_by == "--Select--")
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

    //    com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = HdfApprovalid.Trim();
    //    com.Parameters.Add("@Amount", SqlDbType.VarChar).Value = HdfAmount.Trim();
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        //return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteScalar());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }

    //}

    public DataSet GetEnterPreneurForOtherServices(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getOtherservicedatabyQues", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetOtherServicesPayDetailsPaidDet(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetOtherServicePayDetailsPaidDet", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetOtheServiceShowQuestionaries(string Created_by, string ApprovalId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCfeIdApprovlIdByCreatedBy", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Created_by.Trim() == "" || Created_by.Trim() == null)
                da.SelectCommand.Parameters.Add("@Createdby", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Createdby", SqlDbType.VarChar).Value = Created_by.ToString();

            if (ApprovalId.Trim() == "" || ApprovalId.Trim() == null)
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = ApprovalId.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet ValidateLoginReforms(string UserID, string Password, string Encpassword)//,string Dept
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {

            da = new SqlDataAdapter("[sp_ValidUserForOtherServices]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UserID.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
            }
            if (Password.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = Password.ToString();
            }
            if (Encpassword.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@Encpassword", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@Encpassword", SqlDbType.VarChar).Value = Encpassword.ToString();
            }

            //if (Dept.ToString() == "" || Dept.ToString()==null)
            //{
            //    da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = DBNull.Value;
            //}
            //else
            //{
            //    da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();
            //}
            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet ValidateLoginResetOtherServices(string UserID, String Password, string Pwdwithoutencry)
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {
            da = new SqlDataAdapter("sp_ValidUserOtherServicesReset", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UserID.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserID.ToString();
            }
            if (Password.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@password", SqlDbType.VarChar).Value = Password.ToString();
            }

            da.SelectCommand.Parameters.Add("@Pwdwithoutencry", SqlDbType.VarChar).Value = Pwdwithoutencry.ToString();

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int ChangePasswordForOtherServices(string Userid, string Password, string modifiedby)
    {
        SqlCommand Com = new SqlCommand();

        Com.CommandType = CommandType.StoredProcedure;

        Com.CommandText = "sp_ChangePwdOtherServices";

        if (Userid.Trim() == "" || Userid.Trim() == null)
            Com.Parameters.Add("@Userid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            Com.Parameters.Add("@Userid", SqlDbType.VarChar).Value = Userid.Trim();

        if (Password.Trim() == "" || Password.Trim() == null)
            Com.Parameters.Add("@Password", SqlDbType.VarChar).Value = DBNull.Value;
        else
            Com.Parameters.Add("@Password", SqlDbType.VarChar).Value = Password.Trim();

        if (modifiedby.Trim() == "" || modifiedby.Trim() == null)
            Com.Parameters.Add("@modifiedby", SqlDbType.VarChar).Value = DBNull.Value;
        else
            Com.Parameters.Add("@modifiedby", SqlDbType.VarChar).Value = modifiedby.Trim();

        con.OpenConnection();
        Com.Connection = con.GetConnection;

        try
        {
            return Com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            Com.Dispose();
            con.CloseConnection();
        }
    }

    public DataSet ValidateForgotReformsPassword(string UserId, string MobileNo)
    {
        DataSet ds = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da;
        try
        {

            da = new SqlDataAdapter("sp_DistReformsForgotPwd", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (UserId.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = UserId.ToString();
            }

            if (MobileNo.ToString() == "")
            {
                da.SelectCommand.Parameters.Add("@mobileNo", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@mobileNo", SqlDbType.VarChar).Value = MobileNo.ToString();
            }
            //if (userid.ToString() == "")
            //{
            //    da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = DBNull.Value;
            //}
            //else
            //{
            //    da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = userid.ToString();
            ////}

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    //uptohere

    public string insertInspRprtData(string IntIncentiveID, string userIDee, string NameofInd, string UdyogAdhar, string NameOfInspOfcr, string Designation, string DateofInsp, string ConstofUnit, string PersonName, string statusOfInd, string VerrfctnCert, string PrjDetLOANew, string PrjDetUnitsNew, string PrjDetInstCapNew, string PrjDetValueNew, string PrjDetLOAExst, string PrjDetInstdCapExst, string PrjDetPercntIncExst, string PrjDetLOAExpn, string PrjDetInstdCapExpn, string PrjDetPercntIncExpn, string PrjDetLandExst, string PrjDetBuildExst, string PrjPlntMachExst, string PrjTotalExst, string PrjDetLandExpn, string PrjDetBldgExpn, string PrjDetPlntMachExpn, string PrjDetPlntTotal, string PrjDetPrcntLand, string PrjDetPrcntBldg, string PrjDetPlntMachLand, string PrjDetPrcntTot, string DateClmAppln, string DateCommProd, string DateRegdNotice, string DateRcptShrtFall, string CapCostLandExtent, string CapCostLandBltpUpArea, string CapCost5BltUpArea, string CapCostExntElgble, string ClaimApplStampDutyFlg, string ClaimApplLandSubsFlg, string Clm25LandCost, string Clm25StmpDutyCost, string Clm25Total, string Clm25ApprdPrjCost, string Clm25PropElgbVal, string Clm25ComptdTot, string BldgCvlVal822Gdl, string BldgCvlPlnthArea, string BldgCvlTSSFCNorms, string BldgCvlVal, string BldgCvlTotVal, string BldgCvl8211CvlVal, string BldgCvl8211PlnthAra, string BldgCvl8211TSSFCNorms, string BldgCvl8211Value, string BldgCvl8211Tot10Prcnt, string BldgCvl8211GrndTot, string AsperApprvdPrjCost, string AsperCvlEngnrCert, string AsperComptdValGM, string AsperTotComptdCost, string PlntMachApprvdPjCost, string PlntMachApprvdPlMach, string PlntMachApprvdTechknow, string PlntMachApprvd2ndHand, string PlntMachApprvdPrcnt2ndHndMach, string PlntMachApprvdTotal, string PlntMachApprvdTotCost, string TotCostComptdLand, string TotCostComptdBldg, string TotCostComptdPlntMach, string TotCostFnlGrndTot, string TotInvSubsidy, string TotAddnlInvfrWmnEntr, string TotInvSubsSCST, string TotInvSubsSCSTWmn, string TotInv, string PavalaVaddiFlg, string ApplTrnsprtVhcTpride, string PowerCostFlg, string SpecfcClnrFlg, string SalesTaxFlg, string InvSubsdyFlg, string IIDfFlg, string SkillUpgrdnFlg, string StmpDutyFlg, string SeedCapFlg, string QltyCertFlg, string AdvSubSCSTFlg)
    //nikhil -- 16.05.2017
    {
        //private SqlConnection connSqlHelper = new SqlConnection(ConfigurationManager.ConnectionStrings["TSiPASSSkils"].ConnectionString);

        PavalaVaddiFlg = "";
        ApplTrnsprtVhcTpride = "";
        PowerCostFlg = "";
        SpecfcClnrFlg = "";
        SalesTaxFlg = "";
        InvSubsdyFlg = "";
        IIDfFlg = "";
        SkillUpgrdnFlg = "";
        StmpDutyFlg = "";
        SeedCapFlg = "";
        QltyCertFlg = "";
        AdvSubSCSTFlg = "";

        return Convert.ToString(SqlHelper.ExecuteScalar(connSqlHelper, "USP_PROC_Insert_Insp_rep", IntIncentiveID, userIDee, NameofInd, UdyogAdhar, NameOfInspOfcr, Designation, DateofInsp, ConstofUnit, PersonName, statusOfInd, VerrfctnCert, PrjDetLOANew, PrjDetUnitsNew, PrjDetInstCapNew, PrjDetValueNew, PrjDetLOAExst, PrjDetInstdCapExst, PrjDetPercntIncExst, PrjDetLOAExpn, PrjDetInstdCapExpn, PrjDetPercntIncExpn, PrjDetLandExst, PrjDetBuildExst, PrjPlntMachExst, PrjTotalExst, PrjDetLandExpn, PrjDetBldgExpn, PrjDetPlntMachExpn, PrjDetPlntTotal, PrjDetPrcntLand, PrjDetPrcntBldg, PrjDetPlntMachLand, PrjDetPrcntTot, DateClmAppln, DateCommProd, DateRegdNotice, DateRcptShrtFall, CapCostLandExtent, CapCostLandBltpUpArea, CapCost5BltUpArea, CapCostExntElgble, ClaimApplStampDutyFlg, ClaimApplLandSubsFlg, Clm25LandCost, Clm25StmpDutyCost, Clm25Total, Clm25ApprdPrjCost, Clm25PropElgbVal, Clm25ComptdTot, BldgCvlVal822Gdl, BldgCvlPlnthArea, BldgCvlTSSFCNorms, BldgCvlVal, BldgCvlTotVal, BldgCvl8211CvlVal, BldgCvl8211PlnthAra, BldgCvl8211TSSFCNorms, BldgCvl8211Value, BldgCvl8211Tot10Prcnt, BldgCvl8211GrndTot, AsperApprvdPrjCost, AsperCvlEngnrCert, AsperComptdValGM, AsperTotComptdCost, PlntMachApprvdPjCost, PlntMachApprvdPlMach, PlntMachApprvdTechknow, PlntMachApprvd2ndHand, PlntMachApprvdPrcnt2ndHndMach, PlntMachApprvdTotal, PlntMachApprvdTotCost, TotCostComptdLand, TotCostComptdBldg, TotCostComptdPlntMach, TotCostFnlGrndTot, TotInvSubsidy, TotAddnlInvfrWmnEntr, TotInvSubsSCST, TotInvSubsSCSTWmn, TotInv, PavalaVaddiFlg, ApplTrnsprtVhcTpride, PowerCostFlg, SpecfcClnrFlg, SalesTaxFlg, InvSubsdyFlg, IIDfFlg, SkillUpgrdnFlg, StmpDutyFlg, SeedCapFlg, QltyCertFlg, AdvSubSCSTFlg));



    }
    //public DataSet GetDepartmentIncentiveDashboardNewIncType(string intDistrictid)   //nikhil - incentive
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        // da = new SqlDataAdapter("sp_GetDepartmentIncentiveDashboard", con.GetConnection);

    //        //da = new SqlDataAdapter("sp_GetIPOIncentiveDashboard_NewIncType", con.GetConnection);

    //        da = new SqlDataAdapter("sp_GetDepartmentIncentiveDashboardNewIncType", con.GetConnection);

    //        //sp_GetDepartmentIncentiveDashboardNewIncType
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--" || intDistrictid.Trim() == "0")
    //            da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();


    //        da.Fill(ds);
    //        return ds;


    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    public DataSet IncentivesRprtData(string incentiveID)   //nikhil -- 15.05.2017
    {
        DataSet oDataSet = new DataSet();
        con.OpenConnection();
        SqlDataAdapter da = da = new SqlDataAdapter("getInspReportDetails", con.GetConnection);

        da.SelectCommand.CommandType = CommandType.StoredProcedure;



        if (incentiveID == null)
        {
            da.SelectCommand.Parameters.Add("@incentiveID", SqlDbType.VarChar).Value = "%";
        }

        else
        {
            da.SelectCommand.Parameters.Add("@incentiveID", SqlDbType.VarChar).Value = incentiveID.ToString();
        }


        da.Fill(oDataSet);
        return oDataSet;

    }

    public DataSet GetIPOIncentiveDashboardNew(string intDistrictid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("sp_GetIPOIncentiveDashboard_NewIncType", con.GetConnection);
            da = new SqlDataAdapter("sp_GetIPOIncentiveDashboard_NewIncTypeNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.CommandTimeout = 600;

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IPOID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IPOID", SqlDbType.VarChar).Value = intDistrictid.ToString();


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // incentives dept flow end


    public int InsertDeptDateTracing(string DepartmentId, string QuessionaireId, string Uid_No, string Apply_Date, string PreScrutinity_Date, string QueryRaised_Date, string QueryRespond_Date, string Approval_Date, string Application_Type, string ApprovalId)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = null;
        try
        {
            cmd = new SqlCommand("USP_INS_DASHBOARDDATA", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
            //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
            cmd.Parameters.AddWithValue("@DepartmentId", Convert.ToString(DepartmentId));
            cmd.Parameters.AddWithValue("@QuessionaireId", Convert.ToString(QuessionaireId));
            cmd.Parameters.AddWithValue("@Uid_No", Convert.ToString(Uid_No));
            cmd.Parameters.AddWithValue("@Apply_Date", Apply_Date);
            //cmd.Parameters.AddWithValue("@PreScrutinity_Date", Convert.ToString(cmf.convertDateIndia(formvoobj.BillDate)));
            cmd.Parameters.AddWithValue("@PreScrutinity_Date", PreScrutinity_Date);
            cmd.Parameters.AddWithValue("@QueryRaised_Date", QueryRaised_Date);
            cmd.Parameters.AddWithValue("@QueryRespond_Date", QueryRespond_Date);
            cmd.Parameters.AddWithValue("@Approval_Date", Approval_Date);
            cmd.Parameters.AddWithValue("@Application_Type", Application_Type);
            cmd.Parameters.AddWithValue("@ApprovalId", ApprovalId);

            //cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            //cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            // valid = (Int32)cmd.Parameters["@Valid"].Value;

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }

    public int InsertDeptDateTracingCFO(string DepartmentId, string QuessionaireId, string Uid_No, string Apply_Date, string PreScrutinity_Date, string QueryRaised_Date, string QueryRespond_Date, string Approval_Date, string Application_Type, string ApprovalId)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = null;
        try
        {
            cmd = new SqlCommand("USP_INS_DASHBOARDDATA_CFO", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
            //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
            cmd.Parameters.AddWithValue("@DepartmentId", Convert.ToString(DepartmentId));
            cmd.Parameters.AddWithValue("@QuessionaireId", Convert.ToString(QuessionaireId));
            cmd.Parameters.AddWithValue("@Uid_No", Convert.ToString(Uid_No));
            cmd.Parameters.AddWithValue("@Apply_Date", Apply_Date);
            //cmd.Parameters.AddWithValue("@PreScrutinity_Date", Convert.ToString(cmf.convertDateIndia(formvoobj.BillDate)));
            cmd.Parameters.AddWithValue("@PreScrutinity_Date", PreScrutinity_Date);
            cmd.Parameters.AddWithValue("@QueryRaised_Date", QueryRaised_Date);
            cmd.Parameters.AddWithValue("@QueryRespond_Date", QueryRespond_Date);
            cmd.Parameters.AddWithValue("@Approval_Date", Approval_Date);
            cmd.Parameters.AddWithValue("@Application_Type", Application_Type);
            cmd.Parameters.AddWithValue("@ApprovalId", ApprovalId);

            //cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            //cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            // valid = (Int32)cmd.Parameters["@Valid"].Value;

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }
    public DataSet fetchIncentivedetIPONewIncType(string intDeptid, string Status, string IncentiveID, string IndustryName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("fetchinsentivedetIPO_NewIncType", con.GetConnection);
            da = new SqlDataAdapter("USP_JD_DRILL_DOWN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "All" || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.ToString();

            if (IncentiveID.Trim() == "" || IncentiveID.Trim() == null || IncentiveID.Trim() == "All" || IncentiveID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet fetchIncentivedetNewINCType(string intDistrictid, string IndustryName, string intDeptid, string intstageid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("fetchinsentivedetNewIncType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "All" || intstageid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = intstageid.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%" + IndustryName.ToString() + "%";

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            //if (intstageid.Trim() == "" || intstageid.Trim() == null || intstageid.Trim() == "--Select--")
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            //else
            //    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intstageid.ToString();

            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DistrictWiseIncentivereportdetailsNewINCType(string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("DistrictWiseIncentivereportdetailsNewINCType", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPreniourPayDetailsNew(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPreniourPayDetailsPaidDetNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();

            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBilldeskpaymentDetailsall(string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetBilldescPaymentDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@fromdate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@todate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // Incentives Enterpreuenr Methods  added on 17.06.2017 -- Commented by Prasanna

    // IncetivesNewForm2.aspx save methods
    //public string InsertCommonData(IncentivesVOs objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_INSERT_INCENTIVES_DATA_COMMON]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.User_Id != null)
    //            com.Parameters.AddWithValue("@CreatedBy", objvo1.User_Id);
    //        else
    //            com.Parameters.AddWithValue("@CreatedBy", null);
    //        if (objvo1.UnitName != null)
    //            com.Parameters.AddWithValue("@UnitName", objvo1.UnitName);
    //        else
    //            com.Parameters.AddWithValue("@UnitName", null);
    //        if (objvo1.ApplciantName != null)
    //            com.Parameters.AddWithValue("@ApplicantName", objvo1.ApplciantName);
    //        else
    //            com.Parameters.AddWithValue("@ApplicantName", null);
    //        if (objvo1.TinNO != null)
    //            com.Parameters.AddWithValue("@TinNO", objvo1.TinNO);
    //        else
    //            com.Parameters.AddWithValue("@TinNO", null);
    //        if (objvo1.PanNo != null)
    //            com.Parameters.AddWithValue("@PanNo", objvo1.PanNo);
    //        else
    //            com.Parameters.AddWithValue("@PanNo", null);
    //        if (objvo1.UnitDIst != null)
    //            com.Parameters.AddWithValue("@UnitDIst", objvo1.UnitDIst);
    //        else
    //            com.Parameters.AddWithValue("@UnitDIst", null);
    //        if (objvo1.UnitMandal != null)
    //            com.Parameters.AddWithValue("@UnitMandal", objvo1.UnitMandal);
    //        else
    //            com.Parameters.AddWithValue("@UnitMandal", null);
    //        if (objvo1.UnitVill != null)
    //            com.Parameters.AddWithValue("@UnitVill", objvo1.UnitVill);
    //        else
    //            com.Parameters.AddWithValue("@UnitVill", null);
    //        if (objvo1.UnitHNO != null)
    //            com.Parameters.AddWithValue("@UnitHNO", objvo1.UnitHNO);
    //        else
    //            com.Parameters.AddWithValue("@UnitHNO", null);
    //        if (objvo1.UnitStreet != null)
    //            com.Parameters.AddWithValue("@UnitStreet", objvo1.UnitStreet);
    //        else
    //            com.Parameters.AddWithValue("@UnitStreet", null);
    //        if (objvo1.OffcDIst != null)
    //            com.Parameters.AddWithValue("@OffcDIst", objvo1.OffcDIst);
    //        else
    //            com.Parameters.AddWithValue("@OffcDIst", null);
    //        if (objvo1.OffcMandal != null)
    //            com.Parameters.AddWithValue("@OffcMandal", objvo1.OffcMandal);
    //        else
    //            com.Parameters.AddWithValue("@OffcMandal", null);
    //        if (objvo1.OffcVil != null)
    //            com.Parameters.AddWithValue("@OffcVill", objvo1.OffcVil);
    //        else
    //            com.Parameters.AddWithValue("@OffcVill", null);
    //        if (objvo1.OffcHNO != null)
    //            com.Parameters.AddWithValue("@OffcHNO", objvo1.OffcHNO);
    //        else
    //            com.Parameters.AddWithValue("@OffcHNO", null);
    //        if (objvo1.OffcStreet != null)
    //            com.Parameters.AddWithValue("@OffcStreet", objvo1.OffcStreet);
    //        else
    //            com.Parameters.AddWithValue("@OffcStreet", null);

    //        // added newly
    //        if (objvo1.UnitMObileNo != null)
    //            com.Parameters.AddWithValue("@UnitMObileNo", objvo1.UnitMObileNo);
    //        else
    //            com.Parameters.AddWithValue("@UnitMObileNo", null);
    //        if (objvo1.UnitEmail != null)
    //            com.Parameters.AddWithValue("@UnitEmail", objvo1.UnitEmail);
    //        else
    //            com.Parameters.AddWithValue("@UnitEmail", null);

    //        if (objvo1.OffcEmail != null)
    //            com.Parameters.AddWithValue("@OffcEmail", objvo1.OffcEmail);
    //        else
    //            com.Parameters.AddWithValue("@OffcEmail", null);
    //        if (objvo1.OffcMobileNO != null)
    //            com.Parameters.AddWithValue("@OffcMobileNO", objvo1.OffcMobileNO);
    //        else
    //            com.Parameters.AddWithValue("@OffcMobileNO", null);
    //        //

    //        if (objvo1.Category != null)
    //            com.Parameters.AddWithValue("@Category", objvo1.Category);
    //        else
    //            com.Parameters.AddWithValue("@Category", null);
    //        if (objvo1.TypeofOrg != null)
    //            com.Parameters.AddWithValue("@OrgType", objvo1.TypeofOrg);
    //        else
    //            com.Parameters.AddWithValue("@OrgType", null);
    //        if (objvo1.IdsustryStatus != null)
    //            com.Parameters.AddWithValue("@IdsustryStatus", objvo1.IdsustryStatus);
    //        else
    //            com.Parameters.AddWithValue("@IdsustryStatus", null);
    //        if (objvo1.ExistingPercentageincreaseunderExpansionORDiversification != null)
    //            com.Parameters.AddWithValue("@ExistingPercentageincreaseunderExpansionORDiversification", objvo1.ExistingPercentageincreaseunderExpansionORDiversification);
    //        else
    //            com.Parameters.AddWithValue("@ExistingPercentageincreaseunderExpansionORDiversification", null);
    //        if (objvo1.ExpansionDiversificationLOA != null)
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLOA", objvo1.ExpansionDiversificationLOA);
    //        else
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLOA", null);

    //        if (objvo1.ExistingInstalledCapacityinEnter != null)
    //            com.Parameters.AddWithValue("@ExistingInstalledCapacityinEnter", objvo1.ExistingInstalledCapacityinEnter);
    //        else
    //            com.Parameters.AddWithValue("@ExistingInstalledCapacityinEnter", null);

    //        if (objvo1.ExpanORDiversInstalledCapacityinEnter != null)
    //            com.Parameters.AddWithValue("@ExpanORDiversInstalledCapacityinEnter", objvo1.ExpanORDiversInstalledCapacityinEnter);
    //        else
    //            com.Parameters.AddWithValue("@ExpanORDiversInstalledCapacityinEnter", null);
    //        if (objvo1.ExpanORDiversPercentIncreaseunderExpansionORDiversification != null)
    //            com.Parameters.AddWithValue("@ExpanORDiversPercentIncreaseunderExpansionORDiversification", objvo1.ExpanORDiversPercentIncreaseunderExpansionORDiversification);
    //        else
    //            com.Parameters.AddWithValue("@ExpanORDiversPercentIncreaseunderExpansionORDiversification", null);
    //        if (objvo1.ExistEnterpriseLand != null)
    //            com.Parameters.AddWithValue("@ExistEnterpriseLand", objvo1.ExistEnterpriseLand);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterpriseLand", null);
    //        if (objvo1.ExistEnterpriseBuilding != null)
    //            com.Parameters.AddWithValue("@ExistEnterpriseBuilding", objvo1.ExistEnterpriseBuilding);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterpriseBuilding", null);
    //        if (objvo1.ExistEnterprisePlantMachinery != null)
    //            com.Parameters.AddWithValue("@ExistEnterprisePlantMachinery", objvo1.ExistEnterprisePlantMachinery);
    //        else
    //            com.Parameters.AddWithValue("@ExistEnterprisePlantMachinery", null);
    //        if (objvo1.ExpansionDiversificationLand != null)
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLand", objvo1.ExpansionDiversificationLand);
    //        else
    //            com.Parameters.AddWithValue("@ExpansionDiversificationLand", null);
    //        if (objvo1.ExpDiversBuilding != null)
    //            com.Parameters.AddWithValue("@ExpDiversBuilding", objvo1.ExpDiversBuilding);
    //        else
    //            com.Parameters.AddWithValue("@ExpDiversBuilding", null);
    //        if (objvo1.ExpDiversPlantMachinery != null)
    //            com.Parameters.AddWithValue("@ExpDiversPlantMachinery", objvo1.ExpDiversPlantMachinery);
    //        else com.Parameters.AddWithValue("@ExpDiversPlantMachinery", null);
    //        //if (objvo1.Userid_No != null)

    //        com.Parameters.AddWithValue("@LandFixedCapitalInvestPercentage", "100");

    //        if (objvo1.BuildingFixedCapitalInvestPercentage != null)
    //            com.Parameters.AddWithValue("@BuildingFixedCapitalInvestPercentage", objvo1.BuildingFixedCapitalInvestPercentage);
    //        else
    //            com.Parameters.AddWithValue("@BuildingFixedCapitalInvestPercentage", null);
    //        if (objvo1.PlantMachFixedCapitalInvestPercentage != null)
    //            com.Parameters.AddWithValue("@PlantMachFixedCapitalInvestPercentage", objvo1.PlantMachFixedCapitalInvestPercentage);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachFixedCapitalInvestPercentage", null);
    //        if (objvo1.SocialStatus != null)
    //            com.Parameters.AddWithValue("@SocialStatus", Convert.ToInt32(objvo1.SocialStatus));
    //        else
    //            com.Parameters.AddWithValue("@SocialStatus", null);

    //        // added newly 
    //        if (objvo1.NewPowerReleaseDate != null)
    //            com.Parameters.AddWithValue("@NewPowerReleaseDate", objvo1.NewPowerReleaseDate);
    //        else
    //            com.Parameters.AddWithValue("@NewPowerReleaseDate", null);
    //        if (objvo1.NewConnectedLoad != null)
    //            com.Parameters.AddWithValue("@NewConnectedLoad", objvo1.NewConnectedLoad);
    //        else com.Parameters.AddWithValue("@NewConnectedLoad", null);
    //        if (objvo1.NewContractedLoad != null)
    //            com.Parameters.AddWithValue("@NewContractedLoad", objvo1.NewContractedLoad);
    //        else
    //            com.Parameters.AddWithValue("@NewContractedLoad", null);

    //        if (objvo1.ServiceConnectionNO != null)
    //            com.Parameters.AddWithValue("@ServiceConnectionNO", objvo1.ServiceConnectionNO);
    //        else
    //            com.Parameters.AddWithValue("@ServiceConnectionNO", null);

    //        if (objvo1.ExistingConnectedLoad != null)
    //            com.Parameters.AddWithValue("@ExistingConnectedLoad", objvo1.ExistingConnectedLoad);
    //        else com.Parameters.AddWithValue("@ExistingConnectedLoad", null);
    //        if (objvo1.ExistingContractedLoad != null)
    //            com.Parameters.AddWithValue("@ExistingContractedLoad", objvo1.ExistingContractedLoad);
    //        else
    //            com.Parameters.AddWithValue("@ExistingContractedLoad", null);

    //        if (objvo1.ExistingPowerReleaseDate != null)
    //            com.Parameters.AddWithValue("@ExistingPowerReleaseDate", objvo1.ExistingPowerReleaseDate);
    //        else
    //            com.Parameters.AddWithValue("@ExistingPowerReleaseDate", null);
    //        if (objvo1.ExistingServiceConnectionNO != null)
    //            com.Parameters.AddWithValue("@ExistingServiceConnectionNO", objvo1.ExistingServiceConnectionNO);
    //        else
    //            com.Parameters.AddWithValue("@ExistingServiceConnectionNO", null);

    //        if (objvo1.ExpanDiverConnectedLoad != null)
    //            com.Parameters.AddWithValue("@ExpanDiverConnectedLoad", objvo1.ExpanDiverConnectedLoad);
    //        else com.Parameters.AddWithValue("@ExpanDiverConnectedLoad", null);
    //        if (objvo1.ExpanDiverContractedLoad != null)
    //            com.Parameters.AddWithValue("@ExpanDiverContractedLoad", objvo1.ExpanDiverContractedLoad);
    //        else
    //            com.Parameters.AddWithValue("@ExpanDiverContractedLoad", null);
    //        if (objvo1.ExpanDiverPowerReleaseDate != null)
    //            com.Parameters.AddWithValue("@ExpanDiverPowerReleaseDate", objvo1.ExpanDiverPowerReleaseDate);
    //        else
    //            com.Parameters.AddWithValue("@ExpanDiverPowerReleaseDate", null);
    //        if (objvo1.ExpanDiverServiceConnectionNO != null)
    //            com.Parameters.AddWithValue("@ExpanDiverServiceConnectionNO", objvo1.ExpanDiverServiceConnectionNO);
    //        else
    //            com.Parameters.AddWithValue("@ExpanDiverServiceConnectionNO", null);

    //        //

    //        if (objvo1.ManagementStaffMale != null)
    //            com.Parameters.AddWithValue("@ManagementStaffMale", objvo1.ManagementStaffMale);
    //        else
    //            com.Parameters.AddWithValue("@ManagementStaffMale", null);
    //        if (objvo1.ManagementStaffFemale != null)
    //            com.Parameters.AddWithValue("@ManagementStaffFemale", objvo1.ManagementStaffFemale);
    //        else
    //            com.Parameters.AddWithValue("@ManagementStaffFemale", null);
    //        if (objvo1.SupervisoryMale != null)
    //            com.Parameters.AddWithValue("@SupervisoryMale", objvo1.SupervisoryMale);
    //        else
    //            com.Parameters.AddWithValue("@SupervisoryMale", null);
    //        if (objvo1.SupervisoryFemale != null)
    //            com.Parameters.AddWithValue("@SupervisoryFemale", objvo1.SupervisoryFemale);
    //        else com.Parameters.AddWithValue("@SupervisoryFemale", null);

    //        // added newly
    //        if (objvo1.SkilledWorkersMale != null)
    //            com.Parameters.AddWithValue("@SkilledWorkersMale", objvo1.SkilledWorkersMale);
    //        else
    //            com.Parameters.AddWithValue("@SkilledWorkersMale", null);
    //        if (objvo1.SkilledWorkersFemale != null)
    //            com.Parameters.AddWithValue("@SkilledWorkersFemale", objvo1.SkilledWorkersFemale);
    //        else
    //            com.Parameters.AddWithValue("@SkilledWorkersFemale", null);

    //        if (objvo1.SemiSkilledWorkersMale != null)
    //            com.Parameters.AddWithValue("@SemiSkilledWorkersMale", objvo1.SemiSkilledWorkersMale);
    //        else
    //            com.Parameters.AddWithValue("@SemiSkilledWorkersMale", null);
    //        if (objvo1.SemiSkilledWorkersFemale != null)
    //            com.Parameters.AddWithValue("@SemiSkilledWorkersFemale", objvo1.SemiSkilledWorkersFemale);
    //        else
    //            com.Parameters.AddWithValue("@SemiSkilledWorkersFemale", null);
    //        //

    //        if (objvo1.ProjectFinance != null)
    //            com.Parameters.AddWithValue("@ProjectFinance", objvo1.ProjectFinance);
    //        else
    //            com.Parameters.AddWithValue("@ProjectFinance", null);
    //        if (objvo1.TermLoanApplDate != null)
    //            com.Parameters.AddWithValue("@TermLoanApplDate", objvo1.TermLoanApplDate);
    //        else
    //            com.Parameters.AddWithValue("@TermLoanApplDate", null);
    //        if (objvo1.InstitutionName != null)
    //            com.Parameters.AddWithValue("@InstitutionName", objvo1.InstitutionName);
    //        else
    //            com.Parameters.AddWithValue("@InstitutionName", null);
    //        if (objvo1.TermLoanSancRefNo != null)
    //            com.Parameters.AddWithValue("@TermLoanSancRefNo", objvo1.TermLoanSancRefNo);
    //        else
    //            com.Parameters.AddWithValue("@TermLoanSancRefNo", null);
    //        //if (objvo1.AvailedSubsidyEarlier != null)
    //        //    com.Parameters.AddWithValue("@AvailedSubsidyEarlier", objvo1.AvailedSubsidyEarlier);
    //        //else
    //        //    com.Parameters.AddWithValue("@AvailedSubsidyEarlier", null);
    //        //if (objvo1.TotalSubsidyAlreadyAvailedScheme != null)
    //        //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedScheme", objvo1.TotalSubsidyAlreadyAvailedScheme);
    //        //else
    //        //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedScheme", null);
    //        //if (objvo1.TotalSubsidyAlreadyAvailedAmount != null)
    //        //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedAmount", objvo1.TotalSubsidyAlreadyAvailedAmount);
    //        //else
    //        //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedAmount", null);
    //        if (objvo1.SecondHandMachVal != null)
    //            com.Parameters.AddWithValue("@SecondHandMachVal", objvo1.SecondHandMachVal);
    //        else
    //            com.Parameters.AddWithValue("@SecondHandMachVal", null);

    //        //// '@EnterpriseTypeExisting', 
    //        if (objvo1.ExistingEnterpriseLOA != null)
    //            com.Parameters.AddWithValue("@ExistingEnterpriseLOA", objvo1.ExistingEnterpriseLOA);
    //        else
    //            com.Parameters.AddWithValue("@ExistingEnterpriseLOA", null);
    //        if (objvo1.NewMachVal != null)
    //            com.Parameters.AddWithValue("@NewMachVal", objvo1.NewMachVal);
    //        else
    //            com.Parameters.AddWithValue("@NewMachVal", null);
    //        if (objvo1.Newand2ndlMachTotVal != null)
    //            com.Parameters.AddWithValue("@Newand2ndlMachTotVal", objvo1.Newand2ndlMachTotVal);
    //        else
    //            com.Parameters.AddWithValue("@Newand2ndlMachTotVal", null);
    //        if (objvo1.PercentageSHMValinTotMachVal != null)
    //            com.Parameters.AddWithValue("@PercentageSHMValinTotMachVal", objvo1.PercentageSHMValinTotMachVal);
    //        else
    //            com.Parameters.AddWithValue("@PercentageSHMValinTotMachVal", null);
    //        if (objvo1.MachValPrchasedfromAPIDCorAPSFCBank != null)
    //            com.Parameters.AddWithValue("@MachValPrchasedfromAPIDCorAPSFCBank", objvo1.MachValPrchasedfromAPIDCorAPSFCBank);
    //        else
    //            com.Parameters.AddWithValue("@MachValPrchasedfromAPIDCorAPSFCBank", null);

    //        if (objvo1.TotalMachVal != null)
    //            com.Parameters.AddWithValue("@TotalMachVal", objvo1.TotalMachVal);
    //        else
    //            com.Parameters.AddWithValue("@TotalMachVal", null);

    //        //if (objvo1.InvestimentSubsidy != null)
    //        //    com.Parameters.AddWithValue("@InvestimentSubsidy", objvo1.InvestimentSubsidy);
    //        //else
    //        //    com.Parameters.AddWithValue("@InvestimentSubsidy", null);

    //        //if (objvo1.AdditionalInvSubsidyForWomen != null)
    //        //    com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomen", objvo1.AdditionalInvSubsidyForWomen);
    //        //else com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomen", null);

    //        //if (objvo1.AdditionalInvSubsidyForSCORST != null)
    //        //    com.Parameters.AddWithValue("@AdditionalInvSubsidyForSCORST", objvo1.AdditionalInvSubsidyForSCORST);
    //        //else com.Parameters.AddWithValue("@AdditionalInvSubsidyForSCORST", null);

    //        //if (objvo1.AdditionalInvSubsidyForWomenInScheduledAreas != null)
    //        //    com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomenInScheduledAreas", objvo1.AdditionalInvSubsidyForWomenInScheduledAreas);
    //        //else
    //        //    com.Parameters.AddWithValue("@AdditionalInvSubsidyForWomenInScheduledAreas", null);

    //        //if (objvo1.TotalAppliedIncetives != null)
    //        //    com.Parameters.AddWithValue("@TotalAppliedIncetives", objvo1.TotalAppliedIncetives);
    //        //else
    //        //    com.Parameters.AddWithValue("@TotalAppliedIncetives", null);

    //        // Bank details 
    //        if (objvo1.BankName != null)
    //            com.Parameters.AddWithValue("@BankName", objvo1.BankName);
    //        else
    //            com.Parameters.AddWithValue("@BankName", null);

    //        if (objvo1.AccNo != null)
    //            com.Parameters.AddWithValue("@AccNo", objvo1.AccNo);
    //        else
    //            com.Parameters.AddWithValue("@AccNo", null);

    //        if (objvo1.BranchName != null)
    //            com.Parameters.AddWithValue("@BranchName", objvo1.BranchName);
    //        else
    //            com.Parameters.AddWithValue("@BranchName", null);

    //        if (objvo1.IFSCCode != null)
    //            com.Parameters.AddWithValue("@IFSCCode", objvo1.IFSCCode);
    //        else
    //            com.Parameters.AddWithValue("@IFSCCode", null);

    //        if (objvo1.WhetherPower != null)
    //            com.Parameters.AddWithValue("@WhetherPower", objvo1.WhetherPower);
    //        else
    //            com.Parameters.AddWithValue("@WhetherPower", null);

    //        if (objvo1.RequesttoDept != null)
    //            com.Parameters.AddWithValue("@RequesttoDept", objvo1.RequesttoDept);
    //        else
    //            com.Parameters.AddWithValue("@RequesttoDept", null);

    //        ///////
    //        if (objvo1.EMiUdyogAadhar != null)
    //            com.Parameters.AddWithValue("@EMiUdyogAadhar", objvo1.EMiUdyogAadhar);
    //        else
    //            com.Parameters.AddWithValue("@EMiUdyogAadhar", null);

    //        if (objvo1.sector != null)
    //            com.Parameters.AddWithValue("@SectorID", objvo1.sector);
    //        else
    //            com.Parameters.AddWithValue("@SectorID", null);

    //        if (objvo1.natureOfAct != null)
    //            com.Parameters.AddWithValue("@NatureOfActivity", objvo1.natureOfAct);
    //        else
    //            com.Parameters.AddWithValue("@NatureOfActivity", null);

    //        if (objvo1.NatureofBussiness != null)
    //            com.Parameters.AddWithValue("@NatureofBussiness", objvo1.NatureofBussiness);
    //        else
    //            com.Parameters.AddWithValue("@NatureofBussiness", null);

    //        if (objvo1.IsGHMCandOtherMuncpOrp != null)
    //            com.Parameters.AddWithValue("@IsGHMCandOtherMuncpOrp", objvo1.IsGHMCandOtherMuncpOrp);
    //        else
    //            com.Parameters.AddWithValue("@IsGHMCandOtherMuncpOrp", null);

    //        if (objvo1.IsDifferentlyAbled != null)
    //            com.Parameters.AddWithValue("@IsDifferentlyAbled", objvo1.IsDifferentlyAbled);
    //        else
    //            com.Parameters.AddWithValue("@IsDifferentlyAbled", null);

    //        if (objvo1.isVehicleIncentive != null)
    //            com.Parameters.AddWithValue("@isVehicleIncentive", objvo1.isVehicleIncentive);
    //        else
    //            com.Parameters.AddWithValue("@isVehicleIncentive", null);

    //        //// Vat No
    //        if (objvo1.Vatno != null)
    //            com.Parameters.AddWithValue("@VATNo", objvo1.Vatno);
    //        else
    //            com.Parameters.AddWithValue("@VATNo", null);

    //        if (objvo1.Cstno != null)
    //            com.Parameters.AddWithValue("@CSTNo", objvo1.Cstno);
    //        else
    //            com.Parameters.AddWithValue("@CSTNo", null);

    //        //if (objvo1.MobileNo != null)
    //        //    com.Parameters.AddWithValue("@MobileNo", objvo1.MobileNo);
    //        //else
    //        //    com.Parameters.AddWithValue("@MobileNo", null);

    //        //if (objvo1.EmailID != null)
    //        //    com.Parameters.AddWithValue("@EmailID", objvo1.EmailID);
    //        //else
    //        //    com.Parameters.AddWithValue("@EmailID", null);

    //        if (objvo1.Gender != null)
    //            com.Parameters.AddWithValue("@Gender", objvo1.Gender);
    //        else
    //            com.Parameters.AddWithValue("@Gender", null);
    //        //////

    //        // added newly
    //        if (objvo1.CSTRegDate != null)
    //            com.Parameters.AddWithValue("@CSTRegDate", objvo1.CSTRegDate);
    //        else
    //            com.Parameters.AddWithValue("@CSTRegDate", null);
    //        if (objvo1.CSTRegAuthority != null)
    //            com.Parameters.AddWithValue("@CSTRegAuthority", objvo1.CSTRegAuthority);
    //        else
    //            com.Parameters.AddWithValue("@CSTRegAuthority", null);
    //        if (objvo1.CSTRegAuthAddress != null)
    //            com.Parameters.AddWithValue("@CSTRegAuthAddress", objvo1.CSTRegAuthAddress);
    //        else
    //            com.Parameters.AddWithValue("@CSTRegAuthAddress", null);
    //        if (objvo1.PowerStatus != null)
    //            com.Parameters.AddWithValue("@PowerType", Convert.ToInt32(objvo1.PowerStatus));
    //        else
    //            com.Parameters.AddWithValue("@PowerType", null);

    //        if (objvo1.IsMinority != null)
    //            com.Parameters.AddWithValue("@IsMinority", objvo1.IsMinority);
    //        else
    //            com.Parameters.AddWithValue("@IsMinority", null);
    //        // added
    //        if (objvo1.isSecondHandMachVal != null)
    //            com.Parameters.AddWithValue("@isSecondHandMachVal", objvo1.isSecondHandMachVal);
    //        else
    //            com.Parameters.AddWithValue("@isSecondHandMachVal", null);
    //        if (objvo1.TermLoanApplDate != null)
    //            com.Parameters.AddWithValue("@TermLoanSanDate", objvo1.TermLoanApplDate);
    //        else
    //            com.Parameters.AddWithValue("@TermLoanSanDate", null);


    //        if (objvo1.eepinscapUnit != null)
    //            com.Parameters.AddWithValue("@eepinscapUnit", objvo1.eepinscapUnit);
    //        else
    //            com.Parameters.AddWithValue("@eepinscapUnit", null);
    //        if (objvo1.edpinscapUnit != null)
    //            com.Parameters.AddWithValue("@edpinscapUnit", objvo1.edpinscapUnit);
    //        else
    //            com.Parameters.AddWithValue("@edpinscapUnit", null);

    //        if (objvo1.DateOfComm != null)
    //            com.Parameters.AddWithValue("@DCP", objvo1.DateOfComm);
    //        else
    //            com.Parameters.AddWithValue("@DCP", null);

    //        //added on 08.06.2017
    //        if (objvo1.UnitState != null)
    //            com.Parameters.AddWithValue("@UnitState", objvo1.UnitState);
    //        else
    //            com.Parameters.AddWithValue("@UnitState", null);

    //        if (objvo1.OffcState != null)
    //            com.Parameters.AddWithValue("@OffcState", objvo1.OffcState);
    //        else
    //            com.Parameters.AddWithValue("@OffcState", null);

    //        if (objvo1.OffcOtherDist != null)
    //            com.Parameters.AddWithValue("@OffcOtherDist", objvo1.OffcOtherDist);
    //        else
    //            com.Parameters.AddWithValue("@OffcOtherDist", null);

    //        if (objvo1.OffcOtherMandal != null)
    //            com.Parameters.AddWithValue("@OffcOtherMandal", objvo1.OffcOtherMandal);
    //        else
    //            com.Parameters.AddWithValue("@OffcOtherMandal", null);

    //        if (objvo1.OffcOtherVillage != null)
    //            com.Parameters.AddWithValue("@OffcOtherVillage", objvo1.OffcOtherVillage);
    //        else
    //            com.Parameters.AddWithValue("@OffcOtherVillage", null);

    //        if (objvo1.EMPart != null)
    //            com.Parameters.AddWithValue("@EMPartNo", objvo1.EMPart);
    //        else
    //            com.Parameters.AddWithValue("@EMPartNo", null);

    //        // added on 18.06.2017
    //        if (objvo1.SubCaste != null)
    //            com.Parameters.AddWithValue("@SubCaste", objvo1.SubCaste);
    //        else
    //            com.Parameters.AddWithValue("@SubCaste", null);

    //        if (objvo1.GSTNO != null)
    //            com.Parameters.AddWithValue("@GSTNO", objvo1.GSTNO);
    //        else
    //            com.Parameters.AddWithValue("@GSTNO", null);

    //        if (objvo1.GSTDate != null)
    //            com.Parameters.AddWithValue("@GSTDate", objvo1.GSTDate);
    //        else
    //            com.Parameters.AddWithValue("@GSTDate", null);

    //        if (objvo1.IndustryExpansionType != null)
    //            com.Parameters.AddWithValue("@IndusExpanType", objvo1.IndustryExpansionType);
    //        else
    //            com.Parameters.AddWithValue("@IndusExpanType", null);

    //        // power new unit
    //        if (objvo1.PowNewConnectUnit != null)
    //            com.Parameters.AddWithValue("@PowNewConnectUnit", objvo1.PowNewConnectUnit);
    //        else
    //            com.Parameters.AddWithValue("@PowNewConnectUnit", null);

    //        if (objvo1.PowNewContractUnit != null)
    //            com.Parameters.AddWithValue("@PowNewContractUnit", objvo1.PowNewContractUnit);
    //        else
    //            com.Parameters.AddWithValue("@PowNewContractUnit", null);
    //        // existing power
    //        if (objvo1.PowExistConnectUnit != null)
    //            com.Parameters.AddWithValue("@PowExistConnectUnit", objvo1.PowExistConnectUnit);
    //        else
    //            com.Parameters.AddWithValue("@PowExistConnectUnit", null);

    //        if (objvo1.PowExistContractUnit != null)
    //            com.Parameters.AddWithValue("@PowExistContractUnit", objvo1.PowExistContractUnit);
    //        else
    //            com.Parameters.AddWithValue("@PowExistContractUnit", null);
    //        // Diversification power
    //        if (objvo1.PowDiversConnectUnit != null)
    //            com.Parameters.AddWithValue("@PowDiversConnectUnit", objvo1.PowDiversConnectUnit);
    //        else
    //            com.Parameters.AddWithValue("@PowDiversConnectUnit", null);

    //        if (objvo1.PowDiversContractUnit != null)
    //            com.Parameters.AddWithValue("@PowDiversContractUnit", objvo1.PowDiversContractUnit);
    //        else
    //            com.Parameters.AddWithValue("@PowDiversContractUnit", null);

    //        if (objvo1.IsPowerApplicable != null)
    //            com.Parameters.AddWithValue("@IsPowerApplicable", objvo1.IsPowerApplicable);
    //        else
    //            com.Parameters.AddWithValue("@IsPowerApplicable", null);


    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    //public int bulkInsertNewEnterPrise(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["Column5"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "LineofActivity");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "NameofUnit");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "InstalledCapacity");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "Value");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column5", "Incentive_id");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);

    //        bulkCopy.DestinationTableName = ("Incentives_Line_of_Activity");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}

    //public string SaveNameofAssets(IncentiveVosA objvoA)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_INSERT_INCENTIVES_ApprovedEstimated_ProjectCost]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvoA.User_id != "" && objvoA.User_id != null)
    //            com.Parameters.AddWithValue("@User_id", objvoA.User_id);
    //        else
    //            com.Parameters.AddWithValue("@User_id", null);

    //        if (objvoA.Incentive_id != "" && objvoA.Incentive_id != null)
    //            com.Parameters.AddWithValue("@Incentive_id", objvoA.Incentive_id);
    //        else
    //            com.Parameters.AddWithValue("@Incentive_id", null);

    //        if (objvoA.CfeQuid != "" && objvoA.CfeQuid != null)
    //            com.Parameters.AddWithValue("@CfeQuid", objvoA.CfeQuid);
    //        else
    //            com.Parameters.AddWithValue("@CfeQuid", null);

    //        if (objvoA.CfoQuid != "" && objvoA.CfoQuid != null)
    //            com.Parameters.AddWithValue("@CfoQuid", objvoA.CfoQuid);
    //        else
    //            com.Parameters.AddWithValue("@CfoQuid", null);

    //        if (objvoA.LandApprovedProjectCost != "" && objvoA.LandApprovedProjectCost != null)
    //            com.Parameters.AddWithValue("@LandApprovedProjectCost", objvoA.LandApprovedProjectCost);
    //        else
    //            com.Parameters.AddWithValue("@LandApprovedProjectCost", null);

    //        if (objvoA.LandLoanSactioned != "" && objvoA.LandLoanSactioned != null)
    //            com.Parameters.AddWithValue("@LandLoanSactioned", objvoA.LandLoanSactioned);
    //        else
    //            com.Parameters.AddWithValue("@LandLoanSactioned", null);

    //        if (objvoA.LandPromotersEquity != "" && objvoA.LandPromotersEquity != null)
    //            com.Parameters.AddWithValue("@LandPromotersEquity", objvoA.LandPromotersEquity);
    //        else
    //            com.Parameters.AddWithValue("@LandPromotersEquity", null);

    //        if (objvoA.LandLoanAmountReleased != "" && objvoA.LandLoanAmountReleased != null)
    //            com.Parameters.AddWithValue("@LandLoanAmountReleased", objvoA.LandLoanAmountReleased);
    //        else
    //            com.Parameters.AddWithValue("@LandLoanAmountReleased", null);

    //        if (objvoA.LandAssetsValuebyFinInstitution != "" && objvoA.LandAssetsValuebyFinInstitution != null)
    //            com.Parameters.AddWithValue("@LandAssetsValuebyFinInstitution", objvoA.LandAssetsValuebyFinInstitution);
    //        else
    //            com.Parameters.AddWithValue("@LandAssetsValuebyFinInstitution", null);

    //        if (objvoA.LandAssetsValuebyCA != "" && objvoA.LandAssetsValuebyCA != null)
    //            com.Parameters.AddWithValue("@LandAssetsValuebyCA", objvoA.LandAssetsValuebyCA);
    //        else
    //            com.Parameters.AddWithValue("@LandAssetsValuebyCA", null);

    //        if (objvoA.BuildingApprovedProjectCost != "" && objvoA.BuildingApprovedProjectCost != null)
    //            com.Parameters.AddWithValue("@BuildingApprovedProjectCost", objvoA.BuildingApprovedProjectCost);
    //        else
    //            com.Parameters.AddWithValue("@BuildingApprovedProjectCost", null);

    //        if (objvoA.BuildingLoanSactioned != "" && objvoA.BuildingLoanSactioned != null)
    //            com.Parameters.AddWithValue("@BuildingLoanSactioned", objvoA.BuildingLoanSactioned);
    //        else
    //            com.Parameters.AddWithValue("@BuildingLoanSactioned", null);

    //        if (objvoA.BuildingPromotersEquity != "" && objvoA.BuildingPromotersEquity != null)
    //            com.Parameters.AddWithValue("@BuildingPromotersEquity", objvoA.BuildingPromotersEquity);
    //        else
    //            com.Parameters.AddWithValue("@BuildingPromotersEquity", null);

    //        if (objvoA.BuildingLoanAmountReleased != "" && objvoA.BuildingLoanAmountReleased != null)
    //            com.Parameters.AddWithValue("@BuildingLoanAmountReleased", objvoA.BuildingLoanAmountReleased);
    //        else
    //            com.Parameters.AddWithValue("@BuildingLoanAmountReleased", null);

    //        if (objvoA.BuildingAssetsValuebyFinInstitution != "" && objvoA.BuildingAssetsValuebyFinInstitution != null)
    //            com.Parameters.AddWithValue("@BuildingAssetsValuebyFinInstitution", objvoA.BuildingAssetsValuebyFinInstitution);
    //        else
    //            com.Parameters.AddWithValue("@BuildingAssetsValuebyFinInstitution", null);

    //        if (objvoA.BuildingAssetsValuebyCA != "" && objvoA.BuildingAssetsValuebyCA != null)
    //            com.Parameters.AddWithValue("@BuildingAssetsValuebyCA", objvoA.BuildingAssetsValuebyCA);
    //        else
    //            com.Parameters.AddWithValue("@BuildingAssetsValuebyCA", null);

    //        if (objvoA.PlantMachineryApprovedProjectCost != "" && objvoA.PlantMachineryApprovedProjectCost != null)
    //            com.Parameters.AddWithValue("@PlantMachineryApprovedProjectCost", objvoA.PlantMachineryApprovedProjectCost);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachineryApprovedProjectCost", null);

    //        if (objvoA.PlantMachineryLoanSactioned != "" && objvoA.PlantMachineryLoanSactioned != null)
    //            com.Parameters.AddWithValue("@PlantMachineryLoanSactioned", objvoA.PlantMachineryLoanSactioned);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachineryLoanSactioned", null);

    //        if (objvoA.PlantMachineryPromotersEquity != "" && objvoA.PlantMachineryPromotersEquity != null)
    //            com.Parameters.AddWithValue("@PlantMachineryPromotersEquity", objvoA.PlantMachineryPromotersEquity);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachineryPromotersEquity", null);

    //        if (objvoA.PlantMachineryLoanAmountReleased != "" && objvoA.PlantMachineryLoanAmountReleased != null)
    //            com.Parameters.AddWithValue("@PlantMachineryLoanAmountReleased", objvoA.PlantMachineryLoanAmountReleased);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachineryLoanAmountReleased", null);

    //        if (objvoA.PlantMachineryAssetsValuebyFinInstitution != "" && objvoA.PlantMachineryAssetsValuebyFinInstitution != null)
    //            com.Parameters.AddWithValue("@PlantMachineryAssetsValuebyFinInstitution", objvoA.PlantMachineryAssetsValuebyFinInstitution);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachineryAssetsValuebyFinInstitution", null);

    //        if (objvoA.PlantMachineryAssetsValuebyCA != "" && objvoA.PlantMachineryAssetsValuebyCA != null)
    //            com.Parameters.AddWithValue("@PlantMachineryAssetsValuebyCA", objvoA.PlantMachineryAssetsValuebyCA);
    //        else
    //            com.Parameters.AddWithValue("@PlantMachineryAssetsValuebyCA", null);

    //        if (objvoA.MachineryContingenciesApprovedProjectCost != "" && objvoA.MachineryContingenciesApprovedProjectCost != null)
    //            com.Parameters.AddWithValue("@MachineryContingenciesApprovedProjectCost", objvoA.MachineryContingenciesApprovedProjectCost);
    //        else
    //            com.Parameters.AddWithValue("@MachineryContingenciesApprovedProjectCost", null);

    //        if (objvoA.MachineryContingenciesLoanSactioned != "" && objvoA.MachineryContingenciesLoanSactioned != null)
    //            com.Parameters.AddWithValue("@MachineryContingenciesLoanSactioned", objvoA.MachineryContingenciesLoanSactioned);
    //        else
    //            com.Parameters.AddWithValue("@MachineryContingenciesLoanSactioned", null);

    //        if (objvoA.MachineryContingenciesPromotersEquity != "" && objvoA.MachineryContingenciesPromotersEquity != null)
    //            com.Parameters.AddWithValue("@MachineryContingenciesPromotersEquity", objvoA.MachineryContingenciesPromotersEquity);
    //        else
    //            com.Parameters.AddWithValue("@MachineryContingenciesPromotersEquity", null);

    //        if (objvoA.MachineryContingenciesLoanAmountReleased != "" && objvoA.MachineryContingenciesLoanAmountReleased != null)
    //            com.Parameters.AddWithValue("@MachineryContingenciesLoanAmountReleased", objvoA.MachineryContingenciesLoanAmountReleased);
    //        else
    //            com.Parameters.AddWithValue("@MachineryContingenciesLoanAmountReleased", null);

    //        if (objvoA.MachineryContingenciesAssetsValuebyFinInstitution != "" && objvoA.MachineryContingenciesAssetsValuebyFinInstitution != null)
    //            com.Parameters.AddWithValue("@MachineryContingenciesAssetsValuebyFinInstitution", objvoA.MachineryContingenciesAssetsValuebyFinInstitution);
    //        else
    //            com.Parameters.AddWithValue("@MachineryContingenciesAssetsValuebyFinInstitution", null);

    //        if (objvoA.MachineryContingenciesAssetsValuebyCA != "" && objvoA.MachineryContingenciesAssetsValuebyCA != null)
    //            com.Parameters.AddWithValue("@MachineryContingenciesAssetsValuebyCA", objvoA.MachineryContingenciesAssetsValuebyCA);
    //        else
    //            com.Parameters.AddWithValue("@MachineryContingenciesAssetsValuebyCA", null);

    //        if (objvoA.ErectionApprovedProjectCost != "" && objvoA.ErectionApprovedProjectCost != null)
    //            com.Parameters.AddWithValue("@ErectionApprovedProjectCost", objvoA.ErectionApprovedProjectCost);
    //        else com.Parameters.AddWithValue("@ErectionApprovedProjectCost", null);

    //        if (objvoA.ErectionLoanSactioned != "" && objvoA.ErectionLoanSactioned != null)
    //            com.Parameters.AddWithValue("@ErectionLoanSactioned", objvoA.ErectionLoanSactioned);
    //        else
    //            com.Parameters.AddWithValue("@ErectionLoanSactioned", null);

    //        if (objvoA.ErectionLoanAmountReleased != "" && objvoA.ErectionLoanAmountReleased != null)
    //            com.Parameters.AddWithValue("@ErectionLoanAmountReleased", objvoA.ErectionLoanAmountReleased);
    //        else
    //            com.Parameters.AddWithValue("@ErectionLoanAmountReleased", null);

    //        if (objvoA.ErectionPromotersEquity != "" && objvoA.ErectionPromotersEquity != null)
    //            com.Parameters.AddWithValue("@ErectionPromotersEquity", objvoA.ErectionPromotersEquity);
    //        else
    //            com.Parameters.AddWithValue("@ErectionPromotersEquity", null);

    //        if (objvoA.ErectionAssetsValuebyFinInstitution != "" && objvoA.ErectionAssetsValuebyFinInstitution != null)
    //            com.Parameters.AddWithValue("@ErectionAssetsValuebyFinInstitution", objvoA.ErectionAssetsValuebyFinInstitution);
    //        else
    //            com.Parameters.AddWithValue("@ErectionAssetsValuebyFinInstitution", null);

    //        if (objvoA.ErectionAssetsValuebyCA != "" && objvoA.ErectionAssetsValuebyCA != null)
    //            com.Parameters.AddWithValue("@ErectionAssetsValuebyCA", objvoA.ErectionAssetsValuebyCA);
    //        else
    //            com.Parameters.AddWithValue("@ErectionAssetsValuebyCA", null);

    //        if (objvoA.TechnicalfeasibilityApprovedProjectCost != "" && objvoA.TechnicalfeasibilityApprovedProjectCost != null)
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityApprovedProjectCost", objvoA.TechnicalfeasibilityApprovedProjectCost);
    //        else
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityApprovedProjectCost", null);

    //        if (objvoA.TechnicalfeasibilityLoanSactioned != "" && objvoA.TechnicalfeasibilityLoanSactioned != null)
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityLoanSactioned", objvoA.TechnicalfeasibilityLoanSactioned);
    //        else
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityLoanSactioned", null);

    //        if (objvoA.TechnicalfeasibilityPromotersEquity != "" && objvoA.TechnicalfeasibilityPromotersEquity != null)
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityPromotersEquity", objvoA.TechnicalfeasibilityPromotersEquity);
    //        else
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityPromotersEquity", null);

    //        if (objvoA.TechnicalfeasibilityLoanAmountReleased != "" && objvoA.TechnicalfeasibilityLoanAmountReleased != null)
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityLoanAmountReleased", objvoA.TechnicalfeasibilityLoanAmountReleased);
    //        else
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityLoanAmountReleased", null);

    //        if (objvoA.TechnicalfeasibilityAssetsValuebyFinInstitution != "" && objvoA.TechnicalfeasibilityAssetsValuebyFinInstitution != null)
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityAssetsValuebyFinInstitution", objvoA.TechnicalfeasibilityAssetsValuebyFinInstitution);
    //        else
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityAssetsValuebyFinInstitution", null);

    //        if (objvoA.TechnicalfeasibilityAssetsValuebyCA != "" && objvoA.TechnicalfeasibilityAssetsValuebyCA != null)
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityAssetsValuebyCA", objvoA.TechnicalfeasibilityAssetsValuebyCA);
    //        else
    //            com.Parameters.AddWithValue("@TechnicalfeasibilityAssetsValuebyCA", null);

    //        if (objvoA.WorkingCapitalApprovedProjectCost != "" && objvoA.WorkingCapitalApprovedProjectCost != null)
    //            com.Parameters.AddWithValue("@WorkingCapitalApprovedProjectCost", objvoA.WorkingCapitalApprovedProjectCost);
    //        else
    //            com.Parameters.AddWithValue("@WorkingCapitalApprovedProjectCost", null);

    //        if (objvoA.WorkingCapitalLoanSactioned != "" && objvoA.WorkingCapitalLoanSactioned != null)
    //            com.Parameters.AddWithValue("@WorkingCapitalLoanSactioned", objvoA.WorkingCapitalLoanSactioned);
    //        else
    //            com.Parameters.AddWithValue("@WorkingCapitalLoanSactioned", null);

    //        if (objvoA.WorkingCapitalPromotersEquity != "" && objvoA.WorkingCapitalPromotersEquity != null)
    //            com.Parameters.AddWithValue("@WorkingCapitalPromotersEquity", objvoA.WorkingCapitalPromotersEquity);
    //        else
    //            com.Parameters.AddWithValue("@WorkingCapitalPromotersEquity", null);

    //        if (objvoA.WorkingCapitalLoanAmountReleased != "" && objvoA.WorkingCapitalLoanAmountReleased != null)
    //            com.Parameters.AddWithValue("@WorkingCapitalLoanAmountReleased", objvoA.WorkingCapitalLoanAmountReleased);
    //        else
    //            com.Parameters.AddWithValue("@WorkingCapitalLoanAmountReleased", null);

    //        if (objvoA.WorkingCapitalAssetsValuebyFinInstitution != "" && objvoA.WorkingCapitalAssetsValuebyFinInstitution != null)
    //            com.Parameters.AddWithValue("@WorkingCapitalAssetsValuebyFinInstitution", objvoA.WorkingCapitalAssetsValuebyFinInstitution);
    //        else
    //            com.Parameters.AddWithValue("@WorkingCapitalAssetsValuebyFinInstitution", null);

    //        if (objvoA.WorkingCapitalAssetsValuebyCA != "" && objvoA.WorkingCapitalAssetsValuebyCA != null)
    //            com.Parameters.AddWithValue("@WorkingCapitalAssetsValuebyCA", objvoA.WorkingCapitalAssetsValuebyCA);
    //        else
    //            com.Parameters.AddWithValue("@WorkingCapitalAssetsValuebyCA", null);

    //        if (objvoA.created_by != "" && objvoA.created_by != null)
    //            com.Parameters.AddWithValue("@created_by", objvoA.created_by);
    //        else
    //            com.Parameters.AddWithValue("@created_by", null);

    //        if (objvoA.created_dt != "" && objvoA.created_dt != null)
    //            com.Parameters.AddWithValue("@created_dt", objvoA.created_dt);
    //        else
    //            com.Parameters.AddWithValue("@created_dt", null);

    //        if (objvoA.Modified_by != "" && objvoA.Modified_by != null)
    //            com.Parameters.AddWithValue("@Modified_by", objvoA.Modified_by);
    //        else
    //            com.Parameters.AddWithValue("@Modified_by", null);

    //        if (objvoA.Modified_dt != "" && objvoA.Modified_dt != null)
    //            com.Parameters.AddWithValue("@Modified_dt", objvoA.Modified_dt);
    //        else
    //            com.Parameters.AddWithValue("@Modified_dt", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    //// IncetivesNewForm2.aspx page load binding
    //public DataSet GETINCENTIVESCAFDATA(string createdby, string incentiveid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_INCENTIVES_CAF_DATA", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (createdby != null)
    //            da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();

    //        if (incentiveid != null)
    //            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
    //        else
    //            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = null;

    //        da.Fill(ds);
    //        return ds;

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //// frmIncentiveDeptView.aspx method
    //public DataSet GetIncetiveDetailsdept(string incentiveID, string ApplicationLevel, string SentFrom)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[FETCHINC_DETAILS_ID]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
    //        {
    //            // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
    //            da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
    //            da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;
    //            da.SelectCommand.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom;
    //        }

    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    //public DataSet GetIncetiveDetailsdept(string incentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
    //        {
    //            // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
    //            da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
    //        }

    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetIncetivePOSDetailsdept(string UserCode)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[showSrcutnyDet_Coi_Inc]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        da.SelectCommand.Parameters.Add("@uid", SqlDbType.VarChar).Value = UserCode;

    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetIncetiveDetailsdeptCOI(string incentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS_COI]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
    //        {
    //            // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
    //            da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
    //        }

    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    //public DataSet GetQueryDetailsdept(string UserID, string incentiveID, string IncentiveType, string ApplicationLevel)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS_ID]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
    //        da.SelectCommand.Parameters.Add("@UserID", SqlDbType.VarChar).Value = UserID;
    //        da.SelectCommand.Parameters.Add("@incentiveIDNew", SqlDbType.VarChar).Value = incentiveID;
    //        da.SelectCommand.Parameters.Add("@IncentiveType", SqlDbType.VarChar).Value = IncentiveType;
    //        da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;


    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    //public DataSet GetIncentiveDeptDetails(string incentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_DEPT_INCENTIVE_DATA", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
    //        {
    //            // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
    //            da.SelectCommand.Parameters.Add("@incentiveID", SqlDbType.VarChar).Value = incentiveID;
    //        }

    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }

    //}
    public DataSet GetIncentiveDeptDetailsCreatedBy(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_DEPT_INCENTIVE_DATA_CREATEDBY]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@incentiveID", SqlDbType.VarChar).Value = incentiveID;
            }
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    //public DataSet GetAllIncentives(string CreatedBy)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[FetchIncentives_CAF]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@createdBy", SqlDbType.VarChar).Value = CreatedBy;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //public DataSet GetAllIncentivesByid(string CreatedBy)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[FetchIncentives_CAF_ID]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = CreatedBy;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    ////   Check Slip method:
    //public string InsertCheckSlip(IncentiveVosIncetForms objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[Usp_Ins_CheckSlip]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.CSCreatedBy != null)
    //            com.Parameters.AddWithValue("@CSCreatedBy", objvo1.CSCreatedBy);
    //        else
    //            com.Parameters.AddWithValue("@CSCreatedBy", null);

    //        if (objvo1.CSIncentiveId != null)
    //            com.Parameters.AddWithValue("@CSIncentiveId", objvo1.CSIncentiveId);
    //        else
    //            com.Parameters.AddWithValue("@CSIncentiveId", null);

    //        if (objvo1.CSbillsofinstitutfinancedEnterpriseindustries != null)
    //            com.Parameters.AddWithValue("@CSbillsofinstitutfinancedEnterpriseindustries", objvo1.CSbillsofinstitutfinancedEnterpriseindustries);
    //        else
    //            com.Parameters.AddWithValue("@CSbillsofinstitutfinancedEnterpriseindustries", null);

    //        if (objvo1.CSbillandpymtproofrespectofselffinancedEnterprisesindustries != null)
    //            com.Parameters.AddWithValue("@CSbillandpymtproofrespectofselffinancedEnterprisesindustries", objvo1.CSbillandpymtproofrespectofselffinancedEnterprisesindustries);
    //        else
    //            com.Parameters.AddWithValue("@CSbillandpymtproofrespectofselffinancedEnterprisesindustries", null);

    //        if (objvo1.CasteCertificatesSCST != null)
    //            com.Parameters.AddWithValue("@CSCasteCertificatesSCST", objvo1.CasteCertificatesSCST);
    //        else
    //            com.Parameters.AddWithValue("@CSCasteCertificatesSCST", null);

    //        if (objvo1.CSEntrepreneurAadhar != null)
    //            com.Parameters.AddWithValue("@CSEntrepreneurAadhar", objvo1.CSEntrepreneurAadhar);
    //        else
    //            com.Parameters.AddWithValue("@CSEntrepreneurAadhar", null);

    //        if (objvo1.CSEntrepreneurPANCard != null)
    //            com.Parameters.AddWithValue("@CSEntrepreneurPANCard", objvo1.CSEntrepreneurPANCard);
    //        else
    //            com.Parameters.AddWithValue("@CSEntrepreneurPANCard", null);

    //        if (objvo1.CSCertificateofCA != null)
    //            com.Parameters.AddWithValue("@CSCertificateofCA", objvo1.CSCertificateofCA);
    //        else
    //            com.Parameters.AddWithValue("@CSCertificateofCA", null);

    //        if (objvo1.CSRegdPartnershipDeedArticles != null)
    //            com.Parameters.AddWithValue("@CSRegdPartnershipDeedArticles", objvo1.CSRegdPartnershipDeedArticles);
    //        else
    //            com.Parameters.AddWithValue("@CSRegdPartnershipDeedArticles", null);

    //        if (objvo1.CSApprovalDirectorFactories != null)
    //            com.Parameters.AddWithValue("@CSApprovalDirectorFactories", objvo1.CSApprovalDirectorFactories);
    //        else
    //            com.Parameters.AddWithValue("@CSApprovalDirectorFactories", null);

    //        if (objvo1.CSBoilersCertificate != null)
    //            com.Parameters.AddWithValue("@CSBoilersCertificate", objvo1.CSBoilersCertificate);
    //        else
    //            com.Parameters.AddWithValue("@CSBoilersCertificate", null);

    //        if (objvo1.CSApprovalDirectorTownCountryPlanningUDA != null)
    //            com.Parameters.AddWithValue("@CSApprovalDirectorTownCountryPlanningUDA", objvo1.CSApprovalDirectorTownCountryPlanningUDA);
    //        else
    //            com.Parameters.AddWithValue("@CSApprovalDirectorTownCountryPlanningUDA", null);

    //        if (objvo1.CSRegularbuildingplansapprovalofMunicipalityGramPanchayat != null)
    //            com.Parameters.AddWithValue("@CSRegularbuildingplansapprovalofMunicipalityGramPanchayat", objvo1.CSRegularbuildingplansapprovalofMunicipalityGramPanchayat);
    //        else
    //            com.Parameters.AddWithValue("@CSRegularbuildingplansapprovalofMunicipalityGramPanchayat", null);

    //        if (objvo1.CSOperationTSPCBAcknowledgementGM != null)
    //            com.Parameters.AddWithValue("@CSOperationTSPCBAcknowledgementGM", objvo1.CSOperationTSPCBAcknowledgementGM);
    //        else
    //            com.Parameters.AddWithValue("@CSOperationTSPCBAcknowledgementGM", null);

    //        if (objvo1.CSPowerreleaseCertificatefrmTSTRANSCODISCOM != null)
    //            com.Parameters.AddWithValue("@CSPowerreleaseCertificatefrmTSTRANSCODISCOM", objvo1.CSPowerreleaseCertificatefrmTSTRANSCODISCOM);
    //        else
    //            com.Parameters.AddWithValue("@CSPowerreleaseCertificatefrmTSTRANSCODISCOM", null);

    //        if (objvo1.CSEnvironmentalclearance != null)
    //            com.Parameters.AddWithValue("@CSEnvironmentalclearance", objvo1.CSEnvironmentalclearance);
    //        else
    //            com.Parameters.AddWithValue("@CSEnvironmentalclearance", null);

    //        if (objvo1.CSOtherstatutoryapprovalsspecif != null)
    //            com.Parameters.AddWithValue("@CSOtherstatutoryapprovalsspecif", objvo1.CSOtherstatutoryapprovalsspecif);
    //        else
    //            com.Parameters.AddWithValue("@CSOtherstatutoryapprovalsspecif", null);

    //        if (objvo1.CSEMPartIfullsetIEMIL != null)
    //            com.Parameters.AddWithValue("@CSEMPartIfullsetIEMIL", objvo1.CSEMPartIfullsetIEMIL);
    //        else
    //            com.Parameters.AddWithValue("@CSEMPartIfullsetIEMIL", null);

    //        if (objvo1.CSEMPartIIfullsetIEMIL != null)
    //            com.Parameters.AddWithValue("@CSEMPartIIfullsetIEMIL", objvo1.CSEMPartIIfullsetIEMIL);
    //        else
    //            com.Parameters.AddWithValue("@CSEMPartIIfullsetIEMIL", null);

    //        if (objvo1.CSUdyogAadhar != null)
    //            com.Parameters.AddWithValue("@CSUdyogAadhar", objvo1.CSUdyogAadhar);
    //        else
    //            com.Parameters.AddWithValue("@CSUdyogAadhar", null);

    //        if (objvo1.CSProjectReport != null)
    //            com.Parameters.AddWithValue("@CSProjectReport", objvo1.CSProjectReport);
    //        else
    //            com.Parameters.AddWithValue("@CSProjectReport", null);

    //        if (objvo1.CSTermloansanctionletters != null)
    //            com.Parameters.AddWithValue("@CSTermloansanctionletters", objvo1.CSTermloansanctionletters);
    //        else
    //            com.Parameters.AddWithValue("@CSTermloansanctionletters", null);

    //        if (objvo1.CSBoardResolutionauthorizing != null)
    //            com.Parameters.AddWithValue("@CSBoardResolutionauthorizing", objvo1.CSBoardResolutionauthorizing);
    //        else
    //            com.Parameters.AddWithValue("@CSBoardResolutionauthorizing", null);

    //        if (objvo1.CSRegisteredlandSaledeedPremisesLeasedeed != null)
    //            com.Parameters.AddWithValue("@CSRegisteredlandSaledeedPremisesLeasedeed", objvo1.CSRegisteredlandSaledeedPremisesLeasedeed);
    //        else
    //            com.Parameters.AddWithValue("@CSRegisteredlandSaledeedPremisesLeasedeed", null);

    //        if (objvo1.CSCACECertificateregarding2handplantmachinery != null)
    //            com.Parameters.AddWithValue("@CSCACECertificateregarding2handplantmachinery", objvo1.CSCACECertificateregarding2handplantmachinery);
    //        else
    //            com.Parameters.AddWithValue("@CSCACECertificateregarding2handplantmachinery", null);

    //        if (objvo1.CSCECertificateSelffabricatedmachinery != null)
    //            com.Parameters.AddWithValue("@CSCECertificateSelffabricatedmachinery", objvo1.CSCECertificateSelffabricatedmachinery);
    //        else
    //            com.Parameters.AddWithValue("@CSCECertificateSelffabricatedmachinery", null);

    //        if (objvo1.CSBISCertificate != null)
    //            com.Parameters.AddWithValue("@CSBISCertificate", objvo1.CSBISCertificate);
    //        else
    //            com.Parameters.AddWithValue("@CSBISCertificate", null);

    //        if (objvo1.CSDrugLicense != null)
    //            com.Parameters.AddWithValue("@CSDrugLicense", objvo1.CSDrugLicense);
    //        else
    //            com.Parameters.AddWithValue("@CSDrugLicense", null);

    //        if (objvo1.CSExplosiveLicense != null)
    //            com.Parameters.AddWithValue("@CSExplosiveLicense", objvo1.CSExplosiveLicense);
    //        else
    //            com.Parameters.AddWithValue("@CSExplosiveLicense", null);

    //        if (objvo1.CSVATCSTSGSTCertificate != null)
    //            com.Parameters.AddWithValue("@CSVATCSTSGSTCertificate", objvo1.CSVATCSTSGSTCertificate);
    //        else
    //            com.Parameters.AddWithValue("@CSVATCSTSGSTCertificate", null);

    //        if (objvo1.CSFormA != null)
    //            com.Parameters.AddWithValue("@CSFormA", objvo1.CSFormA);
    //        else
    //            com.Parameters.AddWithValue("@CSFormA", null);

    //        if (objvo1.CSFormB != null)
    //            com.Parameters.AddWithValue("@CSFormB", objvo1.CSFormB);
    //        else
    //            com.Parameters.AddWithValue("@CSFormB", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    //// 1. InvestmentSubsidy.aspx method:
    //public string InsertIncentIS(IncentiveVosIncetForms objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "USP_INS_INCENT_IS";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.AppldAddlAmtWomen != null)
    //            com.Parameters.AddWithValue("@AppldAddlAmtWomen", objvo1.AppldAddlAmtWomen);
    //        else
    //            com.Parameters.AddWithValue("@AppldAddlAmtWomen", null);
    //        if (objvo1.AppldInvestSubsidy != null)
    //            com.Parameters.AddWithValue("@AppldInvestSubsidy", objvo1.AppldInvestSubsidy);
    //        else
    //            com.Parameters.AddWithValue("@AppldInvestSubsidy", null);
    //        if (objvo1.AppldTotInvestSubsidy != null)
    //            com.Parameters.AddWithValue("@AppldTotInvestSubsidy", objvo1.AppldTotInvestSubsidy);
    //        else
    //            com.Parameters.AddWithValue("@AppldTotInvestSubsidy", null);

    //        if (objvo1.AvldSubsidyAmt != null)
    //            com.Parameters.AddWithValue("@AvldSubsidyAmt", objvo1.AvldSubsidyAmt);
    //        else
    //            com.Parameters.AddWithValue("@AvldSubsidyAmt", null);


    //        if (objvo1.AvldSubsidyScheme != null)
    //            com.Parameters.AddWithValue("@AvldSubsidyScheme", objvo1.AvldSubsidyScheme);
    //        else
    //            com.Parameters.AddWithValue("@AvldSubsidyScheme", null);


    //        if (objvo1.Created_by != null)
    //            com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
    //        else
    //            com.Parameters.AddWithValue("@Created_by", null);

    //        if (objvo1.IncentveID != null)
    //            com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
    //        else
    //            com.Parameters.AddWithValue("@IncentveID", null);

    //        if (objvo1.SchemeEligible != null)
    //            com.Parameters.AddWithValue("@SchemeEligible", objvo1.SchemeEligible);
    //        else
    //            com.Parameters.AddWithValue("@SchemeEligible", null);

    //        // added newly on 12.06.2017
    //        if (objvo1.SchemeEligible != null)
    //            com.Parameters.AddWithValue("@ISubsidySCSCT", objvo1.ISubsidySCSCT);
    //        else
    //            com.Parameters.AddWithValue("@ISubsidySCSCT", null);

    //        if (objvo1.SchemeEligible != null)
    //            com.Parameters.AddWithValue("@ISubsidyScheduledAreas", objvo1.ISubsidyScheduledAreas);
    //        else
    //            com.Parameters.AddWithValue("@ISubsidyScheduledAreas", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    //// 2). Stamp Duty.aspx: method
    //public string InsertIncentStampDuty(IncentiveVosIncetForms objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "USP_INS_INCENT_DUTY";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.AreaRegdSaledeed != null)
    //            com.Parameters.AddWithValue("@AreaRegdSaledeed", objvo1.AreaRegdSaledeed);
    //        else
    //            com.Parameters.AddWithValue("@AreaRegdSaledeed", null);

    //        if (objvo1.PlnthAreaBuild != null)
    //            com.Parameters.AddWithValue("@PlnthAreaBuild", objvo1.PlnthAreaBuild);
    //        else
    //            com.Parameters.AddWithValue("@PlnthAreaBuild", null);

    //        if (objvo1.FivePlnthAreaBuild != null)
    //            com.Parameters.AddWithValue("@FivePlnthAreaBuild", objvo1.FivePlnthAreaBuild);
    //        else
    //            com.Parameters.AddWithValue("@FivePlnthAreaBuild", null);

    //        if (objvo1.AreaReqdAppraisal != null)
    //            com.Parameters.AddWithValue("@AreaReqdAppraisal", objvo1.AreaReqdAppraisal);
    //        else
    //            com.Parameters.AddWithValue("@AreaReqdAppraisal", null);

    //        if (objvo1.AreaReqdTSPCB != null)
    //            com.Parameters.AddWithValue("@AreaReqdTSPCB", objvo1.AreaReqdTSPCB);
    //        else
    //            com.Parameters.AddWithValue("@AreaReqdTSPCB", null);

    //        if (objvo1.NatureofTrans != null)
    //            com.Parameters.AddWithValue("@NatureofTrans", objvo1.NatureofTrans);
    //        else
    //            com.Parameters.AddWithValue("@NatureofTrans", null);

    //        if (objvo1.SubRegOffc != null)
    //            com.Parameters.AddWithValue("@SubRegOffc", objvo1.SubRegOffc);
    //        else
    //            com.Parameters.AddWithValue("@SubRegOffc", null);

    //        if (objvo1.RegdDeedNo != null)
    //            com.Parameters.AddWithValue("@RegdDeedNo", objvo1.RegdDeedNo);
    //        else
    //            com.Parameters.AddWithValue("@RegdDeedNo", null);

    //        string date = Convert.ToDateTime(objvo1.RegnDate).ToShortDateString();

    //        if (objvo1.RegnDate != null)
    //            com.Parameters.AddWithValue("@regndate", objvo1.RegnDate);
    //        else
    //            com.Parameters.AddWithValue("@regndate", null);


    //        if (objvo1.StampTranfrDutyAP != null)
    //            com.Parameters.AddWithValue("@StampTranfrDutyAP", objvo1.StampTranfrDutyAP);
    //        else
    //            com.Parameters.AddWithValue("@StampTranfrDutyAP", null);


    //        if (objvo1.MortgageHypothDutyAP != null)
    //            com.Parameters.AddWithValue("@MortgageHypothDutyAP", objvo1.MortgageHypothDutyAP);
    //        else
    //            com.Parameters.AddWithValue("@MortgageHypothDutyAP", null);

    //        if (objvo1.LandConvrChrgAP != null)
    //            com.Parameters.AddWithValue("@LandConvrChrgAP", objvo1.LandConvrChrgAP);
    //        else
    //            com.Parameters.AddWithValue("@LandConvrChrgAP", null);

    //        if (objvo1.LandCostIeIdaIpAP != null)
    //            com.Parameters.AddWithValue("@LandCostIeIdaIpAP", objvo1.LandCostIeIdaIpAP);
    //        else
    //            com.Parameters.AddWithValue("@LandCostIeIdaIpAP", null);

    //        if (objvo1.StampTranfrDutyAC != null)
    //            com.Parameters.AddWithValue("@StampTranfrDutyAC", objvo1.StampTranfrDutyAC);
    //        else
    //            com.Parameters.AddWithValue("@StampTranfrDutyAC", null);

    //        if (objvo1.MortgageHypothDutyAC != null)
    //            com.Parameters.AddWithValue("@MortgageHypothDutyAC", objvo1.MortgageHypothDutyAC);
    //        else
    //            com.Parameters.AddWithValue("@MortgageHypothDutyAC", null);

    //        if (objvo1.LandConvrChrgAC != null)
    //            com.Parameters.AddWithValue("@LandConvrChrgAC", objvo1.LandConvrChrgAC);
    //        else
    //            com.Parameters.AddWithValue("@LandConvrChrgAC", null);


    //        if (objvo1.LandCostIeIdaIpAC != null)
    //            com.Parameters.AddWithValue("@LandCostIeIdaIpAC", objvo1.LandCostIeIdaIpAC);
    //        else
    //            com.Parameters.AddWithValue("@LandCostIeIdaIpAC", null);

    //        if (objvo1.Created_by != null)
    //            com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
    //        else
    //            com.Parameters.AddWithValue("@Created_by", null);

    //        if (objvo1.IncentveID != null)
    //            com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
    //        else
    //            com.Parameters.AddWithValue("@IncentveID", null);



    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    //// 3). Power.aspx
    ////public int InsertFormIIIIncentivesNew(string CreatedBy, int Incentiveid, string AmountClaimed)
    ////{
    ////    int valid = 1;
    ////    SqlConnection connection = new SqlConnection(str);
    ////    SqlTransaction transaction = null;
    ////    connection.Open();
    ////    transaction = connection.BeginTransaction();

    ////    try
    ////    {
    ////        SqlCommand cmdFormIII = new SqlCommand("USP_INS_FormIII_Incentives", connection);
    ////        //SqlCommand cmdFormIII = new SqlCommand("USP_INS_FormIII_IncentivesNew", connection);
    ////        cmdFormIII.CommandType = CommandType.StoredProcedure;
    ////        //  cmdFormIII.CommandTimeout = 180;  // added newly
    ////        cmdFormIII.Transaction = transaction;
    ////        cmdFormIII.Connection = connection;
    ////        cmdFormIII.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
    ////        cmdFormIII.Parameters.AddWithValue("@AmountClaimed", SqlDbType.VarChar).Value = AmountClaimed;
    ////        cmdFormIII.Parameters.AddWithValue("@Created_By", SqlDbType.VarChar).Value = CreatedBy;
    ////        cmdFormIII.ExecuteNonQuery();

    ////        return 0;
    ////    }
    ////    catch (Exception ex)
    ////    {
    ////        throw ex;
    ////    }
    ////    finally
    ////    {
    ////        con.CloseConnection();
    ////    }
    ////}
    //public int InsertFormIIIIncentivesNew(string CreatedBy, int Incentiveid, string AmountClaimed)
    //{
    //    int valid = 1;
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand cmdFormIII = new SqlCommand("USP_INS_FormIII_Incentives", connection);
    //        cmdFormIII.CommandType = CommandType.StoredProcedure;
    //        cmdFormIII.Transaction = transaction;
    //        cmdFormIII.Connection = connection;
    //        cmdFormIII.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
    //        cmdFormIII.Parameters.AddWithValue("@AmountClaimed", SqlDbType.VarChar).Value = AmountClaimed;
    //        cmdFormIII.Parameters.AddWithValue("@Created_By", SqlDbType.VarChar).Value = CreatedBy;
    //        cmdFormIII.ExecuteNonQuery();

    //        transaction.Commit();
    //        //connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}
    //public int bulkInsertPower(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["IncentiveId"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("UnitsConsumed", "UnitsConsumed");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("AmountPaid", "Amount");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);

    //        bulkCopy.DestinationTableName = ("tbl_FormIII_Power_Incentives");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}
    //public int bulkInsertEnergy(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["IncentiveId"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("1stUnitsConsumed", "F_UnitsConsumed");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("1stAmountPaid", "F_Amount");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("2ndUnitsConsumed", "S_UnitsConsumed");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("2ndAmountPaid", "S_Amount");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
    //        SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);
    //        bulkCopy.ColumnMappings.Add(mapping7);

    //        bulkCopy.DestinationTableName = ("tbl_FormIII_Energy_Incentives");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}

    ////4). form4(Pavala vaddi)
    //public int bulkInsertPV(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["IncentiveId"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("InterestpaidonTermLoan", "IntrestPaid");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Rateofinterest", "RateofIntrest");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Interestpaidexcludingpenalinterest", "IntrestPenaltyPaid");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("EligibleMax", "Eligible");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Amountclaimed", "AmountClaimed");
    //        SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
    //        SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);
    //        bulkCopy.ColumnMappings.Add(mapping7);
    //        bulkCopy.ColumnMappings.Add(mapping8);

    //        bulkCopy.DestinationTableName = ("tbl_FormIV_Incentives");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}
    //// 5). frmIncentiveForm5.aspx(Sales Tax) method
    //public int bulkInsertPowerForm5(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["IncentiveId"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("UnitsConsumed", "Unit");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("AmountPaid", "Quantity");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Value", "Value");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);

    //        bulkCopy.DestinationTableName = ("tbl_FormV_Production_Incentives");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}
    //public int bulkInsertEnergyForm5(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["IncentiveId"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("1stUnitsConsumed", "F_AmountPaid");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("1stAmountPaid", "F_AmountClaimed");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("2ndUnitsConsumed", "S_AmountPaid");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("2ndAmountPaid", "S_AmountClaimed");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
    //        SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);
    //        bulkCopy.ColumnMappings.Add(mapping7);

    //        bulkCopy.DestinationTableName = ("tbl_FormV_SalesTax_Incentives");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}

    //// 6).IncentiveFORMVI.aspx(Quality Certification) method
    //public int InsertFormVivalues(formVIVo formvoobj)
    //{
    //    int valid = 0;
    //    con.OpenConnection();
    //    SqlCommand cmd = new SqlCommand("InsertFormvo", con.GetConnection);

    //    cmd.CommandType = CommandType.StoredProcedure;
    //    try
    //    {
    //        //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
    //        //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
    //        cmd.Parameters.AddWithValue("@IncentiveID", Convert.ToString(formvoobj.IncentiveID));
    //        cmd.Parameters.AddWithValue("@agencyName", Convert.ToString(formvoobj.agencyName));
    //        cmd.Parameters.AddWithValue("@CertificateNumber", Convert.ToString(formvoobj.CertificateNumber));
    //        cmd.Parameters.AddWithValue("@DateofIssue", Convert.ToString(cmf.convertDateIndia(formvoobj.DateofIssue)));
    //        cmd.Parameters.AddWithValue("@periodofvalidity", Convert.ToString(cmf.convertDateIndia(formvoobj.periodofvalidity)));
    //        cmd.Parameters.AddWithValue("@Amountspentinacquiringthecertification", Convert.ToString(formvoobj.Amountspentinacquiringthecertification));
    //        cmd.Parameters.AddWithValue("@FromCentralGovernment", Convert.ToString(formvoobj.FromCentralGovernment));
    //        cmd.Parameters.AddWithValue("@FromStateGovernment", Convert.ToString(formvoobj.FromStateGovernment));
    //        cmd.Parameters.AddWithValue("@Fromfinancinginstitution", Convert.ToString(formvoobj.Fromfinancinginstitution));
    //        cmd.Parameters.AddWithValue("@State", Convert.ToString(formvoobj.State));
    //        cmd.Parameters.AddWithValue("@Dist", Convert.ToString(formvoobj.Dist));
    //        cmd.Parameters.AddWithValue("@Mandal", Convert.ToString(formvoobj.Mandal));
    //        cmd.Parameters.AddWithValue("@Village", Convert.ToString(formvoobj.Village));
    //        cmd.Parameters.AddWithValue("@DoorNo", Convert.ToString(formvoobj.DoorNo));
    //        cmd.Parameters.AddWithValue("@Pincode", Convert.ToString(formvoobj.Pincode));
    //        cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(formvoobj.Created_By));
    //        cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
    //        cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        cmd.ExecuteNonQuery();
    //        valid = (Int32)cmd.Parameters["@Valid"].Value;
    //        con.CloseConnection();
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    return valid;
    //}

    //// 7). seedcap.aspx not having any save method

    //// 8). IncentiveFromVIII.aspx method
    //public int InsertFormVIIIvalues(List<formVIIIVo> lstformvo)
    //{
    //    int valid = 0;
    //    con.OpenConnection();
    //    SqlCommand cmd = null;
    //    try
    //    {
    //        foreach (formVIIIVo formvoobj in lstformvo)
    //        {
    //            cmd = new SqlCommand("USP_INSERT_IncentiveFormVIII", con.GetConnection);
    //            cmd.CommandType = CommandType.StoredProcedure;
    //            //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
    //            //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
    //            cmd.Parameters.AddWithValue("@IncentiveID", Convert.ToString(formvoobj.IncentiveID));
    //            cmd.Parameters.AddWithValue("@Nameoftheequipment", Convert.ToString(formvoobj.Nameoftheequipment));
    //            cmd.Parameters.AddWithValue("@Nameaddressofsupplier", Convert.ToString(formvoobj.Nameaddressofsupplier));
    //            cmd.Parameters.AddWithValue("@BillNo", Convert.ToString(formvoobj.BillNo));
    //            cmd.Parameters.AddWithValue("@BillDate", Convert.ToString(cmf.convertDateIndia(formvoobj.BillDate)));
    //            cmd.Parameters.AddWithValue("@Costoftheequipment", Convert.ToString(formvoobj.Costoftheequipment));
    //            cmd.Parameters.AddWithValue("@VATCST", Convert.ToString(formvoobj.VATCST));
    //            cmd.Parameters.AddWithValue("@ExciseDuty", Convert.ToString(formvoobj.ExciseDuty));
    //            cmd.Parameters.AddWithValue("@FreightCharge", Convert.ToString(formvoobj.FreightCharge));
    //            cmd.Parameters.AddWithValue("@Othercharges", Convert.ToString(formvoobj.Othercharges));
    //            cmd.Parameters.AddWithValue("@TotalinRs", Convert.ToString(formvoobj.TotalinRs));
    //            cmd.Parameters.AddWithValue("@subsidyclaimed", Convert.ToString(formvoobj.subsidyclaimed));
    //            cmd.Parameters.AddWithValue("@id", Convert.ToString(formvoobj.id));

    //            cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(formvoobj.Created_By));
    //            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
    //            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //            cmd.ExecuteNonQuery();
    //            valid = (Int32)cmd.Parameters["@Valid"].Value;
    //        }
    //        con.CloseConnection();
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    return valid;
    //}

    //// 9).IncentiveFormIX.aspx method
    //public int InsertFormIXvalues(formIXVo formvoobj)
    //{
    //    int valid = 0;
    //    con.OpenConnection();
    //    SqlCommand cmd = new SqlCommand("InsertFormIXVO", con.GetConnection);

    //    cmd.CommandType = CommandType.StoredProcedure;
    //    try
    //    {
    //        //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
    //        //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
    //        cmd.Parameters.AddWithValue("@IncentiveID", Convert.ToString(formvoobj.Incentiveid));
    //        cmd.Parameters.AddWithValue("@Nameofthetraininginstitute", Convert.ToString(formvoobj.Nameofthetraininginstitute));
    //        cmd.Parameters.AddWithValue("@Nameoftheskilldevelopmentprogramme", Convert.ToString(formvoobj.Nameoftheskilldevelopmentprogramme));
    //        cmd.Parameters.AddWithValue("@Numberskilledemployees", Convert.ToString(formvoobj.Numberskilledemployees));
    //        cmd.Parameters.AddWithValue("@Expenditureincurredtrainingprogramme", Convert.ToString(formvoobj.Expenditureincurredtrainingprogramme));
    //        cmd.Parameters.AddWithValue("@Amountclaimed", Convert.ToString(formvoobj.Amountclaimed));
    //        cmd.Parameters.AddWithValue("@Durationoftraining", Convert.ToString(formvoobj.Durationoftraining));

    //        cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(formvoobj.Created_By));
    //        cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
    //        cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        cmd.ExecuteNonQuery();
    //        valid = (Int32)cmd.Parameters["@Valid"].Value;
    //        con.CloseConnection();
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }
    //    return valid;
    //}

    //// 10).IIDFund.aspx method
    //public string InsertIncentIIDF(IncentiveVosIncetForms objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "USP_INS_INCENT_IIDF";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.UnitLocatedinIndustArea != null)
    //            com.Parameters.AddWithValue("@UnitLocatedinIndustArea", objvo1.UnitLocatedinIndustArea);
    //        else
    //            com.Parameters.AddWithValue("@UnitLocatedinIndustArea", null);

    //        if (objvo1.JustLocation != null)
    //            com.Parameters.AddWithValue("@JustLocation", objvo1.JustLocation);
    //        else
    //            com.Parameters.AddWithValue("@JustLocation", null);

    //        if (objvo1.FinanceSource != null)
    //            com.Parameters.AddWithValue("@FinanceSource", objvo1.FinanceSource);
    //        else
    //            com.Parameters.AddWithValue("@FinanceSource", null);

    //        if (objvo1.ReqdInfraFacilities != null)
    //            com.Parameters.AddWithValue("@ReqdInfraFacilities", objvo1.ReqdInfraFacilities);
    //        else
    //            com.Parameters.AddWithValue("@ReqdInfraFacilities", null);

    //        if (objvo1.ProposedInfraCritical != null)
    //            com.Parameters.AddWithValue("@ProposedInfraCritical", objvo1.ProposedInfraCritical);
    //        else
    //            com.Parameters.AddWithValue("@ProposedInfraCritical", null);

    //        if (objvo1.EstimatesInfra != null)
    //            com.Parameters.AddWithValue("@EstimatesInfra", objvo1.EstimatesInfra);
    //        else
    //            com.Parameters.AddWithValue("@EstimatesInfra", null);

    //        if (objvo1.CAName != null)
    //            com.Parameters.AddWithValue("@CAName", objvo1.CAName);
    //        else
    //            com.Parameters.AddWithValue("@CAName", null);

    //        if (objvo1.ProjDuration != null)
    //            com.Parameters.AddWithValue("@ProjDuration", objvo1.ProjDuration);
    //        else
    //            com.Parameters.AddWithValue("@ProjDuration", null);

    //        if (objvo1.MaintanCostAnnum != null)
    //            com.Parameters.AddWithValue("@MaintanCostAnnum", objvo1.MaintanCostAnnum);
    //        else
    //            com.Parameters.AddWithValue("@MaintanCostAnnum", null);

    //        if (objvo1.AmtClaimed != null)
    //            com.Parameters.AddWithValue("@AmtClaimed", objvo1.AmtClaimed);
    //        else
    //            com.Parameters.AddWithValue("@AmtClaimed", null);

    //        if (objvo1.Created_by != null)
    //            com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
    //        else
    //            com.Parameters.AddWithValue("@Created_by", null);

    //        if (objvo1.IncentveID != null)
    //            com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
    //        else
    //            com.Parameters.AddWithValue("@IncentveID", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    //// 11).AdvanceSubsidyForSCandST.aspx method
    //public string InsertIncentAdvSub(IncentiveVosIncetForms objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "USP_INS_INCENT_AdvSub";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.TotalEquity != null)
    //            com.Parameters.AddWithValue("@TotalEquity", objvo1.TotalEquity);
    //        else
    //            com.Parameters.AddWithValue("@TotalEquity", null);

    //        if (objvo1.OwnCapital != null)
    //            com.Parameters.AddWithValue("@OwnCapital", objvo1.OwnCapital);
    //        else
    //            com.Parameters.AddWithValue("@OwnCapital", null);

    //        if (objvo1.Borrowed != null)
    //            com.Parameters.AddWithValue("@Borrowed", objvo1.Borrowed);
    //        else
    //            com.Parameters.AddWithValue("@Borrowed", null);

    //        if (objvo1.AdvSubClaimed != null)
    //            com.Parameters.AddWithValue("@AdvSubClaimed", objvo1.AdvSubClaimed);
    //        else
    //            com.Parameters.AddWithValue("@AdvSubClaimed", null);

    //        if (objvo1.Created_by != null)
    //            com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
    //        else
    //            com.Parameters.AddWithValue("@Created_by", null);

    //        if (objvo1.IncentveID != null)
    //            com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
    //        else
    //            com.Parameters.AddWithValue("@IncentveID", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    //// 12). FinalPage.aspx method
    //public void UpdateIncentivesCAFStatus(string incentiveid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    SqlCommand cmd = null;

    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_UPDATE_CAF_STATUS", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;



    //        if (incentiveid.Trim() == "" || incentiveid.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = incentiveid.ToString();

    //        da.Fill(ds);
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    // Commented by Prasanna
    //lavanya reports new
    public DataSet GetFinancialYearsForReports()//, string mandalcd, string Villagecd, string Clusterid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FINANCIALYEARS_REPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetRptGlance_New1(string input, string financial, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("GetRptGlance2_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@InputFlg", SqlDbType.VarChar).Value = input.ToString();
            da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = financial.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetR1ReportbyDistrictidNew(string intDistrictid, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1ReportbyDistrictid_New_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetR13ranking(string fromdate, string todate, string type)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("RANKINGTOOL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet RetriveStatusForViewApplicationNew(string status, string Category, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByTypeNew(string status, string type, string Category, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRIDrillDownPhase2New_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveApprovalsStatusByTypeNew(string status, string type, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1Drilldownphase4New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByType1New(string status, string type, string Category, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1DrillDownPhase3new_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet sp_YearWiseProgressNew(string Category, string District, string input, string financial, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_YearWiseProgress_new_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@InputFlg", SqlDbType.VarChar).Value = input.ToString();
            da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = financial.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getR1DrildownbyidfinNew(string status, string Category, string District, string input, string financial, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidfinNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@InputFlg", SqlDbType.VarChar).Value = input.ToString();
            da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = financial.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetDistrictWiseCertificateNew(string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDistrictWisereportCertificatenew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getCertpendencyNew(string status, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getCertpendencynew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet RetriveApprovalsPendingBeyondTimeLimitNew(string intDeptid, string DistID, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_RetriveApprovalsPendingBeyondTimeLimitNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            if (DistID.Trim() == "" || DistID.Trim() == null)
                da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@district", SqlDbType.VarChar).Value = DistID.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetDeptPendencyNew(string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDeptPendencyNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetDeptPendencyDetailedNew(string Department, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDeptPendencyDrildownNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@intdept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intdept", SqlDbType.VarChar).Value = Department.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //public DataSet FetchTotalDistrictwise_New_New(string status, string fromdate, string todate)
    //{

    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();

    //    try
    //    {
    //        da = new SqlDataAdapter("FetchTotalDistrictwise_New_New", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;

    //        if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
    //        da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
    //        da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }

    public DataSet FetchTotalDistrictwise_New_New(string status, string fromdate, string todate, string EnterPriseType, string Districtid)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTotalDistrictwise_New_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            if (Districtid.Trim() == "" || Districtid.Trim() == null || Districtid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Districtid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Districtid", SqlDbType.VarChar).Value = Districtid.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet FetchTotalSectorwise_New_NEW(string status, string fromdate, string todate, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTotalSectorwise_New_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTotalSectorwise_NewUptoOnecrore(string status, string fromdate, string todate, string investment)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("[FetchTotalSectorwise_New_UPTOONECRORE]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@investment", SqlDbType.VarChar).Value = investment.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet FetchStageOfImplementationwise_New_New(string status, string fromdate, string todate, string EnterPriseType)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchStageOfImplementationwise_New_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet FetchTableOnEmployment_New_New(string status, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTableOnEmployment_New_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet FetchTableOnInvestment_New_New(string status, string fromdate, string todate)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTableOnInvestment_New_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet sp_DepartmentWiseReportNew(string Category, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("FetchDepartmentWiseNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusForViewApplicationDepartmentwiseNew(string status, string Category, string District, string Dept, string fromdate, string todate, string approvalid)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidbyDepartmentNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            if (Dept.Trim() == "" || Dept.Trim() == null || Dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();
            if (approvalid.Trim() == "" || approvalid.Trim() == null || approvalid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@ApprovalID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ApprovalID", SqlDbType.VarChar).Value = approvalid.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet sp_GetDepartmentNameReportNew(string Department, string District, string Status, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("sp_GetDepartmentNameReportNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Status.Trim() == "" || Status.Trim() == null)
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();
            if (District.Trim() == "" || District.Trim() == null || District.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RptAPPROVALSBYDEPARTMENTWISENew(string Category, string Department, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("RptAPPROVALSBYDEPARTMENTWISENew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (Department.Trim() == "" || Department.Trim() == null || Department.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Department", SqlDbType.VarChar).Value = Department.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusForViewApplicationDepartmentApprovalwiseNew(string status, string Category, string District, string Dept, string intDeptid, string fromdate, string todate)//, string Category, string District
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getR1DrildownbyidbyDepartmentApprovalSNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            if (Dept.Trim() == "" || Dept.Trim() == null || Dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept", SqlDbType.VarChar).Value = Dept.ToString();


            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetRPTAPPROVALSGIVENINTSiPASSNew(string Category, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRPTAPPROVALSGIVENINTSiPASSNew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Ent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Ent", SqlDbType.VarChar).Value = Category.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet DeptReportDepartmentWise_New1(string intDistrictid, string Category, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_New_export"
            da = new SqlDataAdapter("DeptReportDepartmentWise_New1_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByTypeDistrictNew(string status, string type, string Category, string dept, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetRIDrillDownPhase2DeptNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();



            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@dept", SqlDbType.VarChar).Value = dept.ToString();

            if (District.Trim() == "" || District.Trim() == null || District.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet RetriveStatusByTypedeptNew(string status, string type, string intDeptid, string District, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetR1DrillDownPhase3DeptNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (type.Trim() == "" || type.Trim() == null)
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@type", SqlDbType.VarChar).Value = type.ToString();
            if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // added newly for Industry satus NEW/Expansion/Diversification

    //public DataSet GetIncentivesCaste(string createdby, string incentiveid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_INCENTIVES_CASTE", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (createdby != null)
    //            da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();

    //        if (incentiveid != null)
    //            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
    //        else
    //            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = null;

    //        da.Fill(ds);
    //        return ds;

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    //lavanya 22.06.2017
    //public DataSet FetchDistrictwiseDrildownNew(string status, string District, string fromdate, string todate)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();

    //    try
    //    {
    //        da = new SqlDataAdapter("FetchDistrictwiseDrildownnew", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
    //            da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

    //        if (District.Trim() == "" || District.Trim() == null)
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
    //        else
    //            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
    //        da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
    //        da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet FetchDistrictwiseDrildownNew(string status, string District, string fromdate, string todate, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchDistrictwiseDrildownnew_CFE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (District.Trim() == "" || District.Trim() == null)
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet FetchSectorwiseDrildownNewNew(string status, string Sector, string fromdate, string todate, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchSectorwiseDrildownnew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null)
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchSectorwiseDrildownNewUptoonecrore(string status, string Sector, string fromdate, string todate, string investment)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("[FetchSectorwiseDrildownUPtoOneCrore]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null)
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.SelectCommand.Parameters.Add("@investment", SqlDbType.VarChar).Value = investment.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchProgresswiseDrildownnew(string status, string Progress, string fromdate, string todate, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchProgresswiseDrildownNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Progress.Trim() == "" || Progress.Trim() == null)
                da.SelectCommand.Parameters.Add("@Progress", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Progress", SqlDbType.VarChar).Value = Progress.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchEmploymentwiseDrildownNew(string status, string Employment, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchEmploymentwiseDrildownNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Employment.Trim() == "" || Employment.Trim() == null)
                da.SelectCommand.Parameters.Add("@Employment", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Employment", SqlDbType.VarChar).Value = Employment.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchInvestmentwiseDrildownNew(string status, string Investment, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchInvestmentwiseDrildownNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Investment.Trim() == "" || Investment.Trim() == null)
                da.SelectCommand.Parameters.Add("@Investment", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Investment", SqlDbType.VarChar).Value = Investment.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetRptGlance2_New1(string input, string financial, string fromdate, string todate, string Flag)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("GetRptGlance2_New1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@InputFlg", SqlDbType.VarChar).Value = input.ToString();
            da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = financial.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@Flag", SqlDbType.VarChar).Value = Flag.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    // added newly on 02.07.2017
    //public int bulkInsertNewEnterPriseExpanLOA(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["Column5"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "LineofActivity");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "NameofUnit");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "InstalledCapacity");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "Value");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column5", "Incentive_id");
    //        SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Column6", "LOAType");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);
    //        bulkCopy.ColumnMappings.Add(mapping7);

    //        bulkCopy.DestinationTableName = ("Incentives_Line_of_Activity");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}

    //public int bulkInsertDirectorPartner(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["Column8"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "NameofDrctr");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "Community");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "Share");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "Percentage");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column8", "Incentive_id");
    //        SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Column7", "Gender");
    //        SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Column5", "AuthorisedSign");
    //        SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Column6", "Authdesignation");    // --  AuthorisedSign  Authdesignation



    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);
    //        bulkCopy.ColumnMappings.Add(mapping7);
    //        bulkCopy.ColumnMappings.Add(mapping8);
    //        bulkCopy.ColumnMappings.Add(mapping9);

    //        bulkCopy.DestinationTableName = ("Incentives_DirectorPartner_Details");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}


    // krishna
    public int bulkInsertTermLoanDetails(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["Column5"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "TermLoanNo");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "TermLoanApplDate");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "InstitutionName");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "TermloanSandate");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Createdby");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column5", "IncentveID");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Column7", "TermLoanSancRefNo");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Column6", "TermLoanReleaseddate");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);

            bulkCopy.DestinationTableName = ("Incentives_TermLoan_dtls");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }


    // update TIDEA FLAG & TPRIDE FLAG
    //public string UpdateTideaTprimeFlag(string incentiveid)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "USP_UPDATE_TIDEA_TPRIDE_FLAG";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (incentiveid != null)
    //            com.Parameters.AddWithValue("@INCENTIVEID", incentiveid);
    //        else
    //            com.Parameters.AddWithValue("@INCENTIVEID", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    //DIPC Entry Screen
    public string InsertCOIDIPCDetails(IncentivesVOs objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INS_SANTION_DIPC]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.User_Id != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.User_Id);
            else
                com.Parameters.AddWithValue("@Created_by", null);
            if (objvo1.UnitName != null)
                com.Parameters.AddWithValue("@NameofUnit", objvo1.UnitName);
            else
                com.Parameters.AddWithValue("@NameofUnit", null);

            if (objvo1.UnitState != null)
                com.Parameters.AddWithValue("@State", objvo1.UnitState);
            else
                com.Parameters.AddWithValue("@State", null);

            if (objvo1.UnitDIst != null)
                com.Parameters.AddWithValue("@District", objvo1.UnitDIst);
            else
                com.Parameters.AddWithValue("@District", null);

            if (objvo1.UnitMandal != null)
                com.Parameters.AddWithValue("@Mandal", objvo1.UnitMandal);
            else
                com.Parameters.AddWithValue("@Mandal", null);

            if (objvo1.UnitVill != null)
                com.Parameters.AddWithValue("@Village", objvo1.UnitVill);
            else
                com.Parameters.AddWithValue("@Village", null);

            if (objvo1.UnitHNO != null)
                com.Parameters.AddWithValue("@SurveyNo", objvo1.UnitHNO);
            else
                com.Parameters.AddWithValue("@SurveyNo", null);

            if (objvo1.UnitStreet != null)
                com.Parameters.AddWithValue("@Street", objvo1.UnitStreet);
            else
                com.Parameters.AddWithValue("@Street", null);

            if (objvo1.SocialStatus != null)
                com.Parameters.AddWithValue("@Caste", objvo1.SocialStatus);
            else
                com.Parameters.AddWithValue("@Caste", null);

            if (objvo1.DateOfComm != null)
                com.Parameters.AddWithValue("@DateofCommencement", objvo1.DateOfComm);
            else
                com.Parameters.AddWithValue("@DateofCommencement", null);

            if (objvo1.incentiveTypeID != null)
                com.Parameters.AddWithValue("@IncentiveId", objvo1.incentiveTypeID);
            else
                com.Parameters.AddWithValue("@IncentiveId", null);

            if (objvo1.incentiveTypename != null)
                com.Parameters.AddWithValue("@IncentiveName", objvo1.incentiveTypename);
            else
                com.Parameters.AddWithValue("@IncentiveName", null);

            if (objvo1.recommendedAnount != null)
                com.Parameters.AddWithValue("@RecommendedAmount", objvo1.recommendedAnount);
            else
                com.Parameters.AddWithValue("@RecommendedAmount", null);

            if (objvo1.sanctionAmount != null)
                com.Parameters.AddWithValue("@SanctionedAmount", objvo1.sanctionAmount);
            else
                com.Parameters.AddWithValue("@SanctionedAmount", null);

            if (objvo1.sanctionDate != null)
                com.Parameters.AddWithValue("@SanctionedDate", objvo1.sanctionDate);
            else
                com.Parameters.AddWithValue("@SanctionedDate", null);

            if (objvo1.DIPCNO != null)
                com.Parameters.AddWithValue("@DIPCNumer", objvo1.DIPCNO);
            else
                com.Parameters.AddWithValue("@DIPCNumer", null);

            if (objvo1.DIPCDate != null)
                com.Parameters.AddWithValue("@DIPCDate", objvo1.DIPCDate);
            else
                com.Parameters.AddWithValue("@DIPCDate", null);

            if (objvo1.SCHEMEName != null)
                com.Parameters.AddWithValue("@SchemeName", objvo1.SCHEMEName);
            else
                com.Parameters.AddWithValue("@SchemeName", null);

            if (objvo1.Status != null)
                com.Parameters.AddWithValue("@Status", objvo1.Status);
            else
                com.Parameters.AddWithValue("@Status", null);

            if (objvo1.Remarks != null)
                com.Parameters.AddWithValue("@Remarks", objvo1.Remarks);
            else
                com.Parameters.AddWithValue("@Remarks", null);

            //29072017
            if (objvo1.Sector != null)
                com.Parameters.AddWithValue("@Sector", objvo1.Sector);
            else
                com.Parameters.AddWithValue("@Sector", null);

            if (objvo1.Category != null)
                com.Parameters.AddWithValue("@IndsCategory", objvo1.Category);
            else
                com.Parameters.AddWithValue("@IndsCategory", null);

            if (objvo1.Gender != null)
                com.Parameters.AddWithValue("@Gender", objvo1.Gender);
            else
                com.Parameters.AddWithValue("@Gender", null);

            if (objvo1.BankName != null)
                com.Parameters.AddWithValue("@BankName", objvo1.BankName);
            else
                com.Parameters.AddWithValue("@BankName", null);

            if (objvo1.TypeOfAccount != null)
                com.Parameters.AddWithValue("@TypeOfAcount", objvo1.TypeOfAccount);
            else
                com.Parameters.AddWithValue("@TypeOfAcount", null);

            if (objvo1.IFSCCode != null)
                com.Parameters.AddWithValue("@IFSCCode", objvo1.IFSCCode);
            else
                com.Parameters.AddWithValue("@IFSCCode", null);
            if (objvo1.IsDifferentlyAbled != null)
                com.Parameters.AddWithValue("@IsDifferentlyAbled", objvo1.IsDifferentlyAbled);
            else
                com.Parameters.AddWithValue("@IsDifferentlyAbled", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    //SLC Entry Screen
    public string InsertCOISLCDetails(IncentivesVOs objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INS_SANTION_SLC]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.User_Id != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.User_Id);
            else
                com.Parameters.AddWithValue("@Created_by", null);
            if (objvo1.UnitName != null)
                com.Parameters.AddWithValue("@NameofUnit", objvo1.UnitName);
            else
                com.Parameters.AddWithValue("@NameofUnit", null);

            if (objvo1.UnitState != null)
                com.Parameters.AddWithValue("@State", objvo1.UnitState);
            else
                com.Parameters.AddWithValue("@State", null);

            if (objvo1.UnitDIst != null)
                com.Parameters.AddWithValue("@District", objvo1.UnitDIst);
            else
                com.Parameters.AddWithValue("@District", null);

            if (objvo1.UnitMandal != null)
                com.Parameters.AddWithValue("@Mandal", objvo1.UnitMandal);
            else
                com.Parameters.AddWithValue("@Mandal", null);

            if (objvo1.UnitVill != null)
                com.Parameters.AddWithValue("@Village", objvo1.UnitVill);
            else
                com.Parameters.AddWithValue("@Village", null);

            if (objvo1.UnitHNO != null)
                com.Parameters.AddWithValue("@SurveyNo", objvo1.UnitHNO);
            else
                com.Parameters.AddWithValue("@SurveyNo", null);

            if (objvo1.UnitStreet != null)
                com.Parameters.AddWithValue("@Street", objvo1.UnitStreet);
            else
                com.Parameters.AddWithValue("@Street", null);

            if (objvo1.SocialStatus != null)
                com.Parameters.AddWithValue("@Caste", objvo1.SocialStatus);
            else
                com.Parameters.AddWithValue("@Caste", null);

            if (objvo1.DateOfComm != null)
                com.Parameters.AddWithValue("@DateofCommencement", objvo1.DateOfComm);
            else
                com.Parameters.AddWithValue("@DateofCommencement", null);

            if (objvo1.incentiveTypeID != null)
                com.Parameters.AddWithValue("@IncentiveId", objvo1.incentiveTypeID);
            else
                com.Parameters.AddWithValue("@IncentiveId", null);

            if (objvo1.incentiveTypename != null)
                com.Parameters.AddWithValue("@IncentiveName", objvo1.incentiveTypename);
            else
                com.Parameters.AddWithValue("@IncentiveName", null);

            if (objvo1.recommendedAnount != null)
                com.Parameters.AddWithValue("@RecommendedAmount", objvo1.recommendedAnount);
            else
                com.Parameters.AddWithValue("@RecommendedAmount", null);

            if (objvo1.sanctionAmount != null)
                com.Parameters.AddWithValue("@SanctionedAmount", objvo1.sanctionAmount);
            else
                com.Parameters.AddWithValue("@SanctionedAmount", null);

            if (objvo1.sanctionDate != null)
                com.Parameters.AddWithValue("@SanctionedDate", objvo1.sanctionDate);
            else
                com.Parameters.AddWithValue("@SanctionedDate", null);

            if (objvo1.SLCNO != null)
                com.Parameters.AddWithValue("@SLCNumer", objvo1.SLCNO);
            else
                com.Parameters.AddWithValue("@SLCNumer", null);

            if (objvo1.SLCDate != null)
                com.Parameters.AddWithValue("@SLCDate", objvo1.SLCDate);
            else
                com.Parameters.AddWithValue("@SLCDate", null);

            if (objvo1.SCHEMEName != null)
                com.Parameters.AddWithValue("@SchemeName", objvo1.SCHEMEName);
            else
                com.Parameters.AddWithValue("@SchemeName", null);

            if (objvo1.Status != null)
                com.Parameters.AddWithValue("@Status", objvo1.Status);
            else
                com.Parameters.AddWithValue("@Status", null);

            if (objvo1.Remarks != null)
                com.Parameters.AddWithValue("@Remarks", objvo1.Remarks);
            else
                com.Parameters.AddWithValue("@Remarks", null);

            //29072017
            if (objvo1.Sector != null)
                com.Parameters.AddWithValue("@Sector", objvo1.Sector);
            else
                com.Parameters.AddWithValue("@Sector", null);

            if (objvo1.Category != null)
                com.Parameters.AddWithValue("@IndsCategory", objvo1.Category);
            else
                com.Parameters.AddWithValue("@IndsCategory", null);

            if (objvo1.Gender != null)
                com.Parameters.AddWithValue("@Gender", objvo1.Gender);
            else
                com.Parameters.AddWithValue("@Gender", null);

            if (objvo1.BankName != null)
                com.Parameters.AddWithValue("@BankName", objvo1.BankName);
            else
                com.Parameters.AddWithValue("@BankName", null);

            if (objvo1.TypeOfAccount != null)
                com.Parameters.AddWithValue("@TypeOfAcount", objvo1.TypeOfAccount);
            else
                com.Parameters.AddWithValue("@TypeOfAcount", null);

            if (objvo1.IFSCCode != null)
                com.Parameters.AddWithValue("@IFSCCode", objvo1.IFSCCode);
            else
                com.Parameters.AddWithValue("@IFSCCode", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    //
    public DataSet getIncentivesMasterList()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_Get_Incentives_Master_List", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // Incentive New Addition
    // 1. getUdyogAadharType(): 
    public DataSet getUdyogAadharType()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UDYOG_AADHAAR_TYPE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //2. IncetivesNewForm2.aspx page load binding
    public DataSet GETINCENTIVESCAFDATA(string createdby, string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INCENTIVES_CAF_DATA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (createdby != null)
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // 3. BindBankAccountType();

    public DataSet getBankAccountTypeMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_BANK_ACCOUNT_TYPE_MASTER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //4.
    public DataSet GetIncentivesdata(string userid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_DATA]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (userid != "" && userid != null)
                da.SelectCommand.Parameters.Add("@user_code", SqlDbType.VarChar).Value = userid;
            else
                da.SelectCommand.Parameters.Add("@user_code", SqlDbType.VarChar).Value = "%";

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }


    // 5.
    public string InsertCommonData(IncentivesVOs objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INSERT_INCENTIVES_DATA_COMMON]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.User_Id != null)
                com.Parameters.AddWithValue("@CreatedBy", objvo1.User_Id);
            else
                com.Parameters.AddWithValue("@CreatedBy", null);
            if (objvo1.UnitName != null)
                com.Parameters.AddWithValue("@UnitName", objvo1.UnitName);
            else
                com.Parameters.AddWithValue("@UnitName", null);
            if (objvo1.ApplciantName != null)
                com.Parameters.AddWithValue("@ApplicantName", objvo1.ApplciantName);
            else
                com.Parameters.AddWithValue("@ApplicantName", null);
            if (objvo1.TinNO != null)
                com.Parameters.AddWithValue("@TinNO", objvo1.TinNO);
            else
                com.Parameters.AddWithValue("@TinNO", null);
            if (objvo1.PanNo != null)
                com.Parameters.AddWithValue("@PanNo", objvo1.PanNo);
            else
                com.Parameters.AddWithValue("@PanNo", null);
            if (objvo1.UnitDIst != null)
                com.Parameters.AddWithValue("@UnitDIst", objvo1.UnitDIst);
            else
                com.Parameters.AddWithValue("@UnitDIst", null);
            if (objvo1.UnitMandal != null)
                com.Parameters.AddWithValue("@UnitMandal", objvo1.UnitMandal);
            else
                com.Parameters.AddWithValue("@UnitMandal", null);
            if (objvo1.UnitVill != null)
                com.Parameters.AddWithValue("@UnitVill", objvo1.UnitVill);
            else
                com.Parameters.AddWithValue("@UnitVill", null);
            if (objvo1.UnitHNO != null)
                com.Parameters.AddWithValue("@UnitHNO", objvo1.UnitHNO);
            else
                com.Parameters.AddWithValue("@UnitHNO", null);
            if (objvo1.UnitStreet != null)
                com.Parameters.AddWithValue("@UnitStreet", objvo1.UnitStreet);
            else
                com.Parameters.AddWithValue("@UnitStreet", null);
            if (objvo1.OffcDIst != null)
                com.Parameters.AddWithValue("@OffcDIst", objvo1.OffcDIst);
            else
                com.Parameters.AddWithValue("@OffcDIst", null);
            if (objvo1.OffcMandal != null)
                com.Parameters.AddWithValue("@OffcMandal", objvo1.OffcMandal);
            else
                com.Parameters.AddWithValue("@OffcMandal", null);
            if (objvo1.OffcVil != null)
                com.Parameters.AddWithValue("@OffcVill", objvo1.OffcVil);
            else
                com.Parameters.AddWithValue("@OffcVill", null);
            if (objvo1.OffcHNO != null)
                com.Parameters.AddWithValue("@OffcHNO", objvo1.OffcHNO);
            else
                com.Parameters.AddWithValue("@OffcHNO", null);
            if (objvo1.OffcStreet != null)
                com.Parameters.AddWithValue("@OffcStreet", objvo1.OffcStreet);
            else
                com.Parameters.AddWithValue("@OffcStreet", null);

            // added newly
            if (objvo1.UnitMObileNo != null)
                com.Parameters.AddWithValue("@UnitMObileNo", objvo1.UnitMObileNo);
            else
                com.Parameters.AddWithValue("@UnitMObileNo", null);
            if (objvo1.UnitEmail != null)
                com.Parameters.AddWithValue("@UnitEmail", objvo1.UnitEmail);
            else
                com.Parameters.AddWithValue("@UnitEmail", null);

            if (objvo1.OffcEmail != null)
                com.Parameters.AddWithValue("@OffcEmail", objvo1.OffcEmail);
            else
                com.Parameters.AddWithValue("@OffcEmail", null);
            if (objvo1.OffcMobileNO != null)
                com.Parameters.AddWithValue("@OffcMobileNO", objvo1.OffcMobileNO);
            else
                com.Parameters.AddWithValue("@OffcMobileNO", null);
            //

            if (objvo1.Category != null)
                com.Parameters.AddWithValue("@Category", objvo1.Category);
            else
                com.Parameters.AddWithValue("@Category", null);
            if (objvo1.TypeofOrg != null)
                com.Parameters.AddWithValue("@OrgType", objvo1.TypeofOrg);
            else
                com.Parameters.AddWithValue("@OrgType", null);
            if (objvo1.IdsustryStatus != null)
                com.Parameters.AddWithValue("@IdsustryStatus", objvo1.IdsustryStatus);
            else
                com.Parameters.AddWithValue("@IdsustryStatus", null);
            if (objvo1.ExistingPercentageincreaseunderExpansionORDiversification != null)
                com.Parameters.AddWithValue("@ExistingPercentageincreaseunderExpansionORDiversification", objvo1.ExistingPercentageincreaseunderExpansionORDiversification);
            else
                com.Parameters.AddWithValue("@ExistingPercentageincreaseunderExpansionORDiversification", null);
            if (objvo1.ExpansionDiversificationLOA != null)
                com.Parameters.AddWithValue("@ExpansionDiversificationLOA", objvo1.ExpansionDiversificationLOA);
            else
                com.Parameters.AddWithValue("@ExpansionDiversificationLOA", null);

            if (objvo1.ExistingInstalledCapacityinEnter != null)
                com.Parameters.AddWithValue("@ExistingInstalledCapacityinEnter", objvo1.ExistingInstalledCapacityinEnter);
            else
                com.Parameters.AddWithValue("@ExistingInstalledCapacityinEnter", null);

            if (objvo1.ExpanORDiversInstalledCapacityinEnter != null)
                com.Parameters.AddWithValue("@ExpanORDiversInstalledCapacityinEnter", objvo1.ExpanORDiversInstalledCapacityinEnter);
            else
                com.Parameters.AddWithValue("@ExpanORDiversInstalledCapacityinEnter", null);
            if (objvo1.ExpanORDiversPercentIncreaseunderExpansionORDiversification != null)
                com.Parameters.AddWithValue("@ExpanORDiversPercentIncreaseunderExpansionORDiversification", objvo1.ExpanORDiversPercentIncreaseunderExpansionORDiversification);
            else
                com.Parameters.AddWithValue("@ExpanORDiversPercentIncreaseunderExpansionORDiversification", null);
            if (objvo1.ExistEnterpriseLand != null)
                com.Parameters.AddWithValue("@ExistEnterpriseLand", objvo1.ExistEnterpriseLand);
            else
                com.Parameters.AddWithValue("@ExistEnterpriseLand", null);
            if (objvo1.ExistEnterpriseBuilding != null)
                com.Parameters.AddWithValue("@ExistEnterpriseBuilding", objvo1.ExistEnterpriseBuilding);
            else
                com.Parameters.AddWithValue("@ExistEnterpriseBuilding", null);
            if (objvo1.ExistEnterprisePlantMachinery != null)
                com.Parameters.AddWithValue("@ExistEnterprisePlantMachinery", objvo1.ExistEnterprisePlantMachinery);
            else
                com.Parameters.AddWithValue("@ExistEnterprisePlantMachinery", null);
            if (objvo1.ExpansionDiversificationLand != null)
                com.Parameters.AddWithValue("@ExpansionDiversificationLand", objvo1.ExpansionDiversificationLand);
            else
                com.Parameters.AddWithValue("@ExpansionDiversificationLand", null);
            if (objvo1.ExpDiversBuilding != null)
                com.Parameters.AddWithValue("@ExpDiversBuilding", objvo1.ExpDiversBuilding);
            else
                com.Parameters.AddWithValue("@ExpDiversBuilding", null);
            if (objvo1.ExpDiversPlantMachinery != null)
                com.Parameters.AddWithValue("@ExpDiversPlantMachinery", objvo1.ExpDiversPlantMachinery);
            else com.Parameters.AddWithValue("@ExpDiversPlantMachinery", null);
            //if (objvo1.Userid_No != null)
            if (objvo1.LandFixedCapitalInvestPercentage != null)
                com.Parameters.AddWithValue("@LandFixedCapitalInvestPercentage", objvo1.LandFixedCapitalInvestPercentage);
            else
                com.Parameters.AddWithValue("@LandFixedCapitalInvestPercentage", null);

            if (objvo1.BuildingFixedCapitalInvestPercentage != null)
                com.Parameters.AddWithValue("@BuildingFixedCapitalInvestPercentage", objvo1.BuildingFixedCapitalInvestPercentage);
            else
                com.Parameters.AddWithValue("@BuildingFixedCapitalInvestPercentage", null);
            if (objvo1.PlantMachFixedCapitalInvestPercentage != null)
                com.Parameters.AddWithValue("@PlantMachFixedCapitalInvestPercentage", objvo1.PlantMachFixedCapitalInvestPercentage);
            else
                com.Parameters.AddWithValue("@PlantMachFixedCapitalInvestPercentage", null);
            if (objvo1.SocialStatus != null)
                com.Parameters.AddWithValue("@SocialStatus", Convert.ToInt32(objvo1.SocialStatus));
            else
                com.Parameters.AddWithValue("@SocialStatus", null);

            // added newly 
            if (objvo1.NewPowerReleaseDate != null)
                com.Parameters.AddWithValue("@NewPowerReleaseDate", objvo1.NewPowerReleaseDate);
            else
                com.Parameters.AddWithValue("@NewPowerReleaseDate", null);
            if (objvo1.NewConnectedLoad != null)
                com.Parameters.AddWithValue("@NewConnectedLoad", objvo1.NewConnectedLoad);
            else com.Parameters.AddWithValue("@NewConnectedLoad", null);
            if (objvo1.NewContractedLoad != null)
                com.Parameters.AddWithValue("@NewContractedLoad", objvo1.NewContractedLoad);
            else
                com.Parameters.AddWithValue("@NewContractedLoad", null);

            if (objvo1.ServiceConnectionNO != null)
                com.Parameters.AddWithValue("@ServiceConnectionNO", objvo1.ServiceConnectionNO);
            else
                com.Parameters.AddWithValue("@ServiceConnectionNO", null);

            if (objvo1.ExistingConnectedLoad != null)
                com.Parameters.AddWithValue("@ExistingConnectedLoad", objvo1.ExistingConnectedLoad);
            else com.Parameters.AddWithValue("@ExistingConnectedLoad", null);
            if (objvo1.ExistingContractedLoad != null)
                com.Parameters.AddWithValue("@ExistingContractedLoad", objvo1.ExistingContractedLoad);
            else
                com.Parameters.AddWithValue("@ExistingContractedLoad", null);

            if (objvo1.ExistingPowerReleaseDate != null)
                com.Parameters.AddWithValue("@ExistingPowerReleaseDate", objvo1.ExistingPowerReleaseDate);
            else
                com.Parameters.AddWithValue("@ExistingPowerReleaseDate", null);
            if (objvo1.ExistingServiceConnectionNO != null)
                com.Parameters.AddWithValue("@ExistingServiceConnectionNO", objvo1.ExistingServiceConnectionNO);
            else
                com.Parameters.AddWithValue("@ExistingServiceConnectionNO", null);

            if (objvo1.ExpanDiverConnectedLoad != null)
                com.Parameters.AddWithValue("@ExpanDiverConnectedLoad", objvo1.ExpanDiverConnectedLoad);
            else com.Parameters.AddWithValue("@ExpanDiverConnectedLoad", null);
            if (objvo1.ExpanDiverContractedLoad != null)
                com.Parameters.AddWithValue("@ExpanDiverContractedLoad", objvo1.ExpanDiverContractedLoad);
            else
                com.Parameters.AddWithValue("@ExpanDiverContractedLoad", null);
            if (objvo1.ExpanDiverPowerReleaseDate != null)
                com.Parameters.AddWithValue("@ExpanDiverPowerReleaseDate", objvo1.ExpanDiverPowerReleaseDate);
            else
                com.Parameters.AddWithValue("@ExpanDiverPowerReleaseDate", null);
            if (objvo1.ExpanDiverServiceConnectionNO != null)
                com.Parameters.AddWithValue("@ExpanDiverServiceConnectionNO", objvo1.ExpanDiverServiceConnectionNO);
            else
                com.Parameters.AddWithValue("@ExpanDiverServiceConnectionNO", null);

            //

            if (objvo1.ManagementStaffMale != null)
                com.Parameters.AddWithValue("@ManagementStaffMale", objvo1.ManagementStaffMale);
            else
                com.Parameters.AddWithValue("@ManagementStaffMale", null);
            if (objvo1.ManagementStaffFemale != null)
                com.Parameters.AddWithValue("@ManagementStaffFemale", objvo1.ManagementStaffFemale);
            else
                com.Parameters.AddWithValue("@ManagementStaffFemale", null);
            if (objvo1.SupervisoryMale != null)
                com.Parameters.AddWithValue("@SupervisoryMale", objvo1.SupervisoryMale);
            else
                com.Parameters.AddWithValue("@SupervisoryMale", null);
            if (objvo1.SupervisoryFemale != null)
                com.Parameters.AddWithValue("@SupervisoryFemale", objvo1.SupervisoryFemale);
            else com.Parameters.AddWithValue("@SupervisoryFemale", null);

            // added newly
            if (objvo1.SkilledWorkersMale != null)
                com.Parameters.AddWithValue("@SkilledWorkersMale", objvo1.SkilledWorkersMale);
            else
                com.Parameters.AddWithValue("@SkilledWorkersMale", null);
            if (objvo1.SkilledWorkersFemale != null)
                com.Parameters.AddWithValue("@SkilledWorkersFemale", objvo1.SkilledWorkersFemale);
            else
                com.Parameters.AddWithValue("@SkilledWorkersFemale", null);

            if (objvo1.SemiSkilledWorkersMale != null)
                com.Parameters.AddWithValue("@SemiSkilledWorkersMale", objvo1.SemiSkilledWorkersMale);
            else
                com.Parameters.AddWithValue("@SemiSkilledWorkersMale", null);
            if (objvo1.SemiSkilledWorkersFemale != null)
                com.Parameters.AddWithValue("@SemiSkilledWorkersFemale", objvo1.SemiSkilledWorkersFemale);
            else
                com.Parameters.AddWithValue("@SemiSkilledWorkersFemale", null);
            //

            if (objvo1.ProjectFinance != null)
                com.Parameters.AddWithValue("@ProjectFinance", objvo1.ProjectFinance);
            else
                com.Parameters.AddWithValue("@ProjectFinance", null);
            if (objvo1.TermLoanApplDate != null)
                com.Parameters.AddWithValue("@TermLoanApplDate", objvo1.TermLoanApplDate);
            else
                com.Parameters.AddWithValue("@TermLoanApplDate", null);
            if (objvo1.InstitutionName != null)
                com.Parameters.AddWithValue("@InstitutionName", objvo1.InstitutionName);
            else
                com.Parameters.AddWithValue("@InstitutionName", null);
            if (objvo1.TermLoanSancRefNo != null)
                com.Parameters.AddWithValue("@TermLoanSancRefNo", objvo1.TermLoanSancRefNo);
            else
                com.Parameters.AddWithValue("@TermLoanSancRefNo", null);

            //if (objvo1.AvailedSubsidyEarlier != null)
            //    com.Parameters.AddWithValue("@AvailedSubsidyEarlier", objvo1.AvailedSubsidyEarlier);
            //else
            //    com.Parameters.AddWithValue("@AvailedSubsidyEarlier", null);
            //if (objvo1.TotalSubsidyAlreadyAvailedScheme != null)
            //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedScheme", objvo1.TotalSubsidyAlreadyAvailedScheme);
            //else
            //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedScheme", null);
            //if (objvo1.TotalSubsidyAlreadyAvailedAmount != null)
            //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedAmount", objvo1.TotalSubsidyAlreadyAvailedAmount);
            //else
            //    com.Parameters.AddWithValue("@TotalSubsidyAlreadyAvailedAmount", null);

            if (objvo1.SecondHandMachVal != null)
                com.Parameters.AddWithValue("@SecondHandMachVal", objvo1.SecondHandMachVal);
            else
                com.Parameters.AddWithValue("@SecondHandMachVal", null);

            //// '@EnterpriseTypeExisting', 
            if (objvo1.ExistingEnterpriseLOA != null)
                com.Parameters.AddWithValue("@ExistingEnterpriseLOA", objvo1.ExistingEnterpriseLOA);
            else
                com.Parameters.AddWithValue("@ExistingEnterpriseLOA", null);
            if (objvo1.NewMachVal != null)
                com.Parameters.AddWithValue("@NewMachVal", objvo1.NewMachVal);
            else
                com.Parameters.AddWithValue("@NewMachVal", null);
            if (objvo1.Newand2ndlMachTotVal != null)
                com.Parameters.AddWithValue("@Newand2ndlMachTotVal", objvo1.Newand2ndlMachTotVal);
            else
                com.Parameters.AddWithValue("@Newand2ndlMachTotVal", null);
            if (objvo1.PercentageSHMValinTotMachVal != null)
                com.Parameters.AddWithValue("@PercentageSHMValinTotMachVal", objvo1.PercentageSHMValinTotMachVal);
            else
                com.Parameters.AddWithValue("@PercentageSHMValinTotMachVal", null);
            if (objvo1.MachValPrchasedfromAPIDCorAPSFCBank != null)
                com.Parameters.AddWithValue("@MachValPrchasedfromAPIDCorAPSFCBank", objvo1.MachValPrchasedfromAPIDCorAPSFCBank);
            else
                com.Parameters.AddWithValue("@MachValPrchasedfromAPIDCorAPSFCBank", null);

            if (objvo1.TotalMachVal != null)
                com.Parameters.AddWithValue("@TotalMachVal", objvo1.TotalMachVal);
            else
                com.Parameters.AddWithValue("@TotalMachVal", null);

            // Bank details 
            if (objvo1.BankName != null)
                com.Parameters.AddWithValue("@BankName", objvo1.BankName);
            else
                com.Parameters.AddWithValue("@BankName", null);

            if (objvo1.AccNo != null)
                com.Parameters.AddWithValue("@AccNo", objvo1.AccNo);
            else
                com.Parameters.AddWithValue("@AccNo", null);

            if (objvo1.BranchName != null)
                com.Parameters.AddWithValue("@BranchName", objvo1.BranchName);
            else
                com.Parameters.AddWithValue("@BranchName", null);

            if (objvo1.IFSCCode != null)
                com.Parameters.AddWithValue("@IFSCCode", objvo1.IFSCCode);
            else
                com.Parameters.AddWithValue("@IFSCCode", null);

            if (objvo1.WhetherPower != null)
                com.Parameters.AddWithValue("@WhetherPower", objvo1.WhetherPower);
            else
                com.Parameters.AddWithValue("@WhetherPower", null);

            if (objvo1.RequesttoDept != null)
                com.Parameters.AddWithValue("@RequesttoDept", objvo1.RequesttoDept);
            else
                com.Parameters.AddWithValue("@RequesttoDept", null);

            ///////
            if (objvo1.EMiUdyogAadhar != null)
                com.Parameters.AddWithValue("@EMiUdyogAadhar", objvo1.EMiUdyogAadhar);
            else
                com.Parameters.AddWithValue("@EMiUdyogAadhar", null);

            if (objvo1.sector != null)
                com.Parameters.AddWithValue("@SectorID", objvo1.sector);
            else
                com.Parameters.AddWithValue("@SectorID", null);

            if (objvo1.natureOfAct != null)
                com.Parameters.AddWithValue("@NatureOfActivity", objvo1.natureOfAct);
            else
                com.Parameters.AddWithValue("@NatureOfActivity", null);

            if (objvo1.NatureofBussiness != null)
                com.Parameters.AddWithValue("@NatureofBussiness", objvo1.NatureofBussiness);
            else
                com.Parameters.AddWithValue("@NatureofBussiness", null);

            if (objvo1.IsGHMCandOtherMuncpOrp != null)
                com.Parameters.AddWithValue("@IsGHMCandOtherMuncpOrp", objvo1.IsGHMCandOtherMuncpOrp);
            else
                com.Parameters.AddWithValue("@IsGHMCandOtherMuncpOrp", null);

            if (objvo1.IsDifferentlyAbled != null)
                com.Parameters.AddWithValue("@IsDifferentlyAbled", objvo1.IsDifferentlyAbled);
            else
                com.Parameters.AddWithValue("@IsDifferentlyAbled", null);

            if (objvo1.isVehicleIncentive != null)
                com.Parameters.AddWithValue("@isVehicleIncentive", objvo1.isVehicleIncentive);
            else
                com.Parameters.AddWithValue("@isVehicleIncentive", null);

            //// Vat No
            if (objvo1.Vatno != null)
                com.Parameters.AddWithValue("@VATNo", objvo1.Vatno);
            else
                com.Parameters.AddWithValue("@VATNo", null);

            if (objvo1.Cstno != null)
                com.Parameters.AddWithValue("@CSTNo", objvo1.Cstno);
            else
                com.Parameters.AddWithValue("@CSTNo", null);

            //if (objvo1.MobileNo != null)
            //    com.Parameters.AddWithValue("@MobileNo", objvo1.MobileNo);
            //else
            //    com.Parameters.AddWithValue("@MobileNo", null);

            //if (objvo1.EmailID != null)
            //    com.Parameters.AddWithValue("@EmailID", objvo1.EmailID);
            //else
            //    com.Parameters.AddWithValue("@EmailID", null);

            if (objvo1.Gender != null)
                com.Parameters.AddWithValue("@Gender", objvo1.Gender);
            else
                com.Parameters.AddWithValue("@Gender", null);
            //////

            // added newly
            if (objvo1.CSTRegDate != null)
                com.Parameters.AddWithValue("@CSTRegDate", objvo1.CSTRegDate);
            else
                com.Parameters.AddWithValue("@CSTRegDate", null);
            if (objvo1.CSTRegAuthority != null)
                com.Parameters.AddWithValue("@CSTRegAuthority", objvo1.CSTRegAuthority);
            else
                com.Parameters.AddWithValue("@CSTRegAuthority", null);
            if (objvo1.CSTRegAuthAddress != null)
                com.Parameters.AddWithValue("@CSTRegAuthAddress", objvo1.CSTRegAuthAddress);
            else
                com.Parameters.AddWithValue("@CSTRegAuthAddress", null);
            if (objvo1.PowerStatus != null)
                com.Parameters.AddWithValue("@PowerType", Convert.ToInt32(objvo1.PowerStatus));
            else
                com.Parameters.AddWithValue("@PowerType", null);

            if (objvo1.IsMinority != null)
                com.Parameters.AddWithValue("@IsMinority", objvo1.IsMinority);
            else
                com.Parameters.AddWithValue("@IsMinority", null);
            // added
            if (objvo1.isSecondHandMachVal != null)
                com.Parameters.AddWithValue("@isSecondHandMachVal", objvo1.isSecondHandMachVal);
            else
                com.Parameters.AddWithValue("@isSecondHandMachVal", null);
            if (objvo1.TermLoanApplDate != null)
                com.Parameters.AddWithValue("@TermLoanSanDate", objvo1.TermLoanApplDate);
            else
                com.Parameters.AddWithValue("@TermLoanSanDate", null);


            if (objvo1.eepinscapUnit != null)
                com.Parameters.AddWithValue("@eepinscapUnit", objvo1.eepinscapUnit);
            else
                com.Parameters.AddWithValue("@eepinscapUnit", null);
            if (objvo1.edpinscapUnit != null)
                com.Parameters.AddWithValue("@edpinscapUnit", objvo1.edpinscapUnit);
            else
                com.Parameters.AddWithValue("@edpinscapUnit", null);

            if (objvo1.DateOfComm != null)
                com.Parameters.AddWithValue("@DCP", objvo1.DateOfComm);
            else
                com.Parameters.AddWithValue("@DCP", null);

            //added on 08.06.2017
            if (objvo1.UnitState != null)
                com.Parameters.AddWithValue("@UnitState", objvo1.UnitState);
            else
                com.Parameters.AddWithValue("@UnitState", null);

            if (objvo1.OffcState != null)
                com.Parameters.AddWithValue("@OffcState", objvo1.OffcState);
            else
                com.Parameters.AddWithValue("@OffcState", null);

            if (objvo1.OffcOtherDist != null)
                com.Parameters.AddWithValue("@OffcOtherDist", objvo1.OffcOtherDist);
            else
                com.Parameters.AddWithValue("@OffcOtherDist", null);

            if (objvo1.OffcOtherMandal != null)
                com.Parameters.AddWithValue("@OffcOtherMandal", objvo1.OffcOtherMandal);
            else
                com.Parameters.AddWithValue("@OffcOtherMandal", null);

            if (objvo1.OffcOtherVillage != null)
                com.Parameters.AddWithValue("@OffcOtherVillage", objvo1.OffcOtherVillage);
            else
                com.Parameters.AddWithValue("@OffcOtherVillage", null);

            if (objvo1.EMPart != null)
                com.Parameters.AddWithValue("@EMPartNo", objvo1.EMPart);
            else
                com.Parameters.AddWithValue("@EMPartNo", null);

            // added on 18.06.2017
            if (objvo1.SubCaste != null)
                com.Parameters.AddWithValue("@SubCaste", objvo1.SubCaste);
            else
                com.Parameters.AddWithValue("@SubCaste", null);

            if (objvo1.GSTNO != null)
                com.Parameters.AddWithValue("@GSTNO", objvo1.GSTNO);
            else
                com.Parameters.AddWithValue("@GSTNO", null);

            if (objvo1.GSTDate != null)
                com.Parameters.AddWithValue("@GSTDate", objvo1.GSTDate);
            else
                com.Parameters.AddWithValue("@GSTDate", null);

            if (objvo1.IndustryExpansionType != null)
                com.Parameters.AddWithValue("@IndusExpanType", objvo1.IndustryExpansionType);
            else
                com.Parameters.AddWithValue("@IndusExpanType", null);

            // power new unit
            if (objvo1.PowNewConnectUnit != null)
                com.Parameters.AddWithValue("@PowNewConnectUnit", objvo1.PowNewConnectUnit);
            else
                com.Parameters.AddWithValue("@PowNewConnectUnit", null);

            if (objvo1.PowNewContractUnit != null)
                com.Parameters.AddWithValue("@PowNewContractUnit", objvo1.PowNewContractUnit);
            else
                com.Parameters.AddWithValue("@PowNewContractUnit", null);
            // existing power
            if (objvo1.PowExistConnectUnit != null)
                com.Parameters.AddWithValue("@PowExistConnectUnit", objvo1.PowExistConnectUnit);
            else
                com.Parameters.AddWithValue("@PowExistConnectUnit", null);

            if (objvo1.PowExistContractUnit != null)
                com.Parameters.AddWithValue("@PowExistContractUnit", objvo1.PowExistContractUnit);
            else
                com.Parameters.AddWithValue("@PowExistContractUnit", null);
            // Diversification power
            if (objvo1.PowDiversConnectUnit != null)
                com.Parameters.AddWithValue("@PowDiversConnectUnit", objvo1.PowDiversConnectUnit);
            else
                com.Parameters.AddWithValue("@PowDiversConnectUnit", null);

            if (objvo1.PowDiversContractUnit != null)
                com.Parameters.AddWithValue("@PowDiversContractUnit", objvo1.PowDiversContractUnit);
            else
                com.Parameters.AddWithValue("@PowDiversContractUnit", null);

            if (objvo1.IsPowerApplicable != null)
                com.Parameters.AddWithValue("@IsPowerApplicable", objvo1.IsPowerApplicable);
            else
                com.Parameters.AddWithValue("@IsPowerApplicable", null);

            if (objvo1.AuthorisedSignatory != null)
                com.Parameters.AddWithValue("@AuthorisedSignatory", objvo1.AuthorisedSignatory);
            else
                com.Parameters.AddWithValue("@AuthorisedSignatory", null);

            if (objvo1.UdyogAadharType != null)
                com.Parameters.AddWithValue("@UdyogAadharType", objvo1.UdyogAadharType);
            else
                com.Parameters.AddWithValue("@UdyogAadharType", null);


            if (objvo1.UdyogAadharRegdDate != null)
                com.Parameters.AddWithValue("@UdyogAadharRegdDate", objvo1.UdyogAadharRegdDate);
            else
                com.Parameters.AddWithValue("@UdyogAadharRegdDate", null);


            if (objvo1.IsTermLoanAvailed != null)
                com.Parameters.AddWithValue("@IsTermLoanAvailed", objvo1.IsTermLoanAvailed);
            else
                com.Parameters.AddWithValue("@IsTermLoanAvailed", null);


            if (objvo1.BankAccType != null)
                com.Parameters.AddWithValue("@BankAccType", objvo1.BankAccType);
            else
                com.Parameters.AddWithValue("@BankAccType", null);


            if (objvo1.BankAccName != null)
                com.Parameters.AddWithValue("@BankAccountName", objvo1.BankAccName);
            else
                com.Parameters.AddWithValue("@BankAccountName", null);

            if (objvo1.VehicleNumber != null)
                com.Parameters.AddWithValue("@VehicleNumber", objvo1.VehicleNumber);
            else
                com.Parameters.AddWithValue("@VehicleNumber", null);

            if (objvo1.AuthorisedSignatoryDesignation != null)
                com.Parameters.AddWithValue("@AuthorisedSignatoryDesignation", objvo1.AuthorisedSignatoryDesignation);
            else
                com.Parameters.AddWithValue("@AuthorisedSignatoryDesignation", null);

            if (objvo1.CFEUidno != null)
                com.Parameters.AddWithValue("@CFEUidno", objvo1.CFEUidno);
            else
                com.Parameters.AddWithValue("@CFEUidno", null);

            if (objvo1.CFOUidno != null)
                com.Parameters.AddWithValue("@CFOUidno", objvo1.CFOUidno);
            else
                com.Parameters.AddWithValue("@CFOUidno", null);


            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    //6.
    public int bulkInsertNewEnterPrise(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["Column5"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "LineofActivity");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "NameofUnit");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "InstalledCapacity");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "Value");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column5", "Incentive_id");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);

            bulkCopy.DestinationTableName = ("Incentives_Line_of_Activity");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }



    //7.
    public int bulkInsertDirectorPartner(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["Column8"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "NameofDrctr");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "Community");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "Share");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "Percentage");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column8", "Incentive_id");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Column7", "Gender");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Column5", "AuthorisedSign");
            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Column6", "Authdesignation");    // --  AuthorisedSign  Authdesignation



            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);

            bulkCopy.DestinationTableName = ("Incentives_DirectorPartner_Details");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }


    //8.   
    public string SaveNameofAssets(IncentiveVosA objvoA)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INSERT_INCENTIVES_ApprovedEstimated_ProjectCost]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvoA.User_id != "" && objvoA.User_id != null)
                com.Parameters.AddWithValue("@User_id", objvoA.User_id);
            else
                com.Parameters.AddWithValue("@User_id", null);

            if (objvoA.Incentive_id != "" && objvoA.Incentive_id != null)
                com.Parameters.AddWithValue("@Incentive_id", objvoA.Incentive_id);
            else
                com.Parameters.AddWithValue("@Incentive_id", null);

            if (objvoA.CfeQuid != "" && objvoA.CfeQuid != null)
                com.Parameters.AddWithValue("@CfeQuid", objvoA.CfeQuid);
            else
                com.Parameters.AddWithValue("@CfeQuid", null);

            if (objvoA.CfoQuid != "" && objvoA.CfoQuid != null)
                com.Parameters.AddWithValue("@CfoQuid", objvoA.CfoQuid);
            else
                com.Parameters.AddWithValue("@CfoQuid", null);

            if (objvoA.LandApprovedProjectCost != "" && objvoA.LandApprovedProjectCost != null)
                com.Parameters.AddWithValue("@LandApprovedProjectCost", objvoA.LandApprovedProjectCost);
            else
                com.Parameters.AddWithValue("@LandApprovedProjectCost", null);

            if (objvoA.LandLoanSactioned != "" && objvoA.LandLoanSactioned != null)
                com.Parameters.AddWithValue("@LandLoanSactioned", objvoA.LandLoanSactioned);
            else
                com.Parameters.AddWithValue("@LandLoanSactioned", null);

            if (objvoA.LandPromotersEquity != "" && objvoA.LandPromotersEquity != null)
                com.Parameters.AddWithValue("@LandPromotersEquity", objvoA.LandPromotersEquity);
            else
                com.Parameters.AddWithValue("@LandPromotersEquity", null);

            if (objvoA.LandLoanAmountReleased != "" && objvoA.LandLoanAmountReleased != null)
                com.Parameters.AddWithValue("@LandLoanAmountReleased", objvoA.LandLoanAmountReleased);
            else
                com.Parameters.AddWithValue("@LandLoanAmountReleased", null);

            if (objvoA.LandAssetsValuebyFinInstitution != "" && objvoA.LandAssetsValuebyFinInstitution != null)
                com.Parameters.AddWithValue("@LandAssetsValuebyFinInstitution", objvoA.LandAssetsValuebyFinInstitution);
            else
                com.Parameters.AddWithValue("@LandAssetsValuebyFinInstitution", null);

            if (objvoA.LandAssetsValuebyCA != "" && objvoA.LandAssetsValuebyCA != null)
                com.Parameters.AddWithValue("@LandAssetsValuebyCA", objvoA.LandAssetsValuebyCA);
            else
                com.Parameters.AddWithValue("@LandAssetsValuebyCA", null);

            if (objvoA.BuildingApprovedProjectCost != "" && objvoA.BuildingApprovedProjectCost != null)
                com.Parameters.AddWithValue("@BuildingApprovedProjectCost", objvoA.BuildingApprovedProjectCost);
            else
                com.Parameters.AddWithValue("@BuildingApprovedProjectCost", null);

            if (objvoA.BuildingLoanSactioned != "" && objvoA.BuildingLoanSactioned != null)
                com.Parameters.AddWithValue("@BuildingLoanSactioned", objvoA.BuildingLoanSactioned);
            else
                com.Parameters.AddWithValue("@BuildingLoanSactioned", null);

            if (objvoA.BuildingPromotersEquity != "" && objvoA.BuildingPromotersEquity != null)
                com.Parameters.AddWithValue("@BuildingPromotersEquity", objvoA.BuildingPromotersEquity);
            else
                com.Parameters.AddWithValue("@BuildingPromotersEquity", null);

            if (objvoA.BuildingLoanAmountReleased != "" && objvoA.BuildingLoanAmountReleased != null)
                com.Parameters.AddWithValue("@BuildingLoanAmountReleased", objvoA.BuildingLoanAmountReleased);
            else
                com.Parameters.AddWithValue("@BuildingLoanAmountReleased", null);

            if (objvoA.BuildingAssetsValuebyFinInstitution != "" && objvoA.BuildingAssetsValuebyFinInstitution != null)
                com.Parameters.AddWithValue("@BuildingAssetsValuebyFinInstitution", objvoA.BuildingAssetsValuebyFinInstitution);
            else
                com.Parameters.AddWithValue("@BuildingAssetsValuebyFinInstitution", null);

            if (objvoA.BuildingAssetsValuebyCA != "" && objvoA.BuildingAssetsValuebyCA != null)
                com.Parameters.AddWithValue("@BuildingAssetsValuebyCA", objvoA.BuildingAssetsValuebyCA);
            else
                com.Parameters.AddWithValue("@BuildingAssetsValuebyCA", null);

            if (objvoA.PlantMachineryApprovedProjectCost != "" && objvoA.PlantMachineryApprovedProjectCost != null)
                com.Parameters.AddWithValue("@PlantMachineryApprovedProjectCost", objvoA.PlantMachineryApprovedProjectCost);
            else
                com.Parameters.AddWithValue("@PlantMachineryApprovedProjectCost", null);

            if (objvoA.PlantMachineryLoanSactioned != "" && objvoA.PlantMachineryLoanSactioned != null)
                com.Parameters.AddWithValue("@PlantMachineryLoanSactioned", objvoA.PlantMachineryLoanSactioned);
            else
                com.Parameters.AddWithValue("@PlantMachineryLoanSactioned", null);

            if (objvoA.PlantMachineryPromotersEquity != "" && objvoA.PlantMachineryPromotersEquity != null)
                com.Parameters.AddWithValue("@PlantMachineryPromotersEquity", objvoA.PlantMachineryPromotersEquity);
            else
                com.Parameters.AddWithValue("@PlantMachineryPromotersEquity", null);

            if (objvoA.PlantMachineryLoanAmountReleased != "" && objvoA.PlantMachineryLoanAmountReleased != null)
                com.Parameters.AddWithValue("@PlantMachineryLoanAmountReleased", objvoA.PlantMachineryLoanAmountReleased);
            else
                com.Parameters.AddWithValue("@PlantMachineryLoanAmountReleased", null);

            if (objvoA.PlantMachineryAssetsValuebyFinInstitution != "" && objvoA.PlantMachineryAssetsValuebyFinInstitution != null)
                com.Parameters.AddWithValue("@PlantMachineryAssetsValuebyFinInstitution", objvoA.PlantMachineryAssetsValuebyFinInstitution);
            else
                com.Parameters.AddWithValue("@PlantMachineryAssetsValuebyFinInstitution", null);

            if (objvoA.PlantMachineryAssetsValuebyCA != "" && objvoA.PlantMachineryAssetsValuebyCA != null)
                com.Parameters.AddWithValue("@PlantMachineryAssetsValuebyCA", objvoA.PlantMachineryAssetsValuebyCA);
            else
                com.Parameters.AddWithValue("@PlantMachineryAssetsValuebyCA", null);

            if (objvoA.MachineryContingenciesApprovedProjectCost != "" && objvoA.MachineryContingenciesApprovedProjectCost != null)
                com.Parameters.AddWithValue("@MachineryContingenciesApprovedProjectCost", objvoA.MachineryContingenciesApprovedProjectCost);
            else
                com.Parameters.AddWithValue("@MachineryContingenciesApprovedProjectCost", null);

            if (objvoA.MachineryContingenciesLoanSactioned != "" && objvoA.MachineryContingenciesLoanSactioned != null)
                com.Parameters.AddWithValue("@MachineryContingenciesLoanSactioned", objvoA.MachineryContingenciesLoanSactioned);
            else
                com.Parameters.AddWithValue("@MachineryContingenciesLoanSactioned", null);

            if (objvoA.MachineryContingenciesPromotersEquity != "" && objvoA.MachineryContingenciesPromotersEquity != null)
                com.Parameters.AddWithValue("@MachineryContingenciesPromotersEquity", objvoA.MachineryContingenciesPromotersEquity);
            else
                com.Parameters.AddWithValue("@MachineryContingenciesPromotersEquity", null);

            if (objvoA.MachineryContingenciesLoanAmountReleased != "" && objvoA.MachineryContingenciesLoanAmountReleased != null)
                com.Parameters.AddWithValue("@MachineryContingenciesLoanAmountReleased", objvoA.MachineryContingenciesLoanAmountReleased);
            else
                com.Parameters.AddWithValue("@MachineryContingenciesLoanAmountReleased", null);

            if (objvoA.MachineryContingenciesAssetsValuebyFinInstitution != "" && objvoA.MachineryContingenciesAssetsValuebyFinInstitution != null)
                com.Parameters.AddWithValue("@MachineryContingenciesAssetsValuebyFinInstitution", objvoA.MachineryContingenciesAssetsValuebyFinInstitution);
            else
                com.Parameters.AddWithValue("@MachineryContingenciesAssetsValuebyFinInstitution", null);

            if (objvoA.MachineryContingenciesAssetsValuebyCA != "" && objvoA.MachineryContingenciesAssetsValuebyCA != null)
                com.Parameters.AddWithValue("@MachineryContingenciesAssetsValuebyCA", objvoA.MachineryContingenciesAssetsValuebyCA);
            else
                com.Parameters.AddWithValue("@MachineryContingenciesAssetsValuebyCA", null);

            if (objvoA.ErectionApprovedProjectCost != "" && objvoA.ErectionApprovedProjectCost != null)
                com.Parameters.AddWithValue("@ErectionApprovedProjectCost", objvoA.ErectionApprovedProjectCost);
            else com.Parameters.AddWithValue("@ErectionApprovedProjectCost", null);

            if (objvoA.ErectionLoanSactioned != "" && objvoA.ErectionLoanSactioned != null)
                com.Parameters.AddWithValue("@ErectionLoanSactioned", objvoA.ErectionLoanSactioned);
            else
                com.Parameters.AddWithValue("@ErectionLoanSactioned", null);

            if (objvoA.ErectionLoanAmountReleased != "" && objvoA.ErectionLoanAmountReleased != null)
                com.Parameters.AddWithValue("@ErectionLoanAmountReleased", objvoA.ErectionLoanAmountReleased);
            else
                com.Parameters.AddWithValue("@ErectionLoanAmountReleased", null);

            if (objvoA.ErectionPromotersEquity != "" && objvoA.ErectionPromotersEquity != null)
                com.Parameters.AddWithValue("@ErectionPromotersEquity", objvoA.ErectionPromotersEquity);
            else
                com.Parameters.AddWithValue("@ErectionPromotersEquity", null);

            if (objvoA.ErectionAssetsValuebyFinInstitution != "" && objvoA.ErectionAssetsValuebyFinInstitution != null)
                com.Parameters.AddWithValue("@ErectionAssetsValuebyFinInstitution", objvoA.ErectionAssetsValuebyFinInstitution);
            else
                com.Parameters.AddWithValue("@ErectionAssetsValuebyFinInstitution", null);

            if (objvoA.ErectionAssetsValuebyCA != "" && objvoA.ErectionAssetsValuebyCA != null)
                com.Parameters.AddWithValue("@ErectionAssetsValuebyCA", objvoA.ErectionAssetsValuebyCA);
            else
                com.Parameters.AddWithValue("@ErectionAssetsValuebyCA", null);

            if (objvoA.TechnicalfeasibilityApprovedProjectCost != "" && objvoA.TechnicalfeasibilityApprovedProjectCost != null)
                com.Parameters.AddWithValue("@TechnicalfeasibilityApprovedProjectCost", objvoA.TechnicalfeasibilityApprovedProjectCost);
            else
                com.Parameters.AddWithValue("@TechnicalfeasibilityApprovedProjectCost", null);

            if (objvoA.TechnicalfeasibilityLoanSactioned != "" && objvoA.TechnicalfeasibilityLoanSactioned != null)
                com.Parameters.AddWithValue("@TechnicalfeasibilityLoanSactioned", objvoA.TechnicalfeasibilityLoanSactioned);
            else
                com.Parameters.AddWithValue("@TechnicalfeasibilityLoanSactioned", null);

            if (objvoA.TechnicalfeasibilityPromotersEquity != "" && objvoA.TechnicalfeasibilityPromotersEquity != null)
                com.Parameters.AddWithValue("@TechnicalfeasibilityPromotersEquity", objvoA.TechnicalfeasibilityPromotersEquity);
            else
                com.Parameters.AddWithValue("@TechnicalfeasibilityPromotersEquity", null);

            if (objvoA.TechnicalfeasibilityLoanAmountReleased != "" && objvoA.TechnicalfeasibilityLoanAmountReleased != null)
                com.Parameters.AddWithValue("@TechnicalfeasibilityLoanAmountReleased", objvoA.TechnicalfeasibilityLoanAmountReleased);
            else
                com.Parameters.AddWithValue("@TechnicalfeasibilityLoanAmountReleased", null);

            if (objvoA.TechnicalfeasibilityAssetsValuebyFinInstitution != "" && objvoA.TechnicalfeasibilityAssetsValuebyFinInstitution != null)
                com.Parameters.AddWithValue("@TechnicalfeasibilityAssetsValuebyFinInstitution", objvoA.TechnicalfeasibilityAssetsValuebyFinInstitution);
            else
                com.Parameters.AddWithValue("@TechnicalfeasibilityAssetsValuebyFinInstitution", null);

            if (objvoA.TechnicalfeasibilityAssetsValuebyCA != "" && objvoA.TechnicalfeasibilityAssetsValuebyCA != null)
                com.Parameters.AddWithValue("@TechnicalfeasibilityAssetsValuebyCA", objvoA.TechnicalfeasibilityAssetsValuebyCA);
            else
                com.Parameters.AddWithValue("@TechnicalfeasibilityAssetsValuebyCA", null);

            if (objvoA.WorkingCapitalApprovedProjectCost != "" && objvoA.WorkingCapitalApprovedProjectCost != null)
                com.Parameters.AddWithValue("@WorkingCapitalApprovedProjectCost", objvoA.WorkingCapitalApprovedProjectCost);
            else
                com.Parameters.AddWithValue("@WorkingCapitalApprovedProjectCost", null);

            if (objvoA.WorkingCapitalLoanSactioned != "" && objvoA.WorkingCapitalLoanSactioned != null)
                com.Parameters.AddWithValue("@WorkingCapitalLoanSactioned", objvoA.WorkingCapitalLoanSactioned);
            else
                com.Parameters.AddWithValue("@WorkingCapitalLoanSactioned", null);

            if (objvoA.WorkingCapitalPromotersEquity != "" && objvoA.WorkingCapitalPromotersEquity != null)
                com.Parameters.AddWithValue("@WorkingCapitalPromotersEquity", objvoA.WorkingCapitalPromotersEquity);
            else
                com.Parameters.AddWithValue("@WorkingCapitalPromotersEquity", null);

            if (objvoA.WorkingCapitalLoanAmountReleased != "" && objvoA.WorkingCapitalLoanAmountReleased != null)
                com.Parameters.AddWithValue("@WorkingCapitalLoanAmountReleased", objvoA.WorkingCapitalLoanAmountReleased);
            else
                com.Parameters.AddWithValue("@WorkingCapitalLoanAmountReleased", null);

            if (objvoA.WorkingCapitalAssetsValuebyFinInstitution != "" && objvoA.WorkingCapitalAssetsValuebyFinInstitution != null)
                com.Parameters.AddWithValue("@WorkingCapitalAssetsValuebyFinInstitution", objvoA.WorkingCapitalAssetsValuebyFinInstitution);
            else
                com.Parameters.AddWithValue("@WorkingCapitalAssetsValuebyFinInstitution", null);

            if (objvoA.WorkingCapitalAssetsValuebyCA != "" && objvoA.WorkingCapitalAssetsValuebyCA != null)
                com.Parameters.AddWithValue("@WorkingCapitalAssetsValuebyCA", objvoA.WorkingCapitalAssetsValuebyCA);
            else
                com.Parameters.AddWithValue("@WorkingCapitalAssetsValuebyCA", null);

            if (objvoA.created_by != "" && objvoA.created_by != null)
                com.Parameters.AddWithValue("@created_by", objvoA.created_by);
            else
                com.Parameters.AddWithValue("@created_by", null);

            if (objvoA.created_dt != "" && objvoA.created_dt != null)
                com.Parameters.AddWithValue("@created_dt", objvoA.created_dt);
            else
                com.Parameters.AddWithValue("@created_dt", null);

            if (objvoA.Modified_by != "" && objvoA.Modified_by != null)
                com.Parameters.AddWithValue("@Modified_by", objvoA.Modified_by);
            else
                com.Parameters.AddWithValue("@Modified_by", null);

            if (objvoA.Modified_dt != "" && objvoA.Modified_dt != null)
                com.Parameters.AddWithValue("@Modified_dt", objvoA.Modified_dt);
            else
                com.Parameters.AddWithValue("@Modified_dt", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }


    //9. // LOA Expan
    public int bulkInsertNewEnterPriseExpanLOA(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["Column5"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "LineofActivity");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "NameofUnit");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "InstalledCapacity");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "Value");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column5", "Incentive_id");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Column6", "LOAType");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);

            bulkCopy.DestinationTableName = ("Incentives_Line_of_Activity");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }

    //public int bulkInsertTermLoanDetails(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["Column5"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "TermLoanNo");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "TermLoanApplDate");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "InstitutionName");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "TermloanSandate");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Createdby");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column5", "IncentveID");
    //        SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Column7", "TermLoanSancRefNo");
    //        SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Column6", "TermLoanReleaseddate");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);
    //        bulkCopy.ColumnMappings.Add(mapping7);
    //        bulkCopy.ColumnMappings.Add(mapping8);

    //        bulkCopy.DestinationTableName = ("Incentives_TermLoan_dtls");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}

    //12.
    // update TIDEA FLAG & TPRIDE FLAG
    public string UpdateTideaTprimeFlag(string incentiveid)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_UPDATE_TIDEA_TPRIDE_FLAG";

            com.Transaction = transaction;
            com.Connection = connection;

            if (incentiveid != null)
                com.Parameters.AddWithValue("@INCENTIVEID", incentiveid);
            else
                com.Parameters.AddWithValue("@INCENTIVEID", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    //13.
    public DataSet GetEnterPriseIs(string EnterpriseCost, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPriseIs", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (EnterpriseCost.Trim() == "" || EnterpriseCost.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseCost", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseCost", SqlDbType.VarChar).Value = EnterpriseCost.ToString();


            if (EnterPriseType.Trim() == "" || EnterPriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = EnterPriseType.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterPriseIs_Incentive(string EnterpriseCost, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetEnterPriseIs_incentive", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (EnterpriseCost.Trim() == "" || EnterpriseCost.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseCost", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseCost", SqlDbType.VarChar).Value = EnterpriseCost.ToString();


            if (EnterPriseType.Trim() == "" || EnterPriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = EnterPriseType.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetAuthorisedSignatory(string OrgType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_AUTHORISED_SIGNATORY", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@ORGTYPE", SqlDbType.VarChar).Value = OrgType.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // check slip methods
    // 14.
    public DataSet GETINCENTIVESCHECKLIST(string createdby, string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INCENTIVES_CHECKLST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (createdby != null)
                da.SelectCommand.Parameters.Add("@CSCreatedBy", SqlDbType.VarChar).Value = createdby.ToString();

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@CSIncentiveId", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@CSIncentiveId", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //15.   //   Check Slip method:
    public string InsertCheckSlip(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[Usp_Ins_CheckSlip]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.CSCreatedBy != null)
                com.Parameters.AddWithValue("@CSCreatedBy", objvo1.CSCreatedBy);
            else
                com.Parameters.AddWithValue("@CSCreatedBy", null);

            if (objvo1.CSIncentiveId != null)
                com.Parameters.AddWithValue("@CSIncentiveId", objvo1.CSIncentiveId);
            else
                com.Parameters.AddWithValue("@CSIncentiveId", null);

            if (objvo1.CSbillsofinstitutfinancedEnterpriseindustries != null)
                com.Parameters.AddWithValue("@CSbillsofinstitutfinancedEnterpriseindustries", objvo1.CSbillsofinstitutfinancedEnterpriseindustries);
            else
                com.Parameters.AddWithValue("@CSbillsofinstitutfinancedEnterpriseindustries", null);

            if (objvo1.CSbillandpymtproofrespectofselffinancedEnterprisesindustries != null)
                com.Parameters.AddWithValue("@CSbillandpymtproofrespectofselffinancedEnterprisesindustries", objvo1.CSbillandpymtproofrespectofselffinancedEnterprisesindustries);
            else
                com.Parameters.AddWithValue("@CSbillandpymtproofrespectofselffinancedEnterprisesindustries", null);

            if (objvo1.CasteCertificatesSCST != null)
                com.Parameters.AddWithValue("@CSCasteCertificatesSCST", objvo1.CasteCertificatesSCST);
            else
                com.Parameters.AddWithValue("@CSCasteCertificatesSCST", null);

            if (objvo1.CSEntrepreneurAadhar != null)
                com.Parameters.AddWithValue("@CSEntrepreneurAadhar", objvo1.CSEntrepreneurAadhar);
            else
                com.Parameters.AddWithValue("@CSEntrepreneurAadhar", null);

            if (objvo1.CSEntrepreneurPANCard != null)
                com.Parameters.AddWithValue("@CSEntrepreneurPANCard", objvo1.CSEntrepreneurPANCard);
            else
                com.Parameters.AddWithValue("@CSEntrepreneurPANCard", null);

            if (objvo1.CSCertificateofCA != null)
                com.Parameters.AddWithValue("@CSCertificateofCA", objvo1.CSCertificateofCA);
            else
                com.Parameters.AddWithValue("@CSCertificateofCA", null);

            if (objvo1.CSRegdPartnershipDeedArticles != null)
                com.Parameters.AddWithValue("@CSRegdPartnershipDeedArticles", objvo1.CSRegdPartnershipDeedArticles);
            else
                com.Parameters.AddWithValue("@CSRegdPartnershipDeedArticles", null);

            if (objvo1.CSApprovalDirectorFactories != null)
                com.Parameters.AddWithValue("@CSApprovalDirectorFactories", objvo1.CSApprovalDirectorFactories);
            else
                com.Parameters.AddWithValue("@CSApprovalDirectorFactories", null);

            if (objvo1.CSBoilersCertificate != null)
                com.Parameters.AddWithValue("@CSBoilersCertificate", objvo1.CSBoilersCertificate);
            else
                com.Parameters.AddWithValue("@CSBoilersCertificate", null);

            if (objvo1.CSApprovalDirectorTownCountryPlanningUDA != null)
                com.Parameters.AddWithValue("@CSApprovalDirectorTownCountryPlanningUDA", objvo1.CSApprovalDirectorTownCountryPlanningUDA);
            else
                com.Parameters.AddWithValue("@CSApprovalDirectorTownCountryPlanningUDA", null);

            if (objvo1.CSRegularbuildingplansapprovalofMunicipalityGramPanchayat != null)
                com.Parameters.AddWithValue("@CSRegularbuildingplansapprovalofMunicipalityGramPanchayat", objvo1.CSRegularbuildingplansapprovalofMunicipalityGramPanchayat);
            else
                com.Parameters.AddWithValue("@CSRegularbuildingplansapprovalofMunicipalityGramPanchayat", null);

            if (objvo1.CSOperationTSPCBAcknowledgementGM != null)
                com.Parameters.AddWithValue("@CSOperationTSPCBAcknowledgementGM", objvo1.CSOperationTSPCBAcknowledgementGM);
            else
                com.Parameters.AddWithValue("@CSOperationTSPCBAcknowledgementGM", null);

            if (objvo1.CSPowerreleaseCertificatefrmTSTRANSCODISCOM != null)
                com.Parameters.AddWithValue("@CSPowerreleaseCertificatefrmTSTRANSCODISCOM", objvo1.CSPowerreleaseCertificatefrmTSTRANSCODISCOM);
            else
                com.Parameters.AddWithValue("@CSPowerreleaseCertificatefrmTSTRANSCODISCOM", null);

            if (objvo1.CSEnvironmentalclearance != null)
                com.Parameters.AddWithValue("@CSEnvironmentalclearance", objvo1.CSEnvironmentalclearance);
            else
                com.Parameters.AddWithValue("@CSEnvironmentalclearance", null);

            if (objvo1.CSOtherstatutoryapprovalsspecif != null)
                com.Parameters.AddWithValue("@CSOtherstatutoryapprovalsspecif", objvo1.CSOtherstatutoryapprovalsspecif);
            else
                com.Parameters.AddWithValue("@CSOtherstatutoryapprovalsspecif", null);

            if (objvo1.CSEMPartIfullsetIEMIL != null)
                com.Parameters.AddWithValue("@CSEMPartIfullsetIEMIL", objvo1.CSEMPartIfullsetIEMIL);
            else
                com.Parameters.AddWithValue("@CSEMPartIfullsetIEMIL", null);

            if (objvo1.CSEMPartIIfullsetIEMIL != null)
                com.Parameters.AddWithValue("@CSEMPartIIfullsetIEMIL", objvo1.CSEMPartIIfullsetIEMIL);
            else
                com.Parameters.AddWithValue("@CSEMPartIIfullsetIEMIL", null);

            if (objvo1.CSUdyogAadhar != null)
                com.Parameters.AddWithValue("@CSUdyogAadhar", objvo1.CSUdyogAadhar);
            else
                com.Parameters.AddWithValue("@CSUdyogAadhar", null);

            if (objvo1.CSProjectReport != null)
                com.Parameters.AddWithValue("@CSProjectReport", objvo1.CSProjectReport);
            else
                com.Parameters.AddWithValue("@CSProjectReport", null);

            if (objvo1.CSTermloansanctionletters != null)
                com.Parameters.AddWithValue("@CSTermloansanctionletters", objvo1.CSTermloansanctionletters);
            else
                com.Parameters.AddWithValue("@CSTermloansanctionletters", null);

            if (objvo1.CSBoardResolutionauthorizing != null)
                com.Parameters.AddWithValue("@CSBoardResolutionauthorizing", objvo1.CSBoardResolutionauthorizing);
            else
                com.Parameters.AddWithValue("@CSBoardResolutionauthorizing", null);

            if (objvo1.CSRegisteredlandSaledeedPremisesLeasedeed != null)
                com.Parameters.AddWithValue("@CSRegisteredlandSaledeedPremisesLeasedeed", objvo1.CSRegisteredlandSaledeedPremisesLeasedeed);
            else
                com.Parameters.AddWithValue("@CSRegisteredlandSaledeedPremisesLeasedeed", null);

            if (objvo1.CSCACECertificateregarding2handplantmachinery != null)
                com.Parameters.AddWithValue("@CSCACECertificateregarding2handplantmachinery", objvo1.CSCACECertificateregarding2handplantmachinery);
            else
                com.Parameters.AddWithValue("@CSCACECertificateregarding2handplantmachinery", null);

            if (objvo1.CSCECertificateSelffabricatedmachinery != null)
                com.Parameters.AddWithValue("@CSCECertificateSelffabricatedmachinery", objvo1.CSCECertificateSelffabricatedmachinery);
            else
                com.Parameters.AddWithValue("@CSCECertificateSelffabricatedmachinery", null);

            if (objvo1.CSBISCertificate != null)
                com.Parameters.AddWithValue("@CSBISCertificate", objvo1.CSBISCertificate);
            else
                com.Parameters.AddWithValue("@CSBISCertificate", null);

            if (objvo1.CSDrugLicense != null)
                com.Parameters.AddWithValue("@CSDrugLicense", objvo1.CSDrugLicense);
            else
                com.Parameters.AddWithValue("@CSDrugLicense", null);

            if (objvo1.CSExplosiveLicense != null)
                com.Parameters.AddWithValue("@CSExplosiveLicense", objvo1.CSExplosiveLicense);
            else
                com.Parameters.AddWithValue("@CSExplosiveLicense", null);

            if (objvo1.CSVATCSTSGSTCertificate != null)
                com.Parameters.AddWithValue("@CSVATCSTSGSTCertificate", objvo1.CSVATCSTSGSTCertificate);
            else
                com.Parameters.AddWithValue("@CSVATCSTSGSTCertificate", null);

            if (objvo1.CSFormA != null)
                com.Parameters.AddWithValue("@CSFormA", objvo1.CSFormA);
            else
                com.Parameters.AddWithValue("@CSFormA", null);

            if (objvo1.CSFormB != null)
                com.Parameters.AddWithValue("@CSFormB", objvo1.CSFormB);
            else
                com.Parameters.AddWithValue("@CSFormB", null);

            if (objvo1.CSProductionParticulars3Years != null)
                com.Parameters.AddWithValue("@CSProductionParticulars3Years", objvo1.CSProductionParticulars3Years);
            else
                com.Parameters.AddWithValue("@CSProductionParticulars3Years", null);

            if (objvo1.CSRTACertificate != null)
                com.Parameters.AddWithValue("@CSRTACertificate", objvo1.CSRTACertificate);
            else
                com.Parameters.AddWithValue("@CSRTACertificate", null);

            if (objvo1.CSPHCertificate != null)
                com.Parameters.AddWithValue("@CSPHCertificate", objvo1.CSPHCertificate);
            else
                com.Parameters.AddWithValue("@CSPHCertificate", null);

            if (objvo1.CSUndertakingForm != null)
                com.Parameters.AddWithValue("@CSUndertakingForm", objvo1.CSUndertakingForm);
            else
                com.Parameters.AddWithValue("@CSUndertakingForm", null);

            if (objvo1.CSUndertakingForm != null)
                com.Parameters.AddWithValue("@ApplicantVehPhoto", objvo1.ApplicantVehPhoto);
            else
                com.Parameters.AddWithValue("@ApplicantVehPhoto", null);

            if (objvo1.firstsalebill != null)
                com.Parameters.AddWithValue("@Fisrsalebill", objvo1.firstsalebill);
            else
                com.Parameters.AddWithValue("@Fisrsalebill", null);
            if (objvo1.COBORROWER != null)
                com.Parameters.AddWithValue("@COBORROWER", objvo1.COBORROWER);
            else
                com.Parameters.AddWithValue("@COBORROWER", null);

            if (objvo1.BLAStatementBrw != null)
                com.Parameters.AddWithValue("@BLAStatementBrw", objvo1.BLAStatementBrw);
            else
                com.Parameters.AddWithValue("@BLAStatementBrw", null);

            if (objvo1.CCCoBorrwers != null)
                com.Parameters.AddWithValue("@CCCoBorrwers", objvo1.CCCoBorrwers);
            else
                com.Parameters.AddWithValue("@CCCoBorrwers", null);

            if (objvo1.FacLicenses != null)
                com.Parameters.AddWithValue("@FacLicenses", objvo1.FacLicenses);
            else
                com.Parameters.AddWithValue("@FacLicenses", null);

            if (objvo1.TMCStar != null)
                com.Parameters.AddWithValue("@TMCStar", objvo1.TMCStar);
            else
                com.Parameters.AddWithValue("@TMCStar", null);


            if (objvo1.addlocalemp1 != null)
                com.Parameters.AddWithValue("@addlocalemp1", objvo1.addlocalemp1);
            else
                com.Parameters.AddWithValue("@addlocalemp1", null);
            if (objvo1.addlocalemp1 != null)
                com.Parameters.AddWithValue("@addlocalemp2", objvo1.addlocalemp1);
            else
                com.Parameters.AddWithValue("@addlocalemp2", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    //16.typeofincentivesnew.aspx
    // typeofincentivesnew.aspx
    public DataSet GET_ELIGIBLE_INCENTIVES_COMMON_DATA(string createdby, string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ELIGIBLE_INCENTIVES_COMMON_DATA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (createdby != null)
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //17.
    public DataSet GetIncetiveApplicationStatus(string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INCENTIVE_APPLICATION_STATUS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetAllIncentives(string CreatedBy)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FetchIncentives_CAF]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@createdBy", SqlDbType.VarChar).Value = CreatedBy;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //19.
    // added newly for Industry satus NEW/Expansion/Diversification
    public DataSet GetIncentivesCaste(string createdby, string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INCENTIVES_CASTE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (createdby != null)
                da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public string InsertIncentIS(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_IS";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.AppldAddlAmtWomen != null)
                com.Parameters.AddWithValue("@AppldAddlAmtWomen", objvo1.AppldAddlAmtWomen);
            else
                com.Parameters.AddWithValue("@AppldAddlAmtWomen", null);
            if (objvo1.AppldInvestSubsidy != null)
                com.Parameters.AddWithValue("@AppldInvestSubsidy", objvo1.AppldInvestSubsidy);
            else
                com.Parameters.AddWithValue("@AppldInvestSubsidy", null);
            if (objvo1.AppldTotInvestSubsidy != null)
                com.Parameters.AddWithValue("@AppldTotInvestSubsidy", objvo1.AppldTotInvestSubsidy);
            else
                com.Parameters.AddWithValue("@AppldTotInvestSubsidy", null);

            if (objvo1.AvldSubsidyAmt != null)
                com.Parameters.AddWithValue("@AvldSubsidyAmt", objvo1.AvldSubsidyAmt);
            else
                com.Parameters.AddWithValue("@AvldSubsidyAmt", null);


            if (objvo1.AvldSubsidyScheme != null)
                com.Parameters.AddWithValue("@AvldSubsidyScheme", objvo1.AvldSubsidyScheme);
            else
                com.Parameters.AddWithValue("@AvldSubsidyScheme", null);


            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);

            if (objvo1.SchemeEligible != null)
                com.Parameters.AddWithValue("@SchemeEligible", objvo1.SchemeEligible);
            else
                com.Parameters.AddWithValue("@SchemeEligible", null);

            // added newly on 12.06.2017
            if (objvo1.SchemeEligible != null)
                com.Parameters.AddWithValue("@ISubsidySCSCT", objvo1.ISubsidySCSCT);
            else
                com.Parameters.AddWithValue("@ISubsidySCSCT", null);

            if (objvo1.SchemeEligible != null)
                com.Parameters.AddWithValue("@ISubsidyScheduledAreas", objvo1.ISubsidyScheduledAreas);
            else
                com.Parameters.AddWithValue("@ISubsidyScheduledAreas", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    //21.
    public DataSet GetIncentivesStampDutydata(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_StampDuty]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //22.
    // 2). Stamp Duty.aspx: method
    public string InsertIncentStampDuty(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_DUTY";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.AreaRegdSaledeed != null)
                com.Parameters.AddWithValue("@AreaRegdSaledeed", objvo1.AreaRegdSaledeed);
            else
                com.Parameters.AddWithValue("@AreaRegdSaledeed", null);

            if (objvo1.PlnthAreaBuild != null)
                com.Parameters.AddWithValue("@PlnthAreaBuild", objvo1.PlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@PlnthAreaBuild", null);

            if (objvo1.FivePlnthAreaBuild != null)
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", objvo1.FivePlnthAreaBuild);
            else
                com.Parameters.AddWithValue("@FivePlnthAreaBuild", null);

            if (objvo1.AreaReqdAppraisal != null)
                com.Parameters.AddWithValue("@AreaReqdAppraisal", objvo1.AreaReqdAppraisal);
            else
                com.Parameters.AddWithValue("@AreaReqdAppraisal", null);

            if (objvo1.AreaReqdTSPCB != null)
                com.Parameters.AddWithValue("@AreaReqdTSPCB", objvo1.AreaReqdTSPCB);
            else
                com.Parameters.AddWithValue("@AreaReqdTSPCB", null);

            if (objvo1.NatureofTrans != null)
                com.Parameters.AddWithValue("@NatureofTrans", objvo1.NatureofTrans);
            else
                com.Parameters.AddWithValue("@NatureofTrans", null);

            if (objvo1.SubRegOffc != null)
                com.Parameters.AddWithValue("@SubRegOffc", objvo1.SubRegOffc);
            else
                com.Parameters.AddWithValue("@SubRegOffc", null);

            if (objvo1.RegdDeedNo != null)
                com.Parameters.AddWithValue("@RegdDeedNo", objvo1.RegdDeedNo);
            else
                com.Parameters.AddWithValue("@RegdDeedNo", null);

            string date = Convert.ToDateTime(objvo1.RegnDate).ToShortDateString();

            if (objvo1.RegnDate != null)
                com.Parameters.AddWithValue("@regndate", objvo1.RegnDate);
            else
                com.Parameters.AddWithValue("@regndate", null);


            if (objvo1.StampTranfrDutyAP != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAP", objvo1.StampTranfrDutyAP);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAP", null);


            if (objvo1.MortgageHypothDutyAP != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", objvo1.MortgageHypothDutyAP);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAP", null);

            if (objvo1.LandConvrChrgAP != null)
                com.Parameters.AddWithValue("@LandConvrChrgAP", objvo1.LandConvrChrgAP);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAP", null);

            if (objvo1.LandCostIeIdaIpAP != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", objvo1.LandCostIeIdaIpAP);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAP", null);

            if (objvo1.StampTranfrDutyAC != null)
                com.Parameters.AddWithValue("@StampTranfrDutyAC", objvo1.StampTranfrDutyAC);
            else
                com.Parameters.AddWithValue("@StampTranfrDutyAC", null);

            if (objvo1.MortgageHypothDutyAC != null)
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", objvo1.MortgageHypothDutyAC);
            else
                com.Parameters.AddWithValue("@MortgageHypothDutyAC", null);

            if (objvo1.LandConvrChrgAC != null)
                com.Parameters.AddWithValue("@LandConvrChrgAC", objvo1.LandConvrChrgAC);
            else
                com.Parameters.AddWithValue("@LandConvrChrgAC", null);


            if (objvo1.LandCostIeIdaIpAC != null)
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", objvo1.LandCostIeIdaIpAC);
            else
                com.Parameters.AddWithValue("@LandCostIeIdaIpAC", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);



            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    //23.
    public DataSet GetFinancialYearIncentives(string Count, string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FINANCIALYEARS_TEST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@YEARS", SqlDbType.VarChar).Value = Count;
            da.SelectCommand.Parameters.Add("@incentiveid", SqlDbType.VarChar).Value = incentiveid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //24. Power form
    public int InsertFormIIIIncentivesNew(string CreatedBy, int Incentiveid, string AmountClaimed, string Electricitydutyunits, string Electricitydutyamount)
    {
        int valid = 1;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand cmdFormIII = new SqlCommand("USP_INS_FormIII_Incentives", connection);
            cmdFormIII.CommandType = CommandType.StoredProcedure;
            cmdFormIII.Transaction = transaction;
            cmdFormIII.Connection = connection;
            cmdFormIII.Parameters.AddWithValue("@IncentiveId", SqlDbType.Int).Value = Incentiveid;
            cmdFormIII.Parameters.AddWithValue("@AmountClaimed", SqlDbType.VarChar).Value = AmountClaimed;
            cmdFormIII.Parameters.AddWithValue("@Created_By", SqlDbType.VarChar).Value = CreatedBy;
            if (Electricitydutyunits == "" || Electricitydutyunits == null)
            {
                cmdFormIII.Parameters.AddWithValue("@Electricitydutyunits", SqlDbType.VarChar).Value = null;

            }
            else
            {
                cmdFormIII.Parameters.AddWithValue("@Electricitydutyunits", SqlDbType.Int).Value = Electricitydutyunits;

            }
            if (Electricitydutyamount == "" || Electricitydutyamount == null)
            {
                cmdFormIII.Parameters.AddWithValue("@Electricitydutyamount", SqlDbType.VarChar).Value = null;

            }
            else
            {
                cmdFormIII.Parameters.AddWithValue("@Electricitydutyamount", SqlDbType.Decimal).Value = Electricitydutyamount;

            }
            cmdFormIII.ExecuteNonQuery();

            transaction.Commit();
            //connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    public int bulkInsertPower(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["IncentiveId"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("UnitsConsumed", "UnitsConsumed");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("AmountPaid", "Amount");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);

            bulkCopy.DestinationTableName = ("tbl_FormIII_Power_Incentives");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }

    //26.
    public int bulkInsertEnergy(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["IncentiveId"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("1stUnitsConsumed", "F_UnitsConsumed");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("1stAmountPaid", "F_Amount");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("2ndUnitsConsumed", "S_UnitsConsumed");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("2ndAmountPaid", "S_Amount");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Fin1stOr2ndHalfYear", "Fin1stOr2ndHalfYear");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);

            bulkCopy.DestinationTableName = ("tbl_FormIII_Energy_Incentives");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }
    //27. Pavala Vaddi
    public DataSet GetFormIVIncentives(int incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FormIVInentives", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveId", SqlDbType.Int).Value = incentiveid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //28. Sales tax

    public DataSet GetFormVIncentives(int incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FormVInentives", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveId", SqlDbType.Int).Value = incentiveid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //29.
    //public int bulkInsertPowerForm5(DataTable dt, string incentiveId)
    // {
    //     con.OpenConnection();
    //     int i = 0;
    //     try
    //     {
    //         foreach (DataRow row in dt.Rows)
    //         {
    //             row["IncentiveId"] = incentiveId;
    //         }

    //         SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //         SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
    //         SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("UnitsConsumed", "Unit");
    //         SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("AmountPaid", "Quantity");
    //         SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Value", "Value");
    //         SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
    //         SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");

    //         bulkCopy.ColumnMappings.Add(mapping1);
    //         bulkCopy.ColumnMappings.Add(mapping2);
    //         bulkCopy.ColumnMappings.Add(mapping3);
    //         bulkCopy.ColumnMappings.Add(mapping4);
    //         bulkCopy.ColumnMappings.Add(mapping5);
    //         bulkCopy.ColumnMappings.Add(mapping6);

    //         bulkCopy.DestinationTableName = ("tbl_FormV_Production_Incentives");
    //         bulkCopy.WriteToServer(dt);
    //         i = 1;
    //     }
    //     catch (Exception ex)
    //     {
    //         throw ex;
    //         i = 0;
    //     }
    //     finally
    //     {
    //         con.CloseConnection();
    //     }
    //     return i;
    // }
    //30.
    public int bulkInsertPowerForm5(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["IncentiveId"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("UnitsConsumed", "Unit");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("AmountPaid", "Quantity");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Value", "Value");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);

            bulkCopy.DestinationTableName = ("tbl_FormV_Production_Incentives");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }
    //31.
    public int bulkInsertEnergyForm5(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["IncentiveId"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("1stUnitsConsumed", "F_AmountPaid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("1stAmountPaid", "F_AmountClaimed");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("2ndUnitsConsumed", "S_AmountPaid");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("2ndAmountPaid", "S_AmountClaimed");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("Fin1stOr2ndHalfYear", "Fin1stOr2ndHalfYear");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);

            bulkCopy.DestinationTableName = ("tbl_FormV_SalesTax_Incentives");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }
    //32.
    //Seed Cap

    public DataSet GetIncentives_SEED_CAP_data(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_SEEDCAP_DATA]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //33.
    // seed cap insertion method
    public string InsertSeedCapDtls(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INSERT_SEED_CAP_DTLS";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.AppldInvestSubsidy != null)
                com.Parameters.AddWithValue("@IncentiveId", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentiveId", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@Amountclaimed", objvo1.AppldInvestSubsidy);
            else
                com.Parameters.AddWithValue("@Amountclaimed", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);


            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    //34.
    public DataSet GetIncentivesfrom4data(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_FORM4DATA]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //35.
    public int InsertFormVivalues(formVIVo formvoobj)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("InsertFormvo", con.GetConnection);

        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
            //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
            cmd.Parameters.AddWithValue("@IncentiveID", Convert.ToString(formvoobj.IncentiveID));
            cmd.Parameters.AddWithValue("@agencyName", Convert.ToString(formvoobj.agencyName));
            cmd.Parameters.AddWithValue("@CertificateNumber", Convert.ToString(formvoobj.CertificateNumber));

            //cmd.Parameters.AddWithValue("@DateofIssue", Convert.ToString(cmf.convertDateIndia(formvoobj.DateofIssue)));
            //cmd.Parameters.AddWithValue("@periodofvalidity", Convert.ToString(cmf.convertDateIndia(formvoobj.periodofvalidity)));

            cmd.Parameters.AddWithValue("@DateofIssue", Convert.ToString(formvoobj.DateofIssue));
            cmd.Parameters.AddWithValue("@periodofvalidity", Convert.ToString(formvoobj.periodofvalidity));

            cmd.Parameters.AddWithValue("@Amountspentinacquiringthecertification", Convert.ToString(formvoobj.Amountspentinacquiringthecertification));
            cmd.Parameters.AddWithValue("@FromCentralGovernment", Convert.ToString(formvoobj.FromCentralGovernment));
            cmd.Parameters.AddWithValue("@FromStateGovernment", Convert.ToString(formvoobj.FromStateGovernment));
            cmd.Parameters.AddWithValue("@Fromfinancinginstitution", Convert.ToString(formvoobj.Fromfinancinginstitution));
            cmd.Parameters.AddWithValue("@State", Convert.ToString(formvoobj.State));
            cmd.Parameters.AddWithValue("@Dist", Convert.ToString(formvoobj.Dist));
            cmd.Parameters.AddWithValue("@Mandal", Convert.ToString(formvoobj.Mandal));
            cmd.Parameters.AddWithValue("@Village", Convert.ToString(formvoobj.Village));
            cmd.Parameters.AddWithValue("@DoorNo", Convert.ToString(formvoobj.DoorNo));
            cmd.Parameters.AddWithValue("@Pincode", Convert.ToString(formvoobj.Pincode));
            cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(formvoobj.Created_By));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }
    //36.cleaner production
    public DataSet GetIncentivesfrom8data(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_FORM8DATA]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    //37.
    // 8). IncentiveFromVIII.aspx method
    public int InsertFormVIIIvalues(List<formVIIIVo> lstformvo)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = null;
        try
        {
            foreach (formVIIIVo formvoobj in lstformvo)
            {
                cmd = new SqlCommand("USP_INSERT_IncentiveFormVIII", con.GetConnection);
                cmd.CommandType = CommandType.StoredProcedure;
                //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
                //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                cmd.Parameters.AddWithValue("@IncentiveID", Convert.ToString(formvoobj.IncentiveID));
                cmd.Parameters.AddWithValue("@Nameoftheequipment", Convert.ToString(formvoobj.Nameoftheequipment));
                cmd.Parameters.AddWithValue("@Nameaddressofsupplier", Convert.ToString(formvoobj.Nameaddressofsupplier));
                cmd.Parameters.AddWithValue("@BillNo", Convert.ToString(formvoobj.BillNo));
                cmd.Parameters.AddWithValue("@BillDate", Convert.ToString(cmf.convertDateIndia(formvoobj.BillDate)));
                cmd.Parameters.AddWithValue("@Costoftheequipment", Convert.ToString(formvoobj.Costoftheequipment));
                cmd.Parameters.AddWithValue("@VATCST", Convert.ToString(formvoobj.VATCST));
                cmd.Parameters.AddWithValue("@ExciseDuty", Convert.ToString(formvoobj.ExciseDuty));
                cmd.Parameters.AddWithValue("@FreightCharge", Convert.ToString(formvoobj.FreightCharge));
                cmd.Parameters.AddWithValue("@Othercharges", Convert.ToString(formvoobj.Othercharges));
                cmd.Parameters.AddWithValue("@TotalinRs", Convert.ToString(formvoobj.TotalinRs));
                cmd.Parameters.AddWithValue("@subsidyclaimed", Convert.ToString(formvoobj.subsidyclaimed));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(formvoobj.id));

                cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(formvoobj.Created_By));
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
            }
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }
    //38.
    // 9).IncentiveFormIX.aspx method
    public int InsertFormIXvalues(formIXVo formvoobj)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("InsertFormIXVO", con.GetConnection);

        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            //cmd.Parameters.AddWithValue("@Enterpid", Convert.ToString(formvoobj.Enterpid));
            //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
            cmd.Parameters.AddWithValue("@IncentiveID", Convert.ToString(formvoobj.Incentiveid));
            cmd.Parameters.AddWithValue("@Nameofthetraininginstitute", Convert.ToString(formvoobj.Nameofthetraininginstitute));
            cmd.Parameters.AddWithValue("@Nameoftheskilldevelopmentprogramme", Convert.ToString(formvoobj.Nameoftheskilldevelopmentprogramme));
            cmd.Parameters.AddWithValue("@Numberskilledemployees", Convert.ToString(formvoobj.Numberskilledemployees));
            cmd.Parameters.AddWithValue("@Expenditureincurredtrainingprogramme", Convert.ToString(formvoobj.Expenditureincurredtrainingprogramme));
            cmd.Parameters.AddWithValue("@Amountclaimed", Convert.ToString(formvoobj.Amountclaimed));
            cmd.Parameters.AddWithValue("@Durationoftraining", Convert.ToString(formvoobj.Durationoftraining));
            cmd.Parameters.AddWithValue("@DurationModeoftraining", Convert.ToString(formvoobj.DurationModeoftraining));

            cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(formvoobj.Created_By));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }
    //40
    public DataSet GetIncentivesfrom9data(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_FORM9DATA]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //41. Seed capital
    public string InsertIncentIIDF(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_IIDF";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.UnitLocatedinIndustArea != null)
                com.Parameters.AddWithValue("@UnitLocatedinIndustArea", objvo1.UnitLocatedinIndustArea);
            else
                com.Parameters.AddWithValue("@UnitLocatedinIndustArea", null);

            if (objvo1.JustLocation != null)
                com.Parameters.AddWithValue("@JustLocation", objvo1.JustLocation);
            else
                com.Parameters.AddWithValue("@JustLocation", null);

            if (objvo1.FinanceSource != null)
                com.Parameters.AddWithValue("@FinanceSource", objvo1.FinanceSource);
            else
                com.Parameters.AddWithValue("@FinanceSource", null);

            if (objvo1.ReqdInfraFacilities != null)
                com.Parameters.AddWithValue("@ReqdInfraFacilities", objvo1.ReqdInfraFacilities);
            else
                com.Parameters.AddWithValue("@ReqdInfraFacilities", null);

            if (objvo1.ProposedInfraCritical != null)
                com.Parameters.AddWithValue("@ProposedInfraCritical", objvo1.ProposedInfraCritical);
            else
                com.Parameters.AddWithValue("@ProposedInfraCritical", null);

            if (objvo1.EstimatesInfra != null)
                com.Parameters.AddWithValue("@EstimatesInfra", objvo1.EstimatesInfra);
            else
                com.Parameters.AddWithValue("@EstimatesInfra", null);

            if (objvo1.CAName != null)
                com.Parameters.AddWithValue("@CAName", objvo1.CAName);
            else
                com.Parameters.AddWithValue("@CAName", null);

            if (objvo1.ProjDuration != null)
                com.Parameters.AddWithValue("@ProjDuration", objvo1.ProjDuration);
            else
                com.Parameters.AddWithValue("@ProjDuration", null);

            if (objvo1.MaintanCostAnnum != null)
                com.Parameters.AddWithValue("@MaintanCostAnnum", objvo1.MaintanCostAnnum);
            else
                com.Parameters.AddWithValue("@MaintanCostAnnum", null);

            if (objvo1.AmtClaimed != null)
                com.Parameters.AddWithValue("@AmtClaimed", objvo1.AmtClaimed);
            else
                com.Parameters.AddWithValue("@AmtClaimed", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    //42.
    public DataSet GetIncentivesIIDFunddata(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_IIDF]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //43.
    // 11).AdvanceSubsidyForSCandST.aspx method
    public string InsertIncentAdvSub(IncentiveVosIncetForms objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INS_INCENT_AdvSub";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.TotalEquity != null)
                com.Parameters.AddWithValue("@TotalEquity", objvo1.TotalEquity);
            else
                com.Parameters.AddWithValue("@TotalEquity", null);

            if (objvo1.OwnCapital != null)
                com.Parameters.AddWithValue("@OwnCapital", objvo1.OwnCapital);
            else
                com.Parameters.AddWithValue("@OwnCapital", null);

            if (objvo1.Borrowed != null)
                com.Parameters.AddWithValue("@Borrowed", objvo1.Borrowed);
            else
                com.Parameters.AddWithValue("@Borrowed", null);

            if (objvo1.AdvSubClaimed != null)
                com.Parameters.AddWithValue("@AdvSubClaimed", objvo1.AdvSubClaimed);
            else
                com.Parameters.AddWithValue("@AdvSubClaimed", null);

            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.IncentveID != null)
                com.Parameters.AddWithValue("@IncentveID", objvo1.IncentveID);
            else
                com.Parameters.AddWithValue("@IncentveID", null);

            if (objvo1.FinanceSource != null)
                com.Parameters.AddWithValue("@Instalment", objvo1.FinanceSource);
            else
                com.Parameters.AddWithValue("@Instalment", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    //44.
    public DataSet GetIncentivesAdvSubsidySCST(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_AdvSubsidy_SCST]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // 46). FinalPage.aspx method
    public void UpdateIncentivesCAFStatus(string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        SqlCommand cmd = null;

        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_UPDATE_CAF_STATUS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;



            if (incentiveid.Trim() == "" || incentiveid.Trim() == null)
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = incentiveid.ToString();

            da.Fill(ds);
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //47.
    public DataSet GetAllIncentivesByid(string CreatedBy)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FetchIncentives_CAF_ID]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = CreatedBy;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //Addediporeport
    public DataSet FetchTotalDistrictwise_IPO(string Month, string Year, string DistrictId, string Designation, string status)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_MONTHLYREPORT_STATELEVEL_DRILLDOWN", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = Month.ToString();
            da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = Year.ToString();
            da.SelectCommand.Parameters.Add("@DISTRICTID", SqlDbType.VarChar).Value = DistrictId.ToString();
            da.SelectCommand.Parameters.Add("@DESIGNATION", SqlDbType.VarChar).Value = Designation.ToString();
            da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.ToString();


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchTotalDistrictwise_IPoList(string Year, string Month)
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GET_MONTHLYREPORT_STATELEVEL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Month.Trim() == "" || Month.Trim() == null || Month.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = Month.ToString();

            if (Year.Trim() == "" || Year.Trim() == null || Year.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = Year.ToString();

            //da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = Month.ToString();
            //da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = Year.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    //uptohere
    //48.
    // added newly for dept view draft page on 20.06.2017
    public DataSet GetAllIncentivesDeptView(string CreatedBy)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FetchIncentives_CAF_DEPT]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = CreatedBy;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //49.
    public DataSet GetIncentiveDeptDetails(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_DEPT_INCENTIVE_DATA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@incentiveID", SqlDbType.VarChar).Value = incentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    //50.draf tpage
    public DataSet GetIncentivesISdata(string IncentiveID, string mastid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_IS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.SelectCommand.Parameters.Add("@mastid", SqlDbType.VarChar).Value = mastid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //51.
    public DataSet GetFormIIIIncentives(int incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FormIIIInentives", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveId", SqlDbType.Int).Value = incentiveid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApplicantIncentiveDashBoard(string EnterpreneurId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_APPLICANT_INCENTIVES_DASHBOARD", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@ENTERPRENEURID", SqlDbType.VarChar).Value = EnterpreneurId.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int bulkInsertPV(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["IncentiveId"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "FinancialYear");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("InterestpaidonTermLoan", "IntrestPaid");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Rateofinterest", "RateofIntrest");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Interestpaidexcludingpenalinterest", "IntrestPenaltyPaid");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("EligibleMax", "Eligible");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Amountclaimed", "AmountClaimed");
            SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Created_by", "Created_By");
            SqlBulkCopyColumnMapping mapping8 = new SqlBulkCopyColumnMapping("IncentiveId", "IncentiveId");
            SqlBulkCopyColumnMapping mapping9 = new SqlBulkCopyColumnMapping("Fin1stOr2ndHalfYear", "Fin1stOr2ndHalfYear");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);
            bulkCopy.ColumnMappings.Add(mapping7);
            bulkCopy.ColumnMappings.Add(mapping8);
            bulkCopy.ColumnMappings.Add(mapping9);


            bulkCopy.DestinationTableName = ("tbl_FormIV_Incentives");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }

    public DataSet GetBasicUnitDetails(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_UNIT_DTLS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetBasicUnitDetailsNewPsr(string incentiveID, string MstIds)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_UNIT_DTLSNewPsr]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@MstIds", SqlDbType.VarChar).Value = MstIds;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIPORecommendationOfficerDetailsDIC(string incentiveid, string mstincentiveid, string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("Usp_GetIPORecommendationOfficerDetails_DicGM", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@incentiveid", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@incentiveid", SqlDbType.VarChar).Value = null;

            if (mstincentiveid != null)
                da.SelectCommand.Parameters.Add("@MasterIncentiveid", SqlDbType.VarChar).Value = mstincentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@MasterIncentiveid", SqlDbType.VarChar).Value = null;

            if (createdby != null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = createdby.ToString();
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    // frmIncentiveDeptView.aspx method
    public DataSet GetIncetiveDetailsdept(string incentiveID, string ApplicationLevel, string SentFrom, string Userid, string Incids)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("[FETCHINC_DETAILS_ID]", con.GetConnection);
            da = new SqlDataAdapter("[FETCHINC_DETAILS_ID_NEW]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;
                da.SelectCommand.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom;
                da.SelectCommand.Parameters.Add("@Userid", SqlDbType.VarChar).Value = Userid;
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = Incids;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetBasicinspectionRPRTDTLS(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INSPECTION_RPRT_DTLS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncetiveDetailsdeptOfficerRemarksDraft(string incentiveID, string ApplicationLevel, string SentFrom, string TypeDashboard)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_DETAILS_ID_OfficerRemarks_Draft]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;
                da.SelectCommand.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom;
                da.SelectCommand.Parameters.Add("@TypeDashboard", SqlDbType.VarChar).Value = TypeDashboard;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet DeptReportDepartmentWiseGrievance(string intDistrictid, string Category, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {// if Your Changeing the query same should be in "DeptReportDepartmentWise_New_export"
            da = new SqlDataAdapter("USP_GET_Grievance_Report", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = intDistrictid.ToString();

            if (Category.Trim() == "" || Category.Trim() == null || Category.Trim() == "--select--")
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Category", SqlDbType.VarChar).Value = Category.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet RetriveStatusByTypeDistrictNewGrievance(string status, string dept, string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_Grievance_Report_DRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null)
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.ToString();

            if (dept.Trim() == "" || dept.Trim() == null || dept.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = dept.ToString();

            da.SelectCommand.Parameters.Add("@FROMDATE", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@TODATE", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            //throw ex;
            return null;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncetiveDetailsdeptOfficerRemarks(string incentiveID, string ApplicationLevel, string SentFrom, string TypeDashboard, string SVCStatus, string Incids)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_DETAILS_ID_OfficerRemarks]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;
                da.SelectCommand.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom;
                da.SelectCommand.Parameters.Add("@SVCStatus", SqlDbType.VarChar).Value = SVCStatus;
                da.SelectCommand.Parameters.Add("@TypeDashboard", SqlDbType.VarChar).Value = TypeDashboard;
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = Incids;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncetiveDropDownList(string incentiveID, string RoleCode, string Status, string Incids)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_COI_DROPDOWNBINDING]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@RoleCode", SqlDbType.VarChar).Value = RoleCode;
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status;
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = Incids;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncetiveDetailsdeptOfficerRemarksGM(string incentiveID, string ApplicationLevel, string SentFrom, string TypeDashboard, string Incids)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_DETAILS_ID_OfficerRemarks_GM_remarks]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;
                da.SelectCommand.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom;
                da.SelectCommand.Parameters.Add("@TypeDashboard", SqlDbType.VarChar).Value = TypeDashboard;
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = Incids;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncetiveDetailsdept(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncetiveDetailsdeptQUERY(string incentiveID, string Incids)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
            }
            da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = Incids;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncetiveDetailsdeptAttachements(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ALLINCENTIVES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncetiveDetailsdeptAttachementsIpo(string incentiveID, string MstIncentiveId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_ALLINCENTIVES_IPO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MstIncentiveId;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncetivePOSDetailsdept(string UserCode)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("[showSrcutnyDet_Coi_Inc]", con.GetConnection);
            da = new SqlDataAdapter("[USP_GET_JD_Dashboard]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.SelectCommand.Parameters.Add("@uid", SqlDbType.VarChar).Value = UserCode;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetAddlDashboard(string UserCode, string USERTYPE)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_ADDL_DASHBOARD", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@USERID", SqlDbType.VarChar).Value = UserCode;
            da.SelectCommand.Parameters.Add("@USERTYPE", SqlDbType.VarChar).Value = USERTYPE;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncetiveDetailsdeptCOI(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS_COI]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetQueryDetailsdept(string UserID, string incentiveID, string IncentiveType, string ApplicationLevel, string JdOrGMflag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS_ID]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
            da.SelectCommand.Parameters.Add("@UserID", SqlDbType.VarChar).Value = UserID;
            da.SelectCommand.Parameters.Add("@incentiveIDNew", SqlDbType.VarChar).Value = incentiveID;
            da.SelectCommand.Parameters.Add("@IncentiveType", SqlDbType.VarChar).Value = IncentiveType;
            da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;
            da.SelectCommand.Parameters.Add("@JdOrGMflag", SqlDbType.VarChar).Value = JdOrGMflag;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetQueryDetailsdeptnew(string UserID, string incentiveID, string IncentiveType, string ApplicationLevel)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS_ID_DEPT]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
            da.SelectCommand.Parameters.Add("@UserID", SqlDbType.VarChar).Value = UserID;
            da.SelectCommand.Parameters.Add("@incentiveIDNew", SqlDbType.VarChar).Value = incentiveID;
            da.SelectCommand.Parameters.Add("@IncentiveType", SqlDbType.VarChar).Value = IncentiveType;
            da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetQueryDetailsdeptApproval(string UserID, string incentiveID, string IncentiveType, string ApplicationLevel)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_QUERYDETAILS_ID_Approval]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
            da.SelectCommand.Parameters.Add("@UserID", SqlDbType.VarChar).Value = UserID;
            da.SelectCommand.Parameters.Add("@incentiveIDNew", SqlDbType.VarChar).Value = incentiveID;
            da.SelectCommand.Parameters.Add("@IncentiveType", SqlDbType.VarChar).Value = IncentiveType;
            da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public string UpdateTideaTprimeFlag(string incentiveid)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "USP_UPDATE_TIDEA_TPRIDE_FLAG";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (incentiveid != null)
    //            com.Parameters.AddWithValue("@INCENTIVEID", incentiveid);
    //        else
    //            com.Parameters.AddWithValue("@INCENTIVEID", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    // LOA Expan
    //public int bulkInsertNewEnterPriseExpanLOA(DataTable dt, string incentiveId)
    //{
    //    con.OpenConnection();
    //    int i = 0;
    //    try
    //    {
    //        foreach (DataRow row in dt.Rows)
    //        {
    //            row["Column5"] = incentiveId;
    //        }

    //        SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
    //        SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("Column1", "LineofActivity");
    //        SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Column2", "NameofUnit");
    //        SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("Column3", "InstalledCapacity");
    //        SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("Column4", "Value");
    //        SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "Created_by");
    //        SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Column5", "Incentive_id");
    //        SqlBulkCopyColumnMapping mapping7 = new SqlBulkCopyColumnMapping("Column6", "LOAType");

    //        bulkCopy.ColumnMappings.Add(mapping1);
    //        bulkCopy.ColumnMappings.Add(mapping2);
    //        bulkCopy.ColumnMappings.Add(mapping3);
    //        bulkCopy.ColumnMappings.Add(mapping4);
    //        bulkCopy.ColumnMappings.Add(mapping5);
    //        bulkCopy.ColumnMappings.Add(mapping6);
    //        bulkCopy.ColumnMappings.Add(mapping7);

    //        bulkCopy.DestinationTableName = ("Incentives_Line_of_Activity");
    //        bulkCopy.WriteToServer(dt);
    //        i = 1;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //        i = 0;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //    return i;
    //}

    public DataSet GETINCENTIVESCAFDATA_INSP(string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GETINCENTIVESCAFDATA_INSP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.Int).Value = int.Parse(incentiveid);
            else
                da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.Int).Value = null;

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentIncentiveDashboardNewIncType(string intDistrictid)   //nikhil - incentive
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("sp_GetDepartmentIncentiveDashboard", con.GetConnection);

            da = new SqlDataAdapter("sp_GetDepartmentIncentiveDashboardNewIncTypeNew_15042025", con.GetConnection);

            // da = new SqlDataAdapter("sp_GetDepartmentIncentiveDashboardNewIncTypenew", con.GetConnection);

            //sp_GetDepartmentIncentiveDashboardNewIncType
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null || intDistrictid.Trim() == "--Select--" || intDistrictid.Trim() == "0")
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();

            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncentiveDeptDetails_InspReprt(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("usp_retrieveDat_Insp", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@intIncid", SqlDbType.VarChar).Value = incentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet GetSLCDetails(string incentiveID, string MasterIncentiveType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_SLC_DTLS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@MasterIncentiveType", SqlDbType.VarChar).Value = MasterIncentiveType;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GETINCENTIVESCAFDATA_INSP_Report(string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("usp_retrieveDat_Insp", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@intIncid", SqlDbType.Int).Value = int.Parse(incentiveid);
            else
                da.SelectCommand.Parameters.Add("@intIncid", SqlDbType.Int).Value = null;

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet getUdyogAadharType()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_UDYOG_AADHAAR_TYPE", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    public DataSet GetBasicUnitDetails_Proforma_letters(string incentiveID, string MstIncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_DTLS_PROFORMA_LETTERS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
            }
            if (MstIncentiveID.ToString() != "" || MstIncentiveID.ToString() != null)
            {
                da.SelectCommand.Parameters.Add("@MstIncentiveID", SqlDbType.VarChar).Value = MstIncentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBasicUnitDetails_Proforma_lettersPSR(string incentiveID, string MstIncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_DTLS_RECOMMENDATION_LETTERS_PSRNEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
            }
            if (MstIncentiveID.ToString() != "" || MstIncentiveID.ToString() != null)
            {
                da.SelectCommand.Parameters.Add("@MstIncentiveID", SqlDbType.VarChar).Value = MstIncentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public string NumberToWord(int num)
    {
        if (num == 0)
            return "Zero";

        if (num < 0)
            return "Not supported";

        var words = "";
        string[] strones = { "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
        string[] strtens = { "Twenty", "Thirty", "Fourty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };


        int crore = 0, lakhs = 0, thousands = 0, hundreds = 0, tens = 0, single = 0;


        crore = num / 10000000; num = num - crore * 10000000;
        lakhs = num / 100000; num = num - lakhs * 100000;
        thousands = num / 1000; num = num - thousands * 1000;
        hundreds = num / 100; num = num - hundreds * 100;
        if (num > 19)
        {
            tens = num / 10; num = num - tens * 10;
        }
        single = num;


        if (crore > 0)
        {
            if (crore > 19)
                words += NumberToWord(crore) + "Crore ";
            else
                words += strones[crore - 1] + " Crore ";
        }

        if (lakhs > 0)
        {
            if (lakhs > 19)
                words += NumberToWord(lakhs) + "Lakh ";
            else
                words += strones[lakhs - 1] + " Lakh ";
        }

        if (thousands > 0)
        {
            if (thousands > 19)
                words += NumberToWord(thousands) + "Thousand ";
            else
                words += strones[thousands - 1] + " Thousand ";
        }

        if (hundreds > 0)
            words += strones[hundreds - 1] + " Hundred ";

        if (tens > 0)
            words += strtens[tens - 2] + " ";

        if (single > 0)
            words += strones[single - 1] + " ";

        return words;
    }
    public DataSet getSLClist()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LIST_SLCs", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getSLClistGm(string DistrictID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LIST_SLCs_GM", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@DistrictID", SqlDbType.VarChar).Value = DistrictID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetBankLetterDetails(string SLCNumber, string SLCDate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_BANKLETTER_CLEARANCECHECK", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@SLCNUMBER", SqlDbType.VarChar).Value = SLCNumber;
            da.SelectCommand.Parameters.Add("@SLCDATE", SqlDbType.VarChar).Value = SLCDate;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GeneratePayeeListForBank(string SLCNumber, string SLCDate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_SANCTIONBANKFILE]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@SLCNUMBER", SqlDbType.VarChar).Value = SLCNumber;
            da.SelectCommand.Parameters.Add("@SLCDATE", SqlDbType.VarChar).Value = SLCDate;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetSanctionedIncentives(string UniqueID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_UIDNO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UniqueID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // added on 02.08.2017
    public DataSet GetDistrictsForOldSanctionedIncentives()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_OLDINCENTIVEDISTRICT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncentivesForOldSanctionedIncentives()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INCENTIVES_OLDSANCTIONEDINCENTIVES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncentivesDataofOldSanctionedIncentives(string IncentiveId, string DistrictName, string UnitName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_OLDINCENTIVESANCTIONS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveId", SqlDbType.VarChar).Value = IncentiveId;
            da.SelectCommand.Parameters.Add("@DistName", SqlDbType.VarChar).Value = DistrictName;
            da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = UnitName;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //SLC Entry Screen
    //public string InsertCOISLCDetails(IncentivesVOs objvo1)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_INS_SANTION_SLC]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (objvo1.User_Id != null)
    //            com.Parameters.AddWithValue("@Created_by", objvo1.User_Id);
    //        else
    //            com.Parameters.AddWithValue("@Created_by", null);
    //        if (objvo1.UnitName != null)
    //            com.Parameters.AddWithValue("@NameofUnit", objvo1.UnitName);
    //        else
    //            com.Parameters.AddWithValue("@NameofUnit", null);

    //        if (objvo1.UnitState != null)
    //            com.Parameters.AddWithValue("@State", objvo1.UnitState);
    //        else
    //            com.Parameters.AddWithValue("@State", null);

    //        if (objvo1.UnitDIst != null)
    //            com.Parameters.AddWithValue("@District", objvo1.UnitDIst);
    //        else
    //            com.Parameters.AddWithValue("@District", null);

    //        if (objvo1.UnitMandal != null)
    //            com.Parameters.AddWithValue("@Mandal", objvo1.UnitMandal);
    //        else
    //            com.Parameters.AddWithValue("@Mandal", null);

    //        if (objvo1.UnitVill != null)
    //            com.Parameters.AddWithValue("@Village", objvo1.UnitVill);
    //        else
    //            com.Parameters.AddWithValue("@Village", null);

    //        if (objvo1.UnitHNO != null)
    //            com.Parameters.AddWithValue("@SurveyNo", objvo1.UnitHNO);
    //        else
    //            com.Parameters.AddWithValue("@SurveyNo", null);

    //        if (objvo1.UnitStreet != null)
    //            com.Parameters.AddWithValue("@Street", objvo1.UnitStreet);
    //        else
    //            com.Parameters.AddWithValue("@Street", null);

    //        if (objvo1.SocialStatus != null)
    //            com.Parameters.AddWithValue("@Caste", objvo1.SocialStatus);
    //        else
    //            com.Parameters.AddWithValue("@Caste", null);

    //        if (objvo1.DateOfComm != null)
    //            com.Parameters.AddWithValue("@DateofCommencement", objvo1.DateOfComm);
    //        else
    //            com.Parameters.AddWithValue("@DateofCommencement", null);

    //        if (objvo1.incentiveTypeID != null)
    //            com.Parameters.AddWithValue("@IncentiveId", objvo1.incentiveTypeID);
    //        else
    //            com.Parameters.AddWithValue("@IncentiveId", null);

    //        if (objvo1.incentiveTypename != null)
    //            com.Parameters.AddWithValue("@IncentiveName", objvo1.incentiveTypename);
    //        else
    //            com.Parameters.AddWithValue("@IncentiveName", null);

    //        if (objvo1.recommendedAnount != null)
    //            //  com.Parameters.AddWithValue("@RecommendedAmount", Convert.ToDecimal(objvo1.recommendedAnount));
    //            com.Parameters.AddWithValue("@RecommendedAmount", objvo1.recommendedAnount);
    //        else
    //            com.Parameters.AddWithValue("@RecommendedAmount", null);

    //        if (objvo1.sanctionAmount != null)
    //            // com.Parameters.AddWithValue("@SanctionedAmount", Convert.ToDecimal(objvo1.sanctionAmount));
    //            com.Parameters.AddWithValue("@SanctionedAmount", objvo1.sanctionAmount);
    //        else
    //            com.Parameters.AddWithValue("@SanctionedAmount", null);

    //        if (objvo1.sanctionDate != null)
    //            com.Parameters.AddWithValue("@SanctionedDate", objvo1.sanctionDate);
    //        else
    //            com.Parameters.AddWithValue("@SanctionedDate", null);

    //        if (objvo1.SLCNO != null)
    //            com.Parameters.AddWithValue("@SLCNumer", objvo1.SLCNO);
    //        else
    //            com.Parameters.AddWithValue("@SLCNumer", null);

    //        if (objvo1.SLCDate != null)
    //            com.Parameters.AddWithValue("@SLCDate", objvo1.SLCDate);
    //        else
    //            com.Parameters.AddWithValue("@SLCDate", null);

    //        if (objvo1.SCHEMEName != null)
    //            com.Parameters.AddWithValue("@SchemeName", objvo1.SCHEMEName);
    //        else
    //            com.Parameters.AddWithValue("@SchemeName", null);

    //        if (objvo1.Status != null)
    //            com.Parameters.AddWithValue("@Status", objvo1.Status);
    //        else
    //            com.Parameters.AddWithValue("@Status", null);

    //        if (objvo1.Remarks != null)
    //            com.Parameters.AddWithValue("@Remarks", objvo1.Remarks);
    //        else
    //            com.Parameters.AddWithValue("@Remarks", null);

    //        //29072017
    //        if (objvo1.Sector != null)
    //            com.Parameters.AddWithValue("@Sector", objvo1.Sector);
    //        else
    //            com.Parameters.AddWithValue("@Sector", null);

    //        if (objvo1.Category != null)
    //            com.Parameters.AddWithValue("@IndsCategory", objvo1.Category);
    //        else
    //            com.Parameters.AddWithValue("@IndsCategory", null);

    //        if (objvo1.Gender != null)
    //            com.Parameters.AddWithValue("@Gender", objvo1.Gender);
    //        else
    //            com.Parameters.AddWithValue("@Gender", null);

    //        if (objvo1.BankName != null)
    //            com.Parameters.AddWithValue("@BankName", objvo1.BankName);
    //        else
    //            com.Parameters.AddWithValue("@BankName", null);

    //        if (objvo1.TypeOfAccount != null)
    //            com.Parameters.AddWithValue("@TypeOfAcount", objvo1.TypeOfAccount);
    //        else
    //            com.Parameters.AddWithValue("@TypeOfAcount", null);

    //        if (objvo1.IFSCCode != null)
    //            com.Parameters.AddWithValue("@IFSCCode", objvo1.IFSCCode);
    //        else
    //            com.Parameters.AddWithValue("@IFSCCode", null);

    //        if (objvo1.SeriatumNo != null)
    //            com.Parameters.AddWithValue("@SeriatumNo", objvo1.SeriatumNo);
    //        else
    //            com.Parameters.AddWithValue("@SeriatumNo", null);

    //        if (objvo1.UnitDIstId != null)
    //            com.Parameters.AddWithValue("@Distid", objvo1.UnitDIstId);
    //        else
    //            com.Parameters.AddWithValue("@Distid", null);

    //        if (objvo1.UnitMandalId != null)
    //            com.Parameters.AddWithValue("@MandalId", objvo1.UnitMandalId);
    //        else
    //            com.Parameters.AddWithValue("@MandalId", null);

    //        if (objvo1.UnitVillId != null)
    //            com.Parameters.AddWithValue("@VillageId", objvo1.UnitVillId);
    //        else
    //            com.Parameters.AddWithValue("@VillageId", null);

    //        if (objvo1.ApplciantName != null)
    //            com.Parameters.AddWithValue("@ApplicantName", objvo1.ApplciantName);
    //        else
    //            com.Parameters.AddWithValue("@ApplicantName", null);

    //        if (objvo1.FinHalfYear != null)
    //            com.Parameters.AddWithValue("@FinHalfYear", objvo1.FinHalfYear);
    //        else
    //            com.Parameters.AddWithValue("@FinHalfYear", null);

    //        if (objvo1.Pride != null)
    //            com.Parameters.AddWithValue("@Pride", objvo1.Pride);
    //        else
    //            com.Parameters.AddWithValue("@Pride", null);

    //        if (objvo1.UidNoInc != null)
    //            com.Parameters.AddWithValue("@UIDNO", objvo1.UidNoInc);
    //        else
    //            com.Parameters.AddWithValue("@UIDNO", null);

    //        if (objvo1.financialyear != null)
    //            com.Parameters.AddWithValue("@FinancialYear", objvo1.financialyear);
    //        else
    //            com.Parameters.AddWithValue("@FinancialYear", null);

    //        if (objvo1.MobileNo != null)
    //            com.Parameters.AddWithValue("@MobileNo", objvo1.MobileNo);
    //        else
    //            com.Parameters.AddWithValue("@MobileNo", null);

    //        if (objvo1.EmailID != null)
    //            com.Parameters.AddWithValue("@EmailId", objvo1.EmailID);
    //        else
    //            com.Parameters.AddWithValue("@EmailId", null);

    //        if (objvo1.BranchName != null)
    //            com.Parameters.AddWithValue("@BranchName", objvo1.BranchName);
    //        else
    //            com.Parameters.AddWithValue("@BranchName", null);

    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}

    public DataSet GetFinYearsDIPCScreen(string Count)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FINANCIALYEARS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@YEARS", SqlDbType.VarChar).Value = Count;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetSLCDetailsByUIDNO(string uidno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_COMMN_DTLS_BY_UIDNO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (uidno != null)
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = uidno.ToString();
            else
                da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getIncentiveNamebyID(string incentiveid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_Get_Incentives_Name", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@MasterIncentiveId", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@MasterIncentiveId", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetEnterincetracker(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("INCENTIVES_APPLICATION_TRACKER", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_HD_INC_STATUS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@Incid", SqlDbType.VarChar).Value = IncentiveID.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIPORecommendationOfficerDetailsStampDuty(string incentiveid, string mstincentiveid, string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("Usp_GetIPORecommendationOfficerDetailsstampduty", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@incentiveid", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@incentiveid", SqlDbType.VarChar).Value = null;

            if (mstincentiveid != null)
                da.SelectCommand.Parameters.Add("@MasterIncentiveid", SqlDbType.VarChar).Value = mstincentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@MasterIncentiveid", SqlDbType.VarChar).Value = null;

            if (createdby != null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = createdby.ToString();
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public string InsertIPORpt_Common(string IncentiveId, string Mstincentiveid, string amountpaid, string amountrecommended, string CreatedBy, string Remarks, string IsDlcOrSlc)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_Insert_Inspection_Rpt_Common]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (IncentiveId != null && IncentiveId != "")
    //            com.Parameters.AddWithValue("@IncentiveId", IncentiveId);
    //        else
    //            com.Parameters.AddWithValue("@IncentiveId", null);

    //        if (Mstincentiveid != null && Mstincentiveid != "")
    //            com.Parameters.AddWithValue("@MstIncentiveId", Mstincentiveid);
    //        else
    //            com.Parameters.AddWithValue("@MstIncentiveId", null);

    //        if (amountpaid != null && amountpaid != "")
    //            com.Parameters.AddWithValue("@AmountPaid", amountpaid);
    //        else
    //            com.Parameters.AddWithValue("@AmountPaid", null);

    //        if (amountrecommended != null && amountrecommended != "")
    //            com.Parameters.AddWithValue("@AmountRecommended", amountrecommended);
    //        else
    //            com.Parameters.AddWithValue("@AmountRecommended", null);

    //        if (CreatedBy != null && CreatedBy != "")
    //            com.Parameters.AddWithValue("@Createdby", CreatedBy);
    //        else
    //            com.Parameters.AddWithValue("@Createdby", null);

    //        if (Remarks != null && Remarks != "")
    //            com.Parameters.AddWithValue("@Remarks", Remarks);
    //        else
    //            com.Parameters.AddWithValue("@Remarks", null);


    //        //added by chinna

    //        if (IsDlcOrSlc != null && IsDlcOrSlc != "")
    //            com.Parameters.AddWithValue("@IsDlcOrSlc", IsDlcOrSlc);
    //        else
    //            com.Parameters.AddWithValue("@IsDlcOrSlc", null);


    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}
    //public string InsertIPORpt_StampDuty(string IncentiveId, string Mstincentiveid, string exemptiononland, string stampduty, string MortgageDuty, string LandConversionCharges, string LandCost, string CreatedBy, string Remarks, string IsDlcOrSlc)
    //{
    //    string valid = "";
    //    SqlConnection connection = new SqlConnection(str);
    //    SqlTransaction transaction = null;
    //    connection.Open();
    //    transaction = connection.BeginTransaction();

    //    try
    //    {
    //        SqlCommand com = new SqlCommand();
    //        com.CommandType = CommandType.StoredProcedure;
    //        com.CommandText = "[USP_Insert_Inspection_Rpt_StampDuty]";

    //        com.Transaction = transaction;
    //        com.Connection = connection;

    //        if (IncentiveId != null && IncentiveId != "")
    //            com.Parameters.AddWithValue("@IncentiveId", IncentiveId);
    //        else
    //            com.Parameters.AddWithValue("@IncentiveId", null);

    //        if (Mstincentiveid != null && Mstincentiveid != "")
    //            com.Parameters.AddWithValue("@MstIncentiveId", Mstincentiveid);
    //        else
    //            com.Parameters.AddWithValue("@MstIncentiveId", null);

    //        if (exemptiononland != null && exemptiononland != "")
    //            com.Parameters.AddWithValue("@LandPurchaseExemption", exemptiononland);
    //        else
    //            com.Parameters.AddWithValue("@LandPurchaseExemption", null);

    //        if (stampduty != null && stampduty != "")
    //            com.Parameters.AddWithValue("@StampDutyOrTransferDuty", stampduty);
    //        else
    //            com.Parameters.AddWithValue("@StampDutyOrTransferDuty", null);

    //        if (MortgageDuty != null && MortgageDuty != "")
    //            com.Parameters.AddWithValue("@MortgageAndHypothecationsDuty", MortgageDuty);
    //        else
    //            com.Parameters.AddWithValue("@MortgageAndHypothecationsDuty", null);

    //        if (LandConversionCharges != null && LandConversionCharges != "")
    //            com.Parameters.AddWithValue("@LandConversionCharges", LandConversionCharges);
    //        else
    //            com.Parameters.AddWithValue("@LandConversionCharges", null);

    //        if (LandCost != null && LandCost != "")
    //            com.Parameters.AddWithValue("@LandPurcasedCost", LandCost);
    //        else
    //            com.Parameters.AddWithValue("@LandPurcasedCost", null);

    //        if (CreatedBy != null && CreatedBy != "")
    //            com.Parameters.AddWithValue("@Createdby", CreatedBy);
    //        else
    //            com.Parameters.AddWithValue("@Createdby", null);

    //        if (Remarks != null && Remarks != "")
    //            com.Parameters.AddWithValue("@Remarks", Remarks);
    //        else
    //            com.Parameters.AddWithValue("@Remarks", null);

    //        if (IsDlcOrSlc != null && IsDlcOrSlc != "")
    //            com.Parameters.AddWithValue("@IsDlcOrSlc", IsDlcOrSlc);
    //        else
    //            com.Parameters.AddWithValue("@IsDlcOrSlc", null);



    //        com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
    //        com.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        com.ExecuteNonQuery();

    //        valid = com.Parameters["@Valid"].Value.ToString();

    //        transaction.Commit();
    //        connection.Close();
    //    }
    //    catch (Exception ex)
    //    {
    //        transaction.Rollback();
    //        throw ex;
    //    }
    //    finally
    //    {
    //        connection.Close();
    //        connection.Dispose();
    //    }
    //    return valid;
    //}
    public string InsertIPORpt_Common(string IncentiveId, string Mstincentiveid, string amountpaid, string amountrecommended, string CreatedBy, string Remarks, string IsDlcOrSlc, string caste_IR, string gender_IR, string category_IR, string enterprisetype_IR, string sector_IR, string servicetype_IR, string transNonTrans_IR)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_Insert_Inspection_Rpt_Common]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (IncentiveId != null && IncentiveId != "")
                com.Parameters.AddWithValue("@IncentiveId", IncentiveId);
            else
                com.Parameters.AddWithValue("@IncentiveId", null);

            if (Mstincentiveid != null && Mstincentiveid != "")
                com.Parameters.AddWithValue("@MstIncentiveId", Mstincentiveid);
            else
                com.Parameters.AddWithValue("@MstIncentiveId", null);

            if (amountpaid != null && amountpaid != "")
                com.Parameters.AddWithValue("@AmountPaid", amountpaid);
            else
                com.Parameters.AddWithValue("@AmountPaid", null);

            if (amountrecommended != null && amountrecommended != "")
                com.Parameters.AddWithValue("@AmountRecommended", amountrecommended);
            else
                com.Parameters.AddWithValue("@AmountRecommended", null);

            if (CreatedBy != null && CreatedBy != "")
                com.Parameters.AddWithValue("@Createdby", CreatedBy);
            else
                com.Parameters.AddWithValue("@Createdby", null);

            if (Remarks != null && Remarks != "")
                com.Parameters.AddWithValue("@Remarks", Remarks);
            else
                com.Parameters.AddWithValue("@Remarks", null);


            //added by chinna

            if (IsDlcOrSlc != null && IsDlcOrSlc != "")
                com.Parameters.AddWithValue("@IsDlcOrSlc", IsDlcOrSlc);
            else
                com.Parameters.AddWithValue("@IsDlcOrSlc", null);

            if (caste_IR != null && caste_IR != "")
                com.Parameters.AddWithValue("@Caste_IR", caste_IR);
            else
                com.Parameters.AddWithValue("@Caste_IR", null);

            if (gender_IR != null && gender_IR != "")
                com.Parameters.AddWithValue("@Gender_IR", gender_IR);
            else
                com.Parameters.AddWithValue("@Gender_IR", gender_IR);

            if (category_IR != null && category_IR != "")
                com.Parameters.AddWithValue("@Category_IR", category_IR);
            else
                com.Parameters.AddWithValue("@Category_IR", null);

            if (enterprisetype_IR != null && enterprisetype_IR != "")
                com.Parameters.AddWithValue("@Enterprise_IR", enterprisetype_IR);
            else
                com.Parameters.AddWithValue("@Enterprise_IR", null);

            if (sector_IR != null && sector_IR != "")
                com.Parameters.AddWithValue("@Sector_IR", sector_IR);
            else
                com.Parameters.AddWithValue("@Sector_IR", null);

            if (servicetype_IR != null && servicetype_IR != "")
                com.Parameters.AddWithValue("@ServiceType_IR", servicetype_IR);
            else
                com.Parameters.AddWithValue("@ServiceType_IR", null);

            if (transNonTrans_IR != null && transNonTrans_IR != "")
                com.Parameters.AddWithValue("@TransportNonTrans_IR", transNonTrans_IR);
            else
                com.Parameters.AddWithValue("@TransportNonTrans_IR", null);


            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    public string InsertIPORpt_StampDuty(string IncentiveId, string Mstincentiveid, string exemptiononland, string stampduty, string MortgageDuty, string LandConversionCharges, string LandCost, string CreatedBy, string Remarks, string IsDlcOrSlc, string caste_IR, string gender_IR, string category_IR, string enterprisetype_IR, string sector_IR, string servicetype_IR, string transNonTrans_IR)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_Insert_Inspection_Rpt_StampDuty]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (IncentiveId != null && IncentiveId != "")
                com.Parameters.AddWithValue("@IncentiveId", IncentiveId);
            else
                com.Parameters.AddWithValue("@IncentiveId", null);

            if (Mstincentiveid != null && Mstincentiveid != "")
                com.Parameters.AddWithValue("@MstIncentiveId", Mstincentiveid);
            else
                com.Parameters.AddWithValue("@MstIncentiveId", null);

            if (exemptiononland != null && exemptiononland != "")
                com.Parameters.AddWithValue("@LandPurchaseExemption", exemptiononland);
            else
                com.Parameters.AddWithValue("@LandPurchaseExemption", null);

            if (stampduty != null && stampduty != "")
                com.Parameters.AddWithValue("@StampDutyOrTransferDuty", stampduty);
            else
                com.Parameters.AddWithValue("@StampDutyOrTransferDuty", null);

            if (MortgageDuty != null && MortgageDuty != "")
                com.Parameters.AddWithValue("@MortgageAndHypothecationsDuty", MortgageDuty);
            else
                com.Parameters.AddWithValue("@MortgageAndHypothecationsDuty", null);

            if (LandConversionCharges != null && LandConversionCharges != "")
                com.Parameters.AddWithValue("@LandConversionCharges", LandConversionCharges);
            else
                com.Parameters.AddWithValue("@LandConversionCharges", null);

            if (LandCost != null && LandCost != "")
                com.Parameters.AddWithValue("@LandPurcasedCost", LandCost);
            else
                com.Parameters.AddWithValue("@LandPurcasedCost", null);

            if (CreatedBy != null && CreatedBy != "")
                com.Parameters.AddWithValue("@Createdby", CreatedBy);
            else
                com.Parameters.AddWithValue("@Createdby", null);

            if (Remarks != null && Remarks != "")
                com.Parameters.AddWithValue("@Remarks", Remarks);
            else
                com.Parameters.AddWithValue("@Remarks", null);

            if (IsDlcOrSlc != null && IsDlcOrSlc != "")
                com.Parameters.AddWithValue("@IsDlcOrSlc", IsDlcOrSlc);
            else
                com.Parameters.AddWithValue("@IsDlcOrSlc", null);

            if (caste_IR != null && caste_IR != "")
                com.Parameters.AddWithValue("@Caste_IR", caste_IR);
            else
                com.Parameters.AddWithValue("@Caste_IR", null);

            if (gender_IR != null && gender_IR != "")
                com.Parameters.AddWithValue("@Gender_IR", gender_IR);
            else
                com.Parameters.AddWithValue("@Gender_IR", gender_IR);

            if (category_IR != null && category_IR != "")
                com.Parameters.AddWithValue("@Category_IR", category_IR);
            else
                com.Parameters.AddWithValue("@Category_IR", null);

            if (enterprisetype_IR != null && enterprisetype_IR != "")
                com.Parameters.AddWithValue("@Enterprise_IR", enterprisetype_IR);
            else
                com.Parameters.AddWithValue("@Enterprise_IR", null);

            if (sector_IR != null && sector_IR != "")
                com.Parameters.AddWithValue("@Sector_IR", sector_IR);
            else
                com.Parameters.AddWithValue("@Sector_IR", null);

            if (servicetype_IR != null && servicetype_IR != "")
                com.Parameters.AddWithValue("@ServiceType_IR", servicetype_IR);
            else
                com.Parameters.AddWithValue("@ServiceType_IR", null);

            if (transNonTrans_IR != null && transNonTrans_IR != "")
                com.Parameters.AddWithValue("@TransportNonTrans_IR", transNonTrans_IR);
            else
                com.Parameters.AddWithValue("@TransportNonTrans_IR", null);




            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    } 
    // Common
    public DataSet GetIPORecommendationOfficerDetails(string incentiveid, string mstincentiveid, string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("Usp_GetIPORecommendationOfficerDetails", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveid != null)
                da.SelectCommand.Parameters.Add("@incentiveid", SqlDbType.VarChar).Value = incentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@incentiveid", SqlDbType.VarChar).Value = null;

            if (mstincentiveid != null)
                da.SelectCommand.Parameters.Add("@MasterIncentiveid", SqlDbType.VarChar).Value = mstincentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@MasterIncentiveid", SqlDbType.VarChar).Value = null;

            if (createdby != null)
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = createdby.ToString();
            else
                da.SelectCommand.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GETINCENTIVE_MASTERDATA(string mstincentiveid, string Applicantid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GETINCENTIVE_MASTERDATA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (mstincentiveid != null)
                da.SelectCommand.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = mstincentiveid.ToString();
            else
                da.SelectCommand.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = null;

            if (mstincentiveid != null)
                da.SelectCommand.Parameters.Add("@Applicantid", SqlDbType.VarChar).Value = Applicantid.ToString();
            else
                da.SelectCommand.Parameters.Add("@Applicantid", SqlDbType.VarChar).Value = null;

            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncentiveDashBoard(string fromdate, string todate, string Districtid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_REPORT_DASHBOARD_INCENTIVES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = Districtid;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // IO Query History
    public DataSet GetIOQueryHistory(string IncentiveID, string RoleCode, string Incids)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("USP_GET_IOQuery_History", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_IOQuery_History_TEST", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (IncentiveID == null)
            {
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = null;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();
            }
            da.SelectCommand.Parameters.Add("@RoleCode", SqlDbType.VarChar).Value = RoleCode.ToString();
            da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = Incids;
            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    // Query Response Insert by GM to IO
    public int InsertincentiveOfficerCommentsGMResponcetoIO(List<officerRemarks> Ramarks, string IPAddress)
    {
        int valid = 0;

        foreach (officerRemarks Ramarksvo in Ramarks)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("USP_INSERT_OfficerRemarks_Responce_byGM_toIO", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
                cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
                cmd.Parameters.AddWithValue("@GmResponce", Convert.ToString(Ramarksvo.Responce));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }

        return valid;
    }
    public int InsertIOqueryDtls(string incntVID, string QueryDesc, string usrCode, string MasterID, string IPAddress,string attachmentids)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        //com.CommandText = "[sp_insertInctveQuery_New_FinalApproval]";  // comment by chh on 17.10.2017
        com.CommandText = "[sp_insertInctveQuery_New_FinalApproval_TEST]";

        if (incntVID.Trim() == "" || incntVID.Trim() == null)
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = incntVID.Trim();

        if (QueryDesc.Trim() == "" || QueryDesc.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDesc.Trim();

        if (usrCode.Trim() == "" || usrCode.Trim() == null)
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = usrCode.Trim();

        com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MasterID.Trim();
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();

        if (attachmentids.Trim() == "" || attachmentids.Trim() == null)
            com.Parameters.Add("@attachmentids", SqlDbType.VarChar).Value = DBNull.Value;
        else
                com.Parameters.Add("@attachmentids", SqlDbType.VarChar).Value = attachmentids.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            // return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteNonQuery());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    // query get to GM by IO
    public DataSet GetIncetiveDetailsdeptOfficerRemarksGMbyIO(string incentiveID, string ApplicationLevel, string SentFrom, string TypeDashboard, string Incids)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[FETCHINC_DETAILS_ID_OfficerRemarks_GM_remarks_BY_IO]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@ApplicationLevel", SqlDbType.VarChar).Value = ApplicationLevel;
                da.SelectCommand.Parameters.Add("@SentFrom", SqlDbType.VarChar).Value = SentFrom;
                da.SelectCommand.Parameters.Add("@TypeDashboard", SqlDbType.VarChar).Value = TypeDashboard;
                da.SelectCommand.Parameters.Add("@MSTINCENTVEID", SqlDbType.VarChar).Value = Incids;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // add by chhh on 20.10.2017
    // IO query forward to applicant by GM 
    public int insertInctveQueryResponsedataNewIOQuery(string incntVID, string QueryDesc, string usrCode, string MasterID, string IPAddress)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[sp_insertInctveQuery_New_IOQUERY]";

        if (incntVID.Trim() == "" || incntVID.Trim() == null)
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = incntVID.Trim();

        if (QueryDesc.Trim() == "" || QueryDesc.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDesc.Trim();

        if (usrCode.Trim() == "" || usrCode.Trim() == null)
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = usrCode.Trim();

        com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MasterID.Trim();
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            // return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteNonQuery());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public DataSet GetIncentiveDashBoardDrill(string type, string status, string fromdate, string todate, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_REPORT_DASHBOARD_INCENTIVES_DRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = District;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@TYPE", SqlDbType.VarChar).Value = type.ToString();
            da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //public DataSet getBankAccountTypeMaster()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_BANK_ACCOUNT_TYPE_MASTER", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    ////Seed Cap

    //public DataSet GetIncentives_SEED_CAP_data(string IncentiveID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("[USP_GET_INCENTIVES_SEEDCAP_DATA]", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //// typeofincentivesnew.aspx
    //public DataSet GET_ELIGIBLE_INCENTIVES_COMMON_DATA(string createdby, string incentiveid)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_ELIGIBLE_INCENTIVES_COMMON_DATA", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;


    //        if (createdby != null)
    //            da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();

    //        if (incentiveid != null)
    //            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentiveid.ToString();
    //        else
    //            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = null;

    //        da.Fill(ds);
    //        return ds;

    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}


    public DataSet GetMonthwiseStatusrptDrill(string month, string year, string status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_MONTHWISE_RPT_R15_CFE_DRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.SelectCommand.Parameters.Add("@YEAR", SqlDbType.VarChar).Value = month;
            da.SelectCommand.Parameters.Add("@MONTH", SqlDbType.VarChar).Value = year;
            da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status;


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }







    public DataSet GetIncentivesClaimedReport(string Caste, string EnterPriseType, string IncentiveType, string fromdate, string todate, string Sector, string Manufacture, string DISTRICT)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_Incentives_ClaimedReport", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Caste.Trim() == "" || Caste.Trim() == null || Caste.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Caste", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.ToString();

            if (EnterPriseType.Trim() == "" || EnterPriseType.Trim() == null || EnterPriseType.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            if (IncentiveType.Trim() == "" || IncentiveType.Trim() == null || IncentiveType.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@IncentiveType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveType", SqlDbType.VarChar).Value = IncentiveType.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null || Sector.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();

            if (Manufacture.Trim() == "" || Manufacture.Trim() == null || Manufacture.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Manufacture", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Manufacture", SqlDbType.VarChar).Value = Manufacture.ToString();

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            if (DISTRICT.Trim() == "" || DISTRICT.Trim() == null || DISTRICT.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@DISTRICT", SqlDbType.VarChar).Value = DISTRICT.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncentivesClaimedReportDrill(string status, string district, string Caste, string EnterPriseType, string IncentiveType, string fromdate, string todate, string Sector, string Manufacture)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_Incentives_ClaimedReportDrill", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (Caste.Trim() == "" || Caste.Trim() == null || Caste.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Caste", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Caste", SqlDbType.VarChar).Value = Caste.ToString();

            if (EnterPriseType.Trim() == "" || EnterPriseType.Trim() == null || EnterPriseType.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterPriseType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            if (IncentiveType.Trim() == "" || IncentiveType.Trim() == null || IncentiveType.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@IncentiveType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveType", SqlDbType.VarChar).Value = IncentiveType.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null || Sector.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();

            if (Manufacture.Trim() == "" || Manufacture.Trim() == null || Manufacture.Trim().ToLower() == "--select--")
                da.SelectCommand.Parameters.Add("@Manufacture", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Manufacture", SqlDbType.VarChar).Value = Manufacture.ToString();

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int UpdateverifyInctveattachment(string incntVID, string attachemntid, string updtaedby, string verifyflag)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[USP_updtae_ALLINCENTIVES]";

        if (incntVID.Trim() == "" || incntVID.Trim() == null)
            com.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IncentveID", SqlDbType.VarChar).Value = incntVID.Trim();

        if (attachemntid.Trim() == "" || attachemntid.Trim() == null)
            com.Parameters.Add("@AttachmentId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AttachmentId", SqlDbType.VarChar).Value = attachemntid.Trim();

        if (updtaedby.Trim() == "" || updtaedby.Trim() == null)
            com.Parameters.Add("@Updated_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Updated_by", SqlDbType.VarChar).Value = updtaedby.Trim();
        if (verifyflag.Trim() == "" || verifyflag.Trim() == null)
            com.Parameters.Add("@verifyflag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@verifyflag", SqlDbType.VarChar).Value = verifyflag.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            // return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteNonQuery());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    //public int insertInctveQueryResponsedataNewatApproval(string incntVID, string QueryDesc, string usrCode, string MasterID, string IPAddress)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "[sp_insertInctveQuery_New_FinalApproval]";

    //    if (incntVID.Trim() == "" || incntVID.Trim() == null)
    //        com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = incntVID.Trim();

    //    if (QueryDesc.Trim() == "" || QueryDesc.Trim() == null)
    //        com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDesc.Trim();

    //    if (usrCode.Trim() == "" || usrCode.Trim() == null)
    //        com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = usrCode.Trim();

    //    com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MasterID.Trim();
    //    com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        // return com.ExecuteNonQuery();
    //        return Convert.ToInt32(com.ExecuteNonQuery());
    //    }
    //    catch (Exception ex)
    //    {

    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }


    //}
    public int insertInctveQueryResponsedataNewatApproval(string incntVID, string QueryDesc, string usrCode, string MasterID, string IPAddress, string caste, string gender, string category, string enterprise, string sector)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[sp_insertInctveQuery_New_FinalApproval]";

        if (incntVID.Trim() == "" || incntVID.Trim() == null)
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@incentvID", SqlDbType.VarChar).Value = incntVID.Trim();

        if (QueryDesc.Trim() == "" || QueryDesc.Trim() == null)
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@QueryDescription", SqlDbType.VarChar).Value = QueryDesc.Trim();

        if (usrCode.Trim() == "" || usrCode.Trim() == null)
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@raisedBy", SqlDbType.VarChar).Value = usrCode.Trim();



        com.Parameters.Add("@caste_GM", SqlDbType.VarChar).Value = caste.Trim();
        com.Parameters.Add("@gender_GM", SqlDbType.VarChar).Value = gender.Trim();
        com.Parameters.Add("@category_GM", SqlDbType.VarChar).Value = category.Trim();
        com.Parameters.Add("@enterprise_GM", SqlDbType.VarChar).Value = enterprise.Trim();
        com.Parameters.Add("@sector_GM", SqlDbType.VarChar).Value = sector.Trim();


        com.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MasterID.Trim();
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            // return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteNonQuery());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public DataSet getReleaseProceedingsCheckUpdate(string Cast, string IncetiveID, string date)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_CheckUPdated", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@date", SqlDbType.VarChar).Value = date;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    //frmDepartementIncentiveDashboardNew1.aspx




    public DataSet GetDepartmentINcentiveNew(string Dept_ID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetDepartmentIncentive_NEW]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Dept_ID.Trim() == "" || Dept_ID.Trim() == null)
                da.SelectCommand.Parameters.Add("@Dept_ID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Dept_ID", SqlDbType.VarChar).Value = Dept_ID.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //public int GMCertificateInsertUploadNew(string intApplicationid, string Modified_by, string SendTo, string GMStatus, string GMRemarks, string lblMstIncentiveId, string txtrecomandedamount, string IPAddress, string txtGMRecommendedRemarks)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "GMCertificateInsertUpload_New";

    //    if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
    //    {
    //        com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;
    //    }
    //    else
    //    {
    //        com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
    //    }
    //    if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

    //    if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

    //    if (GMStatus.Trim() == "" || GMStatus.Trim() == null)
    //        com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = GMStatus.Trim();

    //    if (GMRemarks.Trim() == "" || GMRemarks.Trim() == null)
    //        com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = GMRemarks.Trim();

    //    // added by chh
    //    if (txtGMRecommendedRemarks.Trim() == "" || txtGMRecommendedRemarks.Trim() == null)
    //        com.Parameters.Add("@GMRecommendedRemarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMRecommendedRemarks", SqlDbType.VarChar).Value = txtGMRecommendedRemarks.Trim();

    //    com.Parameters.Add("@lblMstIncentiveId", SqlDbType.VarChar).Value = lblMstIncentiveId.Trim();
    //    com.Parameters.Add("@GM_Rcon_Amount", SqlDbType.VarChar).Value = txtrecomandedamount.Trim();
    //    com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        return com.ExecuteNonQuery();
    //    }
    //    catch (Exception ex)
    //    {
    //        con.CloseConnection();
    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}



    //public int GMCertificateInsertUploadNew(string intApplicationid, string Modified_by, string SendTo, string GMStatus, string GMRemarks,
    //    string lblMstIncentiveId, string txtrecomandedamount, string IPAddress, string txtGMRecommendedRemarks, string LoanAggrementAcNo, 
    //    string checkRepeatClaim, string caste, string gender, string category, string enterprise, string sector)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "GMCertificateInsertUpload_New";

    //    if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
    //    {
    //        com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;

    //    }
    //    else
    //    {
    //        com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
    //    }
    //    if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

    //    if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

    //    if (GMStatus.Trim() == "" || GMStatus.Trim() == null)
    //        com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = GMStatus.Trim();

    //    if (GMRemarks.Trim() == "" || GMRemarks.Trim() == null)
    //        com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = GMRemarks.Trim();

    //    com.Parameters.Add("@checkRepeatClaim", SqlDbType.VarChar).Value = checkRepeatClaim.ToString().Trim();
    //    if (LoanAggrementAcNo.Trim() == "" || LoanAggrementAcNo.Trim() == null)
    //        com.Parameters.Add("@loanAggremeentAcNo", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@loanAggremeentAcNo", SqlDbType.VarChar).Value = LoanAggrementAcNo.Trim();

    //    // added by chh
    //    if (txtGMRecommendedRemarks.Trim() == "" || txtGMRecommendedRemarks.Trim() == null)
    //        com.Parameters.Add("@GMRecommendedRemarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMRecommendedRemarks", SqlDbType.VarChar).Value = txtGMRecommendedRemarks.Trim();
    //    com.Parameters.Add("@caste_GM", SqlDbType.VarChar).Value = caste.Trim();
    //    com.Parameters.Add("@gender_GM", SqlDbType.VarChar).Value = gender.Trim();
    //    com.Parameters.Add("@category_GM", SqlDbType.VarChar).Value = category.Trim();
    //    com.Parameters.Add("@enterprise_GM", SqlDbType.VarChar).Value = enterprise.Trim();
    //    com.Parameters.Add("@sector_GM", SqlDbType.VarChar).Value = sector.Trim();


    //    com.Parameters.Add("@lblMstIncentiveId", SqlDbType.VarChar).Value = lblMstIncentiveId.Trim();
    //    com.Parameters.Add("@GM_Rcon_Amount", SqlDbType.VarChar).Value = txtrecomandedamount.Trim();
    //    com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        return com.ExecuteNonQuery();
    //    }
    //    catch (Exception ex)
    //    {
    //        con.CloseConnection();
    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}
    public int GMCertificateInsertUploadNew(string intApplicationid, string Modified_by, string SendTo, string GMStatus, string GMRemarks, string lblMstIncentiveId, string txtrecomandedamount, string IPAddress, string txtGMRecommendedRemarks, string LoanAggrementAcNo, string checkRepeatClaim, string caste, string gender, string category, string enterprise, string sector, string serviceType, string TransNonTransType)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "GMCertificateInsertUpload_New";

        if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;

        }
        else
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
        }
        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (GMStatus.Trim() == "" || GMStatus.Trim() == null)
            com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = GMStatus.Trim();

        if (GMRemarks.Trim() == "" || GMRemarks.Trim() == null)
            com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = GMRemarks.Trim();

        com.Parameters.Add("@checkRepeatClaim", SqlDbType.VarChar).Value = checkRepeatClaim.ToString().Trim();
        if (LoanAggrementAcNo.Trim() == "" || LoanAggrementAcNo.Trim() == null)
            com.Parameters.Add("@loanAggremeentAcNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@loanAggremeentAcNo", SqlDbType.VarChar).Value = LoanAggrementAcNo.Trim();

        // added by chh
        if (txtGMRecommendedRemarks.Trim() == "" || txtGMRecommendedRemarks.Trim() == null)
            com.Parameters.Add("@GMRecommendedRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMRecommendedRemarks", SqlDbType.VarChar).Value = txtGMRecommendedRemarks.Trim();
        com.Parameters.Add("@caste_GM", SqlDbType.VarChar).Value = caste.Trim();
        com.Parameters.Add("@gender_GM", SqlDbType.VarChar).Value = gender.Trim();
        com.Parameters.Add("@category_GM", SqlDbType.VarChar).Value = category.Trim();
        com.Parameters.Add("@enterprise_GM", SqlDbType.VarChar).Value = enterprise.Trim();
        com.Parameters.Add("@sector_GM", SqlDbType.VarChar).Value = sector.Trim();
        com.Parameters.Add("@serviceType_GM", SqlDbType.VarChar).Value = serviceType.Trim();
        com.Parameters.Add("@TransNonTransType_GM", SqlDbType.VarChar).Value = TransNonTransType.Trim();


        com.Parameters.Add("@lblMstIncentiveId", SqlDbType.VarChar).Value = lblMstIncentiveId.Trim();
        com.Parameters.Add("@GM_Rcon_Amount", SqlDbType.VarChar).Value = txtrecomandedamount.Trim();
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    //public int GMCertificateInsertUploadNew(string intApplicationid, string Modified_by, string SendTo, string GMStatus, string GMRemarks, 
    //    string lblMstIncentiveId, string txtrecomandedamount, string IPAddress, string txtGMRecommendedRemarks, string LoanAggrementAcNo, string checkRepeatClaim)
    //{
    //    SqlCommand com = new SqlCommand();
    //    com.CommandType = CommandType.StoredProcedure;
    //    com.CommandText = "GMCertificateInsertUpload_New";

    //    if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
    //    {
    //        com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;

    //    }
    //    else
    //    {
    //        com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
    //    }
    //    if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

    //    if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

    //    if (GMStatus.Trim() == "" || GMStatus.Trim() == null)
    //        com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = GMStatus.Trim();

    //    if (GMRemarks.Trim() == "" || GMRemarks.Trim() == null)
    //        com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = GMRemarks.Trim();

    //    com.Parameters.Add("@checkRepeatClaim", SqlDbType.VarChar).Value = checkRepeatClaim.ToString().Trim();
    //    if (LoanAggrementAcNo.Trim() == "" || LoanAggrementAcNo.Trim() == null)
    //        com.Parameters.Add("@loanAggremeentAcNo", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@loanAggremeentAcNo", SqlDbType.VarChar).Value = LoanAggrementAcNo.Trim();

    //    // added by chh
    //    if (txtGMRecommendedRemarks.Trim() == "" || txtGMRecommendedRemarks.Trim() == null)
    //        com.Parameters.Add("@GMRecommendedRemarks", SqlDbType.VarChar).Value = DBNull.Value;
    //    else
    //        com.Parameters.Add("@GMRecommendedRemarks", SqlDbType.VarChar).Value = txtGMRecommendedRemarks.Trim();

    //    com.Parameters.Add("@lblMstIncentiveId", SqlDbType.VarChar).Value = lblMstIncentiveId.Trim();
    //    com.Parameters.Add("@GM_Rcon_Amount", SqlDbType.VarChar).Value = txtrecomandedamount.Trim();
    //    com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
    //    con.OpenConnection();
    //    com.Connection = con.GetConnection;

    //    try
    //    {
    //        return com.ExecuteNonQuery();
    //    }
    //    catch (Exception ex)
    //    {
    //        con.CloseConnection();
    //        throw ex;
    //        return 0;
    //    }
    //    finally
    //    {
    //        com.Dispose();
    //        con.CloseConnection();
    //    }
    //}


    public int InsertOtherServicesImagedata(string intQuessionaireid, string intCFEid, string FileType, string FilePath, string FileName, string FileDescription,
 string bu, string Created_by, string Created_dt, string Modified_by, string Modified_dt, string intDeptid, string intApprovalid)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_OtherServicesImagedata", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null || intQuessionaireid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.Int).Value = Int32.Parse(intQuessionaireid.Trim());
            }


            if (intCFEid.Trim() == "" || intCFEid.Trim() == null || intCFEid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEid", SqlDbType.Int).Value = Int32.Parse(intCFEid.Trim());
            }

            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();
            }

            if (intApprovalid.Trim() == "" || intApprovalid.Trim() == null || intApprovalid.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();
            }



            if (FileType.Trim() == "" || FileType.Trim() == null || FileType.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileType", SqlDbType.VarChar).Value = FileType.Trim();
            }

            if (FilePath.Trim() == "" || FilePath.Trim() == null || FilePath.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FilePath", SqlDbType.VarChar).Value = FilePath.Trim();
            }

            if (FileName.Trim() == "" || FileName.Trim() == null || FileName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileName", SqlDbType.VarChar).Value = FileName.Trim();
            }

            if (FileDescription.Trim() == "" || FileDescription.Trim() == null || FileDescription.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@FileDescription", SqlDbType.VarChar).Value = FileDescription.Trim();
            }

            if (bu.Trim() == "" || bu.Trim() == null || bu.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@bu", SqlDbType.VarChar).Value = bu.Trim();
            }

            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;

        }
        finally
        {

            con.CloseConnection();

        }

    }


    public int GMCertificateInsertUploadNewDIPC(string intApplicationid, string Modified_by, string SendTo, string GMStatus, string GMRemarks, string lblMstIncentiveId, string txtrecomandedamount, string IPAddress, string checkRepeatClaim)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "[GMCertificateInsertUpload_New_DIPC]";

        if (SendTo.Trim() == "" || SendTo.Trim() == null || SendTo.Trim() == "--Select--")
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@SendTo", SqlDbType.VarChar).Value = SendTo.Trim();
        }
        if (intApplicationid.Trim() == "" || intApplicationid.Trim() == null)
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApplicationid", SqlDbType.VarChar).Value = intApplicationid.Trim();

        if (Modified_by.Trim() == "" || Modified_by.Trim() == null)
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Modified_by", SqlDbType.VarChar).Value = Modified_by.Trim();

        if (GMStatus.Trim() == "" || GMStatus.Trim() == null)
            com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMStatus", SqlDbType.VarChar).Value = GMStatus.Trim();

        if (GMRemarks.Trim() == "" || GMRemarks.Trim() == null)
            com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@GMRemarks", SqlDbType.VarChar).Value = GMRemarks.Trim();

        com.Parameters.Add("@lblMstIncentiveId", SqlDbType.VarChar).Value = lblMstIncentiveId.Trim();
        com.Parameters.Add("@GM_Rcon_Amount", SqlDbType.VarChar).Value = txtrecomandedamount.Trim();
        com.Parameters.Add("@checkRepeatClaim", SqlDbType.VarChar).Value = checkRepeatClaim;
        com.Parameters.Add("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            return com.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }

    public int deleteGroupSavingDataincentive(string id)
    {
        SqlCommand cmd = new SqlCommand();
        cmd.CommandType = CommandType.StoredProcedure;
        cmd.CommandText = "[deleteIncentiveRemarksdata]";
        cmd.Parameters.Add("@id", SqlDbType.VarChar).Value = id;
        con.OpenConnection();
        cmd.Connection = con.GetConnection;
        try
        {
            return cmd.ExecuteNonQuery();
        }
        catch (Exception ex)
        {
            throw ex;
            return 0;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();

        }
    }
    public int InsertincentiveOfficerCommentsjD(List<officerRemarks> Ramarks, List<officerForwarded> lstincentives, string IPAddress, string landJD, string buildingJD, string pnmJD, string freshSubsequentClaim)
    {
        int valid = 0;
        //foreach (officerForwarded Ramarksvo in lstincentives)
        //{
        //    con.OpenConnection();
        //    SqlCommand cmd = new SqlCommand("[GMCertificateInsertUpload_New_Superdent_jD]", con.GetConnection);
        //    cmd.CommandType = CommandType.StoredProcedure;
        //    try
        //    {
        //        cmd.Parameters.AddWithValue("@intApplicationid", Convert.ToString(Ramarksvo.EnterperIncentiveID));
        //        cmd.Parameters.AddWithValue("@lblMstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
        //        cmd.Parameters.AddWithValue("@Modified_by", Convert.ToString(Ramarksvo.CreatedByid));
        //        cmd.Parameters.AddWithValue("@ApplicationFrom", Convert.ToString(Ramarksvo.ApplicationFrom));
        //        cmd.Parameters.AddWithValue("@SendTo", Convert.ToString(Ramarksvo.SendTo));
        //        cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
        //        cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
        //        cmd.ExecuteNonQuery();
        //        valid = (Int32)cmd.Parameters["@Valid"].Value;
        //        con.CloseConnection();
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        cmd.Dispose();
        //        con.CloseConnection();
        //    }
        //}

        //foreach (officerRemarks Ramarksvo in Ramarks)
        //{
        //    con.OpenConnection();
        //    SqlCommand cmd = new SqlCommand("[USP_INSERT_OfficerRemarks]", con.GetConnection);
        //    cmd.CommandType = CommandType.StoredProcedure;
        //    try
        //    {
        //        cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
        //        cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
        //        cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
        //        cmd.Parameters.AddWithValue("@status", Convert.ToString(Ramarksvo.status));
        //        cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
        //        cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
        //        cmd.Parameters.AddWithValue("@Designation", Convert.ToString(Ramarksvo.Designation));
        //        cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
        //        cmd.Parameters.AddWithValue("@land_JD", SqlDbType.VarChar).Value = landJD;
        //        cmd.Parameters.AddWithValue("@building_JD", SqlDbType.VarChar).Value = buildingJD;
        //        cmd.Parameters.AddWithValue("@pnm_JD", SqlDbType.VarChar).Value = pnmJD;
        //        cmd.Parameters.AddWithValue("@freshSubClaim_JD", SqlDbType.VarChar).Value = freshSubsequentClaim;
        //        cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
        //        cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
        //        cmd.ExecuteNonQuery();
        //        valid = (Int32)cmd.Parameters["@Valid"].Value;
        //        con.CloseConnection();
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        cmd.Dispose();
        //        con.CloseConnection();
        //    }
        //}
        foreach (officerRemarks Ramarksvo in Ramarks)
        {
            //con.OpenConnection();
            SqlConnection connection = new SqlConnection(str);
            SqlTransaction transaction = null;
            connection.Open();
            transaction = connection.BeginTransaction();


            try
            {
                SqlCommand cmd = new SqlCommand("[USP_INSERT_OfficerRemarks]", con.GetConnection);
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Transaction = transaction;
                cmd.Connection = connection;

                cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
                cmd.Parameters.AddWithValue("@status", Convert.ToString(Ramarksvo.status));
                cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
                cmd.Parameters.AddWithValue("@Designation", Convert.ToString(Ramarksvo.Designation));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.AddWithValue("@land_JD", SqlDbType.VarChar).Value = landJD;
                cmd.Parameters.AddWithValue("@building_JD", SqlDbType.VarChar).Value = buildingJD;
                cmd.Parameters.AddWithValue("@pnm_JD", SqlDbType.VarChar).Value = pnmJD;
                cmd.Parameters.AddWithValue("@freshSubClaim_JD", SqlDbType.VarChar).Value = freshSubsequentClaim;
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;

                transaction.Commit();
                connection.Close();
                //con.CloseConnection();
            }
            catch (Exception ex)
            {
                //  throw ex;
                transaction.Rollback();
                throw ex;
            }
            finally
            {
                connection.Close();
                connection.Dispose();
                //cmd.Dispose();
                //con.CloseConnection();
            }
        }
        return valid;
    }

    public int InsertincentiveOfficerCommentsAdditionalPOSTSVC(List<officerRemarks> Ramarks, List<officerForwarded> lstincentives, string StatusSVC, string IPAddress)
    {
        int valid = 0;
        //foreach (officerForwarded Ramarksvo in lstincentives)
        //{
        //    con.OpenConnection();
        //    SqlCommand cmd = new SqlCommand("[GMCertificateInsertUpload_New_Superdent_ADDL_POSTSVC]", con.GetConnection);
        //    cmd.CommandType = CommandType.StoredProcedure;
        //    try
        //    {
        //        cmd.Parameters.AddWithValue("@intApplicationid", Convert.ToString(Ramarksvo.EnterperIncentiveID));
        //        cmd.Parameters.AddWithValue("@lblMstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
        //        cmd.Parameters.AddWithValue("@Modified_by", Convert.ToString(Ramarksvo.CreatedByid));
        //        cmd.Parameters.AddWithValue("@ApplicationFrom", Convert.ToString(Ramarksvo.ApplicationFrom));
        //        cmd.Parameters.AddWithValue("@SLCNumber", Convert.ToString(Ramarksvo.SLCNO));
        //        cmd.Parameters.AddWithValue("@SLCdate", Convert.ToString(Ramarksvo.Slcdate));
        //        cmd.Parameters.AddWithValue("@PostSVCdate", Convert.ToString(Ramarksvo.SVCdate));
        //        cmd.Parameters.AddWithValue("@SendTo", Convert.ToString(Ramarksvo.SendTo));
        //        cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
        //        cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
        //        cmd.ExecuteNonQuery();
        //        valid = (Int32)cmd.Parameters["@Valid"].Value;
        //        con.CloseConnection();
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        cmd.Dispose();
        //        con.CloseConnection();
        //    }
        //}

        foreach (officerRemarks Ramarksvo in Ramarks)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("[USP_INSERT_OfficerRemarks]", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
                cmd.Parameters.AddWithValue("@status", Convert.ToString(Ramarksvo.status));
                cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
                cmd.Parameters.AddWithValue("@Designation", Convert.ToString(Ramarksvo.Designation));
                cmd.Parameters.AddWithValue("@StatusSVC", Convert.ToString(StatusSVC));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.AddWithValue("@land_JD", SqlDbType.VarChar).Value = "";
                cmd.Parameters.AddWithValue("@building_JD", SqlDbType.VarChar).Value = "";
                cmd.Parameters.AddWithValue("@pnm_JD", SqlDbType.VarChar).Value = "";
                if (Ramarksvo.Designation == "ADDL")
                {
                    if (Ramarksvo.status == "SSC")
                    {
                        cmd.Parameters.AddWithValue("@SSCDate", Convert.ToString(Ramarksvo.SSCdate));
                    }
                }
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }
        return valid;
    }

    public int InsertincentiveOfficerCommentsAdditionalPOSTSLC(List<officerRemarks> Ramarks, List<officerForwarded> lstincentives, string StatusSVC, string IPAddress)
    {
        int valid = 0;
        //foreach (officerForwarded Ramarksvo in lstincentives)
        //{
        //    con.OpenConnection();
        //    SqlCommand cmd = new SqlCommand("[GMCertificateInsertUpload_New_Superdent_ADDL_POSTSLC]", con.GetConnection);
        //    cmd.CommandType = CommandType.StoredProcedure;
        //    try
        //    {
        //        cmd.Parameters.AddWithValue("@intApplicationid", Convert.ToString(Ramarksvo.EnterperIncentiveID));
        //        cmd.Parameters.AddWithValue("@lblMstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
        //        cmd.Parameters.AddWithValue("@Modified_by", Convert.ToString(Ramarksvo.CreatedByid));
        //        cmd.Parameters.AddWithValue("@ApplicationFrom", Convert.ToString(Ramarksvo.ApplicationFrom));
        //        cmd.Parameters.AddWithValue("@SLCNumber", Convert.ToString(Ramarksvo.SLCNO));
        //        cmd.Parameters.AddWithValue("@SLCdate", Convert.ToString(Ramarksvo.Slcdate));
        //        cmd.Parameters.AddWithValue("@SendTo", Convert.ToString(Ramarksvo.SendTo));
        //        cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
        //        cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
        //        cmd.ExecuteNonQuery();
        //        valid = (Int32)cmd.Parameters["@Valid"].Value;
        //        con.CloseConnection();
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        cmd.Dispose();
        //        con.CloseConnection();
        //    }
        //}

        foreach (officerRemarks Ramarksvo in Ramarks)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("[USP_INSERT_OfficerRemarks]", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
                cmd.Parameters.AddWithValue("@status", Convert.ToString(Ramarksvo.status));
                cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
                cmd.Parameters.AddWithValue("@Designation", Convert.ToString(Ramarksvo.Designation));
                cmd.Parameters.AddWithValue("@StatusSVC", Convert.ToString(StatusSVC));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }
        return valid;
    }

    public int InsertincentiveOfficerCommentsAdditionalPOSTSLCFinal(List<officerRemarks> Ramarks, List<officerForwarded> lstincentives, string StatusSVC, string IPAddress)
    {
        int valid = 0;
        //foreach (officerForwarded Ramarksvo in lstincentives)
        //{
        //    con.OpenConnection();
        //    SqlCommand cmd = new SqlCommand("[GMCertificateInsertUpload_New_Superdent_ADDL_POSTSLC_FINAL]", con.GetConnection);
        //    cmd.CommandType = CommandType.StoredProcedure;
        //    try
        //    {
        //        cmd.Parameters.AddWithValue("@intApplicationid", Convert.ToString(Ramarksvo.EnterperIncentiveID));
        //        cmd.Parameters.AddWithValue("@lblMstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
        //        cmd.Parameters.AddWithValue("@Modified_by", Convert.ToString(Ramarksvo.CreatedByid));
        //        cmd.Parameters.AddWithValue("@ApplicationFrom", Convert.ToString(Ramarksvo.ApplicationFrom));
        //        cmd.Parameters.AddWithValue("@SLCNumber", Convert.ToString(Ramarksvo.SLCNO));
        //        cmd.Parameters.AddWithValue("@SLCdate", Convert.ToString(Ramarksvo.Slcdate));
        //        cmd.Parameters.AddWithValue("@SendTo", Convert.ToString(Ramarksvo.SendTo));
        //        cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
        //        cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
        //        cmd.ExecuteNonQuery();
        //        valid = (Int32)cmd.Parameters["@Valid"].Value;
        //        con.CloseConnection();
        //    }
        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }
        //    finally
        //    {
        //        cmd.Dispose();
        //        con.CloseConnection();
        //    }
        //}

        foreach (officerRemarks Ramarksvo in Ramarks)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("[USP_INSERT_OfficerRemarks]", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
                cmd.Parameters.AddWithValue("@status", Convert.ToString(Ramarksvo.status));
                cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
                cmd.Parameters.AddWithValue("@Designation", Convert.ToString(Ramarksvo.Designation));
                cmd.Parameters.AddWithValue("@SLCNumber", Convert.ToString(Ramarksvo.SLCNO));
                cmd.Parameters.AddWithValue("@SLCdate", Convert.ToString(Ramarksvo.Slcdate));
                cmd.Parameters.AddWithValue("@StatusSVC", Convert.ToString(StatusSVC));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }
        return valid;
    }
    public DataSet getincentiveslcfinallistNew(string slcno, string incid, string Slcdate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_New", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = incid;
            da.SelectCommand.Parameters.Add("@Slcdate", SqlDbType.VarChar).Value = Slcdate;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentUserDeails(string Userid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[GetDepartmentIncentive_USerDetails]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            if (Userid.Trim() == "" || Userid.Trim() == null)
                da.SelectCommand.Parameters.Add("@Userid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Userid", SqlDbType.VarChar).Value = Userid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public int InsertincentiveOfficerCommentsGMResponce(List<officerRemarks> Ramarks, string IPAddress)
    {
        int valid = 0;

        foreach (officerRemarks Ramarksvo in Ramarks)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("USP_INSERT_OfficerRemarks_Responce", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
                cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
                cmd.Parameters.AddWithValue("@GmResponce", Convert.ToString(Ramarksvo.Responce));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }

        return valid;
    }


    public int InsertFinalProceedings(List<officerForwarded> lstincentives, string IPAddress)
    {
        int valid = 0;
        foreach (officerForwarded Ramarksvo in lstincentives)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("USP_INSERT_RELEASE_PROCEEDINGS", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@intApplicationid", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@lblMstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                //cmd.Parameters.AddWithValue("@ApplicationFrom", Convert.ToString(Ramarksvo.ApplicationFrom));
                cmd.Parameters.AddWithValue("@SLCNumber", Convert.ToString(Ramarksvo.SLCNO));
                cmd.Parameters.AddWithValue("@SLCdate", Convert.ToString(Ramarksvo.Slcdate));
                // cmd.Parameters.AddWithValue("@RecomnAmount", Convert.ToString(Ramarksvo.Slcdate));
                cmd.Parameters.AddWithValue("@Modified_by", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }
        return valid;
    }
    public string UpdateSVCDate(string IncentiveId, string CreatedBy, string SVCDate, string ApprovalStatus)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_GET_AssignSVCDate]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (IncentiveId != null && IncentiveId != "")
                com.Parameters.AddWithValue("@intApplicationid", IncentiveId);
            else
                com.Parameters.AddWithValue("@intApplicationid", null);

            if (CreatedBy != null && CreatedBy != "")
                com.Parameters.AddWithValue("@Modified_by", CreatedBy);
            else
                com.Parameters.AddWithValue("@Modified_by", null);

            if (SVCDate != null && SVCDate != "")
                com.Parameters.AddWithValue("@SVCdate", SVCDate);
            if (ApprovalStatus != null && ApprovalStatus != "")
                com.Parameters.AddWithValue("@APPROVALSTATUS", ApprovalStatus);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    public int InsertincentiveOfficerCommentsAdditionalPOSTSLCASSignDAteBulk(officerRemarks Ramarksvo, string StatusSVC)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_INSERT_OfficerRemarks_UPDATESVCDATE", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
            cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
            cmd.Parameters.AddWithValue("@status", Convert.ToString(Ramarksvo.status));
            cmd.Parameters.AddWithValue("@SVCDate", Convert.ToString(Ramarksvo.Slcdate));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
            cmd.Parameters.AddWithValue("@Designation", Convert.ToString(Ramarksvo.Designation));
            cmd.Parameters.AddWithValue("@StatusSVC", Convert.ToString(StatusSVC));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }

    public int UpdateincentiveProposedSVCdate(string EnterperIncentiveID, string MstIncentiveId, string ProposedDate, string CreatedByid)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_UPD_UPDATEPROPOSEDSVCDATE", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(MstIncentiveId));
            cmd.Parameters.AddWithValue("@ProposedSVCDate", Convert.ToString(ProposedDate));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(CreatedByid));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    public int UpdateincentiveProposedSLCdate(string EnterperIncentiveID, string MstIncentiveId, string ProposedDate, string CreatedByid)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_UPD_UPDATEPROPOSEDSLCDATE", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(MstIncentiveId));
            cmd.Parameters.AddWithValue("@ProposedSVCDate", Convert.ToString(ProposedDate));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(CreatedByid));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    public int UpdateincentiveProposedSLCCheckListdate(string EnterperIncentiveID, string MstIncentiveId, string ProposedDate, string rlsproceedno, string CreatedByid)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_UPD_UPDATECHeckLIst_COI", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(MstIncentiveId));
            cmd.Parameters.AddWithValue("@ProposedSVCDate", Convert.ToString(ProposedDate));
            cmd.Parameters.AddWithValue("@RlsProceedNo", Convert.ToString(rlsproceedno));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(CreatedByid));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    public int UpdateincentiveProposedSLCCheckdtlsdate(string EnterperIncentiveID, string MstIncentiveId, string checkno, string checkdate, string checkamount, string CreatedByid,
        string RlsProceedNo)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_UPD_UPDATECHeckLIstDTLS_COI", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(MstIncentiveId));
            cmd.Parameters.AddWithValue("@checkno", Convert.ToString(checkno));
            cmd.Parameters.AddWithValue("@checkdate", Convert.ToString(checkdate));
            cmd.Parameters.AddWithValue("@checkamount", Convert.ToString(checkamount));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(CreatedByid));
            cmd.Parameters.AddWithValue("@RlsProceedNo", Convert.ToString(RlsProceedNo));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    public int UpdateincentiveClearenceDate(string EnterperIncentiveID, string MstIncentiveId, string checkdate, string CreatedByid, string EmpName, string Designation, string FileName, string FilePath, string BankType,
        string RlsProceedNo, string dipc)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_UPD_UPDATECHECKCLEARENCE_DTLS", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(MstIncentiveId));
            cmd.Parameters.AddWithValue("@checkdate", Convert.ToString(checkdate));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(CreatedByid));
            cmd.Parameters.AddWithValue("@EmployeeName", Convert.ToString(EmpName));
            cmd.Parameters.AddWithValue("@EmpDesignation", Convert.ToString(Designation));
            cmd.Parameters.AddWithValue("@FilePath", Convert.ToString(FilePath));
            cmd.Parameters.AddWithValue("@FileName", Convert.ToString(FileName));
            cmd.Parameters.AddWithValue("@BankType", Convert.ToString(BankType));
            cmd.Parameters.AddWithValue("@dipc", Convert.ToString(dipc));
            cmd.Parameters.AddWithValue("@RlsProceedNo", Convert.ToString(RlsProceedNo));

            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    public int InsertincentiveSLCBulkinsert(officerRemarks Ramarksvo, string StatusSVC)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_INSERT_OfficerRemarks_UPDATESLCDATENO", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
            cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
            cmd.Parameters.AddWithValue("@status", Convert.ToString(Ramarksvo.status));
            cmd.Parameters.AddWithValue("@SLCNumber", Convert.ToString(Ramarksvo.SLCNO));
            cmd.Parameters.AddWithValue("@SLCdate", Convert.ToString(Ramarksvo.Slcdate));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
            cmd.Parameters.AddWithValue("@Designation", Convert.ToString(Ramarksvo.Designation));
            cmd.Parameters.AddWithValue("@StatusSVC", Convert.ToString(StatusSVC));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    public string UpdateSLCDate(string IncentiveId, string MasterIncentiveId, string SlcNo, string Slcdate, string CreatedBy, string ApprovalStatus, string SanctionedAmount)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_GET_AssignSLCDate";

            com.Transaction = transaction;
            com.Connection = connection;

            com.Parameters.AddWithValue("@EnterperIncentiveID", IncentiveId);
            com.Parameters.AddWithValue("@MstIncentiveId", MasterIncentiveId);
            com.Parameters.AddWithValue("@SLCNumber", Convert.ToString(SlcNo));
            com.Parameters.AddWithValue("@SLCdate", Convert.ToString(Slcdate));
            com.Parameters.AddWithValue("@APPROVALSTATUS", ApprovalStatus);
            com.Parameters.AddWithValue("@SanctionedAmount", Convert.ToString(SanctionedAmount));
            com.Parameters.AddWithValue("@CreatedByid", CreatedBy);
            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    public int InsertincentiveOfficerCommentsjDtoGM(List<officerForwarded> lstincentives)
    {
        int valid = 0;
        foreach (officerForwarded Ramarksvo in lstincentives)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("[GMCertificateInsertUpload_New_Superdent_jD_GM]", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@intApplicationid", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@lblMstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Modified_by", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@ApplicationFrom", Convert.ToString(Ramarksvo.ApplicationFrom));
                cmd.Parameters.AddWithValue("@SendTo", Convert.ToString(Ramarksvo.SendTo));
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }

        return valid;
    }

    // ProformaQueryRaiseShortFallLetterGMtoApplicant.aspx




    public DataSet fetchIncentivedetIPONewIncTypeNew(string intDeptid, string Status, string IncentiveID, string IndustryName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //  da = new SqlDataAdapter("fetchinsentivedetIPO_NewIncTypeNew", con.GetConnection);
            da = new SqlDataAdapter("fetchinsentivedetIPO_NewIncTypeNew", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "All" || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.ToString();

            if (IncentiveID.Trim() == "" || IncentiveID.Trim() == null || IncentiveID.Trim() == "All" || IncentiveID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public string insertInspRprtData(string inctiveID, string User_Code, string lblnameofIND, string udyogAdhar, string IPOName, string IPODesignation,
               string InpectedDate, string UnitCons, string txtPersonIndustry, string indStat, string VerifyCert, string ApplClm, string DCP,
               string DateShrtfall, string DtShrtFallRcvd, string Extent, string BuiltupAra, string TtimesBltup, string ExtentElgble,
               string YesNoClaimSubmn, string ClmApplRmbrLandCst, string Clm25PBldgCvl, string LndCst25Prcny, string RegnFee25Prcnt, string Total25Prcnt,
               string AprdPjCst25Prcnt, string Proprtn25Prcnt, string Computedcost, string ValofItems, string PlnthArea, string TSSFC, string AprvPJVal,
               string AppJTot, string TotVal1, string TotVal2, string TotVal3, string TotVal4, string TotVal10, string GrndTotVal, string AsperApprPjCostPM,
               string AsperCivilEngr, string ComptdGm, string Comptedcst, string AsprAppPjCostPM, string AsperListPM, string TechKnowPM,
               string MachPM, string Prcnt2ndMach, string Total2ndHandMach, string Tot2ndMach, string totCstCmptdLand, string TotCstCmptdBldg,
               string TotCstCmptdPlntMach, string TotCstCmptdTotal, string InvSubsidyVal, string AddnInvSubsdyWmn, string InvSubsdySCS,
               string AddnInvSbsdySc10Prcnt, string TotalInv, string empval1, string empval2, string empval3, string empval4, string empval5, string empval6, string empval7, string empval8,
               string empval9999, string empval999, string empval99, string mstincentiveid, string txtremarks)


       //nikhil -- 16.05.2017
    {
        //private SqlConnection connSqlHelper = new SqlConnection(ConfigurationManager.ConnectionStrings["TSiPASSSkils"].ConnectionString);

        return Convert.ToString(SqlHelper.ExecuteScalar(connSqlHelper, "USP_PROC_Insert_Insp_rep_New", inctiveID, User_Code, lblnameofIND, udyogAdhar, IPOName, IPODesignation, InpectedDate, UnitCons,
            txtPersonIndustry, indStat, VerifyCert, ApplClm, DCP, DateShrtfall, DtShrtFallRcvd, Extent, BuiltupAra, TtimesBltup, ExtentElgble, YesNoClaimSubmn, ClmApplRmbrLandCst, Clm25PBldgCvl, LndCst25Prcny,
            RegnFee25Prcnt, Total25Prcnt, AprdPjCst25Prcnt, Proprtn25Prcnt, Computedcost, ValofItems, PlnthArea, TSSFC, AprvPJVal, AppJTot, TotVal1, TotVal2, TotVal3, TotVal4,
            TotVal10, GrndTotVal, AsperApprPjCostPM, AsperCivilEngr, ComptdGm, Comptedcst, AsprAppPjCostPM, AsperListPM, TechKnowPM, MachPM, Prcnt2ndMach, Total2ndHandMach, Tot2ndMach,
            totCstCmptdLand, TotCstCmptdBldg, TotCstCmptdPlntMach, TotCstCmptdTotal, InvSubsidyVal, AddnInvSubsdyWmn, InvSubsdySCS, AddnInvSbsdySc10Prcnt, TotalInv, empval1, empval2, empval3,
            empval4, empval5, empval6, empval7, empval8, empval9999, empval999, empval99, mstincentiveid, txtremarks));

        #region  "WIP"
        //    string IntIncentiveID, string userIDee, string NameofInd, string UdyogAdhar, string NameOfInspOfcr, string Designation, string DateofInsp, string ConstofUnit, string PersonName, string statusOfInd,
        //    string VerrfctnCert,
        //    //string PrjDetLOANew, string PrjDetUnitsNew, string PrjDetInstCapNew, //remove coments if not necc
        //    //string PrjDetValueNew, 
        //    //string PrjDetLOAExst, string PrjDetInstdCapExst, string PrjDetPercntIncExst, string PrjDetLOAExpn, string PrjDetInstdCapExpn, string PrjDetPercntIncExpn, 
        //    // string PrjDetLandExst, string PrjDetBuildExst, string PrjPlntMachExst, string PrjTotalExst, string PrjDetLandExpn, string PrjDetBldgExpn,
        //    // string PrjDetPlntMachExpn, string PrjDetPlntTotal, string PrjDetPrcntLand, string PrjDetPrcntBldg, string PrjDetPlntMachLand, string PrjDetPrcntTot, 
        //string DateClmAppln, string DateCommProd, string DateRegdNotice, string DateRcptShrtFall, string CapCostLandExtent, string CapCostLandBltpUpArea,
        //    string CapCost5BltUpArea, string CapCostExntElgble, string ClaimApplStampDutyFlg, string ClaimApplLandSubsFlg, string Clm25LandCost,
        //    string Clm25StmpDutyCost, string Clm25Total, string Clm25ApprdPrjCost, string Clm25PropElgbVal, string Clm25ComptdTot, string BldgCvlVal822Gdl,
        //    string BldgCvlPlnthArea, string BldgCvlTSSFCNorms, string BldgCvlVal, string BldgCvlTotVal, string BldgCvl8211CvlVal, string BldgCvl8211PlnthAra,
        //    string BldgCvl8211TSSFCNorms, string BldgCvl8211Value, string BldgCvl8211Tot10Prcnt, string BldgCvl8211GrndTot, string AsperApprvdPrjCost,
        //    string AsperCvlEngnrCert, string AsperComptdValGM, string AsperTotComptdCost, string PlntMachApprvdPjCost, string PlntMachApprvdPlMach,
        //    string PlntMachApprvdTechknow, string PlntMachApprvd2ndHand, string PlntMachApprvdPrcnt2ndHndMach, string PlntMachApprvdTotal,
        //    string PlntMachApprvdTotCost, string TotCostComptdLand, string TotCostComptdBldg, string TotCostComptdPlntMach, string TotCostFnlGrndTot,
        //    string TotInvSubsidy, string TotAddnlInvfrWmnEntr, string TotInvSubsSCST, string TotInvSubsSCSTWmn, string TotInv, string PavalaVaddiFlg,
        //    string ApplTrnsprtVhcTpride, string PowerCostFlg, string SpecfcClnrFlg, string SalesTaxFlg, string InvSubsdyFlg, string IIDfFlg, string SkillUpgrdnFlg,
        //    string StmpDutyFlg, string SeedCapFlg, string QltyCertFlg, string AdvSubSCSTFlg//wip

        #endregion

    }

    //frmInspRepDrft.aspx



    public int InsertGmfinalProceedingsGm(GmfinalProceedings gmfinalproceedings)
    {
        int valid = 0;
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_UPD_ReleaseProceedings_GM", con.GetConnection);

        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(gmfinalproceedings.EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(gmfinalproceedings.MstIncentiveId));
            cmd.Parameters.AddWithValue("@SLCNumer", Convert.ToString(gmfinalproceedings.SLCNumer));
            cmd.Parameters.AddWithValue("@WorkingStatus", Convert.ToString(gmfinalproceedings.WorkingStatus));
            cmd.Parameters.AddWithValue("@Newbankname", Convert.ToString(gmfinalproceedings.Newbankname));
            cmd.Parameters.AddWithValue("@NewBranchname", Convert.ToString(gmfinalproceedings.NewBranchname));
            cmd.Parameters.AddWithValue("@NewIFSCcode", Convert.ToString(gmfinalproceedings.NewIFSCcode));
            cmd.Parameters.AddWithValue("@AccountNumber", Convert.ToString(gmfinalproceedings.AccountNumber));
            cmd.Parameters.AddWithValue("@NewAccountType", Convert.ToString(gmfinalproceedings.NewAccountType));
            cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(gmfinalproceedings.Remarks));
            cmd.Parameters.AddWithValue("@AccNoConfirmationFlg", Convert.ToString(gmfinalproceedings.AccNoConfirmationFlg));
            cmd.Parameters.AddWithValue("@LoanAggrementAcNo", Convert.ToString(gmfinalproceedings.LoanAggrementAccountNo));

            // added on 17.11.2017 
            cmd.Parameters.AddWithValue("@SubIncType", Convert.ToString(gmfinalproceedings.SubIncTypeId));

            cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(gmfinalproceedings.CreatedByid));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }
        return valid;
    }


    //public DataSet getSLCIncentivelist()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_LIST_SLCs", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet getrefertosvc()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentiveslclist(string slcno, string APPMODE, string APPSTATUS)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT_NEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@APPMODE", SqlDbType.VarChar).Value = APPMODE;
            da.SelectCommand.Parameters.Add("@APPSTATUS", SqlDbType.VarChar).Value = APPSTATUS;
            da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentiveslclistStep1(string slcno, string strSector)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT_STEP1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@strSector", SqlDbType.VarChar).Value = strSector;
            //da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentivesSVClist(string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_SVCABSTRACT", con.GetConnection);
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentivesSLClist(string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_SLCABSTRACT", con.GetConnection);
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentivesSLClistUpdated(string SLcDate, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_SLCABSTRACT_SLCUPADTE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@ProposedSLCDATE", SqlDbType.VarChar).Value = SLcDate;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getProposedSVClistconvened()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_SVCABSTRACT_convened_Dates", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getProposedSLClistconvened()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_SLCABSTRACT_PROPOSEDDATES", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int UpdateincenCheckDetails(string EnterperIncentiveID, string MstIncentiveId, string UTRNumber, string CreatedByid,
       string RlsProceedNo, string dipc, string CheqCleared, string CheqNOTCleared, string CheqNotClearedRemarks, string Flag)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("SP_CheqStatusClearNotClear_Details", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(MstIncentiveId));

            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(CreatedByid));
            cmd.Parameters.AddWithValue("@dipc", Convert.ToString(dipc));
            cmd.Parameters.AddWithValue("@RlsProceedNo", Convert.ToString(RlsProceedNo));

            cmd.Parameters.AddWithValue("@UTR_NUMBER", UTRNumber);
            cmd.Parameters.AddWithValue("@CheqCleared", CheqCleared);
            cmd.Parameters.AddWithValue("@CheqNOTCleared", CheqNOTCleared);
            cmd.Parameters.AddWithValue("@CheqNotClearedRemarks", CheqNotClearedRemarks);
            cmd.Parameters.AddWithValue("@FLAG", Flag);

            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }


    public DataSet getChecklistDtls(string DIPCFlag, string FinalId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_NOTUPADTED_CHECKLIST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@DIPCFlag", SqlDbType.VarChar).Value = DIPCFlag;
            da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = FinalId;


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getCheckNOlistDtls(string DIPCFlag, string FinalId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //USP_GET_UPADTED_CHECKNO_LIST
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_UPADTED_CHECKNO_LIST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@DIPCFlag", SqlDbType.VarChar).Value = DIPCFlag;
            da.SelectCommand.Parameters.Add("@FinancialYearCd", SqlDbType.VarChar).Value = FinalId;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentivesSVClistconvened(string SvcDate, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_SVCABSTRACT_convened", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@SvcDate", SqlDbType.VarChar).Value = SvcDate;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentiveslclistGM(string slcno, string DistId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // USP_GET_LIST_INCENTIVEWISE_GM_ABSTRACT
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_GM", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_GM_ABSTRACT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.SelectCommand.Parameters.Add("@Distid", SqlDbType.VarChar).Value = DistId;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentiveslclistWorkigngList(string date, string DIPCFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_WORKING_ABSTRACT_PRINTEDDATE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@date", SqlDbType.VarChar).Value = date;
            da.SelectCommand.Parameters.Add("@DIPCFlag", SqlDbType.VarChar).Value = DIPCFlag;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentivesClearenceDtls(string releaseProcedingno, string checkno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_CHECKCLEARENCE_ABSTRACT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@releaseProceno", SqlDbType.VarChar).Value = releaseProcedingno;
            da.SelectCommand.Parameters.Add("@checkno", SqlDbType.VarChar).Value = checkno;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentiveslclistGMCOI(string slcno, string DistId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // USP_GET_LIST_INCENTIVEWISE_GM_ABSTRACT
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_GM", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_GM_ABSTRACT_COI", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.SelectCommand.Parameters.Add("@Distid", SqlDbType.VarChar).Value = DistId;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentiveslcfinallist(string slcno, string incid, string Slcdate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = incid;
            da.SelectCommand.Parameters.Add("@Slcdate", SqlDbType.VarChar).Value = Slcdate;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getincentiveslcfinallistNewFinalsaction(string slcno, string incid, string Slcdate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_New_FINALSACTION", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = incid;
            da.SelectCommand.Parameters.Add("@Slcdate", SqlDbType.VarChar).Value = Slcdate;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getReleaseProceedings(string Cast, string IncetiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // added on 27.07.2017
    public DataSet getReleaseProceedingsUser(string Enterid, string subIncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_USER", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_USER_NEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@EnprIncentiveId", SqlDbType.VarChar).Value = Enterid;
            da.SelectCommand.Parameters.Add("@Masterincentiveid", SqlDbType.VarChar).Value = subIncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsSVCAgenda(string Cast, string IncetiveID, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_SVCDATE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsSLCAgenda(string Cast, string IncetiveID, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_SVCDATE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_SLCAGENDA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsAssignSVCAgenda(string Cast, string IncetiveID, string proposedSvcDate, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_ASIGNSVCDATE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@proposedSvcDate", SqlDbType.VarChar).Value = proposedSvcDate;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartments()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDepartments", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApprovalsByDept(string deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetApprovalsByDeptId", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (deptid.Trim() == "" || deptid.Trim() == null)
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getReleaseProceedingsAssignSLCDATENO(string Cast, string IncetiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_ASIGNSLCNoDATE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsAssignSLCDATENOUpdated(string Cast, string IncetiveID, string date, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_ASIGNSLCNoDATE_DATE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@ProposedSLCDATE", SqlDbType.VarChar).Value = date;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getReleaseProceedingsCheckClearenceUpdate(string Cast, string IncetiveID, string CheckNO, string RlsProceedNo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_CheckCleaence", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@CheckNO", SqlDbType.VarChar).Value = CheckNO;
            da.SelectCommand.Parameters.Add("@RlsProceedNO", SqlDbType.VarChar).Value = RlsProceedNo;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsCheckListprint(string Cast, string IncetiveID, string date, string SubInctype)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_CheckLIst", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@date", SqlDbType.VarChar).Value = date;
            da.SelectCommand.Parameters.Add("@SubIncTypeId", SqlDbType.VarChar).Value = SubInctype;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsDIPCAgendaPrint(string Cast, string IncetiveID, string distid, string date)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_SVCDATE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_DIPCAGENDAPrint", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid;
            da.SelectCommand.Parameters.Add("@date", SqlDbType.VarChar).Value = date;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsGM(string Cast, string IncetiveID, string DistID, string SubIncTypeId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_GM", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@DistID", SqlDbType.VarChar).Value = DistID;
            da.SelectCommand.Parameters.Add("@SubIncTypeId", SqlDbType.VarChar).Value = SubIncTypeId;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsGMFinal(string SlcNo, string EnterperIncentiveID, string MstIncentiveId, string DistID, string SubIncTypeId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_GM_FINAL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = SlcNo;
            da.SelectCommand.Parameters.Add("@EnterperIncentiveID", SqlDbType.VarChar).Value = EnterperIncentiveID;
            da.SelectCommand.Parameters.Add("@MstIncentiveId", SqlDbType.VarChar).Value = MstIncentiveId;
            da.SelectCommand.Parameters.Add("@DistID", SqlDbType.VarChar).Value = DistID;
            da.SelectCommand.Parameters.Add("@SubIncTypeId", SqlDbType.VarChar).Value = SubIncTypeId;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getReleaseProceedingsStep2(string Cast, string IncetiveID, string GoAmount, string SubIncid, string Sectorname)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_Proceedings", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@GoAmount", SqlDbType.VarChar).Value = GoAmount;
            da.SelectCommand.Parameters.Add("@SubIncId", SqlDbType.VarChar).Value = SubIncid;
            da.SelectCommand.Parameters.Add("@Sectorname", SqlDbType.VarChar).Value = Sectorname;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    // Seed Cap subsidy binding

    public DataSet GetIncentivesSeedCapSubsidy(string IncentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_INCENTIVES_SEED_CAP_DTLS]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // seed cap insertion method




    // 2). Stamp Duty.aspx: method





    public DataSet fetchIncentivedetIPONewIncTypeAddlDirector(string intDeptid, string Status, string IncentiveID, string IndustryName)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[fetchinsentivedetIPO_NewIncType_ADDl]", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (Status.Trim() == "" || Status.Trim() == null || Status.Trim() == "All" || Status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status.ToString();

            if (IndustryName.Trim() == "" || IndustryName.Trim() == null || IndustryName.Trim() == "All" || IndustryName.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IndustryName", SqlDbType.VarChar).Value = IndustryName.ToString();

            if (IncentiveID.Trim() == "" || IncentiveID.Trim() == null || IncentiveID.Trim() == "All" || IncentiveID.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@IncentiveID", SqlDbType.VarChar).Value = IncentiveID.ToString();




            if (intDeptid.Trim() == "" || intDeptid.Trim() == null || intDeptid.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();


            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }



    public int InsertFinalProceedingsStep2(List<ReleasingProceedings> lstincentives)
    {
        int valid = 0;
        foreach (ReleasingProceedings Ramarksvo in lstincentives)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("USP_INSERT_RELEASE_PROCEEDINGS_step2", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@intApplicationid", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@lblMstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Modified_by", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@AllotedAmount", Convert.ToString(Ramarksvo.AllotedAmount));
                cmd.Parameters.AddWithValue("@SLCNo", Convert.ToString(Ramarksvo.SLCNo));
                cmd.Parameters.AddWithValue("@Gono", Convert.ToString(Ramarksvo.Gono));
                cmd.Parameters.AddWithValue("@Godate", Convert.ToString(Ramarksvo.Godate));
                cmd.Parameters.AddWithValue("@Locno", Convert.ToString(Ramarksvo.Locno));
                cmd.Parameters.AddWithValue("@Locdate", Convert.ToString(Ramarksvo.Locdate));
                //added by chinna
                cmd.Parameters.AddWithValue("@ReleaseProcedingNo", Convert.ToString(Ramarksvo.ReleaseProcedingNo));
                cmd.Parameters.AddWithValue("@ReleaseProcedingDate", Convert.ToString(Ramarksvo.ReleaseProcedingDate));
                cmd.Parameters.AddWithValue("@RemaningAmt", Convert.ToString(Ramarksvo.RemaningAmt));
                cmd.Parameters.AddWithValue("@GoReleaseAmt", Convert.ToString(Ramarksvo.GoReleaseAmt));
                cmd.Parameters.AddWithValue("@Caste", Convert.ToString(Ramarksvo.Caste));
                cmd.Parameters.AddWithValue("@SubIncTypeId", Convert.ToString(Ramarksvo.SubIncTypeId));
                if (Ramarksvo.SplCase != "" && Ramarksvo.SplCase != null)
                {
                    cmd.Parameters.AddWithValue("@SplCaseflag", Convert.ToString(Ramarksvo.SplCase));
                }

                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }

            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }
        return valid;
    }


    public DataSet GetIncentivesApprovalReportDrill(string status, string fromdate, string todate, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_Incentives_ApprovalReportDrill", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncentivesPendingReportDrill(string status, string fromdate, string todate, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_Incentives_PendencyReportDrill", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetIncentivesApprovalReport(string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_INCENTIVEAPPROVALREPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertFinalProceedingsStep2DIPC(List<ReleasingProceedings> lstincentives)
    {
        int valid = 0;
        foreach (ReleasingProceedings Ramarksvo in lstincentives)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("USP_INSERT_RELEASE_PROCEEDINGS_step2_DIPC", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@intApplicationid", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@lblMstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Modified_by", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@AllotedAmount", Convert.ToString(Ramarksvo.AllotedAmount));
                cmd.Parameters.AddWithValue("@SLCNo", Convert.ToString(Ramarksvo.SLCNo));
                cmd.Parameters.AddWithValue("@Gono", Convert.ToString(Ramarksvo.Gono));
                cmd.Parameters.AddWithValue("@Godate", Convert.ToString(Ramarksvo.Godate));
                cmd.Parameters.AddWithValue("@Locno", Convert.ToString(Ramarksvo.Gono));
                cmd.Parameters.AddWithValue("@Locdate", Convert.ToString(Ramarksvo.Locdate));

                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }
        return valid;
    }
    public DataSet getincentiveDIPCfinallistNewFinalsaction(string slcno, string incid, string Slcdate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_New_FINALSACTION_DIPC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = incid;
            da.SelectCommand.Parameters.Add("@Slcdate", SqlDbType.VarChar).Value = Slcdate;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //public DataSet getProposedDIPClistconvened()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
    //        da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_DIPCABSTRACT_PROPOSEDDATES", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    //public DataSet getincentivesDIPClist()
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
    //        da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_DIPCABSTRACT", con.GetConnection);

    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet getincentivesDIPClist(string DistrictId, string Status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_DIPCABSTRACT", con.GetConnection);
            da.SelectCommand.Parameters.Add("@DISTID", SqlDbType.VarChar).Value = DistrictId;
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status;
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getincentivesDIPClistUpdated(string SLcDate, string Distid, string Status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_DIPCABSTRACT_DIPCUPADTE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@ProposedSLCDATE", SqlDbType.VarChar).Value = SLcDate;
            da.SelectCommand.Parameters.Add("@Distid", SqlDbType.VarChar).Value = Distid;
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //public DataSet getReleaseProceedingsStep2DIPC(string Cast, string IncetiveID, string GoAmount)  //nikhil
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_Proceedings_DIPC", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
    //        da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
    //        da.SelectCommand.Parameters.Add("@GoAmount", SqlDbType.VarChar).Value = GoAmount;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}

    //   }
    public DataSet getReleaseProceedingsStep2DIPC(string Cast, string IncetiveID, string GoAmount, string locDate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_Proceedings_DIPC2", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@GoAmount", SqlDbType.VarChar).Value = GoAmount;
            da.SelectCommand.Parameters.Add("@locDate", SqlDbType.VarChar).Value = locDate;
            da.SelectCommand.CommandTimeout = 950;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getincentiveDIPClistStep1(string slcno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT_STEP1_DIPC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            //da.SelectCommand.Parameters.Add("@slcno", SqlDbType.VarChar).Value = slcno;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetCasteForReports()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_CASTE_FORREPORTS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetIncentiveTypesForReports()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INCENTIVEMASTER_FORREPORTS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // added on 30.08.2017  getProposedDIPClistconvened
    public DataSet getProposedDIPClistconvened(string DistrictId, string Status)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_DIPCABSTRACT_PROPOSEDDATES", con.GetConnection);
            da.SelectCommand.Parameters.Add("@DISTID", SqlDbType.VarChar).Value = DistrictId;
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = Status;
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getReleaseProceedingsAssignDIPCDATENOUpdated(string Cast, string IncetiveID, string date, string DistrictId, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_ASIGNDIPCNoDATE_DATE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@ProposedSLCDATE", SqlDbType.VarChar).Value = date;
            da.SelectCommand.Parameters.Add("@DISTID", SqlDbType.VarChar).Value = DistrictId;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet getincentiveDIPClist(string slcno, string DistrictId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_ABSTRACT_NEW_DIPC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@DISTID", SqlDbType.VarChar).Value = DistrictId;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = slcno;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getReleaseProceedingsDIPC(string Cast, string IncetiveID, string DistrictId, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_DIPC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@DISTID", SqlDbType.VarChar).Value = DistrictId;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    //end 

    public DataSet getReleaseProceedingsDIPCAgenda(string Cast, string IncetiveID, string distid, string Stage)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_SVCDATE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_DIPCAGENDA", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid;
            da.SelectCommand.Parameters.Add("@Stage", SqlDbType.VarChar).Value = Stage;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int UpdateincentiveProposedDIPCdate(string EnterperIncentiveID, string MstIncentiveId, string ProposedDate, string CreatedByid)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_UPD_UPDATEPROPOSEDDIPCDATE", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(MstIncentiveId));
            cmd.Parameters.AddWithValue("@ProposedSVCDate", Convert.ToString(ProposedDate));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(CreatedByid));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    //public DataSet getReleaseProceedingsAssignDIPCDATENOUpdated(string Cast, string IncetiveID, string date)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_ASIGNDIPCNoDATE_DATE", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
    //        da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
    //        da.SelectCommand.Parameters.Add("@ProposedSLCDATE", SqlDbType.VarChar).Value = date;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public int InsertincentiveDIPCBulkinsert(officerRemarks Ramarksvo, string StatusSVC)
    {
        int valid = 0;


        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_INSERT_OfficerRemarks_UPDATEDIPCDATENO", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
            cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
            cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
            cmd.Parameters.AddWithValue("@status", Convert.ToString(Ramarksvo.status));
            cmd.Parameters.AddWithValue("@SLCNumber", Convert.ToString(Ramarksvo.SLCNO));
            cmd.Parameters.AddWithValue("@SLCdate", Convert.ToString(Ramarksvo.Slcdate));
            cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
            cmd.Parameters.AddWithValue("@Designation", Convert.ToString(Ramarksvo.Designation));
            cmd.Parameters.AddWithValue("@StatusSVC", Convert.ToString(StatusSVC));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            valid = (Int32)cmd.Parameters["@Valid"].Value;
            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }

    public DataSet GetCFEMISPendingReport()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_CFEMISPENDENCYREPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCFEMISPendingReportDrill(string status, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_CFEMISPENDENCYREPORTDRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCFOMISPendingReport()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_CFOMISPENDENCYREPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetCFOMISPendingReportDrill(string status, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_CFOMISPENDENCYREPORTDRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetGQMISPendingReport()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_GENERALQUERYMISPENDENCYREPORT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetGQMISPendingReportDrill(string status, string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_GENERALQUERYMISPENDENCYREPORTDRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = district.ToString();
            da.SelectCommand.Parameters.Add("@Status", SqlDbType.VarChar).Value = status.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDeptContact(string district)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            //da = new SqlDataAdapter("sp_GetDistriciWiseReport", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_DEPTCONTACTNO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@DeptId", SqlDbType.VarChar).Value = district.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // End of New Incentive addition
    public DataSet FetchActandRules()
    {

        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("USP_GETActs_Ruls", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    //Web Site Feed Back

    public string InsertTsipassFeedbackPostAppln(TsipassFeedbackFormVOs objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INSERT_TSIPASS_FEEDBACK_POSTAPPLN]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.createdby != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.createdby);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            if (objvo1.PAoverallqltyrate != null)
                com.Parameters.AddWithValue("@PAoverallqltyrate", objvo1.PAoverallqltyrate);
            else
                com.Parameters.AddWithValue("@PAoverallqltyrate", null);

            if (objvo1.PAoverallqltyrateissues != null)
                com.Parameters.AddWithValue("@PAoverallqltyrateissues", objvo1.PAoverallqltyrateissues);
            else
                com.Parameters.AddWithValue("@PAoverallqltyrateissues", null);

            if (objvo1.PAinforateeaseoffinding != null)
                com.Parameters.AddWithValue("@PAinforateeaseoffinding", objvo1.PAinforateeaseoffinding);
            else
                com.Parameters.AddWithValue("@PAinforateeaseoffinding", null);

            if (objvo1.PAinforateqltycomplt != null)
                com.Parameters.AddWithValue("@PAinforateqltycomplt", objvo1.PAinforateqltycomplt);
            else
                com.Parameters.AddWithValue("@PAinforateqltycomplt", null);

            if (objvo1.PAinforateissues != null)
                com.Parameters.AddWithValue("@PAinforateissues", objvo1.PAinforateissues);
            else
                com.Parameters.AddWithValue("@PAinforateissues", null);

            if (objvo1.PAisupportsufficient != null)
                com.Parameters.AddWithValue("@PAisupportsufficient", objvo1.PAisupportsufficient);
            else
                com.Parameters.AddWithValue("@PAisupportsufficient", null);

            if (objvo1.PAissupportsufficientissues != null)
                com.Parameters.AddWithValue("@PAissupportsufficientissues", objvo1.PAissupportsufficientissues);
            else
                com.Parameters.AddWithValue("@PAissupportsufficientissues", null);

            if (objvo1.PAawaretimeines != null)
                com.Parameters.AddWithValue("@PAawaretimeines", objvo1.PAawaretimeines);
            else
                com.Parameters.AddWithValue("@PAawaretimeines", null);

            if (objvo1.PAawaretimeinesissues != null)
                com.Parameters.AddWithValue("@PAawaretimeinesissues", objvo1.PAawaretimeinesissues);
            else
                com.Parameters.AddWithValue("@PAawaretimeinesissues", null);

            if (objvo1.PAabletodoapplnonline != null)
                com.Parameters.AddWithValue("@PAabletodoapplnonline", objvo1.PAabletodoapplnonline);
            else
                com.Parameters.AddWithValue("@PAabletodoapplnonline", null);

            if (objvo1.PAabletodoapplnonlineissues != null)
                com.Parameters.AddWithValue("@PAabletodoapplnonlineissues", objvo1.PAabletodoapplnonlineissues);
            else
                com.Parameters.AddWithValue("@PAabletodoapplnonlineissues", null);

            if (objvo1.PAawaretsipassact != null)
                com.Parameters.AddWithValue("@PAawaretsipassact", objvo1.PAawaretsipassact);
            else
                com.Parameters.AddWithValue("@PAawaretsipassact", null);

            if (objvo1.PAawaretsipassactisses != null)
                com.Parameters.AddWithValue("@PAawaretsipassactisses", objvo1.PAawaretsipassactisses);
            else
                com.Parameters.AddWithValue("@PAawaretsipassactisses", null);

            if (objvo1.PAawaresinglewindow != null)
                com.Parameters.AddWithValue("@PAawaresinglewindow", objvo1.PAawaresinglewindow);
            else
                com.Parameters.AddWithValue("@PAawaresinglewindow", null);

            if (objvo1.PAawaresinglewindowissues != null)
                com.Parameters.AddWithValue("@PAawaresinglewindowissues", objvo1.PAawaresinglewindowissues);
            else
                com.Parameters.AddWithValue("@PAawaresinglewindowissues", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    public int InsertTsipassFeedbackPostCertificate(TsipassFeedbackFormVOs objvo1)
    {
        int valid = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_INSERT_TSIPASS_FEEDBACK_POSTCERTIFICATE]";

            com.Transaction = transaction;
            com.Connection = connection;

            if (objvo1.createdby != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.createdby);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            // Post Download Certficate          
            if (objvo1.PDgivenlicensewithintimelines != null)
                com.Parameters.AddWithValue("@PDgivenlicensewithintimelines", objvo1.PDgivenlicensewithintimelines);
            else
                com.Parameters.AddWithValue("@PDgivenlicensewithintimelines", null);

            if (objvo1.PDgivenlicensewithintimelinesissues != null)
                com.Parameters.AddWithValue("@PDgivenlicensewithintimelinesissues", objvo1.PDgivenlicensewithintimelinesissues);
            else
                com.Parameters.AddWithValue("@PDgivenlicensewithintimelinesissues", null);

            if (objvo1.PDtrackapplnstatus != null)
                com.Parameters.AddWithValue("@PDtrackapplnstatus", objvo1.PDtrackapplnstatus);
            else
                com.Parameters.AddWithValue("@PDtrackapplnstatus", null);

            if (objvo1.PDtrackapplnstatusissues != null)
                com.Parameters.AddWithValue("@PDtrackapplnstatusissues", objvo1.PDtrackapplnstatusissues);
            else
                com.Parameters.AddWithValue("@PDtrackapplnstatusissues", null);

            if (objvo1.PDaskedOfflineinfodocs != null)
                com.Parameters.AddWithValue("@PDaskedOfflineinfodocs", objvo1.PDaskedOfflineinfodocs);
            else
                com.Parameters.AddWithValue("@PDaskedOfflineinfodocs", null);

            if (objvo1.PDaskedOfflineinfodocsissues != null)
                com.Parameters.AddWithValue("@PDaskedOfflineinfodocsissues", objvo1.PDaskedOfflineinfodocsissues);
            else
                com.Parameters.AddWithValue("@PDaskedOfflineinfodocsissues", null);

            if (objvo1.PDInspectionpremisesfeedback != null)
                com.Parameters.AddWithValue("@PDInspectionpremisesfeedback", objvo1.PDInspectionpremisesfeedback);
            else
                com.Parameters.AddWithValue("@PDInspectionpremisesfeedback", null);

            if (objvo1.PDInspectionpremisesfeedbackissues != null)
                com.Parameters.AddWithValue("@PDInspectionpremisesfeedbackissues", objvo1.PDInspectionpremisesfeedbackissues);
            else
                com.Parameters.AddWithValue("@PDInspectionpremisesfeedbackissues", null);

            if (objvo1.PDfinalqltyofexp != null)
                com.Parameters.AddWithValue("@PDfinalqltyofexp", objvo1.PDfinalqltyofexp);
            else
                com.Parameters.AddWithValue("@PDfinalqltyofexp", null);

            if (objvo1.PDFfnalqltyofexpissues != null)
                com.Parameters.AddWithValue("@PDFfnalqltyofexpissues", objvo1.PDFfnalqltyofexpissues);
            else
                com.Parameters.AddWithValue("@PDFfnalqltyofexpissues", null);

            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = Convert.ToInt16(com.Parameters["@Valid"].Value.ToString());

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }
    public int bulkInsertFeedbackPostCertificate(DataTable dt, int feedbackid)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["feedbackid"] = feedbackid;
            }
            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("feedbackid", "feedbackid");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("questionid", "questionid");
            //SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("deptid", "deptname");
            //SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("approvalid", "approvalname");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("deptid", "deptname");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("approvalid", "approvalname");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("createdby", "createdby");
            SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("issuesfaced", "issuesfaced");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            bulkCopy.ColumnMappings.Add(mapping6);

            bulkCopy.DestinationTableName = ("tbl_Tsipass_Feedback_PostAppln_IssuesFaced_New");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }
    public DataSet GetDeptApprovalsListFeedback(int deptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDeptApprovalsListfeedback", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@deptid", SqlDbType.VarChar).Value = deptid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetDepartmentFeedback()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetDepartmentFeedback", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetTsipassFeedbackCount(string fromdate, string todate)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FEEDBACK_RPT_COUNT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            // da.SelectCommand.Parameters.Add("@District", SqlDbType.VarChar).Value = "%";
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GETPostApplnTotalDtls(string type)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            if (type == "PostAppln")
            {
                da = new SqlDataAdapter("USP_GET_FEEDBACK_POSTAPPLN_DTLS", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;
                da.Fill(ds);
            }
            else if (type == "PostCertificate")
            {
                da = new SqlDataAdapter("USP_GET_FEEDBACK_POSTCERTIFICATE_DTLS", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;
                da.Fill(ds);
            }

            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GET_FEEDBACKPOSTAPPLN_DTLS_BY_POSTAPPLSLNO(int postapplslno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FEEDBACK_POSTAPPLN_DTLS_BY_POSTAPPL_SLNO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@POSTAPPLNSLNO", SqlDbType.VarChar).Value = postapplslno;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GET_FEEDBACKPOST_DOWNLOAD_CERTIFICATE_DTLS_BY_POSTAPPLSLNO(int postapplslno)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_FEEDBACK_POSTCERTIFICATE_DTLS_BY_POSTCERT_SLNO", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@POSTAPPLNSLNO", SqlDbType.VarChar).Value = postapplslno;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet FetchTotalSectorwise_New_Sub(string status, string fromdate, string todate, string EnterPriseType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchTotalSectorwise_New_New1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (status.Trim() == "" || status.Trim() == null || status.Trim() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet FetchSectorwiseDrildownNewNewSub(string status, string Sector, string fromdate, string todate, string EnterPriseType, string SubSector)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("FetchSectorwiseDrildownnew1", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (status.Trim() == "" || status.Trim() == null || status.Trim().ToLower() == "--Select--")
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@status", SqlDbType.VarChar).Value = status.ToString();

            if (Sector.Trim() == "" || Sector.Trim() == null)
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@Sector", SqlDbType.VarChar).Value = Sector.ToString();
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.Add("@EntType", SqlDbType.VarChar).Value = EnterPriseType.ToString();
            da.SelectCommand.Parameters.Add("@SubSector", SqlDbType.VarChar).Value = SubSector.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public string InsertTsipassFeedbackPostApplnNew(TsipassFeedbackFormVONews objvo1)
    {
        string valid = "";
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "USP_INSERT_TSIPASS_FEEDBACK_NEW";
            com.Transaction = transaction;
            com.Connection = connection;
            if (objvo1.Created_by != null)
                com.Parameters.AddWithValue("@Created_by", objvo1.Created_by);
            else
                com.Parameters.AddWithValue("@Created_by", null);

            com.Parameters.AddWithValue("@Que1", objvo1.Que1);
            com.Parameters.AddWithValue("@Que2", objvo1.Que2);
            com.Parameters.AddWithValue("@Que3", objvo1.Que3);
            com.Parameters.AddWithValue("@Que4", objvo1.Que4);
            com.Parameters.AddWithValue("@Que5", objvo1.Que5);
            com.Parameters.AddWithValue("@Que6", objvo1.Que6);
            com.Parameters.AddWithValue("@Que7", objvo1.Que7);
            com.Parameters.AddWithValue("@Que8", objvo1.Que8);
            com.Parameters.AddWithValue("@Que9", objvo1.Que9);
            com.Parameters.AddWithValue("@Que10", objvo1.Que10);
            com.Parameters.AddWithValue("@Feedbackfrom", objvo1.Feedbackfrom);
            com.Parameters.AddWithValue("@Ip", objvo1.Ip);
            com.Parameters.Add("@Valid", SqlDbType.VarChar, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            valid = com.Parameters["@Valid"].Value.ToString();

            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;
    }

    // feedback report retrospective 
    public DataSet GetFeedbackRptRestrospectiveCount()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_RETROSPECTIVE_FEEDBACK_ABSTRACT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // feedback report retrospective drill
    public DataSet GetFeedBackRptRetrospectivedDrill(string status, string approvalid, string UIDNo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_RETROSPECTIVE_FEEDBACK_DRILL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            da.SelectCommand.Parameters.Add("@STATUS", SqlDbType.VarChar).Value = status.ToString();
            if (approvalid == null)
            {
                da.SelectCommand.Parameters.Add("@APPROVALID", SqlDbType.VarChar).Value = null;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@APPROVALID", SqlDbType.VarChar).Value = approvalid.ToString();
            }

            if (UIDNo == null)
            {
                da.SelectCommand.Parameters.Add("@UID_NO", SqlDbType.VarChar).Value = null;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UID_NO", SqlDbType.VarChar).Value = UIDNo.ToString();
            }


            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    // incentives applicant dashboard list of released incentives method
    public DataSet getReleaseCompletedList(string userid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_RELEASE_COMLETED_LIST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = userid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // additional director level Print Pages Methods

    public DataSet GetAmountAllotedGONumbersList(string userid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_AMOUNT_ALLOTED_GO_NOS_LIST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = userid;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public DataSet GetAmountAllotedListOnGONumber(string GONo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_AMOUNT_ALLOTED_LIST_ON_GO_NUMBER", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@GONO", SqlDbType.VarChar).Value = GONo;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetAmountAllotedListOnGONumberDIPC(string GONo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            // da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE", con.GetConnection);
            da = new SqlDataAdapter("USP_GET_AMOUNT_ALLOTED_LIST_ON_GO_NUMBER_DIPC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@GONO", SqlDbType.VarChar).Value = GONo;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GET_AMOUNTALLOTEDLIST_ON_GONUMBER_CASTEWISE_INCENTIVEWISE(string GONo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_AMOUNTALLOTEDLIST_ON_GONUMBER_CASTEWISE_INCENTIVEWISE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@GONO", SqlDbType.VarChar).Value = GONo;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GET_AMOUNTALLOTEDLIST_ON_GONUMBER_CASTEWISE_INCENTIVEWISEdipc(string GONo)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_AMOUNTALLOTEDLIST_ON_GONUMBER_CASTEWISE_INCENTIVEWISE_DIPC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@GONO", SqlDbType.VarChar).Value = GONo;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GET_AMOUNTALLOTEDLIST_ON_GONUMBER_CASTEWISE_INCENTIVEWISEdipc(string Cast, string IncentiveType, string GONO, string SubIncType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_AMOUNTALLOTEDLIST_ON_GONUMBER_CASTEWISE_INCENTIVEWISE_DIPC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncentiveType;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@GONo", SqlDbType.VarChar).Value = GONO;
            da.SelectCommand.Parameters.Add("@SubIncType", SqlDbType.VarChar).Value = SubIncType;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GET_AMOUNTALLOTEDLIST_ON_GONUMBER_CASTEWISE_INCENTIVEWISE(string Cast, string IncentiveType, string GONO, string SubIncType)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_AMOUNTALLOTEDLIST_ON_GONUMBER_CASTEWISE_INCENTIVEWISE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncentiveType;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@GONo", SqlDbType.VarChar).Value = GONO;
            da.SelectCommand.Parameters.Add("@SubIncType", SqlDbType.VarChar).Value = SubIncType;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // Inspection Report NEW IS Methods
    //Deepak BeginTransaction
    public int InsertInspectionReport(InspectionReportVOs oInspectionReportVOs, List<InpectionGridLOAVos> listInpectionGridLOAVos, List<InpectionGridExpVos> listInpectionGridExpVos, List<InpectionGrid422Vos> listInpectionGrid422Vos, List<InpectionGrid423Vos> listInpectionGrid423Vos)
    {
        int valid = 0;
        int InspectionId = 0;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();

        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "[USP_PROC_Insert_Insp_rep_New_IS]";

            com.Transaction = transaction;
            com.Connection = connection;

            //if (uidno.Trim() == "" || uidno.Trim() == null)
            //    cmd.Parameters.Add("@Uidno", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    cmd.Parameters.Add("@Uidno", SqlDbType.VarChar).Value = uidno.Trim();

            if (oInspectionReportVOs.inctiveID.Trim() != "" || oInspectionReportVOs.inctiveID.Trim() != null)
                com.Parameters.Add("@inctiveID", SqlDbType.VarChar).Value = oInspectionReportVOs.inctiveID;
            else
                com.Parameters.Add("@inctiveID", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.User_Code.Trim() != "" || oInspectionReportVOs.User_Code.Trim() != null)
                com.Parameters.Add("@User_Code", SqlDbType.VarChar).Value = oInspectionReportVOs.User_Code;
            else
                com.Parameters.Add("@User_Code", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.nameofIND.Trim() != "" || oInspectionReportVOs.nameofIND.Trim() != null)
                com.Parameters.Add("@nameofIND", SqlDbType.VarChar).Value = oInspectionReportVOs.nameofIND;
            else
                com.Parameters.Add("@nameofIND", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.udyogAdhar.Trim() != "" || oInspectionReportVOs.udyogAdhar.Trim() != null)
                com.Parameters.Add("@udyogAdhar", SqlDbType.VarChar).Value = oInspectionReportVOs.udyogAdhar;
            else
                com.Parameters.Add("@udyogAdhar", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.IPOName.Trim() != "" || oInspectionReportVOs.IPOName.Trim() != null)
                com.Parameters.Add("@IPOName", SqlDbType.VarChar).Value = oInspectionReportVOs.IPOName;
            else
                com.Parameters.Add("@IPOName", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.IPODesignation.Trim() != "" || oInspectionReportVOs.IPODesignation.Trim() != null)
                com.Parameters.Add("@IPODesignation", SqlDbType.VarChar).Value = oInspectionReportVOs.IPODesignation;
            else
                com.Parameters.Add("@IPODesignation", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.InpectedDate.Trim() != "" || oInspectionReportVOs.InpectedDate.Trim() != null)
                com.Parameters.Add("@InpectedDate", SqlDbType.VarChar).Value = oInspectionReportVOs.InpectedDate;
            else
                com.Parameters.Add("@InpectedDate", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.UnitCons.Trim() != "" || oInspectionReportVOs.UnitCons.Trim() != null)
                com.Parameters.Add("@UnitCons", SqlDbType.VarChar).Value = oInspectionReportVOs.UnitCons;
            else
                com.Parameters.Add("@UnitCons", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.PersonIndustry.Trim() != "" || oInspectionReportVOs.PersonIndustry.Trim() != null)
                com.Parameters.Add("@PersonIndustry", SqlDbType.VarChar).Value = oInspectionReportVOs.PersonIndustry;
            else
                com.Parameters.Add("@PersonIndustry", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.indStat.Trim() != "" || oInspectionReportVOs.indStat.Trim() != null)
                com.Parameters.Add("@indStat", SqlDbType.VarChar).Value = oInspectionReportVOs.indStat;
            else
                com.Parameters.Add("@indStat", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.VerifyCert.Trim() != "" || oInspectionReportVOs.VerifyCert.Trim() != null)
                com.Parameters.Add("@VerifyCert", SqlDbType.VarChar).Value = oInspectionReportVOs.VerifyCert;
            else
                com.Parameters.Add("@VerifyCert", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.ApplClm.Trim() != "" || oInspectionReportVOs.ApplClm.Trim() != null)
                com.Parameters.Add("@ApplClm", SqlDbType.VarChar).Value = oInspectionReportVOs.ApplClm;
            else
                com.Parameters.Add("@ApplClm", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.DCP.Trim() != "" || oInspectionReportVOs.DCP.Trim() != null)
                com.Parameters.Add("@DCP", SqlDbType.VarChar).Value = oInspectionReportVOs.DCP;
            else
                com.Parameters.Add("@DCP", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.DateShrtfall.Trim() != "" || oInspectionReportVOs.DateShrtfall.Trim() != null)
                com.Parameters.Add("@DateShrtfall", SqlDbType.VarChar).Value = oInspectionReportVOs.DateShrtfall;
            else
                com.Parameters.Add("@DateShrtfall", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.DtShrtFallRcvd.Trim() != "" || oInspectionReportVOs.DtShrtFallRcvd.Trim() != null)
                com.Parameters.Add("@DtShrtFallRcvd", SqlDbType.VarChar).Value = oInspectionReportVOs.DtShrtFallRcvd;
            else
                com.Parameters.Add("@DtShrtFallRcvd", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Extent.Trim() != "" || oInspectionReportVOs.Extent.Trim() != null)
                com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = oInspectionReportVOs.Extent;
            else
                com.Parameters.Add("@Extent", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.BuiltupAra.Trim() != "" || oInspectionReportVOs.BuiltupAra.Trim() != null)
                com.Parameters.Add("@BuiltupAra", SqlDbType.VarChar).Value = oInspectionReportVOs.BuiltupAra;
            else
                com.Parameters.Add("@BuiltupAra", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TtimesBltup.Trim() != "" || oInspectionReportVOs.TtimesBltup.Trim() != null)
                com.Parameters.Add("@TtimesBltup", SqlDbType.VarChar).Value = oInspectionReportVOs.TtimesBltup;
            else
                com.Parameters.Add("@TtimesBltup", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.ExtentElgble.Trim() != "" || oInspectionReportVOs.ExtentElgble.Trim() != null)
                com.Parameters.Add("@ExtentElgble", SqlDbType.VarChar).Value = oInspectionReportVOs.ExtentElgble;
            else
                com.Parameters.Add("@ExtentElgble", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.YesNoClaimSubmn.Trim() != "" || oInspectionReportVOs.YesNoClaimSubmn.Trim() != null)
                com.Parameters.Add("@YesNoClaimSubmn", SqlDbType.VarChar).Value = oInspectionReportVOs.YesNoClaimSubmn;
            else
                com.Parameters.Add("@YesNoClaimSubmn", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.ClmApplRmbrLandCst.Trim() != "" || oInspectionReportVOs.ClmApplRmbrLandCst.Trim() != null)
                com.Parameters.Add("@ClmApplRmbrLandCst", SqlDbType.VarChar).Value = oInspectionReportVOs.ClmApplRmbrLandCst;
            else
                com.Parameters.Add("@ClmApplRmbrLandCst", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Clm25PBldgCvl.Trim() != "" || oInspectionReportVOs.Clm25PBldgCvl.Trim() != null)
                com.Parameters.Add("@Clm25PBldgCvl", SqlDbType.VarChar).Value = oInspectionReportVOs.Clm25PBldgCvl;
            else
                com.Parameters.Add("@Clm25PBldgCvl", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.LndCst25Prcny.Trim() != "" || oInspectionReportVOs.LndCst25Prcny.Trim() != null)
                com.Parameters.Add("@LndCst25Prcny", SqlDbType.VarChar).Value = oInspectionReportVOs.LndCst25Prcny;
            else
                com.Parameters.Add("@LndCst25Prcny", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.RegnFee25Prcnt.Trim() != "" || oInspectionReportVOs.RegnFee25Prcnt.Trim() != null)
                com.Parameters.Add("@RegnFee25Prcnt", SqlDbType.VarChar).Value = oInspectionReportVOs.RegnFee25Prcnt;
            else
                com.Parameters.Add("@RegnFee25Prcnt", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Total25Prcnt.Trim() != "" || oInspectionReportVOs.Total25Prcnt.Trim() != null)
                com.Parameters.Add("@Total25Prcnt", SqlDbType.VarChar).Value = oInspectionReportVOs.Total25Prcnt;
            else
                com.Parameters.Add("@Total25Prcnt", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AprdPjCst25Prcnt.Trim() != "" || oInspectionReportVOs.AprdPjCst25Prcnt.Trim() != null)
                com.Parameters.Add("@AprdPjCst25Prcnt", SqlDbType.VarChar).Value = oInspectionReportVOs.AprdPjCst25Prcnt;
            else
                com.Parameters.Add("@AprdPjCst25Prcnt", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Proprtn25Prcnt.Trim() != "" || oInspectionReportVOs.Proprtn25Prcnt.Trim() != null)
                com.Parameters.Add("@Proprtn25Prcnt", SqlDbType.VarChar).Value = oInspectionReportVOs.Proprtn25Prcnt;
            else
                com.Parameters.Add("@Proprtn25Prcnt", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Computedcost.Trim() != "" || oInspectionReportVOs.Computedcost.Trim() != null)
                com.Parameters.Add("@Computedcost", SqlDbType.VarChar).Value = oInspectionReportVOs.Computedcost;
            else
                com.Parameters.Add("@Computedcost", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.ValofItems.Trim() != "" || oInspectionReportVOs.ValofItems.Trim() != null)
                com.Parameters.Add("@ValofItems", SqlDbType.VarChar).Value = oInspectionReportVOs.ValofItems;
            else
                com.Parameters.Add("@ValofItems", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.PlnthArea.Trim() != "" || oInspectionReportVOs.PlnthArea.Trim() != null)
                com.Parameters.Add("@PlnthArea", SqlDbType.VarChar).Value = oInspectionReportVOs.PlnthArea;
            else
                com.Parameters.Add("@PlnthArea", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TSSFC.Trim() != "" || oInspectionReportVOs.TSSFC.Trim() != null)
                com.Parameters.Add("@TSSFC", SqlDbType.VarChar).Value = oInspectionReportVOs.TSSFC;
            else
                com.Parameters.Add("@TSSFC", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AprvPJVal.Trim() != "" || oInspectionReportVOs.AprvPJVal.Trim() != null)
                com.Parameters.Add("@AprvPJVal", SqlDbType.VarChar).Value = oInspectionReportVOs.AprvPJVal;
            else
                com.Parameters.Add("@AprvPJVal", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AppJTot.Trim() != "" || oInspectionReportVOs.AppJTot.Trim() != null)
                com.Parameters.Add("@AppJTot", SqlDbType.VarChar).Value = oInspectionReportVOs.AppJTot;
            else
                com.Parameters.Add("@AppJTot", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotVal1.Trim() != "" || oInspectionReportVOs.TotVal1.Trim() != null)
                com.Parameters.Add("@TotVal1", SqlDbType.VarChar).Value = oInspectionReportVOs.TotVal1;
            else
                com.Parameters.Add("@TotVal1", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotVal2.Trim() != "" || oInspectionReportVOs.TotVal2.Trim() != null)
                com.Parameters.Add("@TotVal2", SqlDbType.VarChar).Value = oInspectionReportVOs.TotVal2;
            else
                com.Parameters.Add("@TotVal2", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotVal3.Trim() != "" || oInspectionReportVOs.TotVal3.Trim() != null)
                com.Parameters.Add("@TotVal3", SqlDbType.VarChar).Value = oInspectionReportVOs.TotVal3;
            else
                com.Parameters.Add("@TotVal3", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotVal4.Trim() != "" || oInspectionReportVOs.TotVal4.Trim() != null)
                com.Parameters.Add("@TotVal4", SqlDbType.VarChar).Value = oInspectionReportVOs.TotVal4;
            else
                com.Parameters.Add("@TotVal4", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotVal100.Trim() != "" || oInspectionReportVOs.TotVal100.Trim() != null)
                com.Parameters.Add("@TotVal10", SqlDbType.VarChar).Value = oInspectionReportVOs.TotVal100;
            else
                com.Parameters.Add("@TotVal10", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.GrndTotVal.Trim() != "" || oInspectionReportVOs.GrndTotVal.Trim() != null)
                com.Parameters.Add("@GrndTotVal", SqlDbType.VarChar).Value = oInspectionReportVOs.GrndTotVal;
            else
                com.Parameters.Add("@GrndTotVal", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AsperApprPjCostPM.Trim() != "" || oInspectionReportVOs.AsperApprPjCostPM.Trim() != null)
                com.Parameters.Add("@AsperApprPjCostPM", SqlDbType.VarChar).Value = oInspectionReportVOs.AsperApprPjCostPM;
            else
                com.Parameters.Add("@AsperApprPjCostPM", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AsperCivilEngr.Trim() != "" || oInspectionReportVOs.AsperCivilEngr.Trim() != null)
                com.Parameters.Add("@AsperCivilEngr", SqlDbType.VarChar).Value = oInspectionReportVOs.AsperCivilEngr;
            else
                com.Parameters.Add("@AsperCivilEngr", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.ComptdGm.Trim() != "" || oInspectionReportVOs.ComptdGm.Trim() != null)
                com.Parameters.Add("@ComptdGm", SqlDbType.VarChar).Value = oInspectionReportVOs.ComptdGm;
            else
                com.Parameters.Add("@ComptdGm", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Comptedcst.Trim() != "" || oInspectionReportVOs.Comptedcst.Trim() != null)
                com.Parameters.Add("@Comptedcst", SqlDbType.VarChar).Value = oInspectionReportVOs.Comptedcst;
            else
                com.Parameters.Add("@Comptedcst", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AsprAppPjCostPM.Trim() != "" || oInspectionReportVOs.AsprAppPjCostPM.Trim() != null)
                com.Parameters.Add("@AsprAppPjCostPM", SqlDbType.VarChar).Value = oInspectionReportVOs.AsprAppPjCostPM;
            else
                com.Parameters.Add("@AsprAppPjCostPM", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AsperListPM.Trim() != "" || oInspectionReportVOs.AsperListPM.Trim() != null)
                com.Parameters.Add("@AsperListPM", SqlDbType.VarChar).Value = oInspectionReportVOs.AsperListPM;
            else
                com.Parameters.Add("@AsperListPM", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TechKnowPM.Trim() != "" || oInspectionReportVOs.TechKnowPM.Trim() != null)
                com.Parameters.Add("@TechKnowPM", SqlDbType.VarChar).Value = oInspectionReportVOs.TechKnowPM;
            else
                com.Parameters.Add("@TechKnowPM", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.MachPM.Trim() != "" || oInspectionReportVOs.MachPM.Trim() != null)
                com.Parameters.Add("@MachPM", SqlDbType.VarChar).Value = oInspectionReportVOs.MachPM;
            else
                com.Parameters.Add("@MachPM", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Prcnt2ndMach.Trim() != "" || oInspectionReportVOs.Prcnt2ndMach.Trim() != null)
                com.Parameters.Add("@Prcnt2ndMach", SqlDbType.VarChar).Value = oInspectionReportVOs.Prcnt2ndMach;
            else
                com.Parameters.Add("@Prcnt2ndMach", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Total2ndHandMach.Trim() != "" || oInspectionReportVOs.Total2ndHandMach.Trim() != null)
                com.Parameters.Add("@Total2ndHandMach", SqlDbType.VarChar).Value = oInspectionReportVOs.Total2ndHandMach;
            else
                com.Parameters.Add("@Total2ndHandMach", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.Tot2ndMach.Trim() != "" || oInspectionReportVOs.Tot2ndMach.Trim() != null)
                com.Parameters.Add("@Tot2ndMach", SqlDbType.VarChar).Value = oInspectionReportVOs.Tot2ndMach;
            else
                com.Parameters.Add("@Tot2ndMach", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.totCstCmptdLand.Trim() != "" || oInspectionReportVOs.totCstCmptdLand.Trim() != null)
                com.Parameters.Add("@totCstCmptdLand", SqlDbType.VarChar).Value = oInspectionReportVOs.totCstCmptdLand;
            else
                com.Parameters.Add("@totCstCmptdLand", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotCstCmptdBldg.Trim() != "" || oInspectionReportVOs.TotCstCmptdBldg.Trim() != null)
                com.Parameters.Add("@TotCstCmptdBldg", SqlDbType.VarChar).Value = oInspectionReportVOs.TotCstCmptdBldg;
            else
                com.Parameters.Add("@TotCstCmptdBldg", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotCstCmptdPlntMach.Trim() != "" || oInspectionReportVOs.TotCstCmptdPlntMach.Trim() != null)
                com.Parameters.Add("@TotCstCmptdPlntMach", SqlDbType.VarChar).Value = oInspectionReportVOs.TotCstCmptdPlntMach;
            else
                com.Parameters.Add("@TotCstCmptdPlntMach", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotCstCmptdTotal.Trim() != "" || oInspectionReportVOs.TotCstCmptdTotal.Trim() != null)
                com.Parameters.Add("@TotCstCmptdTotal", SqlDbType.VarChar).Value = oInspectionReportVOs.TotCstCmptdTotal;
            else
                com.Parameters.Add("@TotCstCmptdTotal", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.InvSubsidyVal.Trim() != "" || oInspectionReportVOs.InvSubsidyVal.Trim() != null)
                com.Parameters.Add("@InvSubsidyVal", SqlDbType.VarChar).Value = oInspectionReportVOs.InvSubsidyVal;
            else
                com.Parameters.Add("@InvSubsidyVal", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AddnInvSubsdyWmn.Trim() != "" || oInspectionReportVOs.AddnInvSubsdyWmn.Trim() != null)
                com.Parameters.Add("@AddnInvSubsdyWmn", SqlDbType.VarChar).Value = oInspectionReportVOs.AddnInvSubsdyWmn;
            else
                com.Parameters.Add("@AddnInvSubsdyWmn", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.InvSubsdySCS.Trim() != "" || oInspectionReportVOs.InvSubsdySCS.Trim() != null)
                com.Parameters.Add("@InvSubsdySCS", SqlDbType.VarChar).Value = oInspectionReportVOs.InvSubsdySCS;
            else
                com.Parameters.Add("@InvSubsdySCS", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.AddnInvSbsdySc10Prcnt.Trim() != "" || oInspectionReportVOs.AddnInvSbsdySc10Prcnt.Trim() != null)
                com.Parameters.Add("@AddnInvSbsdySc10Prcnt", SqlDbType.VarChar).Value = oInspectionReportVOs.AddnInvSbsdySc10Prcnt;
            else
                com.Parameters.Add("@AddnInvSbsdySc10Prcnt", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TotalInv.Trim() != "" || oInspectionReportVOs.TotalInv.Trim() != null)
                com.Parameters.Add("@TotalInv", SqlDbType.VarChar).Value = oInspectionReportVOs.TotalInv;
            else
                com.Parameters.Add("@TotalInv", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval1.Trim() != "" || oInspectionReportVOs.empval1.Trim() != null)
                com.Parameters.Add("@empval1", SqlDbType.VarChar).Value = oInspectionReportVOs.empval1;
            else
                com.Parameters.Add("@empval1", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval2.Trim() != "" || oInspectionReportVOs.empval2.Trim() != null)
                com.Parameters.Add("@empval2", SqlDbType.VarChar).Value = oInspectionReportVOs.empval2;
            else
                com.Parameters.Add("@empval2", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval3.Trim() != "" || oInspectionReportVOs.empval3.Trim() != null)
                com.Parameters.Add("@empval3", SqlDbType.VarChar).Value = oInspectionReportVOs.empval3;
            else
                com.Parameters.Add("@empval3", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval4.Trim() != "" || oInspectionReportVOs.empval4.Trim() != null)
                com.Parameters.Add("@empval4", SqlDbType.VarChar).Value = oInspectionReportVOs.empval4;
            else
                com.Parameters.Add("@empval4", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval5.Trim() != "" || oInspectionReportVOs.empval5.Trim() != null)
                com.Parameters.Add("@empval5", SqlDbType.VarChar).Value = oInspectionReportVOs.empval5;
            else
                com.Parameters.Add("@empval5", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval6.Trim() != "" || oInspectionReportVOs.empval6.Trim() != null)
                com.Parameters.Add("@empval6", SqlDbType.VarChar).Value = oInspectionReportVOs.empval6;
            else
                com.Parameters.Add("@empval6", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval7.Trim() != "" || oInspectionReportVOs.empval7.Trim() != null)
                com.Parameters.Add("@empval7", SqlDbType.VarChar).Value = oInspectionReportVOs.empval7;
            else
                com.Parameters.Add("@empval7", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval8.Trim() != "" || oInspectionReportVOs.empval8.Trim() != null)
                com.Parameters.Add("@empval8", SqlDbType.VarChar).Value = oInspectionReportVOs.empval8;
            else
                com.Parameters.Add("@empval8", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval9999.Trim() != "" || oInspectionReportVOs.empval9999.Trim() != null)
                com.Parameters.Add("@empval9999", SqlDbType.VarChar).Value = oInspectionReportVOs.empval9999;
            else
                com.Parameters.Add("@empval9999", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval999.Trim() != "" || oInspectionReportVOs.empval999.Trim() != null)
                com.Parameters.Add("@empval999", SqlDbType.VarChar).Value = oInspectionReportVOs.empval999;
            else
                com.Parameters.Add("@empval999", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.empval99.Trim() != "" || oInspectionReportVOs.empval99.Trim() != null)
                com.Parameters.Add("@empval99", SqlDbType.VarChar).Value = oInspectionReportVOs.empval99;
            else
                com.Parameters.Add("@empval99", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.mstincentiveid.Trim() != "" || oInspectionReportVOs.mstincentiveid.Trim() != null)
                com.Parameters.Add("@mstincentiveid", SqlDbType.VarChar).Value = oInspectionReportVOs.mstincentiveid;
            else
                com.Parameters.Add("@mstincentiveid", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.txtremarks.Trim() != "" || oInspectionReportVOs.txtremarks.Trim() != null)
                com.Parameters.Add("@txtremarks", SqlDbType.VarChar).Value = oInspectionReportVOs.txtremarks;
            else
                com.Parameters.Add("@txtremarks", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.LandExistEnterprise.Trim() != "" || oInspectionReportVOs.LandExistEnterprise.Trim() != null)
                com.Parameters.Add("@LandExistEnterprise", SqlDbType.VarChar).Value = oInspectionReportVOs.LandExistEnterprise;
            else
                com.Parameters.Add("@LandExistEnterprise", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.LandExpanDiversification.Trim() != "" || oInspectionReportVOs.LandExpanDiversification.Trim() != null)
                com.Parameters.Add("@LandExpanDiversification", SqlDbType.VarChar).Value = oInspectionReportVOs.LandExpanDiversification;
            else
                com.Parameters.Add("@LandExpanDiversification", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.LandExpanDiversificationPercentage.Trim() != "" || oInspectionReportVOs.LandExpanDiversificationPercentage.Trim() != null)
                com.Parameters.Add("@LandExpanDiversificationPercentage", SqlDbType.VarChar).Value = oInspectionReportVOs.LandExpanDiversificationPercentage;
            else
                com.Parameters.Add("@LandExpanDiversificationPercentage", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.BuildingExistEnterprise.Trim() != "" || oInspectionReportVOs.BuildingExistEnterprise.Trim() != null)
                com.Parameters.Add("@BuildingExistEnterprise", SqlDbType.VarChar).Value = oInspectionReportVOs.BuildingExistEnterprise;
            else
                com.Parameters.Add("@BuildingExistEnterprise", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.BuildingExpanDiversification.Trim() != "" || oInspectionReportVOs.BuildingExpanDiversification.Trim() != null)
                com.Parameters.Add("@BuildingExpanDiversification", SqlDbType.VarChar).Value = oInspectionReportVOs.BuildingExpanDiversification;
            else
                com.Parameters.Add("@BuildingExpanDiversification", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.BuildingExpanDiversificationPercentage.Trim() != "" || oInspectionReportVOs.BuildingExpanDiversificationPercentage.Trim() != null)
                com.Parameters.Add("@BuildingExpanDiversificationPercentage", SqlDbType.VarChar).Value = oInspectionReportVOs.BuildingExpanDiversificationPercentage;
            else
                com.Parameters.Add("@BuildingExpanDiversificationPercentage", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.PlantMachExistEnterprise.Trim() != "" || oInspectionReportVOs.PlantMachExistEnterprise.Trim() != null)
                com.Parameters.Add("@PlantMachExistEnterprise", SqlDbType.VarChar).Value = oInspectionReportVOs.PlantMachExistEnterprise;
            else
                com.Parameters.Add("@PlantMachExistEnterprise", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.PlantMachExpanDiversification.Trim() != "" || oInspectionReportVOs.PlantMachExpanDiversification.Trim() != null)
                com.Parameters.Add("@PlantMachExpanDiversification", SqlDbType.VarChar).Value = oInspectionReportVOs.PlantMachExpanDiversification;
            else
                com.Parameters.Add("@PlantMachExpanDiversification", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.PlantMachExpanDiversificationPercentage.Trim() != "" || oInspectionReportVOs.PlantMachExpanDiversificationPercentage.Trim() != null)
                com.Parameters.Add("@PlantMachExpanDiversificationPercentage", SqlDbType.VarChar).Value = oInspectionReportVOs.PlantMachExpanDiversificationPercentage;
            else
                com.Parameters.Add("@PlantMachExpanDiversificationPercentage", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.RcptAppln.Trim() != "" || oInspectionReportVOs.RcptAppln.Trim() != null)
                com.Parameters.Add("@RcptAppln", SqlDbType.VarChar).Value = oInspectionReportVOs.RcptAppln;
            else
                com.Parameters.Add("@RcptAppln", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.BuildingApprovedPrjtCost.Trim() != "" || oInspectionReportVOs.BuildingApprovedPrjtCost.Trim() != null)
                com.Parameters.Add("@BuildingApprovedPrjtCost", SqlDbType.VarChar).Value = oInspectionReportVOs.BuildingApprovedPrjtCost;
            else
                com.Parameters.Add("@BuildingApprovedPrjtCost", SqlDbType.VarChar).Value = DBNull.Value;


            if (oInspectionReportVOs.isMobileUnit.Trim() != "" || oInspectionReportVOs.isMobileUnit.Trim() != null)
                com.Parameters.Add("@isMobileunit", SqlDbType.VarChar).Value = oInspectionReportVOs.isMobileUnit;
            else
                com.Parameters.Add("@isMobileunit", SqlDbType.VarChar).Value = DBNull.Value;  //added on 03.09.2019


            //ADDED BY CHINNA

            if (oInspectionReportVOs.IsDlcOrSlc.Trim() != "" || oInspectionReportVOs.IsDlcOrSlc.Trim() != null)
                com.Parameters.Add("@IsDlcOrSlc", SqlDbType.VarChar).Value = oInspectionReportVOs.IsDlcOrSlc;
            else
                com.Parameters.Add("@IsDlcOrSlc", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.caste_IR.Trim() != "" || oInspectionReportVOs.caste_IR.Trim() != null)
                com.Parameters.Add("@caste_IR", SqlDbType.VarChar).Value = oInspectionReportVOs.caste_IR;
            else
                com.Parameters.Add("@caste_IR", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.gender_IR.Trim() != "" || oInspectionReportVOs.gender_IR.Trim() != null)
                com.Parameters.Add("@gender_IR", SqlDbType.VarChar).Value = oInspectionReportVOs.gender_IR;
            else
                com.Parameters.Add("@gender_IR", SqlDbType.VarChar).Value = DBNull.Value;


            if (oInspectionReportVOs.category_IR.Trim() != "" || oInspectionReportVOs.category_IR.Trim() != null)
                com.Parameters.Add("@category_IR", SqlDbType.VarChar).Value = oInspectionReportVOs.category_IR;
            else
                com.Parameters.Add("@category_IR", SqlDbType.VarChar).Value = DBNull.Value;



            if (oInspectionReportVOs.enterprisetype_IR.Trim() != "" || oInspectionReportVOs.enterprisetype_IR.Trim() != null)
                com.Parameters.Add("@enterprise_IR", SqlDbType.VarChar).Value = oInspectionReportVOs.enterprisetype_IR;
            else
                com.Parameters.Add("@enterprise_IR", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.sector_IR.Trim() != "" || oInspectionReportVOs.sector_IR.Trim() != null)
                com.Parameters.Add("@sector_IR", SqlDbType.VarChar).Value = oInspectionReportVOs.sector_IR;
            else
                com.Parameters.Add("@sector_IR", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.servicetype_IR.Trim() != "" || oInspectionReportVOs.servicetype_IR.Trim() != null)
                com.Parameters.Add("@serviceType_IR", SqlDbType.VarChar).Value = oInspectionReportVOs.servicetype_IR;
            else
                com.Parameters.Add("@serviceType_IR", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.transNonTrans_IR.Trim() != "" || oInspectionReportVOs.transNonTrans_IR.Trim() != null)
                com.Parameters.Add("@transportNonTrans_IR", SqlDbType.VarChar).Value = oInspectionReportVOs.transNonTrans_IR;
            else
                com.Parameters.Add("@transportNonTrans_IR", SqlDbType.VarChar).Value = DBNull.Value;



            if (oInspectionReportVOs.txtLOActivityExpan.Trim() != "" || oInspectionReportVOs.txtLOActivityExpan.Trim() != null)
                com.Parameters.Add("@txtLOActivityExpan", SqlDbType.VarChar).Value = oInspectionReportVOs.txtLOActivityExpan;
            else
                com.Parameters.Add("@txtLOActivityExpan", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.txtinstalledccapExpan.Trim() != "" || oInspectionReportVOs.txtinstalledccapExpan.Trim() != null)
                com.Parameters.Add("@txtinstalledccapExpan", SqlDbType.VarChar).Value = oInspectionReportVOs.txtinstalledccapExpan;
            else
                com.Parameters.Add("@txtinstalledccapExpan", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.ddlquantityinExpan.Trim() != "" || oInspectionReportVOs.ddlquantityinExpan.Trim() != null)
                com.Parameters.Add("@ddlquantityinExpan", SqlDbType.VarChar).Value = oInspectionReportVOs.ddlquantityinExpan;
            else
                com.Parameters.Add("@ddlquantityinExpan", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.txtunitExpan.Trim() != "" || oInspectionReportVOs.txtunitExpan.Trim() != null)
                com.Parameters.Add("@txtunitExpan", SqlDbType.VarChar).Value = oInspectionReportVOs.txtunitExpan;
            else
                com.Parameters.Add("@txtunitExpan", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.txtvalueExpan.Trim() != "" || oInspectionReportVOs.txtvalueExpan.Trim() != null)
                com.Parameters.Add("@txtvalueExpan", SqlDbType.VarChar).Value = oInspectionReportVOs.txtvalueExpan;
            else
                com.Parameters.Add("@txtvalueExpan", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTLANDVALUE_EXISTING.Trim() != "" || oInspectionReportVOs.TXTLANDVALUE_EXISTING.Trim() != null)
                com.Parameters.Add("@TXTLANDVALUE_EXISTING", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTLANDVALUE_EXISTING;
            else
                com.Parameters.Add("@TXTLANDVALUE_EXISTING", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTBUILDINGVALE_EXISTING.Trim() != "" || oInspectionReportVOs.TXTBUILDINGVALE_EXISTING.Trim() != null)
                com.Parameters.Add("@TXTBUILDINGVALE_EXISTING", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTBUILDINGVALE_EXISTING;
            else
                com.Parameters.Add("@TXTBUILDINGVALE_EXISTING", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTPLANTANDMACHINAERVALUE_EXISTING.Trim() != "" || oInspectionReportVOs.TXTPLANTANDMACHINAERVALUE_EXISTING.Trim() != null)
                com.Parameters.Add("@TXTPLANTANDMACHINAERVALUE_EXISTING", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTPLANTANDMACHINAERVALUE_EXISTING;
            else
                com.Parameters.Add("@TXTPLANTANDMACHINAERVALUE_EXISTING", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTLANDVALUE_EXPANSION.Trim() != "" || oInspectionReportVOs.TXTLANDVALUE_EXPANSION.Trim() != null)
                com.Parameters.Add("@TXTLANDVALUE_EXPANSION", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTLANDVALUE_EXPANSION;
            else
                com.Parameters.Add("@TXTLANDVALUE_EXPANSION", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTBUILDINGVALUE_EXPANSION.Trim() != "" || oInspectionReportVOs.TXTBUILDINGVALUE_EXPANSION.Trim() != null)
                com.Parameters.Add("@TXTBUILDINGVALUE_EXPANSION", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTBUILDINGVALUE_EXPANSION;
            else
                com.Parameters.Add("@TXTBUILDINGVALUE_EXPANSION", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTPLANTANDMACHINERYVALUE_EXPANSION.Trim() != "" || oInspectionReportVOs.TXTPLANTANDMACHINERYVALUE_EXPANSION.Trim() != null)
                com.Parameters.Add("@TXTPLANTANDMACHINERYVALUE_EXPANSION", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTPLANTANDMACHINERYVALUE_EXPANSION;
            else
                com.Parameters.Add("@TXTPLANTANDMACHINERYVALUE_EXPANSION", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTINCPERCENTAGE_LAND.Trim() != "" || oInspectionReportVOs.TXTINCPERCENTAGE_LAND.Trim() != null)
                com.Parameters.Add("@TXTINCPERCENTAGE_LAND", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTINCPERCENTAGE_LAND;
            else
                com.Parameters.Add("@TXTINCPERCENTAGE_LAND", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTINCRPERCEN_BUILDINGVALUE.Trim() != "" || oInspectionReportVOs.TXTINCRPERCEN_BUILDINGVALUE.Trim() != null)
                com.Parameters.Add("@TXTINCRPERCEN_BUILDINGVALUE", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTINCRPERCEN_BUILDINGVALUE;
            else
                com.Parameters.Add("@TXTINCRPERCEN_BUILDINGVALUE", SqlDbType.VarChar).Value = DBNull.Value;

            if (oInspectionReportVOs.TXTINCPERCEN_PLANTANDMACHINERY.Trim() != "" || oInspectionReportVOs.TXTINCPERCEN_PLANTANDMACHINERY.Trim() != null)
                com.Parameters.Add("@TXTINCPERCEN_PLANTANDMACHINERY", SqlDbType.VarChar).Value = oInspectionReportVOs.TXTINCPERCEN_PLANTANDMACHINERY;
            else
                com.Parameters.Add("@TXTINCPERCEN_PLANTANDMACHINERY", SqlDbType.VarChar).Value = DBNull.Value;

            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();

            //valid = Convert.ToInt32(com.Parameters["@Valid"].Value.ToString());
            InspectionId = Convert.ToInt32(com.Parameters["@Valid"].Value);


            if (InspectionId != 0)
            {
                foreach (InpectionGridLOAVos objInpectionGridLOAVos in listInpectionGridLOAVos)
                {
                    SqlCommand cmdLOA = new SqlCommand("[Usp_Ins_InspectionReport_LOA]", connection);
                    cmdLOA.CommandType = CommandType.StoredProcedure;

                    cmdLOA.Transaction = transaction;
                    cmdLOA.Connection = connection;

                    cmdLOA.Parameters.AddWithValue("@InspectionID", SqlDbType.Int).Value = InspectionId;

                    if (objInpectionGridLOAVos.IncentiveID != null)
                        cmdLOA.Parameters.AddWithValue("@IncentiveID", objInpectionGridLOAVos.IncentiveID);

                    if (objInpectionGridLOAVos.UserCode != null)
                        cmdLOA.Parameters.AddWithValue("@UserCode", objInpectionGridLOAVos.UserCode);

                    if (objInpectionGridLOAVos.LineofActivity != null)
                        cmdLOA.Parameters.AddWithValue("@LineofActivity", objInpectionGridLOAVos.LineofActivity);

                    if (objInpectionGridLOAVos.InstalledCapacity != null)
                        cmdLOA.Parameters.AddWithValue("@InstalledCapacity", objInpectionGridLOAVos.InstalledCapacity);

                    if (objInpectionGridLOAVos.Value != null)
                        cmdLOA.Parameters.AddWithValue("@Value", objInpectionGridLOAVos.Value);

                    if (objInpectionGridLOAVos.Unit != null)
                        cmdLOA.Parameters.AddWithValue("@Unit", objInpectionGridLOAVos.Unit);

                    if (objInpectionGridLOAVos.LOAType != null)
                        cmdLOA.Parameters.AddWithValue("@LOAType", objInpectionGridLOAVos.LOAType);

                    if (objInpectionGridLOAVos.CreatedBy != null)
                        cmdLOA.Parameters.AddWithValue("@CreatedBy", objInpectionGridLOAVos.CreatedBy);

                    cmdLOA.ExecuteNonQuery();
                }

                if (oInspectionReportVOs.indStat.ToUpper() != "NEW INDUSTRY")
                {
                    foreach (InpectionGridExpVos objInpectionGridExpVos in listInpectionGridExpVos)
                    {
                        SqlCommand cmdExp = new SqlCommand("[Usp_Ins_InspectionReport_LOA]", connection);
                        cmdExp.CommandType = CommandType.StoredProcedure;

                        cmdExp.Transaction = transaction;
                        cmdExp.Connection = connection;

                        cmdExp.Parameters.AddWithValue("@InspectionID", SqlDbType.Int).Value = InspectionId;

                        if (objInpectionGridExpVos.IncentiveID != null)
                            cmdExp.Parameters.AddWithValue("@IncentiveID", objInpectionGridExpVos.IncentiveID);

                        if (objInpectionGridExpVos.UserCode != null)
                            cmdExp.Parameters.AddWithValue("@UserCode", objInpectionGridExpVos.UserCode);

                        if (objInpectionGridExpVos.LineofActivity != null)
                            cmdExp.Parameters.AddWithValue("@LineofActivity", objInpectionGridExpVos.LineofActivity);

                        if (objInpectionGridExpVos.InstalledCapacity != null)
                            cmdExp.Parameters.AddWithValue("@InstalledCapacity", objInpectionGridExpVos.InstalledCapacity);

                        if (objInpectionGridExpVos.Value != null)
                            cmdExp.Parameters.AddWithValue("@Value", objInpectionGridExpVos.Value);

                        if (objInpectionGridExpVos.Unit != null)
                            cmdExp.Parameters.AddWithValue("@Unit", objInpectionGridExpVos.Unit);

                        if (objInpectionGridExpVos.LOAType != null)
                            cmdExp.Parameters.AddWithValue("@LOAType", objInpectionGridExpVos.LOAType);

                        if (objInpectionGridExpVos.CreatedBy != null)
                            cmdExp.Parameters.AddWithValue("@CreatedBy", objInpectionGridExpVos.CreatedBy);

                        cmdExp.ExecuteNonQuery();
                    }
                }

                foreach (InpectionGrid422Vos objInpectionGrid422Vos in listInpectionGrid422Vos)
                {
                    SqlCommand cmd422 = new SqlCommand("[Usp_Ins_InspectionReport_422]", connection);
                    cmd422.CommandType = CommandType.StoredProcedure;

                    cmd422.Transaction = transaction;
                    cmd422.Connection = connection;

                    cmd422.Parameters.AddWithValue("@InspectionID", SqlDbType.Int).Value = InspectionId;

                    if (objInpectionGrid422Vos.IncentiveID != null)
                        cmd422.Parameters.AddWithValue("@IncentiveID", objInpectionGrid422Vos.IncentiveID);

                    if (objInpectionGrid422Vos.UserCode != null)
                        cmd422.Parameters.AddWithValue("@UserCode", objInpectionGrid422Vos.UserCode);

                    if (objInpectionGrid422Vos.guideline422 != null)
                        cmd422.Parameters.AddWithValue("@Guideline", objInpectionGrid422Vos.guideline422);

                    if (objInpectionGrid422Vos.Plintharea422 != null)
                        cmd422.Parameters.AddWithValue("@Plintharea", objInpectionGrid422Vos.Plintharea422);

                    if (objInpectionGrid422Vos.TSSFCnorms422 != null)
                        cmd422.Parameters.AddWithValue("@TSSFCnorms", objInpectionGrid422Vos.TSSFCnorms422);

                    if (objInpectionGrid422Vos.value422 != null)
                        cmd422.Parameters.AddWithValue("@Value", objInpectionGrid422Vos.value422);

                    if (objInpectionGrid422Vos.CreatedBy != null)
                        cmd422.Parameters.AddWithValue("@CreatedBy", objInpectionGrid422Vos.CreatedBy);

                    cmd422.ExecuteNonQuery();
                }

                foreach (InpectionGrid423Vos objInpectionGrid423Vos in listInpectionGrid423Vos)
                {
                    SqlCommand cmd423 = new SqlCommand("[Usp_Ins_InspectionReport_423]", connection);
                    cmd423.CommandType = CommandType.StoredProcedure;

                    cmd423.Transaction = transaction;
                    cmd423.Connection = connection;

                    cmd423.Parameters.AddWithValue("@InspectionID", SqlDbType.Int).Value = InspectionId;

                    if (objInpectionGrid423Vos.IncentiveID != null)
                        cmd423.Parameters.AddWithValue("@IncentiveID", objInpectionGrid423Vos.IncentiveID);

                    if (objInpectionGrid423Vos.UserCode != null)
                        cmd423.Parameters.AddWithValue("@UserCode", objInpectionGrid423Vos.UserCode);

                    if (objInpectionGrid423Vos.guideline423 != null)
                        cmd423.Parameters.AddWithValue("@Guideline", objInpectionGrid423Vos.guideline423);

                    if (objInpectionGrid423Vos.Plintharea423 != null)
                        cmd423.Parameters.AddWithValue("@Plintharea", objInpectionGrid423Vos.Plintharea423);

                    if (objInpectionGrid423Vos.TSSFCnorms423 != null)
                        cmd423.Parameters.AddWithValue("@TSSFCnorms", objInpectionGrid423Vos.TSSFCnorms423);

                    if (objInpectionGrid423Vos.value423 != null)
                        cmd423.Parameters.AddWithValue("@Value", objInpectionGrid423Vos.value423);

                    if (objInpectionGrid423Vos.CreatedBy != null)
                        cmd423.Parameters.AddWithValue("@CreatedBy", objInpectionGrid423Vos.CreatedBy);

                    cmd423.ExecuteNonQuery();
                }
                transaction.Commit();
            }
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return InspectionId;
    }


    public DataSet GetInspectionReportData(string incentiveID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("Usp_Get_InspectionReport_Data", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                // da.SelectCommand.Parameters.Add("intUserID", SqlDbType.VarChar).Value = userid;
                da.SelectCommand.Parameters.Add("@incentiveID", SqlDbType.VarChar).Value = incentiveID;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // added for release proceedings for special cases on 10.11.2017
    // Get SLC No's list
    public DataSet GetIncentivesSLCNosList(string caste, string IncentiveTypID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_Incentives_SLC_Nos_LIST", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@caste", SqlDbType.VarChar).Value = caste;
            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = @IncentiveTypID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertMsmeUnitDetails(MSMEUNITDETAILS bc)
    {
        string str = ConfigurationManager.ConnectionStrings["TSiPASSSkils"].ConnectionString;
        int valid;
        SqlConnection connection = new SqlConnection(str);
        SqlTransaction transaction = null;
        connection.Open();
        transaction = connection.BeginTransaction();
        try
        {
            SqlCommand com = new SqlCommand();
            com.CommandType = CommandType.StoredProcedure;
            com.CommandText = "INSERT_UNIT_DETAILS";
            com.Transaction = transaction;
            com.Connection = connection;
            com.Parameters.AddWithValue("@UNITS_IE_OR_NOT", bc.UNITS_IE_OR_NOT);
            com.Parameters.AddWithValue("@CATEGOERY_ID", bc.CATEGOERY_ID);
            com.Parameters.AddWithValue("@UAM_ID", bc.UAM_ID);
            com.Parameters.AddWithValue("@DISTRICT_ID", bc.DISTRICT_ID);
            com.Parameters.AddWithValue("@MANDAL_ID", bc.MANDAL_ID);
            com.Parameters.AddWithValue("@UNIT_NAME", bc.UNIT_NAME);
            com.Parameters.AddWithValue("@EMPLOYMENT", bc.EMPLOYMENT);
            com.Parameters.AddWithValue("@NAME_OF_ENTREPRENEUR", bc.NAME_OF_ENTREPRENEUR);
            com.Parameters.AddWithValue("@MOBILE_NO", bc.MOBILE_NO);
            com.Parameters.AddWithValue("@EMAIL_ID", bc.EMAIL_ID);
            com.Parameters.AddWithValue("@LINE_OF_ACTIVITY", bc.LINE_OF_ACTIVITY);
            com.Parameters.AddWithValue("@PRODUCT_SPEC", bc.PRODUCT_SPEC);
            com.Parameters.AddWithValue("@CREATED_BY", bc.CreatedBy);
            com.Parameters.AddWithValue("@DateofCapture", bc.Date);
            com.Parameters.AddWithValue("@PresentStatus", bc.presentstatus);
            com.Parameters.AddWithValue("@OtherPresentStatus", bc.otherpresentstatus);
            com.Parameters.AddWithValue("@TYPEOFINDUSTRY", bc.TYPEOFINDUSTRY);
            com.Parameters.AddWithValue("@DATEOFCOMMENCEMENT", bc.DATEOFCOMMENCEMENT);
            com.Parameters.AddWithValue("@EXPORT", bc.EXPORT);
            com.Parameters.AddWithValue("@EXPORTCOUNTRY", bc.EXPORTCOUNTRY);
            com.Parameters.AddWithValue("@TYPEOFCONNECTION", bc.TYPEOFCONNECTION);
            com.Parameters.AddWithValue("@PCBCATEGORY", bc.PCBCATEGORY);
            com.Parameters.AddWithValue("@SOCAILSTATUS", bc.SOCAILSTATUS);
            com.Parameters.AddWithValue("@PROMOTERWOMEN", bc.PROMOTERWOMEN);
            com.Parameters.AddWithValue("@PROMOTERDISABLED", bc.PROMOTERDISABLED);
            com.Parameters.AddWithValue("@SECTOR", bc.SECTOR);
            com.Parameters.AddWithValue("@RAWMATERIALPROCURED", bc.RAWMATERIALPROCURED);
            com.Parameters.AddWithValue("@RAWMATERIALDISTRICT", bc.RAWMATERIALDISTRICT);
            com.Parameters.AddWithValue("@RAWMATERIALSTATE", bc.RAWMATERIALSTATE);
            com.Parameters.AddWithValue("@RAWMATERIALCOUNTRY", bc.RAWMATERIALCOUNTRY);
            com.Parameters.AddWithValue("@CompleteAddress", bc.Completeaddress);
            com.Parameters.AddWithValue("@Investment", bc.investment);
            com.Parameters.Add("@Valid", SqlDbType.Int, 500);
            com.Parameters["@Valid"].Direction = ParameterDirection.Output;
            com.ExecuteNonQuery();
            valid = (Int32)com.Parameters["@Valid"].Value;
            transaction.Commit();
            connection.Close();
        }
        catch (Exception ex)
        {
            transaction.Rollback();
            throw ex;
        }
        finally
        {
            connection.Close();
            connection.Dispose();
        }
        return valid;


    }



    public int insertMSMEDetailsDB(string Value, List<MSMELineOfManfGrid1DETAILS> objLISTMSMELineOfManfGrid1DETAILSBO, List<MSMELineOfManfGrid2DETAILS> objListMSMELineOfManfGrid2DETAILSBO)
    {

        int result = 0;
        try
        {

            using (SqlConnection con = new SqlConnection(str))
            {
                con.Open();
                int Count = Convert.ToInt32(Value);
                if (Count > 0)
                {
                    foreach (MSMELineOfManfGrid1DETAILS obMSMELineOfManfGrid1DETAILSBO in objLISTMSMELineOfManfGrid1DETAILSBO)
                    {
                        using (SqlCommand cmdP = new SqlCommand("SP_RAwMaterialsDetailsMSME", con))
                        {
                            cmdP.CommandType = CommandType.StoredProcedure;
                            cmdP.Parameters.AddWithValue("@MSME_NO", obMSMELineOfManfGrid1DETAILSBO.MSMEID);
                            cmdP.Parameters.AddWithValue("@RAW_ITEM_NAME", obMSMELineOfManfGrid1DETAILSBO.Item);
                            cmdP.Parameters.AddWithValue("@RAW_QUANTITY_PER_ANNUM", obMSMELineOfManfGrid1DETAILSBO.QuantityPerAnnum);
                            cmdP.Parameters.AddWithValue("@RAW_PRODUCCTION_IN", obMSMELineOfManfGrid1DETAILSBO.ProductionInUnits);
                            cmdP.Parameters.AddWithValue("@RAW_PRODUCTION_OTHERS", obMSMELineOfManfGrid1DETAILSBO.OtherRawUnits);
                            cmdP.Parameters.AddWithValue("@CREATED_BY", obMSMELineOfManfGrid1DETAILSBO.CreatedBy);
                            cmdP.Parameters.Add("@Valid", SqlDbType.Int, 500);
                            cmdP.Parameters["@Valid"].Direction = ParameterDirection.Output;
                            cmdP.ExecuteNonQuery();
                            int Count2 = (Int32)cmdP.Parameters["@Valid"].Value;
                            //int Count2 = cmdP.ExecuteNonQuery();
                            if (Count2 > 0)
                            {
                                foreach (MSMELineOfManfGrid2DETAILS objMSMELineOfManfGrid2DETAILSBO in objListMSMELineOfManfGrid2DETAILSBO)
                                {
                                    using (SqlCommand cmdE = new SqlCommand("SP_ManufactureDetailsMSME", con))
                                    {
                                        cmdE.CommandType = CommandType.StoredProcedure;
                                        cmdE.Parameters.AddWithValue("@MSME_NO", objMSMELineOfManfGrid2DETAILSBO.MSMEID);
                                        cmdE.Parameters.AddWithValue("@MANF_ITEM_NAME", objMSMELineOfManfGrid2DETAILSBO.Item);
                                        cmdE.Parameters.AddWithValue("@MANF_QUANTITY_PER_ANNUM", objMSMELineOfManfGrid2DETAILSBO.QuantityPerAnnum);
                                        cmdE.Parameters.AddWithValue("@MANF_PRODUCTIONS_IN", objMSMELineOfManfGrid2DETAILSBO.ProductionInUnits);
                                        cmdE.Parameters.AddWithValue("@MANF_PRODUCTION_OTHERS", objMSMELineOfManfGrid2DETAILSBO.ManufOtherUnits);
                                        cmdE.Parameters.AddWithValue("@MANF_UNIT_PHOTO", objMSMELineOfManfGrid2DETAILSBO.Attachment);
                                        cmdE.Parameters.AddWithValue("@CREATED_BY", objMSMELineOfManfGrid2DETAILSBO.CreatedBy);
                                        cmdE.Parameters.AddWithValue("@OthersSpecify", objMSMELineOfManfGrid2DETAILSBO.OthersSpecify);
                                        result = cmdE.ExecuteNonQuery();
                                    }
                                }

                            }
                        }

                    }
                    result = 1;
                }
                con.Close();
            }
        }
        catch (Exception ex)
        {
            //General.LogerrorDB(ex, "DB");
            //result = "Fail";
            throw ex;
        }
        return result;
    }

    public DataSet GetTypeOfIncentives()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_TypeOfIncentive", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    public DataSet GetIncentives_Release_Proceedings_UnitName_search(String SLCNo, String Dist, String UnitName, String Investmentid, String Cast)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GetIncentives_Release_Proceedings_UnitName_search]", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@SlcNo", SqlDbType.VarChar).Value = SLCNo;
            da.SelectCommand.Parameters.Add("@Distid", SqlDbType.VarChar).Value = Dist;
            da.SelectCommand.Parameters.Add("@UnitName", SqlDbType.VarChar).Value = UnitName;
            da.SelectCommand.Parameters.Add("@Incentivetype", SqlDbType.VarChar).Value = Investmentid;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // get release proceeding numbers list
    public DataSet GetReleaseProceedingNosList()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_RELEASE_PROCEEDING_NOS_LIST", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetReleaseProceedingNosListDIPC()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_RELEASE_PROCEEDING_NOS_LIST_DIPC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // added on 09.11.2017  for 2nd time applying incentives 

    public DataSet GetApplicantIncentivesHistory(string UserID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("[USP_GET_APPLICANT_INCENTIVES_HISTORY]", con.GetConnection);

            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@UserID", SqlDbType.VarChar).Value = UserID;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApplicantIncentiveDashBoardNEW(string EnterpreneurId, string incentid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_APPLICANT_INCENTIVES_DASHBOARD_2ndTime_NEW", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@ENTERPRENEURID", SqlDbType.VarChar).Value = EnterpreneurId.ToString();   // createdby
            da.SelectCommand.Parameters.Add("@INCENTIVEID", SqlDbType.VarChar).Value = incentid.ToString();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }


    // working status updated list reprint methods  on 16.12.2017
    public DataSet GetReleaseProceedingNosListRePrint(string distid, string DIPCFlag, string UCSTATUS)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_RELEASE_PROCEEDING_NOS_LIST_REPRINT", con.GetConnection);

            if (distid != null && distid != "")
            {
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = null;
            }

            if (DIPCFlag != null && DIPCFlag != "")
            {
                da.SelectCommand.Parameters.Add("@DIPCflag", SqlDbType.VarChar).Value = DIPCFlag;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DIPCflag", SqlDbType.VarChar).Value = null;
            }
            if (UCSTATUS != null && UCSTATUS != "")
            {
                da.SelectCommand.Parameters.Add("@UCSTATUS", SqlDbType.VarChar).Value = UCSTATUS;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UCSTATUS", SqlDbType.VarChar).Value = null;
            }
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    // added on 27.03.2018
    public DataSet GetReleaseProceedingNosListDIST(string distid, string DIPCFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_RELEASE_PROCEEDING_NOS_LIST_DIST", con.GetConnection);
            da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid;

            if (DIPCFlag != null && DIPCFlag != "")
            {
                da.SelectCommand.Parameters.Add("@DIPCflag", SqlDbType.VarChar).Value = DIPCFlag;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DIPCflag", SqlDbType.VarChar).Value = null;
            }

            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //

    public DataSet getincentiveslclistWorkigngListcheckReprint(string date, string DIPCFlag, string fromdate, string todate, string distid, string UCSTATUS, string WORKINGSTATUS)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_LIST_INCENTIVEWISE_WORKING_ABSTRACT_PRINTEDDATE_Working_REPRINT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@date", SqlDbType.VarChar).Value = date;
            if (DIPCFlag != null && DIPCFlag != "")
            {
                da.SelectCommand.Parameters.Add("@DIPCflag", SqlDbType.VarChar).Value = DIPCFlag;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@DIPCflag", SqlDbType.VarChar).Value = null;
            }

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate;
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate;

            if (distid != null && distid != "")
            {
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = null;
            }
            if (UCSTATUS != null && UCSTATUS != "")
            {
                da.SelectCommand.Parameters.Add("@UCSTATUS", SqlDbType.VarChar).Value = UCSTATUS;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UCSTATUS", SqlDbType.VarChar).Value = null;
            }

            da.SelectCommand.Parameters.Add("@WORKINGSTATUS", SqlDbType.VarChar).Value = WORKINGSTATUS;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet getReleaseProceedingsCheckListprintRePrint(string Cast, string IncetiveID, string date, string SubInctypeid, string fromdate, string todate, string distid, string DIPCFlag, string UCSTATUS, string WORKINGSTATUS)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_UNIT_INCENTIVEWISE_CheckLIst_REPRINT", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.SelectCommand.Parameters.Add("@IncentiveTypID", SqlDbType.VarChar).Value = IncetiveID;
            da.SelectCommand.Parameters.Add("@Cast", SqlDbType.VarChar).Value = Cast;
            da.SelectCommand.Parameters.Add("@date", SqlDbType.VarChar).Value = date;
            da.SelectCommand.Parameters.Add("@SubInctypeid", SqlDbType.VarChar).Value = SubInctypeid;

            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate;
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate;

            if (distid != null && distid != "")
            {
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = distid;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@distid", SqlDbType.VarChar).Value = null;
            }
            da.SelectCommand.Parameters.Add("@DIPCFlag", SqlDbType.VarChar).Value = DIPCFlag;

            if (UCSTATUS != null && UCSTATUS != "")
            {
                da.SelectCommand.Parameters.Add("@UCSTATUS", SqlDbType.VarChar).Value = UCSTATUS;
            }
            else
            {
                da.SelectCommand.Parameters.Add("@UCSTATUS", SqlDbType.VarChar).Value = null;
            }

            da.SelectCommand.Parameters.Add("@WORKINGSTATUS", SqlDbType.VarChar).Value = WORKINGSTATUS;
            da.SelectCommand.CommandTimeout = 3600;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public int InsertincentiveOfficerCommentsGMQuery(List<officerRemarks> Ramarks, string IPAddress)
    {
        int valid = 0;

        foreach (officerRemarks Ramarksvo in Ramarks)
        {
            con.OpenConnection();
            SqlCommand cmd = new SqlCommand("USP_INSERT_IncentiveOfficerRemarks_GMQUERY", con.GetConnection);
            cmd.CommandType = CommandType.StoredProcedure;
            try
            {
                cmd.Parameters.AddWithValue("@EnterperIncentiveID", Convert.ToString(Ramarksvo.EnterperIncentiveID));
                cmd.Parameters.AddWithValue("@MstIncentiveId", Convert.ToString(Ramarksvo.MstIncentiveId));
                cmd.Parameters.AddWithValue("@Remarks", Convert.ToString(Ramarksvo.Remarks));
                cmd.Parameters.AddWithValue("@CreatedByid", Convert.ToString(Ramarksvo.CreatedByid));
                cmd.Parameters.AddWithValue("@id", Convert.ToString(Ramarksvo.id));
                cmd.Parameters.AddWithValue("@GmResponce", Convert.ToString(Ramarksvo.Responce));
                cmd.Parameters.AddWithValue("@IPAddress", SqlDbType.VarChar).Value = IPAddress.Trim();
                cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                valid = (Int32)cmd.Parameters["@Valid"].Value;
                con.CloseConnection();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                cmd.Dispose();
                con.CloseConnection();
            }
        }

        return valid;
    }




    // for inspection report common

    public int bulkInsertEnergyIORpt(DataTable dt, string incentiveId)
    {
        con.OpenConnection();
        int i = 0;
        try
        {
            foreach (DataRow row in dt.Rows)
            {
                row["IncentiveId"] = incentiveId;
            }

            SqlBulkCopy bulkCopy = new SqlBulkCopy(con.GetConnection);
            SqlBulkCopyColumnMapping mapping1 = new SqlBulkCopyColumnMapping("FinancialYearId", "finyear");
            SqlBulkCopyColumnMapping mapping2 = new SqlBulkCopyColumnMapping("Fin1stOr2ndHalfYear", "1stor2ndhalf");
            SqlBulkCopyColumnMapping mapping3 = new SqlBulkCopyColumnMapping("incentiveid", "incentiveid");
            SqlBulkCopyColumnMapping mapping4 = new SqlBulkCopyColumnMapping("mstincentiveid", "mstincentiveid");
            SqlBulkCopyColumnMapping mapping5 = new SqlBulkCopyColumnMapping("Created_by", "createdby");

            //  SqlBulkCopyColumnMapping mapping6 = new SqlBulkCopyColumnMapping("Y", "Active");

            bulkCopy.ColumnMappings.Add(mapping1);
            bulkCopy.ColumnMappings.Add(mapping2);
            bulkCopy.ColumnMappings.Add(mapping3);
            bulkCopy.ColumnMappings.Add(mapping4);
            bulkCopy.ColumnMappings.Add(mapping5);
            //  bulkCopy.ColumnMappings.Add(mapping6);

            bulkCopy.DestinationTableName = ("tbl_Incentive_insprpt_financialyears");
            bulkCopy.WriteToServer(dt);
            i = 1;
        }
        catch (Exception ex)
        {
            throw ex;
            i = 0;
        }
        finally
        {
            con.CloseConnection();
        }
        return i;
    }

    //added on 28.02.2018  for SMS & email alert to applicant at the time of SLC/DLC sanctioned (approved in SLC/DLC)
    public DataSet GetIntimationLetterDtls(string incentiveID, string masterincentiveid, string userid)
    {
        DB.DB con = new DB.DB();
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_INTIMATIONLETTER_DTLS", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            if (incentiveID.ToString() != "" || incentiveID.ToString() != null)
            {
                da.SelectCommand.Parameters.Add("@incentveID", SqlDbType.VarChar).Value = incentiveID;
                da.SelectCommand.Parameters.Add("@MasterIncentiveType", SqlDbType.VarChar).Value = masterincentiveid;
                da.SelectCommand.Parameters.Add("@userid", SqlDbType.VarChar).Value = userid;
            }

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    public int insertWaltaApplicationDetails(WaltaApplDetails OBJWaltaApplDetails)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "SP_INSERTWALTAApplicnDetails";

        if (OBJWaltaApplDetails.ApplicationType_IndusorAgri == "" || OBJWaltaApplDetails.ApplicationType_IndusorAgri == null)
            com.Parameters.Add("@ApplicationType_IndusorAgri", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ApplicationType_IndusorAgri", SqlDbType.VarChar).Value = OBJWaltaApplDetails.ApplicationType_IndusorAgri.Trim();

        if (OBJWaltaApplDetails.ApplicantName == "" || OBJWaltaApplDetails.ApplicantName == null || OBJWaltaApplDetails.ApplicantName == "--Select--")
            com.Parameters.Add("@ApplicantName", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ApplicantName", SqlDbType.VarChar).Value = OBJWaltaApplDetails.ApplicantName.Trim();

        if (OBJWaltaApplDetails.DistrictID == "" || OBJWaltaApplDetails.DistrictID == null || OBJWaltaApplDetails.DistrictID == "--Select--")
            com.Parameters.Add("@DistrictID", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DistrictID", SqlDbType.VarChar).Value = OBJWaltaApplDetails.DistrictID.Trim();
        if (OBJWaltaApplDetails.MandalId == "" || OBJWaltaApplDetails.MandalId == null || OBJWaltaApplDetails.MandalId == "--Select--")
            com.Parameters.Add("@MandalId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@MandalId", SqlDbType.VarChar).Value = OBJWaltaApplDetails.MandalId.Trim();

        if (OBJWaltaApplDetails.VillageId == "" || OBJWaltaApplDetails.VillageId == null || OBJWaltaApplDetails.VillageId == "--Select--")
            com.Parameters.Add("@VillageId", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@VillageId", SqlDbType.VarChar).Value = OBJWaltaApplDetails.VillageId.Trim();

        if (OBJWaltaApplDetails.Street == "" || OBJWaltaApplDetails.Street == null || OBJWaltaApplDetails.Street == "--Select--")
            com.Parameters.Add("@Street", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Street", SqlDbType.VarChar).Value = OBJWaltaApplDetails.Street.Trim();

        if (OBJWaltaApplDetails.HouseNo == "" || OBJWaltaApplDetails.HouseNo == null || OBJWaltaApplDetails.HouseNo == "--Select--")
            com.Parameters.Add("@HouseNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@HouseNo", SqlDbType.VarChar).Value = OBJWaltaApplDetails.HouseNo.Trim();

        if (OBJWaltaApplDetails.LocationOfWell == "" || OBJWaltaApplDetails.LocationOfWell == null || OBJWaltaApplDetails.LocationOfWell == "--Select--")
            com.Parameters.Add("@LocationOfWell", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LocationOfWell", SqlDbType.VarChar).Value = OBJWaltaApplDetails.LocationOfWell.Trim();

        if (OBJWaltaApplDetails.TypeofWell == "" || OBJWaltaApplDetails.TypeofWell == null || OBJWaltaApplDetails.TypeofWell == "--Select--")
            com.Parameters.Add("@TypeofWell", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofWell", SqlDbType.VarChar).Value = OBJWaltaApplDetails.TypeofWell.Trim();

        if (OBJWaltaApplDetails.TypeOfDrwngWater == "" || OBJWaltaApplDetails.TypeOfDrwngWater == null || OBJWaltaApplDetails.TypeOfDrwngWater == "--Select--")
            com.Parameters.Add("@TypeOfDrwngWater", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeOfDrwngWater", SqlDbType.VarChar).Value = OBJWaltaApplDetails.TypeOfDrwngWater.Trim();

        if (OBJWaltaApplDetails.SpecifactioncnOFPump == "" || OBJWaltaApplDetails.SpecifactioncnOFPump == null || OBJWaltaApplDetails.SpecifactioncnOFPump == "--Select--")
            com.Parameters.Add("@SpecifactioncnOFPump", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@SpecifactioncnOFPump", SqlDbType.VarChar).Value = OBJWaltaApplDetails.SpecifactioncnOFPump.Trim();

        if (OBJWaltaApplDetails.DistanceFromExistWell == "" || OBJWaltaApplDetails.DistanceFromExistWell == null || OBJWaltaApplDetails.DistanceFromExistWell == "--Select--")
            com.Parameters.Add("@DistanceFromExistWell", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@DistanceFromExistWell", SqlDbType.VarChar).Value = OBJWaltaApplDetails.DistanceFromExistWell.Trim();


        if (OBJWaltaApplDetails.ChkAcceptence == "" || OBJWaltaApplDetails.ChkAcceptence == null || OBJWaltaApplDetails.ChkAcceptence == "--Select--")
            com.Parameters.Add("@AccepFlag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AccepFlag", SqlDbType.VarChar).Value = OBJWaltaApplDetails.ChkAcceptence.Trim();

        if (OBJWaltaApplDetails.Createdby == "" || OBJWaltaApplDetails.Createdby == null || OBJWaltaApplDetails.Createdby == "--Select--")
            com.Parameters.Add("@Createdby", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Createdby", SqlDbType.VarChar).Value = OBJWaltaApplDetails.Createdby.Trim();


        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }


    //lavanya 31.10.2020 tourism event code

    public class FileResult
    {
        public FileResult()
        {
            Result = false;
            Message = "Exception Occured";
            FilePath = string.Empty;
            FileName = string.Empty;
            FileType = string.Empty;
        }
        public string FileType { get; set; }
        public bool Result { get; set; }
        public string Message { get; set; }
        public string FilePath { get; set; }
        public string FileName { get; set; }

    }
    public FileResult SaveFile(FileUpload fileUpload, string SubFolder, string sFileName)
    {
        FileResult objfileResult = new FileResult();
        try
        {
            string newPath = "";

            if (fileUpload.HasFile)
            {
                //  string sFileName = System.IO.Path.GetFileName(fileUpload.PostedFile.FileName);

                string[] fileType = fileUpload.PostedFile.FileName.Split('.');
                int i = fileType.Length;
                if (fileType[i - 1].ToUpper().Trim() == "PDF" || fileType[i - 1].ToUpper().Trim() == "DOC" || fileType[i - 1].ToUpper().Trim() == "JPG" || fileType[i - 1].ToUpper().Trim() == "XLS" || fileType[i - 1].ToUpper().Trim() == "XLSX" || fileType[i - 1].ToUpper().Trim() == "DOCX" || fileType[i - 1].ToUpper().Trim() == "ZIP" || fileType[i - 1].ToUpper().Trim() == "RAR" || fileType[i - 1].ToUpper().Trim() == "JPEG" || fileType[i - 1].ToUpper().Trim() == "PNG")
                {
                    //Create a new subfolder under the current active folder
                    string sFileDir = System.Configuration.ConfigurationManager.AppSettings["FilePathTourism"];
                    newPath = sFileDir + SubFolder;

                    // Create the subfolder
                    if (!Directory.Exists(newPath))

                        System.IO.Directory.CreateDirectory(newPath);
                    string FilePath = newPath + "\\" + sFileName + "." + fileType[i - 1].ToUpper().ToString();
                    fileUpload.PostedFile.SaveAs(FilePath);
                    if (File.Exists((FilePath)))
                    {
                        objfileResult.Result = true;
                        objfileResult.Message = "File Saved Successfully";
                        objfileResult.FilePath = FilePath;
                        objfileResult.FileName = Path.GetFileName(FilePath);
                        objfileResult.FileType = fileType[i - 1].ToUpper().ToString();
                    }
                    else
                    {
                        objfileResult.Message = "Failed to Save File";
                    }
                }
            }

        }
        catch (Exception ex)
        {
            objfileResult.Message = ex.Message;
        }
        return objfileResult;
    }
    public DataSet GetShowApprovalandFees_TourismEvent(string SerchVer,string applicationid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees_TourismEvents", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();

            if (applicationid.Trim() == "" || applicationid.Trim() == null)
                da.SelectCommand.Parameters.Add("@applicationid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@applicationid", SqlDbType.VarChar).Value = applicationid.ToString();

           
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowApprovalandFees_TravelAgent(string SerchVer, string applicationid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees_travelAgent", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();

            if (applicationid.Trim() == "" || applicationid.Trim() == null)
                da.SelectCommand.Parameters.Add("@applicationid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@applicationid", SqlDbType.VarChar).Value = applicationid.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetTourismEventsTypeOfEventsMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_TourismEvents_TypeOfEvents_Master", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetTourismEventsFabricationMaterialMaster()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_TourismEvents_FabricationMaterial_Master", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public int UpdateUIDTourismEvent(string UID_no, string intQuessionaireid)
    {
        int valid = 0;

        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("UpdateUIDTourisamEvent", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@UID_no", UID_no);
            cmd.Parameters.AddWithValue("@intQuessionaireid", intQuessionaireid);

            cmd.ExecuteNonQuery();

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    public int UpdateUIDTravelAgent(string UID_no, string intQuessionaireid)
    {
        int valid = 0;

        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("UpdateUIDTravelAgent", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            cmd.Parameters.AddWithValue("@UID_no", UID_no);
            cmd.Parameters.AddWithValue("@intQuessionaireid", intQuessionaireid);

            cmd.ExecuteNonQuery();

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }

        return valid;
    }
    public DataSet GetTravelAgentConstitutionoftheAgency()
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_S_RegistrationofTravelAgent_ConstitutionoftheAgency_Master", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public Response InsertDraftQuestionnaireTourismPerformanceLicense(DraftQuestionnaireTourismPerformanceLicense obj, out int TourismEventID)
    {
        //int valid = 0;
        Response objRes = new Response();
        string resp = "";
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("usp_Insert_TourismEvents_PERFORMANCELICENSE", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            //  cmd.Parameters.AddWithValue("@TourismPerformanceLicenseID", obj.);
            cmd.Parameters.AddWithValue("@TypeofEventValue", Convert.ToString(obj.TypeofEventValue));
            cmd.Parameters.AddWithValue("@structureTypeValue", Convert.ToString(obj.structureTypeValue));
            cmd.Parameters.AddWithValue("@FabricationValue", Convert.ToString(obj.FabricationValue));
            cmd.Parameters.AddWithValue("@ExpectedstrengthValue", Convert.ToString(obj.ExpectedstrengthValue));
            cmd.Parameters.AddWithValue("EventManagement_Address", Convert.ToString(obj.EventManagement_Address));
            cmd.Parameters.AddWithValue("VIP_Visited", Convert.ToString(obj.VIP_Visited));
            cmd.Parameters.AddWithValue("VIP_Visited_Name", Convert.ToString(obj.VIP_Visited_Name));
            cmd.Parameters.AddWithValue("Foreigner_Expected", Convert.ToString(obj.Foreigner_Expected));
            cmd.Parameters.AddWithValue("Foreigner_Expected_Remarks", Convert.ToString(obj.Foreigner_Expected_Remarks));
            cmd.Parameters.AddWithValue("Exits_Width", Convert.ToString(obj.Exits_Width));
            cmd.Parameters.AddWithValue("NOofGangways", Convert.ToString(obj.NOofGangways));
            cmd.Parameters.AddWithValue("Police_NOC", Convert.ToString(obj.Police_NOC));
            cmd.Parameters.AddWithValue("ClassificationofEvent_Value", Convert.ToString(obj.ClassificationofEvent_Value));
            cmd.Parameters.AddWithValue("Location_Width", Convert.ToString(obj.Location_Width));

            cmd.Parameters.AddWithValue("@TypeofEvent", Convert.ToString(obj.TypeofEvent));
            cmd.Parameters.AddWithValue("@ClassificationofEvent", Convert.ToString(obj.ClassificationofEvent));
            cmd.Parameters.AddWithValue("@NameofTheApplicant", Convert.ToString(obj.NameofTheApplicant));
            cmd.Parameters.AddWithValue("@FatherName", Convert.ToString(obj.FatherName));
            cmd.Parameters.AddWithValue("@AadharNumber", Convert.ToString(obj.AadharNumber));
            cmd.Parameters.AddWithValue("@PanNumber", Convert.ToString(obj.PanNumber));
            cmd.Parameters.AddWithValue("@AddressWithContact", Convert.ToString(obj.AddressWithContact));
            cmd.Parameters.AddWithValue("@NameAddEventManagement", Convert.ToString(obj.NameAddEventManagement));
            cmd.Parameters.AddWithValue("@MobileNumber", Convert.ToString(obj.MobileNoApplicant));
            cmd.Parameters.AddWithValue("@Email", Convert.ToString(obj.Email));
            cmd.Parameters.AddWithValue("@GSTNumber", Convert.ToString(obj.GSTNumber));
            cmd.Parameters.AddWithValue("@NameLocPerformance", Convert.ToString(obj.NameLocPerformance));
            cmd.Parameters.AddWithValue("@structureType", Convert.ToString(obj.structureType));
            cmd.Parameters.AddWithValue("@NoofStalls", Convert.ToString(obj.NoofStalls));
            cmd.Parameters.AddWithValue("@Size", Convert.ToString(obj.Size));
            cmd.Parameters.AddWithValue("@Fabrication", Convert.ToString(obj.Fabrication));
            cmd.Parameters.AddWithValue("@clearspace", Convert.ToString(obj.clearspace));
            cmd.Parameters.AddWithValue("@TemporaryStructure", Convert.ToString(obj.TemporaryStructure));
            cmd.Parameters.AddWithValue("@WorkingtimingsFrm", Convert.ToString(obj.WorkingtimingsFrm));
            cmd.Parameters.AddWithValue("@WorkingtimingsTo", Convert.ToString(obj.WorkingtimingsTo));
            cmd.Parameters.AddWithValue("@Performancetimingsfrm", Convert.ToString(obj.Performancetimingsfrm));
            cmd.Parameters.AddWithValue("@PerformancetimingsTo", Convert.ToString(obj.PerformancetimingsTo));
            cmd.Parameters.AddWithValue("@StartDate", Convert.ToDateTime(obj.StartDate));
            cmd.Parameters.AddWithValue("@EndDate", Convert.ToDateTime(obj.EndDate));
            cmd.Parameters.AddWithValue("@Expectedstrength", Convert.ToString(obj.Expectedstrength));
            cmd.Parameters.AddWithValue("@ProductRelated", Convert.ToString(obj.ProductRelated));
            cmd.Parameters.AddWithValue("@FoodBeverages", Convert.ToString(obj.FoodBeverages));
            cmd.Parameters.AddWithValue("@GamesEntertainment", Convert.ToString(obj.GamesEntertainment));
            cmd.Parameters.AddWithValue("@Others", Convert.ToString(obj.Others));
            cmd.Parameters.AddWithValue("@FreeEntryInvitation", Convert.ToString(obj.FreeEntryInvitation));
            cmd.Parameters.AddWithValue("@FreeEntryWithoutInvitation", Convert.ToString(obj.FreeEntryWithoutInvitation));
            cmd.Parameters.AddWithValue("@TicketShow", Convert.ToString(obj.TicketShow));
            cmd.Parameters.AddWithValue("@TicketShowDetails", Convert.ToString(obj.TicketShowDetails));
            cmd.Parameters.AddWithValue("@AdultTicket", Convert.ToString(obj.AdultTicket));
            cmd.Parameters.AddWithValue("@ChildrensTicket", Convert.ToString(obj.ChildrensTicket));
            cmd.Parameters.AddWithValue("@NoOfTicketCounters", Convert.ToString(obj.NoOfTicketCounters));
            cmd.Parameters.AddWithValue("@ParkingSpace", Convert.ToString(obj.ParkingSpace));
            cmd.Parameters.AddWithValue("@NoOfSecurityVehicleChecking", Convert.ToString(obj.NoOfSecurityVehicleChecking));
            cmd.Parameters.AddWithValue("@SecurityArrangements", Convert.ToString(obj.SecurityArrangements));
            cmd.Parameters.AddWithValue("@ProposedNoOfCCTV", Convert.ToString(obj.ProposedNoOfCCTV));
            cmd.Parameters.AddWithValue("@ProposedNoOfDFMD", Convert.ToString(obj.ProposedNoOfDFMD));
            cmd.Parameters.AddWithValue("@NoOfSecurityAndVolunteers", Convert.ToString(obj.NoOfSecurityAndVolunteers));
            cmd.Parameters.AddWithValue("@NoOfExitsWithWidth", Convert.ToString(obj.NoOfExitsWithWidth));
            cmd.Parameters.AddWithValue("@WidthOfGangways", Convert.ToString(obj.WidthOfGangways));
            cmd.Parameters.AddWithValue("@CO2Cylinders", Convert.ToString(obj.CO2Cylinders));
            cmd.Parameters.AddWithValue("@FoamCylinders", Convert.ToString(obj.FoamCylinders));
            cmd.Parameters.AddWithValue("@NoOfBuckets", Convert.ToString(obj.NoOfBuckets));
            cmd.Parameters.AddWithValue("@NoOfWaterStorageTanks", Convert.ToString(obj.NoOfWaterStorageTanks));
            cmd.Parameters.AddWithValue("@NoOfSandBags", Convert.ToString(obj.NoOfSandBags));
            cmd.Parameters.AddWithValue("@StandbyFireService", Convert.ToString(obj.StandbyFireService));
            cmd.Parameters.AddWithValue("@FirstAidFacility", Convert.ToString(obj.FirstAidFacility));
            cmd.Parameters.AddWithValue("@MedicalAttender", Convert.ToString(obj.MedicalAttender));
            cmd.Parameters.AddWithValue("@SatndbyAmbulanceFacility", Convert.ToString(obj.SatndbyAmbulanceFacility));

            cmd.Parameters.AddWithValue("@District", Convert.ToString(obj.District));
            cmd.Parameters.AddWithValue("@MANDAL", Convert.ToString(obj.Mandal));
            cmd.Parameters.AddWithValue("@Village", Convert.ToString(obj.Village));
            cmd.Parameters.AddWithValue("@PINCODE", Convert.ToString(obj.Pincode));

            cmd.Parameters.AddWithValue("@District_Company", Convert.ToString(obj.CompanyDistrict));
            cmd.Parameters.AddWithValue("@Mandal_Company", Convert.ToString(obj.CompanyMandal));
            cmd.Parameters.AddWithValue("@Village_Company", Convert.ToString(obj.CompanyVillage));
            cmd.Parameters.AddWithValue("@PINCODE_Company", Convert.ToString(obj.CompanyPincode));

            cmd.Parameters.AddWithValue("@VehicleStandByCategory", Convert.ToString(obj.VehicleStandByCategoryMaster));

            cmd.Parameters.AddWithValue("@CreatedBy", Convert.ToInt32(obj.CreatedBy));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
            cmd.ExecuteNonQuery();
            TourismEventID = (Int32)cmd.Parameters["@Valid"].Value;

            if (TourismEventID > 0)
                objRes.ResponseVal = true;
            else
                objRes.ResponseVal = false;
            //if (obj.FileUploadPaths != null)
            //{
            //    if (obj.FileUploadPaths.Rows.Count > 0)
            //    {

            //        try
            //        {
            //            for (int i = 0; i < obj.FileUploadPaths.Rows.Count; i++)
            //            {
            //                SqlCommand cmdFiles = new SqlCommand("usp_Insert_TourismEvent_attachments", con.GetConnection);
            //                cmdFiles.CommandType = CommandType.StoredProcedure;

            //                cmdFiles.Parameters.AddWithValue("@TourismEvent_ID", Convert.ToInt32(valid));
            //                cmdFiles.Parameters.AddWithValue("@FileType", Convert.ToString(obj.FileUploadPaths.Rows[i]["FileType"].ToString()));
            //                cmdFiles.Parameters.AddWithValue("@FilePath", Convert.ToString(obj.FileUploadPaths.Rows[i]["FilePath"].ToString()));
            //                cmdFiles.Parameters.AddWithValue("@FileName", Convert.ToString(obj.FileUploadPaths.Rows[i]["UploadFileName"].ToString()));
            //                cmdFiles.Parameters.AddWithValue("@FileDescription", Convert.ToString(obj.FileUploadPaths.Rows[i]["DocumentName"].ToString()));
            //                cmdFiles.Parameters.AddWithValue("@Created_by", Convert.ToInt32(obj.CreatedBy));
            //                cmdFiles.ExecuteNonQuery();
            //                resp = "Success";
            //                objRes.ResponseVal = true;
            //                objRes.Reason = Convert.ToString(valid);
            //            }
            //        }
            //        catch (Exception ex)
            //        {
            //            objRes.ResponseVal = false;
            //        }
            //    }
            //}

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }


        return objRes;
    }
    //commented by rajinikar
    //public Response InsertDraftQuestionnaireTravelAgent(DraftQuestionnaireTravelAgent obj)
    //{
    //    Response objRes = new Response();
    //    int valid = 0;
    //    //   Response objRes = new Response();
    //    string resp = "";
    //    con.OpenConnection();
    //    SqlCommand cmd = new SqlCommand("USP_I_RegistrationofTravelAgent", con.GetConnection);
    //    cmd.CommandType = CommandType.StoredProcedure;
    //    try
    //    {
    //        //  cmd.Parameters.AddWithValue("@TourismPerformanceLicenseID", obj.);
    //        cmd.Parameters.AddWithValue("@NameoftheAgency", Convert.ToString(obj.NameoftheAgency));
    //        cmd.Parameters.AddWithValue("@NameoftheOwner", Convert.ToString(obj.NameoftheOwner));
    //        cmd.Parameters.AddWithValue("@MobileNo", Convert.ToString(obj.MobileNo));
    //        cmd.Parameters.AddWithValue("@EmailID", Convert.ToString(obj.EmailID));
    //        cmd.Parameters.AddWithValue("@AadhaarNo", Convert.ToString(obj.AadhaarNo));
    //        cmd.Parameters.AddWithValue("@Appliedfor", Convert.ToString(obj.Appliedfor));
    //        cmd.Parameters.AddWithValue("@Agencyarrangementsoftickets", Convert.ToString(obj.Agencyarrangementsoftickets));
    //        cmd.Parameters.AddWithValue("@Agencyarrangementstransport", Convert.ToString(obj.Agencyarrangementstransport));
    //        cmd.Parameters.AddWithValue("@AgencyAdventureTourism", Convert.ToString(obj.AgencyAdventureTourism));
    //        cmd.Parameters.AddWithValue("@Agencyprovidingtouristtransport", Convert.ToString(obj.Agencyprovidingtouristtransport));
    //        cmd.Parameters.AddWithValue("@Applyingfor", Convert.ToString(obj.Applyingfor));
    //        cmd.Parameters.AddWithValue("@DateofCommencementoftheBusiness", Convert.ToDateTime(obj.DateofCommencementoftheBusiness));
    //        cmd.Parameters.AddWithValue("@ConstitutionoftheAgency", Convert.ToString(obj.ConstitutionoftheAgency));
    //        cmd.Parameters.AddWithValue("@Whetherthepremisesis", Convert.ToString(obj.Whetherthepremisesis));
    //        cmd.Parameters.AddWithValue("@OfficeSpace", Convert.ToString(obj.OfficeSpace));
    //        cmd.Parameters.AddWithValue("@ReceptionArea", Convert.ToString(obj.ReceptionArea));
    //        cmd.Parameters.AddWithValue("@LocationArea", Convert.ToString(obj.LocationArea));
    //        cmd.Parameters.AddWithValue("@Address", Convert.ToString(obj.Address));
    //        cmd.Parameters.AddWithValue("@District", Convert.ToString(obj.District));
    //        cmd.Parameters.AddWithValue("@PINCode", Convert.ToString(obj.PINCode));
    //        cmd.Parameters.AddWithValue("@PhoneNo", Convert.ToString(obj.PhoneNo));
    //        cmd.Parameters.AddWithValue("@FAXNo", Convert.ToString(obj.FAXNo));
    //        cmd.Parameters.AddWithValue("@MobileNoOffice", Convert.ToString(obj.MobileNoOffice));
    //        cmd.Parameters.AddWithValue("@EmailIDOffice", Convert.ToString(obj.EmailIDOffice));
    //        cmd.Parameters.AddWithValue("@Website", Convert.ToString(obj.Website));
    //        cmd.Parameters.AddWithValue("@NoofqualifiedStaff", Convert.ToString(obj.NoofqualifiedStaff));
    //        cmd.Parameters.AddWithValue("@NoofexperiencedStaff", Convert.ToString(obj.NoofexperiencedStaff));
    //        cmd.Parameters.AddWithValue("@TotalNoofStaffEmployed", Convert.ToString(obj.TotalNoofStaffEmployed));
    //        cmd.Parameters.AddWithValue("@Paidupcapital", Convert.ToString(obj.Paidupcapital));
    //        cmd.Parameters.AddWithValue("@PreviousTurnover", Convert.ToString(obj.PreviousTurnover));
    //        cmd.Parameters.AddWithValue("@PANNoFinancial", Convert.ToString(obj.PANNoFinancial));
    //        cmd.Parameters.AddWithValue("@PreviousYearITReturns", Convert.ToString(obj.PreviousYearITReturns));
    //        cmd.Parameters.AddWithValue("@GSTNoFinancial", Convert.ToString(obj.GSTNoFinancial));
    //        cmd.Parameters.AddWithValue("@BankAccountDetails", Convert.ToString(obj.BankAccountDetails));
    //        cmd.Parameters.AddWithValue("@EnclosereferenceletterfromBank", Convert.ToString(obj.EnclosereferenceletterfromBank));
    //        cmd.Parameters.AddWithValue("@DoyourequireTradeLicense", Convert.ToString(obj.DoyourequireTradeLicense));
    //        cmd.Parameters.AddWithValue("@DoyourequireShopsEstablishmentLicense", Convert.ToString(obj.DoyourequireShopsEstablishmentLicense));
    //        cmd.Parameters.AddWithValue("@WhetherregisteredwithanyTourismDepartment", Convert.ToString(obj.WhetherregisteredwithanyTourismDepartment));
    //        cmd.Parameters.AddWithValue("@NoofTouristVehicles", Convert.ToString(obj.NoofTouristVehicles));
    //        cmd.Parameters.AddWithValue("@CreatedBy", Convert.ToInt32(obj.CreatedBy));
    //        cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
    //        cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
    //        cmd.ExecuteNonQuery();
    //        valid = (Int32)cmd.Parameters["@Valid"].Value;

    //        if (obj.FileUploadPaths != null)
    //        {
    //            if (obj.FileUploadPaths.Rows.Count > 0)
    //            {

    //                try
    //                {
    //                    for (int i = 0; i < obj.FileUploadPaths.Rows.Count; i++)
    //                    {
    //                        SqlCommand cmdFiles = new SqlCommand("usp_Insert_TravelAgent_attachments", con.GetConnection);
    //                        cmdFiles.CommandType = CommandType.StoredProcedure;

    //                        cmdFiles.Parameters.AddWithValue("@TravelAgent_ID", Convert.ToInt32(valid));
    //                        cmdFiles.Parameters.AddWithValue("@FileType", Convert.ToString(obj.FileUploadPaths.Rows[i]["FileType"].ToString()));
    //                        cmdFiles.Parameters.AddWithValue("@FilePath", Convert.ToString(obj.FileUploadPaths.Rows[i]["FilePath"].ToString()));
    //                        cmdFiles.Parameters.AddWithValue("@FileName", Convert.ToString(obj.FileUploadPaths.Rows[i]["UploadFileName"].ToString()));
    //                        cmdFiles.Parameters.AddWithValue("@FileDescription", Convert.ToString(obj.FileUploadPaths.Rows[i]["DocumentName"].ToString()));
    //                        cmdFiles.Parameters.AddWithValue("@Created_by", Convert.ToInt32(obj.CreatedBy));
    //                        cmdFiles.ExecuteNonQuery();
    //                        resp = "Success";

    //                        //objRes.ResponseVal = true;
    //                        //objRes.Reason = Convert.ToString(valid);
    //                        objRes.ResponseVal = true;
    //                        objRes.Reason = Convert.ToString(valid);
    //                    }
    //                }
    //                catch (Exception ex)
    //                {
    //                    objRes.ResponseVal = false;
    //                }
    //            }
    //        }

    //        con.CloseConnection();
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        cmd.Dispose();
    //        con.CloseConnection();
    //    }


    //    return objRes;
    //}
    public Response InsertDraftQuestionnaireTravelAgent(DraftQuestionnaireTravelAgent obj, out int TravelAgentID)
    {
        Response objRes = new Response();
        int valid = 0;
        //   Response objRes = new Response();
        string resp = "";
        con.OpenConnection();
        SqlCommand cmd = new SqlCommand("USP_I_RegistrationofTravelAgent", con.GetConnection);
        cmd.CommandType = CommandType.StoredProcedure;
        try
        {
            //  cmd.Parameters.AddWithValue("@TourismPerformanceLicenseID", obj.);
            cmd.Parameters.AddWithValue("@NameoftheAgency", Convert.ToString(obj.NameoftheAgency));
            cmd.Parameters.AddWithValue("@NameoftheOwner", Convert.ToString(obj.NameoftheOwner));
            cmd.Parameters.AddWithValue("@MobileNo", Convert.ToString(obj.MobileNo));
            cmd.Parameters.AddWithValue("@EmailID", Convert.ToString(obj.EmailID));
            cmd.Parameters.AddWithValue("@AadhaarNo", Convert.ToString(obj.AadhaarNo));
            cmd.Parameters.AddWithValue("@Appliedfor", Convert.ToString(obj.Appliedfor));
            cmd.Parameters.AddWithValue("@Agencyarrangementsoftickets", Convert.ToString(obj.Agencyarrangementsoftickets));
            cmd.Parameters.AddWithValue("@Agencyarrangementstransport", Convert.ToString(obj.Agencyarrangementstransport));
            cmd.Parameters.AddWithValue("@AgencyAdventureTourism", Convert.ToString(obj.AgencyAdventureTourism));
            cmd.Parameters.AddWithValue("@Agencyprovidingtouristtransport", Convert.ToString(obj.Agencyprovidingtouristtransport));
            cmd.Parameters.AddWithValue("@Applyingfor", Convert.ToString(obj.Applyingfor));
            cmd.Parameters.AddWithValue("@DateofCommencementoftheBusiness", Convert.ToDateTime(obj.DateofCommencementoftheBusiness));
            cmd.Parameters.AddWithValue("@ConstitutionoftheAgency", Convert.ToString(obj.ConstitutionoftheAgency));
            cmd.Parameters.AddWithValue("@Whetherthepremisesis", Convert.ToString(obj.Whetherthepremisesis));
            cmd.Parameters.AddWithValue("@OfficeSpace", Convert.ToString(obj.OfficeSpace));
            cmd.Parameters.AddWithValue("@ReceptionArea", Convert.ToString(obj.ReceptionArea));
            cmd.Parameters.AddWithValue("@LocationArea", Convert.ToString(obj.LocationArea));
            cmd.Parameters.AddWithValue("@Address", Convert.ToString(obj.Address));
            cmd.Parameters.AddWithValue("@District", Convert.ToString(obj.District));

            cmd.Parameters.AddWithValue("@Mandal", Convert.ToString(obj.Mandal));
            cmd.Parameters.AddWithValue("@Village", Convert.ToString(obj.Village));

            cmd.Parameters.AddWithValue("@PINCode", Convert.ToString(obj.PINCode));
            cmd.Parameters.AddWithValue("@PhoneNo", Convert.ToString(obj.PhoneNo));
            cmd.Parameters.AddWithValue("@FAXNo", Convert.ToString(obj.FAXNo));
            cmd.Parameters.AddWithValue("@MobileNoOffice", Convert.ToString(obj.MobileNoOffice));
            cmd.Parameters.AddWithValue("@EmailIDOffice", Convert.ToString(obj.EmailIDOffice));
            cmd.Parameters.AddWithValue("@Website", Convert.ToString(obj.Website));
            cmd.Parameters.AddWithValue("@NoofqualifiedStaff", Convert.ToString(obj.NoofqualifiedStaff));
            cmd.Parameters.AddWithValue("@NoofexperiencedStaff", Convert.ToString(obj.NoofexperiencedStaff));
            cmd.Parameters.AddWithValue("@TotalNoofStaffEmployed", Convert.ToString(obj.TotalNoofStaffEmployed));
            cmd.Parameters.AddWithValue("@Paidupcapital", Convert.ToString(obj.Paidupcapital));
            cmd.Parameters.AddWithValue("@PreviousTurnover", Convert.ToString(obj.PreviousTurnover));
            cmd.Parameters.AddWithValue("@PANNoFinancial", Convert.ToString(obj.PANNoFinancial));
            cmd.Parameters.AddWithValue("@PreviousYearITReturns", Convert.ToString(obj.PreviousYearITReturns));
            cmd.Parameters.AddWithValue("@GSTNoFinancial", Convert.ToString(obj.GSTNoFinancial));
            cmd.Parameters.AddWithValue("@BankAccountDetails", Convert.ToString(obj.BankAccountDetails));

            cmd.Parameters.AddWithValue("@Branchname", Convert.ToString(obj.Branchname));
            cmd.Parameters.AddWithValue("@Accountnumber", Convert.ToString(obj.Accountnumber));
            cmd.Parameters.AddWithValue("@IFSCcode", Convert.ToString(obj.IFSC));
            cmd.Parameters.AddWithValue("@MICRcode", Convert.ToString(obj.MICR));

            cmd.Parameters.AddWithValue("@EnclosereferenceletterfromBank", Convert.ToString(obj.EnclosereferenceletterfromBank));
            cmd.Parameters.AddWithValue("@DoyourequireTradeLicense", Convert.ToString(obj.DoyourequireTradeLicense));
            cmd.Parameters.AddWithValue("@DoyourequireShopsEstablishmentLicense", Convert.ToString(obj.DoyourequireShopsEstablishmentLicense));
            cmd.Parameters.AddWithValue("@WhetherregisteredwithanyTourismDepartment", Convert.ToString(obj.WhetherregisteredwithanyTourismDepartment));
            cmd.Parameters.AddWithValue("@NoofTouristVehicles", Convert.ToString(obj.NoofTouristVehicles));
            cmd.Parameters.AddWithValue("@CreatedBy", Convert.ToInt32(obj.CreatedBy));
            cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
            cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;

            cmd.ExecuteNonQuery();
            TravelAgentID = (Int32)cmd.Parameters["@Valid"].Value;

            if (TravelAgentID > 0)
                objRes.ResponseVal = true;
            else
                objRes.ResponseVal = false;
            valid = (Int32)cmd.Parameters["@Valid"].Value;

            //if (obj.FileUploadPaths != null)
            //{
            //    if (obj.FileUploadPaths.Rows.Count > 0)
            //    {
            //        try
            //        {
            //            for (int i = 0; i < obj.FileUploadPaths.Rows.Count; i++)
            //            {
            //                SqlCommand cmdFiles = new SqlCommand("usp_Insert_TravelAgent_attachments", con.GetConnection);
            //                cmdFiles.CommandType = CommandType.StoredProcedure;

            //                cmdFiles.Parameters.AddWithValue("@TravelAgent_ID", Convert.ToInt32(valid));
            //                cmdFiles.Parameters.AddWithValue("@FileType", Convert.ToString(obj.FileUploadPaths.Rows[i]["FileType"].ToString()));
            //                cmdFiles.Parameters.AddWithValue("@FilePath", Convert.ToString(obj.FileUploadPaths.Rows[i]["FilePath"].ToString()));
            //                cmdFiles.Parameters.AddWithValue("@FileName", Convert.ToString(obj.FileUploadPaths.Rows[i]["UploadFileName"].ToString()));
            //                cmdFiles.Parameters.AddWithValue("@FileDescription", Convert.ToString(obj.FileUploadPaths.Rows[i]["DocumentName"].ToString()));
            //                cmdFiles.Parameters.AddWithValue("@Created_by", Convert.ToInt32(obj.CreatedBy));
            //                cmdFiles.ExecuteNonQuery();
            //                resp = "Success";

            //                //objRes.ResponseVal = true;
            //                //objRes.Reason = Convert.ToString(valid);
            //                objRes.ResponseVal = true;
            //                objRes.Reason = Convert.ToString(valid);
            //            }
            //        }
            //        catch (Exception ex)
            //        {
            //            objRes.ResponseVal = false;
            //        }
            //    }
            //}

            con.CloseConnection();
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            cmd.Dispose();
            con.CloseConnection();
        }


        return objRes;
    }
    public int insertDepartmentAprroval_TourismEvent(string intQuessionaireid, string intDeptid, string intApprovalid, string Approval_Fee, string IsPayment, string Created_by, string IsOffline)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insDepartmentApprovals_TourismEvent";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.Decimal).Value = Convert.ToDecimal(Approval_Fee.Trim());

        if (IsPayment == "" || IsPayment == null)
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (IsOffline == "" || IsOffline == null)
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();





        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public int InsertPaymentBillDesk_tourismEvent(string UidNo, string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string Created_by, string intApprovalid, string ApplType, string AdditionalPayment)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INSERT_Builldesc_PaymentDtls";

        if (UidNo.Trim() == "" || UidNo.Trim() == null)
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UidNo.Trim();
        }
        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Convert.ToDecimal(Online_Amount.Trim());


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }
        if (AdditionalPayment == "" || AdditionalPayment == null)
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = AdditionalPayment.Trim();

        com.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public int InsertPaymentBillDesk_TravelAgent(string UidNo, string intCFEEnterpid, string OnlineOrderNo, string intDeptid, string Online_Amount, string Created_by, string intApprovalid, string ApplType, string AdditionalPayment)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "USP_INSERT_Builldesc_PaymentDtls";

        if (UidNo.Trim() == "" || UidNo.Trim() == null)
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UidNo.Trim();
        }
        if (intCFEEnterpid == "" || intCFEEnterpid == null)
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intCFEEnterpid", SqlDbType.Int).Value = Int32.Parse(intCFEEnterpid.Trim());

        if (OnlineOrderNo == "" || OnlineOrderNo == null)
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = OnlineOrderNo.Trim();


        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.Int).Value = Int32.Parse(intDeptid.Trim());

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.Int).Value = Int32.Parse(intApprovalid.Trim());


        if (Online_Amount == "" || Online_Amount == null)
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Online_Amount", SqlDbType.VarChar).Value = Convert.ToDecimal(Online_Amount.Trim());


        if (Created_by.Trim() == "" || Created_by.Trim() == null)
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
        }
        if (AdditionalPayment == "" || AdditionalPayment == null)
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@AdditionalPayment", SqlDbType.VarChar).Value = AdditionalPayment.Trim();

        com.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.Trim();
        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public DataSet GetTourismpaymentDtls(string UID, string Orderno, string AdditionalPaymentflg)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_Builldesc_PaymentDtls_TourismEvent_DESE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UID.Trim();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = Orderno.Trim();
            da.SelectCommand.Parameters.Add("@AdditionalPaymentflg", SqlDbType.VarChar).Value = AdditionalPaymentflg.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetTravelAgentpaymentDtls(string UID, string Orderno, string AdditionalPaymentflg)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_Builldesc_PaymentDtls_TravelAgent_DESE", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@UIDNO", SqlDbType.VarChar).Value = UID.Trim();
            da.SelectCommand.Parameters.Add("@OnlineOrderNo", SqlDbType.VarChar).Value = Orderno.Trim();
            da.SelectCommand.Parameters.Add("@AdditionalPaymentflg", SqlDbType.VarChar).Value = AdditionalPaymentflg.Trim();
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet getTourisamEventdatabyQues(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getTourisamEventdatabyQues", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public DataSet getTravelAgentdatabyQues(string intQuessionaireid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("getTravelAgentdatabyQues", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (intQuessionaireid.Trim() == "" || intQuessionaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.ToString();



            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }
    public int insertDepartmentAprroval_TravelAgent(string intQuessionaireid, string intDeptid, string intApprovalid, string Approval_Fee, string IsPayment, string Created_by, string IsOffline)
    {

        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insDepartmentApprovals_TravelAgent";

        if (intQuessionaireid == "" || intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();

        if (intDeptid == "" || intDeptid == null)
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.Trim();

        if (intApprovalid == "" || intApprovalid == null)
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intApprovalid", SqlDbType.VarChar).Value = intApprovalid.Trim();

        if (Approval_Fee == "" || Approval_Fee == null)
            com.Parameters.Add("@Approval_Fee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Approval_Fee", SqlDbType.Decimal).Value = Convert.ToDecimal(Approval_Fee.Trim());

        if (IsPayment == "" || IsPayment == null)
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsPayment", SqlDbType.VarChar).Value = IsPayment;

        if (Created_by == "" || Created_by == null)
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (IsOffline == "" || IsOffline == null)
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IsOffline", SqlDbType.VarChar).Value = IsOffline.Trim();





        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }


    }
    public DataSet GetDepartmentDashboardDetailsTravelAgent(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        // if (intDeptid == "266")
        //  intDeptid = "11";
        try
        {
            if (intDeptid == "266")
            {
                da = new SqlDataAdapter("DispMAUDHMDA", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;
                da.Fill(ds);
                return ds;

                // if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                //  da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
                //  else
                //  da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            }

            else
            {
                da = new SqlDataAdapter("sp_GetDepartmentDashboardDetails_TravelAgent", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;

                if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
                else
                    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

                da.Fill(ds);
                return ds;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetDepartmentDashboardDetailsTourismEvent(string intDeptid)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        // if (intDeptid == "266")
        //  intDeptid = "11";
        try
        {
            if (intDeptid == "266")
            {
                da = new SqlDataAdapter("DispMAUDHMDA", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;
                da.Fill(ds);
                return ds;

                // if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                //  da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
                //  else
                //  da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();



            }

            else
            {
                da = new SqlDataAdapter("sp_GetDepartmentDashboardDetails_TourismEvent", con.GetConnection);
                da.SelectCommand.CommandType = CommandType.StoredProcedure;

                if (intDeptid.Trim() == "" || intDeptid.Trim() == null)
                    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = "%";
                else
                    da.SelectCommand.Parameters.Add("@intDeptid", SqlDbType.VarChar).Value = intDeptid.ToString();

                da.Fill(ds);
                return ds;
            }

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    //commented by rainikar 
    //public DataSet GetregtravelagentbytravelagentID(int TravelAgentID)
    //{
    //    con.OpenConnection();
    //    SqlDataAdapter da;
    //    DataSet ds = new DataSet();
    //    try
    //    {
    //        da = new SqlDataAdapter("tour_getregtravelagentbytravelagentID", con.GetConnection);
    //        da.SelectCommand.CommandType = CommandType.StoredProcedure;
    //        da.SelectCommand.Parameters.Add("@TravelAgentID", SqlDbType.Int).Value = TravelAgentID;
    //        da.Fill(ds);
    //        return ds;
    //    }
    //    catch (Exception ex)
    //    {
    //        throw ex;
    //    }
    //    finally
    //    {
    //        con.CloseConnection();
    //    }
    //}
    public DataSet GetregtravelagentbytravelagentID(int createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("tour_getregtravelagentbytravelagentID", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@createdby", SqlDbType.Int).Value = createdby;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetperformlicensebyTourismPerformanceLicenseID(int TourismPerformanceLicenseID)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("tour_getperformlicense", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@TourismPerformanceLicenseID", SqlDbType.Int).Value = TourismPerformanceLicenseID;
            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    // TOURISM EVENT AND TRAVEL AGENT END
    //tourism event code end

    //lavanya start 20.10.2020

    public DataSet GetShowApprovalandFeesHMDACLUandGHMCBuildingBoth_Hotel(string SerchVer, string EnterpriseType, string ApplType, string TotExtent, string TotHight, string HotelFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesHMDACLUandGHMCBuildingBoth", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (ApplType.Trim() == "" || ApplType.Trim() == null)
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.ToString();


            if (TotExtent.Trim() == "" || TotExtent.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.Decimal).Value = Convert.ToDecimal(TotExtent.ToString());



            if (TotHight.Trim() == "" || TotHight.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.Decimal).Value = Convert.ToDecimal(TotHight.ToString());
            da.SelectCommand.Parameters.Add("@HotelFlag", SqlDbType.VarChar).Value = HotelFlag;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    #region Developed By Rajesh Patnaik  //excavation depth added by lavanya on 27.10.2020
    public int InsertLandDetails(string number, string intQuessionaireid,
string intCFEEnterpid,
string Uid_No,
string Reg_Id,
string intProposedCateogryid,
string intApplicationTypeid,
string LocationNameIEIDA,
string IsSitePlaning,
string SurveyNo,
string Land_intDistrictid,
string Land_intMandalid,
string Land_intVillageid,
string Name_Gramapachayat,
string Land_Pincode,
string Land_Email,
string Land_TelephoneNumber,
string Land_TotExtent,
string Land_ProposedArea,
string Land_BuiltupArea,
string Land_Existingwidth,
string intTypeofApprochid,
string intLocationFalls,
string intBuildingApproval,
string intIndustryProduct,
string intCategoryid,
string FromZone,
string ToZone,
string GoogleMaptoUploadFile,
string GoogleMapFilePath,
string Geo_Cordinate_Latitude,
string Geo_Cordinate_Langitude,
string KMLFileName,
string KMLFilePath,
string Covered_revenueSketch,
string Covered_Adjoining,
string Plot_Number,
string Sanction_LayoutNo,
string Land_User_MasterPlan,
string Hight_Building,
string Affected_roadwinding,
string Geo_Cordinate_Latitude1,
string Geo_Cordinate_Langitude1,
string KMLFileName1,
string KMLFilePath1,
string Created_by,
string Created_dt,
string Modified_by,
string Modified_dt,
        string txtArchitectName, string txtArchitectLicenseno, string txtArchitectMobileno, string existingbuildup, string landaspermasterplan,
        string landmasterplanother, string typeofbuilding, string typeofbuildingother, string Affectedroadwinding, string roadwidening, string islandpartof,
        string structuralenglicno, string structuralengname, string structuralmobileno, string corporationname, string wardno, string PlotSubUse,
string NorthBoundary,
string SouthBoundary,
string WestBoundary,
string EastBoundary, string Excavation_Depth)
    {
        try
        {

            con.OpenConnection();
            SqlDataAdapter myDataAdapter;

            myDataAdapter = new SqlDataAdapter("sp_LandDetails", con.GetConnection);
            myDataAdapter.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (number.ToString().Trim() == "" || number.ToString().Trim() == null)
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = "0";
            else
                myDataAdapter.SelectCommand.Parameters.Add("@number", SqlDbType.VarChar).Value = number.Trim();

            //if (Applid.ToString().Trim() == "" || Applid.ToString().Trim() == null)
            //    com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = DBNull.Value;
            //else
            //    com.Parameters.Add("@Applid", SqlDbType.VarChar).Value = Applid.Trim();


            //-------------------------------------------------
            if (intQuessionaireid.ToString().Trim() == "" || intQuessionaireid.ToString().Trim() == null || intQuessionaireid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = intQuessionaireid.Trim();


            if (intCFEEnterpid.ToString().Trim() == "" || intCFEEnterpid.ToString().Trim() == null || intCFEEnterpid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intCFEEnterpid", SqlDbType.VarChar).Value = intCFEEnterpid.Trim();


            if (Uid_No.ToString().Trim() == "" || Uid_No.ToString().Trim() == null || Uid_No.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Uid_No", SqlDbType.VarChar).Value = Uid_No.Trim();

            if (Reg_Id.ToString().Trim() == "" || Reg_Id.ToString().Trim() == null || Reg_Id.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Reg_Id", SqlDbType.VarChar).Value = Reg_Id.Trim();

            if (intProposedCateogryid.ToString().Trim() == "" || intProposedCateogryid.ToString().Trim() == null || intProposedCateogryid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intProposedCateogryid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intProposedCateogryid", SqlDbType.VarChar).Value = intProposedCateogryid.Trim();

            if (intApplicationTypeid.ToString().Trim() == "" || intApplicationTypeid.ToString().Trim() == null || intApplicationTypeid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intApplicationTypeid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intApplicationTypeid", SqlDbType.VarChar).Value = intApplicationTypeid.Trim();

            if (LocationNameIEIDA.ToString().Trim() == "" || LocationNameIEIDA.ToString().Trim() == null || LocationNameIEIDA.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@LocationNameIEIDA", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@LocationNameIEIDA", SqlDbType.VarChar).Value = LocationNameIEIDA.Trim();

            if (IsSitePlaning == null || IsSitePlaning.ToString().Trim() == "" || IsSitePlaning.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@IsSitePlaning", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@IsSitePlaning", SqlDbType.VarChar).Value = IsSitePlaning.Trim();

            if (SurveyNo.ToString().Trim() == "" || SurveyNo.ToString().Trim() == null || SurveyNo.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@SurveyNo", SqlDbType.VarChar).Value = SurveyNo.Trim();

            if (Land_intDistrictid.ToString().Trim() == "" || Land_intDistrictid.ToString().Trim() == null || Land_intDistrictid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_intDistrictid", SqlDbType.VarChar).Value = Land_intDistrictid.Trim();

            if (Land_intMandalid.ToString().Trim() == "" || Land_intMandalid.ToString().Trim() == null || Land_intMandalid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_intMandalid", SqlDbType.VarChar).Value = Land_intMandalid.Trim();

            if (Land_intVillageid.ToString().Trim() == "" || Land_intVillageid.ToString().Trim() == null || Land_intVillageid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_intVillageid", SqlDbType.VarChar).Value = Land_intVillageid.Trim();



            if (Name_Gramapachayat.ToString().Trim() == "" || Name_Gramapachayat.ToString().Trim() == null || Name_Gramapachayat.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Name_Gramapachayat", SqlDbType.VarChar).Value = Name_Gramapachayat.Trim();

            if (Land_Pincode.ToString().Trim() == "" || Land_Pincode.ToString().Trim() == null || Land_Pincode.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_Pincode", SqlDbType.VarChar).Value = Land_Pincode.Trim();

            if (Land_Email.ToString().Trim() == "" || Land_Email.ToString().Trim() == null || Land_Email.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_Email", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_Email", SqlDbType.VarChar).Value = Land_Email.Trim();

            if (Land_TelephoneNumber.ToString().Trim() == "" || Land_TelephoneNumber.ToString().Trim() == null || Land_TelephoneNumber.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_TelephoneNumber", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_TelephoneNumber", SqlDbType.VarChar).Value = Land_TelephoneNumber.Trim();

            if (Land_TotExtent.ToString().Trim() == "" || Land_TotExtent.ToString().Trim() == null || Land_TotExtent.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_TotExtent", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_TotExtent", SqlDbType.VarChar).Value = Land_TotExtent.Trim();

            if (Land_ProposedArea.ToString().Trim() == "" || Land_ProposedArea.ToString().Trim() == null || Land_ProposedArea.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_ProposedArea", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_ProposedArea", SqlDbType.VarChar).Value = Land_ProposedArea.Trim();

            if (Land_BuiltupArea.ToString().Trim() == "" || Land_BuiltupArea.ToString().Trim() == null || Land_BuiltupArea.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_BuiltupArea", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_BuiltupArea", SqlDbType.VarChar).Value = Land_BuiltupArea.Trim();

            if (Land_Existingwidth.ToString().Trim() == "" || Land_Existingwidth.ToString().Trim() == null || Land_Existingwidth.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_Existingwidth", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_Existingwidth", SqlDbType.VarChar).Value = Land_Existingwidth.Trim();

            if (intTypeofApprochid.ToString().Trim() == "" || intTypeofApprochid.ToString().Trim() == null || intTypeofApprochid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intTypeofApprochid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intTypeofApprochid", SqlDbType.VarChar).Value = intTypeofApprochid.Trim();

            if (intLocationFalls.ToString().Trim() == "" || intLocationFalls.ToString().Trim() == null || intLocationFalls.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intLocationFalls", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intLocationFalls", SqlDbType.VarChar).Value = intLocationFalls.Trim();

            if (intBuildingApproval.ToString().Trim() == "" || intBuildingApproval.ToString().Trim() == null || intBuildingApproval.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intBuildingApproval", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intBuildingApproval", SqlDbType.VarChar).Value = intBuildingApproval.Trim();

            if (intIndustryProduct.ToString().Trim() == "" || intIndustryProduct.ToString().Trim() == null || intIndustryProduct.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intIndustryProduct", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intIndustryProduct", SqlDbType.VarChar).Value = intIndustryProduct.Trim();

            if (intCategoryid.ToString().Trim() == "" || intCategoryid.ToString().Trim() == null || intCategoryid.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@intCategoryid", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@intCategoryid", SqlDbType.VarChar).Value = intCategoryid.Trim();


            if (FromZone.ToString().Trim() == "" || FromZone.ToString().Trim() == null || FromZone.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@FromZone", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@FromZone", SqlDbType.VarChar).Value = FromZone.Trim();

            if (ToZone.ToString().Trim() == "" || ToZone.ToString().Trim() == null || ToZone.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@ToZone", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@ToZone", SqlDbType.VarChar).Value = ToZone.Trim();

            if (GoogleMaptoUploadFile.ToString().Trim() == "" || GoogleMaptoUploadFile.ToString().Trim() == null || GoogleMaptoUploadFile.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMaptoUploadFile", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMaptoUploadFile", SqlDbType.VarChar).Value = GoogleMaptoUploadFile.Trim();

            if (GoogleMapFilePath.ToString().Trim() == "" || GoogleMapFilePath.ToString().Trim() == null || GoogleMapFilePath.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMapFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@GoogleMapFilePath", SqlDbType.VarChar).Value = GoogleMapFilePath.Trim();

            if (Geo_Cordinate_Latitude.ToString().Trim() == "" || Geo_Cordinate_Latitude.ToString().Trim() == null || Geo_Cordinate_Latitude.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude", SqlDbType.VarChar).Value = Geo_Cordinate_Latitude.Trim();

            if (Geo_Cordinate_Langitude.ToString().Trim() == "" || Geo_Cordinate_Langitude.ToString().Trim() == null || Geo_Cordinate_Langitude.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude", SqlDbType.VarChar).Value = Geo_Cordinate_Langitude.Trim();

            if (KMLFileName.ToString().Trim() == "" || KMLFileName.ToString().Trim() == null || KMLFileName.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName", SqlDbType.VarChar).Value = KMLFileName.Trim();

            if (KMLFilePath.ToString().Trim() == "" || KMLFilePath.ToString().Trim() == null || KMLFilePath.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath", SqlDbType.VarChar).Value = KMLFilePath.Trim();

            if (Covered_revenueSketch.ToString().Trim() == "" || Covered_revenueSketch.ToString().Trim() == null || Covered_revenueSketch.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Covered_revenueSketch", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Covered_revenueSketch", SqlDbType.VarChar).Value = Covered_revenueSketch.Trim();

            if (Covered_Adjoining.ToString().Trim() == "" || Covered_Adjoining.ToString().Trim() == null || Covered_Adjoining.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Covered_Adjoining", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Covered_Adjoining", SqlDbType.VarChar).Value = Covered_Adjoining.Trim();

            if (Plot_Number.ToString().Trim() == "" || Plot_Number.ToString().Trim() == null || Plot_Number.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Plot_Number", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Plot_Number", SqlDbType.VarChar).Value = Plot_Number.Trim();

            if (Sanction_LayoutNo.ToString().Trim() == "" || Sanction_LayoutNo.ToString().Trim() == null || Sanction_LayoutNo.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Sanction_LayoutNo", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Sanction_LayoutNo", SqlDbType.VarChar).Value = Sanction_LayoutNo.Trim();

            if (Land_User_MasterPlan.ToString().Trim() == "" || Land_User_MasterPlan.ToString().Trim() == null || Land_User_MasterPlan.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Land_User_MasterPlan", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Land_User_MasterPlan", SqlDbType.VarChar).Value = Land_User_MasterPlan.Trim();

            //string Hight_Building,
            //string Affected_roadwinding,

            if (Hight_Building.ToString().Trim() == "" || Hight_Building.ToString().Trim() == null || Hight_Building.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Hight_Building", SqlDbType.VarChar).Value = Hight_Building.Trim();

            if (Affected_roadwinding.ToString().Trim() == "" || Affected_roadwinding.ToString().Trim() == null || Affected_roadwinding.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Affected_roadwinding", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Affected_roadwinding", SqlDbType.VarChar).Value = Affected_roadwinding.Trim();

            if (Geo_Cordinate_Latitude1.ToString().Trim() == "" || Geo_Cordinate_Latitude1.ToString().Trim() == null || Geo_Cordinate_Latitude1.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude1", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Latitude1", SqlDbType.VarChar).Value = Geo_Cordinate_Latitude1.Trim();

            if (Geo_Cordinate_Langitude1.ToString().Trim() == "" || Geo_Cordinate_Langitude1.ToString().Trim() == null || Geo_Cordinate_Langitude1.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude1", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Geo_Cordinate_Langitude1", SqlDbType.VarChar).Value = Geo_Cordinate_Langitude1.Trim();

            if (KMLFileName1.ToString().Trim() == "" || KMLFileName1.ToString().Trim() == null || KMLFileName1.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName1", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@KMLFileName1", SqlDbType.VarChar).Value = KMLFileName1.Trim();

            if (KMLFilePath1.ToString().Trim() == "" || KMLFilePath1.ToString().Trim() == null || KMLFilePath1.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath1", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@KMLFilePath1", SqlDbType.VarChar).Value = KMLFilePath1.Trim();


            //-------------------------------------------------
            if (Created_by.Trim() == "" || Created_by.Trim() == null || Created_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_by", SqlDbType.Int).Value = Int32.Parse(Created_by.Trim());
            }

            if (Created_dt.Trim() == "" || Created_dt.Trim() == null || Created_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Created_dt", SqlDbType.DateTime).Value = Created_dt.Trim();
            }


            if (Modified_by.Trim() == "" || Modified_by.Trim() == null || Modified_by.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_by", SqlDbType.Int).Value = Int32.Parse(Modified_by.Trim());
            }

            if (Modified_dt.Trim() == "" || Modified_dt.Trim() == null || Modified_dt.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Modified_dt", SqlDbType.DateTime).Value = Modified_dt.Trim();
            }

            if (txtArchitectName.Trim() == "" || txtArchitectName.Trim() == null || txtArchitectName.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectName", SqlDbType.VarChar).Value = txtArchitectName.Trim();
            }
            if (txtArchitectLicenseno.Trim() == "" || txtArchitectLicenseno.Trim() == null || txtArchitectLicenseno.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectLicenseno", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectLicenseno", SqlDbType.VarChar).Value = txtArchitectLicenseno.Trim();
            }
            if (txtArchitectMobileno.Trim() == "" || txtArchitectMobileno.Trim() == null || txtArchitectMobileno.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectMobileno", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@ArchitectMobileno", SqlDbType.VarChar).Value = txtArchitectMobileno.Trim();
            }
            // string txtArchitectName, string txtArchitectLicenseno, string txtArchitectMobileno
            if (existingbuildup.Trim() == "" || existingbuildup.Trim() == null || existingbuildup.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@existingbuildup", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@existingbuildup", SqlDbType.VarChar).Value = existingbuildup.Trim();
            }

            if (landaspermasterplan.Trim() == "" || landaspermasterplan.Trim() == null || landaspermasterplan.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@landaspermasterplan", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@landaspermasterplan", SqlDbType.VarChar).Value = landaspermasterplan.Trim();
            }

            if (landmasterplanother.Trim() == "" || landmasterplanother.Trim() == null || landmasterplanother.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@landmasterplanother", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@landmasterplanother", SqlDbType.VarChar).Value = landmasterplanother.Trim();
            }

            if (typeofbuilding.Trim() == "" || typeofbuilding.Trim() == null || typeofbuilding.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@typeofbuilding", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@typeofbuilding", SqlDbType.VarChar).Value = typeofbuilding.Trim();
            }

            if (typeofbuildingother.Trim() == "" || typeofbuildingother.Trim() == null || typeofbuildingother.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@typeofbuildingother", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@typeofbuildingother", SqlDbType.VarChar).Value = typeofbuildingother.Trim();
            }

            if (Affectedroadwinding.Trim() == "" || Affectedroadwinding.Trim() == null || Affectedroadwinding.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Affectedroadwinding", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@Affectedroadwinding", SqlDbType.VarChar).Value = Affectedroadwinding.Trim();
            }

            if (roadwidening.Trim() == "" || roadwidening.Trim() == null || roadwidening.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@roadwidening", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@roadwidening", SqlDbType.VarChar).Value = roadwidening.Trim();
            }
            if (islandpartof.Trim() == "" || islandpartof.Trim() == null || islandpartof.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@islandpartof", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@islandpartof", SqlDbType.VarChar).Value = islandpartof.Trim();
            }

            if (structuralengname.Trim() == "" || structuralengname.Trim() == null || structuralengname.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@StructuralName", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@StructuralName", SqlDbType.VarChar).Value = structuralengname.Trim();
            }
            if (structuralenglicno.Trim() == "" || structuralenglicno.Trim() == null || structuralenglicno.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@StructuralLicenseno", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@StructuralLicenseno", SqlDbType.VarChar).Value = structuralenglicno.Trim();
            }
            if (structuralmobileno.Trim() == "" || structuralmobileno.Trim() == null || structuralmobileno.Trim() == "--Select--")
            {
                myDataAdapter.SelectCommand.Parameters.Add("@StructuralMobileno", SqlDbType.VarChar).Value = DBNull.Value;
            }
            else
            {
                myDataAdapter.SelectCommand.Parameters.Add("@StructuralMobileno", SqlDbType.VarChar).Value = structuralmobileno.Trim();
            }

            if (corporationname.ToString().Trim() == "" || corporationname.ToString().Trim() == null || corporationname.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@corporationname", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@corporationname", SqlDbType.VarChar).Value = corporationname.Trim();

            if (wardno.ToString().Trim() == "" || wardno.ToString().Trim() == null || wardno.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@wardno", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@wardno", SqlDbType.VarChar).Value = wardno.Trim();

            if (PlotSubUse.ToString().Trim() == "" || PlotSubUse.ToString().Trim() == null || PlotSubUse.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@PlotSubUse", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@PlotSubUse", SqlDbType.VarChar).Value = PlotSubUse.Trim();

            if (NorthBoundary.ToString().Trim() == "" || NorthBoundary.ToString().Trim() == null || NorthBoundary.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@NorthBoundary", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@NorthBoundary", SqlDbType.VarChar).Value = NorthBoundary.Trim();

            if (SouthBoundary.ToString().Trim() == "" || SouthBoundary.ToString().Trim() == null || SouthBoundary.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@SouthBoundary", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@SouthBoundary", SqlDbType.VarChar).Value = SouthBoundary.Trim();

            if (WestBoundary.ToString().Trim() == "" || WestBoundary.ToString().Trim() == null || WestBoundary.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@WestBoundary", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@WestBoundary", SqlDbType.VarChar).Value = WestBoundary.Trim();

            if (EastBoundary.ToString().Trim() == "" || EastBoundary.ToString().Trim() == null || EastBoundary.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@EastBoundary", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@EastBoundary", SqlDbType.VarChar).Value = EastBoundary.Trim();

            if (Excavation_Depth.ToString().Trim() == "" || Excavation_Depth.ToString().Trim() == null || Excavation_Depth.ToString().Trim() == "--Select--")
                myDataAdapter.SelectCommand.Parameters.Add("@Excavation_Depth", SqlDbType.VarChar).Value = DBNull.Value;
            else
                myDataAdapter.SelectCommand.Parameters.Add("@Excavation_Depth", SqlDbType.VarChar).Value = Excavation_Depth.Trim();

            int n = myDataAdapter.SelectCommand.ExecuteNonQuery();


            if (n > 0)
            {
                return 1;
            }
            else
            {
                return 0;
            }
        }
        catch (Exception ex)
        {
            con.CloseConnection();
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }

    }

    #endregion
    public int insertQuetieneroes(QuesionerVO quesionervoobj)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "InsertQuestioneries";

        if (quesionervoobj.intQuessionaireid == "" || quesionervoobj.intQuessionaireid == null)
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireid", SqlDbType.VarChar).Value = quesionervoobj.intQuessionaireid.Trim();

        if (quesionervoobj.Const_of_unit == "" || quesionervoobj.Const_of_unit == null || quesionervoobj.Const_of_unit == "--Select--")
            com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Const_of_unit", SqlDbType.VarChar).Value = quesionervoobj.Const_of_unit.Trim();

        if (quesionervoobj.Sector_Ent == "" || quesionervoobj.Sector_Ent == null || quesionervoobj.Sector_Ent == "--Select--")
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = quesionervoobj.Sector_Ent.Trim();

        if (quesionervoobj.Tot_Extent == "" || quesionervoobj.Tot_Extent == null || quesionervoobj.Tot_Extent == "--Select--")
            com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_Extent", SqlDbType.VarChar).Value = quesionervoobj.Tot_Extent.Trim();

        if (quesionervoobj.Prop_intDistrictid == "" || quesionervoobj.Prop_intDistrictid == null || quesionervoobj.Prop_intDistrictid == "--Select--")
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = quesionervoobj.Prop_intDistrictid.Trim();

        if (quesionervoobj.Prop_intMandalid == "" || quesionervoobj.Prop_intMandalid == null || quesionervoobj.Prop_intMandalid == "--Select--")
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = quesionervoobj.Prop_intMandalid.Trim();

        if (quesionervoobj.Prop_intVillageid == "" || quesionervoobj.Prop_intVillageid == null || quesionervoobj.Prop_intVillageid == "--Select--")
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = quesionervoobj.Prop_intVillageid.Trim();

        if (quesionervoobj.Prop_Emp == "" || quesionervoobj.Prop_Emp == null || quesionervoobj.Prop_Emp == "--Select--")
            com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Emp", SqlDbType.VarChar).Value = quesionervoobj.Prop_Emp.Trim();

        if (quesionervoobj.Val_Land == "" || quesionervoobj.Val_Land == null || quesionervoobj.Val_Land == "--Select--")
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = quesionervoobj.Val_Land.Trim();

        if (quesionervoobj.Val_Build == "" || quesionervoobj.Val_Build == null || quesionervoobj.Val_Build == "--Select--")
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = quesionervoobj.Val_Build.Trim();

        if (quesionervoobj.Val_Plant == "" || quesionervoobj.Val_Plant == null || quesionervoobj.Val_Plant == "--Select--")
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = quesionervoobj.Val_Plant.Trim();

        if (quesionervoobj.Tot_PrjCost == "" || quesionervoobj.Tot_PrjCost == null || quesionervoobj.Tot_PrjCost == "--Select--")
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = quesionervoobj.Tot_PrjCost.Trim();

        if (quesionervoobj.Ent_is == "" || quesionervoobj.Ent_is == null || quesionervoobj.Ent_is == "--Select--")
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = quesionervoobj.Ent_is.Trim();

        if (quesionervoobj.intLineofActivity == "" || quesionervoobj.intLineofActivity == null || quesionervoobj.intLineofActivity == "--Select--")
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivity", SqlDbType.VarChar).Value = quesionervoobj.intLineofActivity.Trim();

        if (quesionervoobj.Pol_Indus == "" || quesionervoobj.Pol_Indus == null || quesionervoobj.Pol_Indus == "--Select--")
            com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Indus", SqlDbType.VarChar).Value = quesionervoobj.Pol_Indus.Trim();

        if (quesionervoobj.Pol_Category == "" || quesionervoobj.Pol_Category == null || quesionervoobj.Pol_Category == "--Select--")
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = quesionervoobj.Pol_Category.Trim();

        if (quesionervoobj.Power_Req == "" || quesionervoobj.Power_Req == null || quesionervoobj.Power_Req == "--Select--")
            com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Power_Req", SqlDbType.VarChar).Value = quesionervoobj.Power_Req.Trim();

        if (quesionervoobj.Loc_of_unit == "" || quesionervoobj.Loc_of_unit == null || quesionervoobj.Loc_of_unit == "--Select--")
            com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Loc_of_unit", SqlDbType.VarChar).Value = quesionervoobj.Loc_of_unit.Trim();

        if (quesionervoobj.Water_req_Perday == "" || quesionervoobj.Water_req_Perday == null || quesionervoobj.Water_req_Perday == "--Select--")
            com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday.Trim();

        // added by shankar
        if (quesionervoobj.Water_req_Perday1 == "" || quesionervoobj.Water_req_Perday1 == null || quesionervoobj.Water_req_Perday1 == "--Select--")
            com.Parameters.Add("@Water_req_Perday1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday1", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday1.Trim();

        if (quesionervoobj.Water_req_Perday2 == "" || quesionervoobj.Water_req_Perday2 == null || quesionervoobj.Water_req_Perday2 == "--Select--")
            com.Parameters.Add("@Water_req_Perday2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday2", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday2.Trim();

        if (quesionervoobj.Water_req_Perday3 == "" || quesionervoobj.Water_req_Perday3 == null || quesionervoobj.Water_req_Perday3 == "--Select--")
            com.Parameters.Add("@Water_req_Perday3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday3", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday3.Trim();
        // end

        if (quesionervoobj.Water_reg_from1 == "" || quesionervoobj.Water_reg_from1 == null || quesionervoobj.Water_reg_from1 == "--Select--")
            com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from1", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from1.Trim();

        if (quesionervoobj.Water_reg_from2 == "" || quesionervoobj.Water_reg_from2 == null || quesionervoobj.Water_reg_from2 == "--Select--")
            com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from2", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from2.Trim();

        if (quesionervoobj.Water_reg_from3 == "" || quesionervoobj.Water_reg_from3 == null || quesionervoobj.Water_reg_from3 == "--Select--")
            com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from3", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from3.Trim();

        if (quesionervoobj.Do_Store_Kerosine == "" || quesionervoobj.Do_Store_Kerosine == null || quesionervoobj.Do_Store_Kerosine == "--Select--")
            com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Do_Store_Kerosine", SqlDbType.VarChar).Value = quesionervoobj.Do_Store_Kerosine.Trim();

        if (quesionervoobj.petrolDieselFlag == "" || quesionervoobj.petrolDieselFlag == null || quesionervoobj.petrolDieselFlag == "--Select--")
            com.Parameters.Add("@petrolDieselflag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@petrolDieselflag", SqlDbType.VarChar).Value = quesionervoobj.petrolDieselFlag.Trim();

        if (quesionervoobj.Gen_Reqired == "" || quesionervoobj.Gen_Reqired == null || quesionervoobj.Gen_Reqired == "--Select--")
            com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Gen_Reqired", SqlDbType.VarChar).Value = quesionervoobj.Gen_Reqired.Trim();

        if (quesionervoobj.Hight_Build == "" || quesionervoobj.Hight_Build == null || quesionervoobj.Hight_Build == "--Select--")
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Hight_Build", SqlDbType.VarChar).Value = quesionervoobj.Hight_Build.Trim();


        if (quesionervoobj.Built_up_Area == "" || quesionervoobj.Built_up_Area == null || quesionervoobj.Built_up_Area == "--Select--")
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = quesionervoobj.Built_up_Area.Trim();


        if (quesionervoobj.Fall_in_Municipal == "" || quesionervoobj.Fall_in_Municipal == null || quesionervoobj.Fall_in_Municipal == "--Select--")
            com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Fall_in_Municipal", SqlDbType.VarChar).Value = quesionervoobj.Fall_in_Municipal.Trim();


        if (quesionervoobj.Prop_Site == "" || quesionervoobj.Prop_Site == null || quesionervoobj.Prop_Site == "--Select--")
            com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_Site", SqlDbType.VarChar).Value = quesionervoobj.Prop_Site.Trim();


        if (quesionervoobj.Appl_Status == "" || quesionervoobj.Appl_Status == null || quesionervoobj.Appl_Status == "--Select--")
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = quesionervoobj.Appl_Status.Trim();

        if (quesionervoobj.Appl_no == "" || quesionervoobj.Appl_no == null || quesionervoobj.Appl_no == "--Select--")
            com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_no", SqlDbType.VarChar).Value = quesionervoobj.Appl_no.Trim();


        if (quesionervoobj.Created_by == "" || quesionervoobj.Created_by == null || quesionervoobj.Created_by == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = quesionervoobj.Created_by.Trim();

        if (quesionervoobj.NoofTrees == "" || quesionervoobj.NoofTrees == null || quesionervoobj.NoofTrees == "--Select--")
            com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofTrees", SqlDbType.VarChar).Value = quesionervoobj.NoofTrees.Trim();

        if (quesionervoobj.Non_Exempted == "" || quesionervoobj.Non_Exempted == null || quesionervoobj.Appl_Type == "--Select--")
            com.Parameters.Add("@NonExmTrees", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NonExmTrees", SqlDbType.VarChar).Value = quesionervoobj.Non_Exempted.Trim();

        if (quesionervoobj.Appl_Type == "" || quesionervoobj.Appl_Type == null || quesionervoobj.Appl_Type == "--Select--")
            com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Type", SqlDbType.VarChar).Value = quesionervoobj.Appl_Type.Trim();

        if (quesionervoobj.nameofunit == "" || quesionervoobj.nameofunit == null || quesionervoobj.nameofunit == "--Select--")
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = quesionervoobj.nameofunit.Trim();

        if (quesionervoobj.TypeofMesurement == "" || quesionervoobj.TypeofMesurement == null || quesionervoobj.TypeofMesurement == "--Select--")
            com.Parameters.Add("@TypeofMesurement", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TypeofMesurement", SqlDbType.VarChar).Value = quesionervoobj.TypeofMesurement.Trim();

        if (quesionervoobj.Val_Land_Actul == "" || quesionervoobj.Val_Land_Actul == null || quesionervoobj.Val_Land_Actul == "--Select--")
            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = quesionervoobj.Val_Land_Actul.Trim();

        if (quesionervoobj.Val_Build_Actul == "" || quesionervoobj.Val_Build_Actul == null || quesionervoobj.Val_Build_Actul == "--Select--")
            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = quesionervoobj.Val_Build_Actul.Trim();

        if (quesionervoobj.Val_Plant_Actul == "" || quesionervoobj.Val_Plant_Actul == null || quesionervoobj.Val_Plant_Actul == "--Select--")
            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = quesionervoobj.Val_Plant_Actul.Trim();

        com.Parameters.Add("@CurrencyType", SqlDbType.VarChar).Value = quesionervoobj.CurrencyType.Trim();

        if (quesionervoobj.TxtTot_ExtentNew == "" || quesionervoobj.TxtTot_ExtentNew == null || quesionervoobj.TxtTot_ExtentNew == "--Select--")
            com.Parameters.Add("@TxtTot_ExtentNew", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TxtTot_ExtentNew", SqlDbType.VarChar).Value = quesionervoobj.TxtTot_ExtentNew.Trim();

        if (quesionervoobj.TxtTot_Gunthas == "" || quesionervoobj.TxtTot_Gunthas == null || quesionervoobj.TxtTot_Gunthas == "--Select--")
            com.Parameters.Add("@TxtTot_Gunthas", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TxtTot_Gunthas", SqlDbType.VarChar).Value = quesionervoobj.TxtTot_Gunthas.Trim();
        if (quesionervoobj.IALAFlag == "" || quesionervoobj.IALAFlag == null || quesionervoobj.IALAFlag == "0")
            com.Parameters.Add("@IALAFLAG", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IALAFLAG", SqlDbType.VarChar).Value = quesionervoobj.IALAFlag.Trim();
        if (quesionervoobj.IALA_Code == "" || quesionervoobj.IALA_Code == null || quesionervoobj.IALA_Code == "0")
            com.Parameters.Add("@IALA_Code", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@IALA_Code", SqlDbType.VarChar).Value = quesionervoobj.IALA_Code.Trim();

        if (quesionervoobj.LabourActID == "" || quesionervoobj.LabourActID == null || quesionervoobj.LabourActID == "0")
            com.Parameters.Add("@LabourAct_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LabourAct_Id", SqlDbType.VarChar).Value = quesionervoobj.LabourActID.Trim();

        // expansion
        if (quesionervoobj.Val_LandExpansion == "" || quesionervoobj.Val_LandExpansion == null || quesionervoobj.Val_LandExpansion == "0")
            com.Parameters.Add("@Val_LandExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_LandExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_LandExpansion;

        if (quesionervoobj.Val_BuildExpansion == "" || quesionervoobj.Val_BuildExpansion == null || quesionervoobj.Val_BuildExpansion == "0")
            com.Parameters.Add("@Val_BuildExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_BuildExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_BuildExpansion;

        if (quesionervoobj.Val_PlantExpansion == "" || quesionervoobj.Val_PlantExpansion == null || quesionervoobj.Val_PlantExpansion == "0")
            com.Parameters.Add("@Val_PlantExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_PlantExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_PlantExpansion;

        if (quesionervoobj.Val_Land_ActulExpansion == "" || quesionervoobj.Val_Land_ActulExpansion == null || quesionervoobj.Val_Land_ActulExpansion == "0")
            com.Parameters.Add("@Val_Land_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Land_ActulExpansion;

        if (quesionervoobj.Val_Build_ActulExpansion == "" || quesionervoobj.Val_Build_ActulExpansion == null || quesionervoobj.Val_Build_ActulExpansion == "0")
            com.Parameters.Add("@Val_Build_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Build_ActulExpansion;

        if (quesionervoobj.Val_Plant_ActulExpansion == "" || quesionervoobj.Val_Plant_ActulExpansion == null || quesionervoobj.Val_Plant_ActulExpansion == "0")
            com.Parameters.Add("@Val_Plant_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Plant_ActulExpansion;

        if (quesionervoobj.Tot_PrjCostExpansion == "" || quesionervoobj.Tot_PrjCostExpansion == null || quesionervoobj.Tot_PrjCostExpansion == "0")
            com.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.VarChar).Value = quesionervoobj.Tot_PrjCostExpansion;

        if (quesionervoobj.ProposalFor == "" || quesionervoobj.ProposalFor == null || quesionervoobj.ProposalFor == "0")
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = quesionervoobj.ProposalFor;
        if (quesionervoobj.LabelConfirmation != null && quesionervoobj.LabelConfirmation != "")
            com.Parameters.Add("@LabelConfirmation", SqlDbType.VarChar).Value = quesionervoobj.LabelConfirmation.Trim();

        if (quesionervoobj.TotalNoofWorkes != null && quesionervoobj.TotalNoofWorkes != "")
            com.Parameters.Add("@TotalNoofWorkes", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkes.Trim();

        if (quesionervoobj.TotalNoofWorkesforContractLbr != null && quesionervoobj.TotalNoofWorkesforContractLbr != "")
            com.Parameters.Add("@TotalNoofWorkesforContractLbr", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesforContractLbr.Trim();

        if (quesionervoobj.TotalNoofWorkesformigrantact != null && quesionervoobj.TotalNoofWorkesformigrantact != "")
            com.Parameters.Add("@TotalNoofWorkesformigrantact", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesformigrantact.Trim();

        if (quesionervoobj.MarketValue != null && quesionervoobj.MarketValue != "")
            com.Parameters.Add("@MarketValue", SqlDbType.VarChar).Value = quesionervoobj.MarketValue.Trim();

        if (quesionervoobj.TsiicPlotno != null && quesionervoobj.TsiicPlotno != "")
            com.Parameters.Add("@TsiicPlotno", SqlDbType.VarChar).Value = quesionervoobj.TsiicPlotno.Trim();

        if (quesionervoobj.TotalNoofWorkesformigrantact20d != null && quesionervoobj.TotalNoofWorkesformigrantact20d != "")
            com.Parameters.Add("@InterStateContractWorker", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesformigrantact20d.Trim();

        if (quesionervoobj.VicinityWater != null && quesionervoobj.VicinityWater != "")
            com.Parameters.Add("@VicitnyWaterBodyFlag", SqlDbType.VarChar).Value = quesionervoobj.VicinityWater.Trim();

        if (quesionervoobj.TotalNoofWorkesContractLabourAct_Lisense != null && quesionervoobj.TotalNoofWorkesContractLabourAct_Lisense != "")
            com.Parameters.Add("@ContractWorkerLicense", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesContractLabourAct_Lisense.Trim();

        if (quesionervoobj.CEIG != null && quesionervoobj.CEIG != "")
            com.Parameters.Add("@CEIG", SqlDbType.VarChar).Value = quesionervoobj.CEIG.Trim();

        if (quesionervoobj.RegulationType != null && quesionervoobj.RegulationType != "")
            com.Parameters.Add("@Regulation_type", SqlDbType.VarChar).Value = quesionervoobj.RegulationType.Trim();

        if (quesionervoobj.VoltageType != null && quesionervoobj.VoltageType != "")
            com.Parameters.Add("@Voltage_Slno", SqlDbType.VarChar).Value = quesionervoobj.VoltageType.Trim();

        if (quesionervoobj.AggregateCapacity != null && quesionervoobj.AggregateCapacity != "")
            com.Parameters.Add("@AggregateCapacity", SqlDbType.VarChar).Value = quesionervoobj.AggregateCapacity.Trim();

        if (quesionervoobj.Borewellflag != null && quesionervoobj.Borewellflag != "")
            com.Parameters.Add("@BorewellFlag", SqlDbType.VarChar).Value = quesionervoobj.Borewellflag.Trim();

        if (quesionervoobj.Water_req_Perday4 == "" || quesionervoobj.Water_req_Perday4 == null || quesionervoobj.Water_req_Perday4 == "--Select--")
            com.Parameters.Add("@Water_req_Perday4", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday4", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday4.Trim();

        if (quesionervoobj.Water_reg_from4 == "" || quesionervoobj.Water_reg_from4 == null || quesionervoobj.Water_reg_from4 == "--Select--")
            com.Parameters.Add("@Water_reg_from4", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from4", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from4.Trim();

        if (quesionervoobj.Water_req_Perday5 == "" || quesionervoobj.Water_req_Perday5 == null || quesionervoobj.Water_req_Perday5 == "--Select--")
            com.Parameters.Add("@Water_req_Perday5", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_req_Perday5", SqlDbType.VarChar).Value = quesionervoobj.Water_req_Perday5.Trim();

        if (quesionervoobj.Water_reg_from5 == "" || quesionervoobj.Water_reg_from5 == null || quesionervoobj.Water_reg_from5 == "--Select--")
            com.Parameters.Add("@Water_reg_from5", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Water_reg_from5", SqlDbType.VarChar).Value = quesionervoobj.Water_reg_from5.Trim();

        if (quesionervoobj.professiontaxflag == "" || quesionervoobj.professiontaxflag == null || quesionervoobj.professiontaxflag == "--Select--")
            com.Parameters.Add("@professiontaxflag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@professiontaxflag", SqlDbType.VarChar).Value = quesionervoobj.professiontaxflag.Trim();

        if (quesionervoobj.Exciseflag == "" || quesionervoobj.Exciseflag == null || quesionervoobj.Exciseflag == "--Select--")
            com.Parameters.Add("@Exciseflag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Exciseflag", SqlDbType.VarChar).Value = quesionervoobj.Exciseflag.Trim();

        if (quesionervoobj.NoOfFloors == "" || quesionervoobj.NoOfFloors == null)
            com.Parameters.Add("@TotNoOfFloors", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TotNoOfFloors", SqlDbType.VarChar).Value = quesionervoobj.NoOfFloors.Trim();
        if (quesionervoobj.annualTurnover == "" || quesionervoobj.annualTurnover == null)
            com.Parameters.Add("@annualTurnover", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@annualTurnover", SqlDbType.VarChar).Value = quesionervoobj.annualTurnover.Trim();

        if (quesionervoobj.annualTurnover_act == "" || quesionervoobj.annualTurnover_act == null)
            com.Parameters.Add("@annualTurnover_act", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@annualTurnover_act", SqlDbType.VarChar).Value = quesionervoobj.annualTurnover_act.Trim();

        if (quesionervoobj.annualTurnover_Exp == "" || quesionervoobj.annualTurnover_Exp == null)
            com.Parameters.Add("@annualTurnover_EXPN", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@annualTurnover_EXPN", SqlDbType.VarChar).Value = quesionervoobj.annualTurnover_Exp.Trim();

        if (quesionervoobj.annualTurnover_Exp_act == "" || quesionervoobj.annualTurnover_Exp_act == null)
            com.Parameters.Add("@annualTurnover_EXPN_act", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@annualTurnover_EXPN_act", SqlDbType.VarChar).Value = quesionervoobj.annualTurnover_Exp_act.Trim();

        if (quesionervoobj.TourismFlag == "" || quesionervoobj.TourismFlag == null)
            com.Parameters.Add("@TourismFlag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TourismFlag", SqlDbType.VarChar).Value = quesionervoobj.TourismFlag.Trim();

        if (quesionervoobj.OwnedLease == "" || quesionervoobj.OwnedLease == null)
            com.Parameters.Add("@OwnedLease", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@OwnedLease", SqlDbType.VarChar).Value = quesionervoobj.OwnedLease.Trim();

        if (quesionervoobj.NoofRooms == "" || quesionervoobj.NoofRooms == null)
            com.Parameters.Add("@NoofRooms", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NoofRooms", SqlDbType.VarChar).Value = quesionervoobj.NoofRooms.Trim();

        if (quesionervoobj.Outlets == "" || quesionervoobj.Outlets == null)
            com.Parameters.Add("@Outlets", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Outlets", SqlDbType.VarChar).Value = quesionervoobj.Outlets.Trim();


        if (quesionervoobj.Banquets == "" || quesionervoobj.Banquets == null)
            com.Parameters.Add("@Banquets", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Banquets", SqlDbType.VarChar).Value = quesionervoobj.Banquets.Trim();

        if (quesionervoobj.PoliceNOCFlag == "" || quesionervoobj.PoliceNOCFlag == null)
            com.Parameters.Add("@PoliceNOCFlag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PoliceNOCFlag", SqlDbType.VarChar).Value = quesionervoobj.PoliceNOCFlag.Trim();


        if (quesionervoobj.ParkingConditionFlag == "" || quesionervoobj.ParkingConditionFlag == null)
            com.Parameters.Add("@ParkingCondition_Flag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ParkingCondition_Flag", SqlDbType.VarChar).Value = quesionervoobj.ParkingConditionFlag.Trim();

        if (quesionervoobj.StorageConstruction_Flag == "" || quesionervoobj.StorageConstruction_Flag == null)
            com.Parameters.Add("@StorageConstruction_Flag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@StorageConstruction_Flag", SqlDbType.VarChar).Value = quesionervoobj.StorageConstruction_Flag.Trim();

        if (quesionervoobj.Excavation_Flag == "" || quesionervoobj.Excavation_Flag == null)
            com.Parameters.Add("@Excavation_Flag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Excavation_Flag", SqlDbType.VarChar).Value = quesionervoobj.Excavation_Flag.Trim();




        if (quesionervoobj.ParkingCondition == "" || quesionervoobj.ParkingCondition == null)
            com.Parameters.Add("@ParkingCondition", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ParkingCondition", SqlDbType.VarChar).Value = quesionervoobj.ParkingCondition.Trim();

        if (quesionervoobj.StorageConstruction == "" || quesionervoobj.StorageConstruction == null)
            com.Parameters.Add("@StorageConstruction", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@StorageConstruction", SqlDbType.VarChar).Value = quesionervoobj.StorageConstruction.Trim();
        if (quesionervoobj.HotelType == "" || quesionervoobj.HotelType == null)
            com.Parameters.Add("@Hotel_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Hotel_Type", SqlDbType.VarChar).Value = quesionervoobj.HotelType.Trim();

        if (quesionervoobj.HotelCFEFlag == "" || quesionervoobj.HotelCFEFlag == null)
            com.Parameters.Add("@HOTELCLASSIFICATION", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@HOTELCLASSIFICATION", SqlDbType.VarChar).Value = quesionervoobj.HotelCFEFlag.Trim();

        con.OpenConnection();
        com.Connection = con.GetConnection;

        try
        {
            //return com.ExecuteNonQuery();
            return Convert.ToInt32(com.ExecuteScalar());
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }
    }
    public int insertCFOQuestionerrie(string intQuessionaireCFOid, string Sector_Ent, string Prop_intDistrictid, string Prop_intMandalid, string Prop_intVillageid, string Val_Land, string Val_Build, string Val_Plant, string Tot_PrjCost,
                   string HaveyourTakePolution, string intLineofActivityid, string Pol_Category, string License_Factory, string High_Tension_Meter, string Building_Height, string NOC_Fire, string Product_Drugs, string Bioler_Industry, string Created_by, string nameofunit, string enterprisetype, string Appl_Status, string fisiability, string service,
       string Val_Land_Actul, string Val_Build_Actul, string Val_Plant_Actul, string CurrencyType, QuesionerVO quesionervoobj, string CFEUIDNo, string CinematographicLicense, string LicensePeriod,
        string Noofscreens, string TotalFee, List<Screendetails> lstscreendetails)
    {
        SqlCommand com = new SqlCommand();
        com.CommandType = CommandType.StoredProcedure;
        com.CommandText = "insertCFOQuessionary";

        if (CFEUIDNo == "")
        {
            com.Parameters.Add("@CFEUIDNo", SqlDbType.VarChar).Value = DBNull.Value;
        }
        else
        {
            com.Parameters.Add("@CFEUIDNo", SqlDbType.VarChar).Value = CFEUIDNo;
        }

        if (intQuessionaireCFOid == "" || intQuessionaireCFOid == null || intQuessionaireCFOid.Trim() == "--Select--")
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intQuessionaireCFOid", SqlDbType.VarChar).Value = intQuessionaireCFOid.Trim();


        if (enterprisetype == "" || enterprisetype == null || enterprisetype.Trim() == "--Select--")
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Ent_is", SqlDbType.VarChar).Value = enterprisetype.Trim();

        if (Appl_Status == "" || Appl_Status == null || Appl_Status.Trim() == "--Select--")
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Appl_Status", SqlDbType.VarChar).Value = Appl_Status.Trim();


        if (fisiability == "" || fisiability == null || fisiability.Trim() == "--Select--")
            com.Parameters.Add("@fisiability", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@fisiability", SqlDbType.VarChar).Value = fisiability.Trim();

        if (service == "" || service == null || service.Trim() == "--Select--")
            com.Parameters.Add("@service", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@service", SqlDbType.VarChar).Value = service.Trim();




        if (nameofunit == "" || nameofunit == null || nameofunit.Trim() == "--Select--")
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@nameofunit", SqlDbType.VarChar).Value = nameofunit.Trim();

        if (Sector_Ent == "" || Sector_Ent == null || Sector_Ent.Trim() == "--Select--")
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Sector_Ent", SqlDbType.VarChar).Value = Sector_Ent.Trim();

        if (Prop_intDistrictid == "" || Prop_intDistrictid == null || Prop_intDistrictid.Trim() == "--Select--")
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intDistrictid", SqlDbType.VarChar).Value = Prop_intDistrictid.Trim();

        if (Prop_intMandalid == "" || Prop_intMandalid == null || Prop_intMandalid.Trim() == "--Select--")
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intMandalid", SqlDbType.VarChar).Value = Prop_intMandalid.Trim();

        if (Prop_intVillageid == "" || Prop_intVillageid == null || Prop_intVillageid.Trim() == "--Select--")
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Prop_intVillageid", SqlDbType.VarChar).Value = Prop_intVillageid.Trim();

        //if (PolCategory == "" || PolCategory == null || PolCategory.Trim()=="--Select--")
        //    com.Parameters.Add("@PolCategory", SqlDbType.VarChar).Value = DBNull.Value;
        //else
        //    com.Parameters.Add("@PolCategory", SqlDbType.VarChar).Value = PolCategory.Trim();

        if (Val_Land == "" || Val_Land == null || Val_Land.Trim() == "--Select--")
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land", SqlDbType.VarChar).Value = Val_Land.Trim();

        if (Val_Build == "" || Val_Build == null || Val_Build.Trim() == "--Select--")
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build", SqlDbType.VarChar).Value = Val_Build.Trim();

        if (Val_Plant == "" || Val_Plant == null || Val_Plant.Trim() == "--Select--")
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant", SqlDbType.VarChar).Value = Val_Plant.Trim();


        if (Tot_PrjCost == "" || Tot_PrjCost == null || Tot_PrjCost.Trim() == "--Select--")
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCost", SqlDbType.VarChar).Value = Tot_PrjCost.Trim();


        if (HaveyourTakePolution == "" || HaveyourTakePolution == null || HaveyourTakePolution.Trim() == "--Select--")
            com.Parameters.Add("@HaveyourTakePolution", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@HaveyourTakePolution", SqlDbType.VarChar).Value = HaveyourTakePolution.Trim();
        //string intLineofActivityid, string Pol_Category, string License_Factory, string High_Tension_Meter, string NOC_Fire, string Product_Drugs, string Bioler_Industry
        if (intLineofActivityid == "" || intLineofActivityid == null || intLineofActivityid.Trim() == "--Select--")
            com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@intLineofActivityid", SqlDbType.VarChar).Value = intLineofActivityid.Trim();

        if (Pol_Category == "" || Pol_Category == null || Pol_Category.Trim() == "--Select--")
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Pol_Category", SqlDbType.VarChar).Value = Pol_Category.Trim();

        if (License_Factory == "" || License_Factory == null || License_Factory.Trim() == "--Select--")
            com.Parameters.Add("@License_Factory", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@License_Factory", SqlDbType.VarChar).Value = License_Factory.Trim();

        if (High_Tension_Meter == "" || High_Tension_Meter == null || High_Tension_Meter.Trim() == "--Select--")
            com.Parameters.Add("@High_Tension_Meter", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@High_Tension_Meter", SqlDbType.VarChar).Value = High_Tension_Meter.Trim();

        if (Building_Height == "" || Building_Height == null || Building_Height.Trim() == "--Select--")
            com.Parameters.Add("@Building_Height", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Building_Height", SqlDbType.VarChar).Value = NOC_Fire.Trim();

        if (NOC_Fire == "" || NOC_Fire == null || NOC_Fire.Trim() == "--Select--")
            com.Parameters.Add("@NOC_Fire", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@NOC_Fire", SqlDbType.VarChar).Value = NOC_Fire.Trim();

        if (Product_Drugs == "" || Product_Drugs == null || NOC_Fire.Trim() == "--Select--")
            com.Parameters.Add("@Product_Drugs", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Product_Drugs", SqlDbType.VarChar).Value = Product_Drugs.Trim();

        if (Bioler_Industry == "" || Bioler_Industry == null || Bioler_Industry.Trim() == "--Select--")
            com.Parameters.Add("@Bioler_Industry", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Bioler_Industry", SqlDbType.VarChar).Value = Bioler_Industry.Trim();


        if (Created_by == "" || Created_by == null || Created_by.Trim() == "--Select--")
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Created_by", SqlDbType.VarChar).Value = Created_by.Trim();

        if (Val_Land_Actul == "" || Val_Land_Actul == null || Val_Land_Actul == "--Select--")
            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land_Actul", SqlDbType.VarChar).Value = Val_Land_Actul.Trim();

        if (Val_Build_Actul == "" || Val_Build_Actul == null || Val_Build_Actul == "--Select--")
            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build_Actul", SqlDbType.VarChar).Value = Val_Build_Actul.Trim();

        if (Val_Plant_Actul == "" || Val_Plant_Actul == null || Val_Plant_Actul == "--Select--")
            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant_Actul", SqlDbType.VarChar).Value = Val_Plant_Actul.Trim();

        com.Parameters.Add("@CurrencyType", SqlDbType.VarChar).Value = CurrencyType.Trim();

        if (quesionervoobj.LabourActID == "" || quesionervoobj.LabourActID == null || quesionervoobj.LabourActID == "0")
            com.Parameters.Add("@LabourAct_Id", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LabourAct_Id", SqlDbType.VarChar).Value = quesionervoobj.LabourActID.Trim();

        // expansion
        if (quesionervoobj.Val_LandExpansion == "" || quesionervoobj.Val_LandExpansion == null || quesionervoobj.Val_LandExpansion == "0")
            com.Parameters.Add("@Val_LandExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_LandExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_LandExpansion;

        if (quesionervoobj.Val_BuildExpansion == "" || quesionervoobj.Val_BuildExpansion == null || quesionervoobj.Val_BuildExpansion == "0")
            com.Parameters.Add("@Val_BuildExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_BuildExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_BuildExpansion;

        if (quesionervoobj.Val_PlantExpansion == "" || quesionervoobj.Val_PlantExpansion == null || quesionervoobj.Val_PlantExpansion == "0")
            com.Parameters.Add("@Val_PlantExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_PlantExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_PlantExpansion;

        if (quesionervoobj.Val_Land_ActulExpansion == "" || quesionervoobj.Val_Land_ActulExpansion == null || quesionervoobj.Val_Land_ActulExpansion == "0")
            com.Parameters.Add("@Val_Land_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Land_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Land_ActulExpansion;

        if (quesionervoobj.Val_Build_ActulExpansion == "" || quesionervoobj.Val_Build_ActulExpansion == null || quesionervoobj.Val_Build_ActulExpansion == "0")
            com.Parameters.Add("@Val_Build_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Build_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Build_ActulExpansion;

        if (quesionervoobj.Val_Plant_ActulExpansion == "" || quesionervoobj.Val_Plant_ActulExpansion == null || quesionervoobj.Val_Plant_ActulExpansion == "0")
            com.Parameters.Add("@Val_Plant_ActulExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Val_Plant_ActulExpansion", SqlDbType.VarChar).Value = quesionervoobj.Val_Plant_ActulExpansion;

        if (quesionervoobj.Tot_PrjCostExpansion == "" || quesionervoobj.Tot_PrjCostExpansion == null || quesionervoobj.Tot_PrjCostExpansion == "0")
            com.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Tot_PrjCostExpansion", SqlDbType.VarChar).Value = quesionervoobj.Tot_PrjCostExpansion;

        if (quesionervoobj.ProposalFor == "" || quesionervoobj.ProposalFor == null || quesionervoobj.ProposalFor == "0")
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ProposalFor", SqlDbType.VarChar).Value = quesionervoobj.ProposalFor;

        if (quesionervoobj.LabelConfirmation != null && quesionervoobj.LabelConfirmation != "")
            com.Parameters.Add("@LabelConfirmation", SqlDbType.VarChar).Value = quesionervoobj.LabelConfirmation.Trim();

        if (quesionervoobj.TotalNoofWorkes != null && quesionervoobj.TotalNoofWorkes != "")
            com.Parameters.Add("@TotalNoofWorkes", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkes.Trim();

        if (quesionervoobj.TotalNoofWorkesforContractLbr != null && quesionervoobj.TotalNoofWorkesforContractLbr != "")
            com.Parameters.Add("@TotalNoofWorkesforContractLbr", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesforContractLbr.Trim();

        if (quesionervoobj.TotalNoofWorkesformigrantact != null && quesionervoobj.TotalNoofWorkesformigrantact != "")
            com.Parameters.Add("@TotalNoofWorkesformigrantact", SqlDbType.VarChar).Value = quesionervoobj.TotalNoofWorkesformigrantact.Trim();

        if (quesionervoobj.txtDateofCommenceAct1 == null || quesionervoobj.txtDateofCommenceAct1 == "" || quesionervoobj.txtDateofCommenceAct1 == "0")
            com.Parameters.Add("@txtDateofCommenceAct1", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@txtDateofCommenceAct1", SqlDbType.VarChar).Value = quesionervoobj.txtDateofCommenceAct1.Trim();

        if (quesionervoobj.SteamPipeline != null && quesionervoobj.SteamPipeline != "")
            com.Parameters.Add("@SteamPipeline", SqlDbType.VarChar).Value = quesionervoobj.SteamPipeline.Trim();

        if (quesionervoobj.Occupancyflag != null && quesionervoobj.Occupancyflag != "")
            com.Parameters.Add("@Occupancyflag", SqlDbType.VarChar).Value = quesionervoobj.Occupancyflag.Trim();

        if (quesionervoobj.BPFilenumber != null && quesionervoobj.BPFilenumber != "")
            com.Parameters.Add("@BPFilenumber", SqlDbType.VarChar).Value = quesionervoobj.BPFilenumber.Trim();

        if (quesionervoobj.ArchitectLicNumber != null && quesionervoobj.ArchitectLicNumber != "")
            com.Parameters.Add("@ArchitectLicNumber", SqlDbType.VarChar).Value = quesionervoobj.ArchitectLicNumber.Trim();
        com.Parameters.Add("@TourismFlag", SqlDbType.VarChar).Value = quesionervoobj.TourismFlag.Trim();
        if (quesionervoobj.PoliceNOCFlag == "" || quesionervoobj.PoliceNOCFlag == null)
            com.Parameters.Add("@PoliceNOCFlag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@PoliceNOCFlag", SqlDbType.VarChar).Value = quesionervoobj.PoliceNOCFlag.Trim();


        if (quesionervoobj.ParkingConditionFlag == "" || quesionervoobj.ParkingConditionFlag == null)
            com.Parameters.Add("@ParkingCondition_Flag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@ParkingCondition_Flag", SqlDbType.VarChar).Value = quesionervoobj.ParkingConditionFlag.Trim();

        if (quesionervoobj.StorageConstruction_Flag == "" || quesionervoobj.StorageConstruction_Flag == null)
            com.Parameters.Add("@StorageConstruction_Flag", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@StorageConstruction_Flag", SqlDbType.VarChar).Value = quesionervoobj.StorageConstruction_Flag.Trim();

        if (quesionervoobj.Classification_Rating == "" || quesionervoobj.Classification_Rating == null)
            com.Parameters.Add("@Classification_Rating", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Classification_Rating", SqlDbType.VarChar).Value = quesionervoobj.Classification_Rating.Trim();

        if (quesionervoobj.Bar_License == "" || quesionervoobj.Bar_License == null)
            com.Parameters.Add("@Bar_License", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Bar_License", SqlDbType.VarChar).Value = quesionervoobj.Bar_License.Trim();

        if (quesionervoobj.Trade_License == "" || quesionervoobj.Trade_License == null)
            com.Parameters.Add("@Trade_License", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Trade_License", SqlDbType.VarChar).Value = quesionervoobj.Trade_License.Trim();

        if (quesionervoobj.HealthSDG_License == "" || quesionervoobj.HealthSDG_License == null)
            com.Parameters.Add("@HealthSDG_License", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@HealthSDG_License", SqlDbType.VarChar).Value = quesionervoobj.HealthSDG_License.Trim();

        if (quesionervoobj.FSSAI_Certificate == "" || quesionervoobj.FSSAI_Certificate == null)
            com.Parameters.Add("@FSSAI_Certificate", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@FSSAI_Certificate", SqlDbType.VarChar).Value = quesionervoobj.FSSAI_Certificate.Trim();

        if (quesionervoobj.Built_up_Area == "" || quesionervoobj.Built_up_Area == null)
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Built_up_Area", SqlDbType.VarChar).Value = quesionervoobj.Built_up_Area.Trim();

        if (quesionervoobj.HotelType == "" || quesionervoobj.HotelType == null)
            com.Parameters.Add("@Hotel_Type", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Hotel_Type", SqlDbType.VarChar).Value = quesionervoobj.HotelType.Trim();

        if (quesionervoobj.BoilerManufactuer == "" || quesionervoobj.BoilerManufactuer == null)
            com.Parameters.Add("@BiolerManufactuer_Industry", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@BiolerManufactuer_Industry", SqlDbType.VarChar).Value = quesionervoobj.BoilerManufactuer.Trim();


        if (quesionervoobj.NoofworkersContractor != null && quesionervoobj.NoofworkersContractor != "")
            com.Parameters.Add("@NoofworkersContractor", SqlDbType.VarChar).Value = quesionervoobj.NoofworkersContractor.Trim();

        if (quesionervoobj.CommencemantdateContractor == null || quesionervoobj.CommencemantdateContractor == "" || quesionervoobj.CommencemantdateContractor == "0")
            com.Parameters.Add("@CommencemantdateContractor", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CommencemantdateContractor", SqlDbType.VarChar).Value = quesionervoobj.CommencemantdateContractor.Trim();

        if (quesionervoobj.HotelClassification == null || quesionervoobj.HotelClassification == "" || quesionervoobj.HotelClassification == "0")
            com.Parameters.Add("@HOTELCLASSIFICATION", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@HOTELCLASSIFICATION", SqlDbType.VarChar).Value = quesionervoobj.HotelClassification.Trim();

        if (CinematographicLicense == null || CinematographicLicense == "" ||CinematographicLicense == "0")
            com.Parameters.Add("@CinematographicLicense", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@CinematographicLicense", SqlDbType.VarChar).Value = CinematographicLicense.Trim();

        if (LicensePeriod == null ||LicensePeriod == "" ||LicensePeriod == "0")
            com.Parameters.Add("@LicensePeriod", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@LicensePeriod", SqlDbType.VarChar).Value =LicensePeriod.Trim();

        if (Noofscreens == null || Noofscreens == "" || Noofscreens == "0")
            com.Parameters.Add("@Noofscreens", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@Noofscreens", SqlDbType.VarChar).Value = Noofscreens.Trim();

        if (TotalFee == null || TotalFee == "" || TotalFee == "0")
            com.Parameters.Add("@TotalFee", SqlDbType.VarChar).Value = DBNull.Value;
        else
            com.Parameters.Add("@TotalFee", SqlDbType.VarChar).Value = TotalFee.Trim();

        if (quesionervoobj.FDC != null && quesionervoobj.FDC != "")
            com.Parameters.Add("@FDC", SqlDbType.VarChar).Value = quesionervoobj.FDC.Trim();

        if (quesionervoobj.ExciseLabel != null && quesionervoobj.ExciseLabel != "")
            com.Parameters.Add("@ExciseLabel", SqlDbType.VarChar).Value = quesionervoobj.ExciseLabel.Trim();

        if (quesionervoobj.ExciseBrand != null && quesionervoobj.ExciseBrand != "")
            com.Parameters.Add("@ExciseBrand", SqlDbType.VarChar).Value = quesionervoobj.ExciseBrand.Trim();

        if (quesionervoobj.ExciseImport != null && quesionervoobj.ExciseImport != "")
            com.Parameters.Add("@ExciseImport", SqlDbType.VarChar).Value = quesionervoobj.ExciseImport.Trim();

        if (quesionervoobj.ExciseExport != null && quesionervoobj.ExciseExport != "")
            com.Parameters.Add("@ExciseImport", SqlDbType.VarChar).Value = quesionervoobj.ExciseExport.Trim();
        

        con.OpenConnection();
        com.Connection = con.GetConnection;

        //try
        //{
        //    //return com.ExecuteNonQuery();
        //    return Convert.ToInt32(com.ExecuteScalar());
        //}
        //catch (Exception ex)
        //{

        //    throw ex;
        //    return 0;
        //}
        //finally
        //{
        //    com.Dispose();
        //    con.CloseConnection();
        //}
        try
        {
            //return com.ExecuteNonQuery();
            // return Convert.ToInt32(com.ExecuteScalar());
            int n = Convert.ToInt32(com.ExecuteScalar());


            if (n > 0)
            {
                int valid = 0;
                con.OpenConnection();
                SqlCommand cmd = null;

                foreach (Screendetails fromvo in lstscreendetails)
                {
                    cmd = new SqlCommand("USP_INSERT_ScreenDetails", con.GetConnection);
                    cmd.CommandType = CommandType.StoredProcedure;
                    cmd.Parameters.AddWithValue("@intQuessionaireCFOid", Convert.ToString(intQuessionaireCFOid));
                    //cmd.Parameters.AddWithValue("@intCFEEnterpid", Convert.ToString(intCFOEnterpid));
                    //cmd.Parameters.AddWithValue("@Quessionaireid", Convert.ToString(formvoobj.Quessionaireid));
                    cmd.Parameters.AddWithValue("@ScreenNO", Convert.ToString(fromvo.ScreenNO));
                    cmd.Parameters.AddWithValue("@SeatCapacity", Convert.ToString(fromvo.SeatCapacity));
                    cmd.Parameters.AddWithValue("@ScreenFee", Convert.ToString(fromvo.ScreenFee));
                    cmd.Parameters.AddWithValue("@TotalFee", Convert.ToString(fromvo.TotalFee));

                    cmd.Parameters.AddWithValue("@Created_By ", Convert.ToString(fromvo.Created_By));
                    cmd.Parameters.Add("@Valid", SqlDbType.Int, 500);
                    cmd.Parameters["@Valid"].Direction = ParameterDirection.Output;
                    cmd.ExecuteNonQuery();
                    valid = (Int32)cmd.Parameters["@Valid"].Value;
                }


            }
            //else
            //{
            //    return 0;
            //}
            return n;
        }
        catch (Exception ex)
        {

            throw ex;
            return 0;
        }
        finally
        {
            com.Dispose();
            con.CloseConnection();
        }

    }
    public DataSet GetHotelCategories(string createdby)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("USP_GET_tm_Hotel_Types", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetCategoryDetNew_Hotel(string createdby, string HotelFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetCategoryDetNew", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@CREATEDBY", SqlDbType.VarChar).Value = createdby.ToString();
            da.SelectCommand.Parameters.Add("@HotelFlag", SqlDbType.VarChar).Value = HotelFlag.ToString();

            da.Fill(ds);
            return ds;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFees_Hotel(string SerchVer, string EnterpriseType, string HotelFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();
            da.SelectCommand.Parameters.Add("@HotelFlag", SqlDbType.VarChar).Value = HotelFlag;
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesHMDACLUandBuildingBoth_Hotel(string SerchVer, string EnterpriseType, string ApplType, string TotExtent, string TotHight, string HotelFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesHMDACLUandBuildingBoth", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (ApplType.Trim() == "" || ApplType.Trim() == null)
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.ToString();


            if (TotExtent.Trim() == "" || TotExtent.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.Decimal).Value = Convert.ToDecimal(TotExtent.ToString());



            if (TotHight.Trim() == "" || TotHight.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.Decimal).Value = Convert.ToDecimal(TotHight.ToString());
            da.SelectCommand.Parameters.Add("@HotelFlag", SqlDbType.VarChar).Value = HotelFlag;

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFeesTSIIC_Hotel(string SerchVer, string EnterpriseType, string intquestionnaireid, string Builduparea, string TotalArea, string HotelFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees_TSIIC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            if (intquestionnaireid.Trim() == "" || intquestionnaireid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intquestionnaireid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intquestionnaireid", SqlDbType.VarChar).Value = intquestionnaireid.ToString();

            if (Builduparea.Trim() == "" || Builduparea.Trim() == null)
                da.SelectCommand.Parameters.Add("@BuildUpArea", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@BuildUpArea", SqlDbType.VarChar).Value = Builduparea.ToString();

            if (TotalArea.Trim() == "" || TotalArea.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotalArea", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotalArea", SqlDbType.VarChar).Value = TotalArea.ToString();
            da.SelectCommand.Parameters.Add("@TotalArea", SqlDbType.VarChar).Value = HotelFlag.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowApprovalandFeesHMDACLUandBuilding_Hotel(string SerchVer, string EnterpriseType, string ApplType, string TotExtent, string TotHight, string HotelFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesHMDACLUandBuilding", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (ApplType.Trim() == "" || ApplType.Trim() == null)
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@ApplType", SqlDbType.VarChar).Value = ApplType.ToString();


            if (TotExtent.Trim() == "" || TotExtent.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotExtent", SqlDbType.Decimal).Value = Convert.ToDecimal(TotExtent.ToString());



            if (TotHight.Trim() == "" || TotHight.Trim() == null)
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@TotHight", SqlDbType.Decimal).Value = Convert.ToDecimal(TotHight.ToString());
            da.SelectCommand.Parameters.Add("@HotelFlag", SqlDbType.VarChar).Value = HotelFlag.ToString();






            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowApprovalandFeesDTCP_Hotel(string SerchVer, string EnterpriseType, string RUType, string HotelFlag)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFeesDTCP", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();




            if (RUType.Trim() == "" || RUType.Trim() == null)
                da.SelectCommand.Parameters.Add("@RUType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@RUType", SqlDbType.VarChar).Value = RUType.ToString();
            da.SelectCommand.Parameters.Add("@HotelFlag", SqlDbType.VarChar).Value = HotelFlag.ToString();




            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetShowApprovalandFees_Police(string SerchVer, string EnterpriseType, string intDistrictid, string intMandalId)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {
            da = new SqlDataAdapter("GetShowApprovalandFees_PoliceNOC", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (SerchVer.Trim() == "" || SerchVer.Trim() == null)
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@SerchVer", SqlDbType.VarChar).Value = SerchVer.ToString();


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();


            if (intDistrictid.Trim() == "" || intDistrictid.Trim() == null)
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intDistrictid", SqlDbType.VarChar).Value = intDistrictid.ToString();
            if (intMandalId.Trim() == "" || intMandalId.Trim() == null)
                da.SelectCommand.Parameters.Add("@intMandal", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@intMandal", SqlDbType.VarChar).Value = intMandalId.ToString();

            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }
    public DataSet GetShowApprovalandFees_TOURISMFOR_ALL(string EnterpriseType, string POLCIEflag, string barlicense, string tradeLicense, string healthSAnitary, string Fssai_Flag,
            string ddlVillage, string intMandal)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();
        try
        {

            da = new SqlDataAdapter("GetShowApprovalandFees_TOURISMFOR_ALL", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;


            if (EnterpriseType.Trim() == "" || EnterpriseType.Trim() == null)
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = "%";
            else
                da.SelectCommand.Parameters.Add("@EnterpriseType", SqlDbType.VarChar).Value = EnterpriseType.ToString();

            da.SelectCommand.Parameters.Add("@POLCIEflag", SqlDbType.VarChar).Value = POLCIEflag.ToString();
            da.SelectCommand.Parameters.Add("@barlicense", SqlDbType.VarChar).Value = barlicense.ToString();
            da.SelectCommand.Parameters.Add("@tradeLicense", SqlDbType.VarChar).Value = tradeLicense.ToString();
            da.SelectCommand.Parameters.Add("@healthSAnitary", SqlDbType.VarChar).Value = healthSAnitary.ToString();
            da.SelectCommand.Parameters.Add("@Fssai_Flag", SqlDbType.VarChar).Value = Fssai_Flag.ToString();
            da.SelectCommand.Parameters.Add("@ddlvillageid", SqlDbType.VarChar).Value = ddlVillage.ToString();
            da.SelectCommand.Parameters.Add("@intMandal", SqlDbType.VarChar).Value = intMandal.ToString();
            da.Fill(ds);
            return ds;


        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {
            con.CloseConnection();
        }
    }

    public DataSet GetApplandApprovalslist(string fromdate, string todate, string District)
    {
        con.OpenConnection();
        SqlDataAdapter da;
        DataSet ds = new DataSet();

        try
        {
            da = new SqlDataAdapter("GetApplandApprovalslist", con.GetConnection);
            da.SelectCommand.CommandType = CommandType.StoredProcedure;
            da.SelectCommand.Parameters.Add("@FromDate", SqlDbType.VarChar).Value = fromdate.ToString();
            da.SelectCommand.Parameters.Add("@ToDate", SqlDbType.VarChar).Value = todate.ToString();
            da.SelectCommand.Parameters.AddWithValue("@intDistrictid", District);


            da.Fill(ds);
            return ds;

        }
        catch (Exception ex)
        {
            throw ex;
        }
        finally
        {

            con.CloseConnection();
        }

    }

    //lavanya end 20.10.2020
}
// check slip


// incentive New Start
//public class IncentivesVOs
//{
//    public string UnitDIstId { get; set; }
//    public string UnitMandalId { get; set; }
//    public string UnitVillId { get; set; }

//    public string IncentveID { get; set; } //	int	4
//    public string User_Id { get; set; } //	varchar	10
//    public string EMiUdyogAadhar { get; set; } //	varchar	30
//    public string UnitName { get; set; } //	varchar	100
//    public string ApplciantName { get; set; } //	varchar	150
//    public string Gender { get; set; } //	varchar	1
//    public string Caste { get; set; } //	int	4
//    public string EmailID { get; set; } //	varchar	100
//    public string MobileNo { get; set; } //	varchar	10
//    public string natureOfAct { get; set; } //	int	4
//    public string Category { get; set; } //	int	4
//    public string Landvalue { get; set; } //	decimal	9
//    public string BuildingValue { get; set; } //	decimal	9
//    public string PlantMachineryValue { get; set; } //	decimal	9
//    public string EquipmentValue { get; set; } //	decimal	9
//    public string Total { get; set; } //	decimal	9
//    public string landstatus { get; set; } //	varchar	20
//    public string BuildingStatus { get; set; } //	varchar	20
//    public string District { get; set; } //	int	4
//    public string TypeofOrg { get; set; } //	int	4
//    public string TotalEmployment { get; set; } //	int	4
//    public string BankName { get; set; } //	varchar	50
//    public string AccNo { get; set; } //	varchar	50
//    public string BranchName { get; set; } //	varchar	50
//    public string IFSCCode { get; set; } //	varchar	20
//    public string IsActive { get; set; } //	char	1
//    public string IsDifferentlyAbled { get; set; } //	char	1
//    public string IsWomen { get; set; } //	char	1
//    public string IsMinority { get; set; } //	char	1
//    public string Addressofunit { get; set; } //	varchar	500
//    public string manadalid { get; set; } //	int	4
//    public string villageid { get; set; } //	int	4
//    public string sector { get; set; } //	int	4
//    public string NatureofBussiness { get; set; } //	varchar	500
//    public string IsOneTimeIncentive { get; set; } //	int	4
//    public bool IsGHMCandOtherMuncpOrp { get; set; } //	char	1
//    public bool isVehicleIncentive { get; set; } //	char	1
//    public string DCP { get; set; } //	datetime	8
//    public string VehicleNumber { get; set; } //	varchar	15
//    public string IsMeeSevaApplication { get; set; } //	char	1
//    public string MeeSevaUserID { get; set; } //	varchar	40
//    public string sMeeSevaPayDone { get; set; } //	char	1
//    public string MeeSevaTransactionNo { get; set; } //	varchar	40
//    public string WhetherPower { get; set; } //	varchar	12
//    public string RequesttoDept { get; set; } //	varchar	450
//    public string TinNO { get; set; } //	varchar	20
//    public string PanNo { get; set; } //	varchar	100
//    public string UnitDIst { get; set; } //	int	4
//    public string UnitMandal { get; set; } //	int	4
//    public string UnitVill { get; set; } //	int	4
//    public string UnitSyNO { get; set; } //	varchar	-1
//    public string UnitHNO { get; set; } //	varchar	100
//    public string UnitStreet { get; set; } //	varchar	-1
//    public string OffcDIst { get; set; } //	int	4
//    public string OffcMandal { get; set; } //	int	4
//    public string OffcVil { get; set; } //l	int	4
//    public string OffcStreet { get; set; } //	varchar	-1
//    public string OffcHNO { get; set; } //	varchar	-1
//    public string OrgType { get; set; } //	varchar	10
//    public string IdsustryStatus { get; set; } //	varchar	100
//    public string ExistingEnterpriseLOA { get; set; } //	varchar	50
//    public string ExistingInstalledCapacityinEnter { get; set; } //	varchar	10
//    public string ExistingPercentageincreaseunderExpansionORDiversification { get; set; } //	int	4
//    public string ExpansionDiversificationLOA { get; set; } //	varchar	50
//    public string ExpanORDiversInstalledCapacityinEnter { get; set; } //	varchar	10
//    public string ExpanORDiversPercentIncreaseunderExpansionORDiversification { get; set; } //	int	4
//    public string ExistEnterpriseLand { get; set; } //	varchar	20
//    public string ExistEnterpriseBuilding { get; set; } //	varchar	20
//    public string ExistEnterprisePlantMachinery { get; set; } //	varchar	20
//    public string ExpansionDiversificationLand { get; set; } //	varchar	20
//    public string ExpDiversBuilding { get; set; } //	varchar	20
//    public string ExpDiversPlantMachinery { get; set; } //varchar	20
//    public string LandFixedCapitalInvestPercentage { get; set; } //varchar	10
//    public string BuildingFixedCapitalInvestPercentage { get; set; } //varchar	10
//    public string PlantMachFixedCapitalInvestPercentage { get; set; } //varchar	10
//    public string SocialStatus { get; set; } //varchar	10
//    public string PowerReleaseDate { get; set; } //date	3
//    public string ConnectedLoad { get; set; } //varchar	20
//    public string ContractedLoad { get; set; } //varchar	10
//    public string ManagementStaffMale { get; set; } //int	4
//    public string ManagementStaffFemale { get; set; } //int	4
//    public string SupervisoryMale { get; set; } //int	4
//    public string SupervisoryFemale { get; set; } //int	4
//    public string WorkersMale { get; set; } //int	4
//    public string WorkersFemale { get; set; } //int	4
//    public string ProjectFinance { get; set; } //decimal	9
//    public string TermLoanApplDate { get; set; } //date	3
//    public string InstitutionName { get; set; } //varchar	100
//    public string TermLoanSancRefNo { get; set; } //varchar	50
//    public string AvailedSubsidyEarlier { get; set; } //char	1
//    public string TotalSubsidyAlreadyAvailedScheme { get; set; } //decimal	9
//    public string TotalSubsidyAlreadyAvailedAmount { get; set; } //decimal	9
//    public string SecondHandMachVal { get; set; } //decimal	9
//    public string NewMachVal { get; set; } //decimal	9
//    public string Newand2ndlMachTotVal { get; set; } //decimal	9
//    public string PercentageSHMValinTotMachVal { get; set; } //decimal	9
//    public string MachValPrchasedfromAPIDCorAPSFCBank { get; set; } //decimal	9
//    public string TotalMachVal { get; set; } //decimal	9
//    public string InvestimentSubsidy { get; set; } //decimal	9
//    public string AdditionalInvSubsidyForWomen { get; set; } //decimal	9
//    public string AdditionalInvSubsidyForSCORST { get; set; } //decimal	9
//    public string AdditionalInvSubsidyForWomenInScheduledAreas { get; set; } //decimal	9
//    public string TotalAppliedIncetives { get; set; } //decimal	9
//    public string CfeQuid { get; set; } //int	4
//    public string CfoQuid { get; set; } //int	4
//    public string intStatusid { get; set; } //int	4
//    public string Createdby { get; set; } //int	4
//    public string Created_dt { get; set; } //datetime	8
//    public string Modifiedby { get; set; } //int	4
//    public string Modified_dt { get; set; } //datetime	8
//    public string InvSubsidyFlg { get; set; } //varchar	1
//    public string PowerSubsidyFlg { get; set; } //varchar	1
//    public string VATSubsidyFlg { get; set; } //varchar	1
//    public string PavlaVaddiFlg { get; set; } //varchar	1
//    public string StampDutyFlg { get; set; } //varchar	1
//    public string AdvSubsidyFlg { get; set; } //varchar	1
//    public string QualityFlg { get; set; } //varchar	1
//    public string DateOfComm { get; set; } //varchar	1
//    public string Vatno { get; set; } //varchar	1
//    public string Cstno { get; set; } //varchar	1

//}


//public class IncentivesVOs
//{
//    public string UnitDIstId { get; set; }
//    public string UnitMandalId { get; set; }
//    public string UnitVillId { get; set; }

//    public string IncentveID { get; set; } //	int	4
//    public string User_Id { get; set; } //	varchar	10
//    public string EMiUdyogAadhar { get; set; } //	varchar	30
//    public string UnitName { get; set; } //	varchar	100
//    public string ApplciantName { get; set; } //	varchar	150
//    public string Gender { get; set; } //	varchar	1
//    public string Caste { get; set; } //	int	4
//    public string EmailID { get; set; } //	varchar	100
//    public string MobileNo { get; set; } //	varchar	10
//    public string natureOfAct { get; set; } //	int	4
//    public string Category { get; set; } //	int	4
//    public string Landvalue { get; set; } //	decimal	9
//    public string BuildingValue { get; set; } //	decimal	9
//    public string PlantMachineryValue { get; set; } //	decimal	9
//    public string EquipmentValue { get; set; } //	decimal	9
//    public string Total { get; set; } //	decimal	9
//    public string landstatus { get; set; } //	varchar	20
//    public string BuildingStatus { get; set; } //	varchar	20
//    public string District { get; set; } //	int	4
//    public string TypeofOrg { get; set; } //	int	4
//    public string TotalEmployment { get; set; } //	int	4
//    public string BankName { get; set; } //	varchar	50
//    public string AccNo { get; set; } //	varchar	50
//    public string BranchName { get; set; } //	varchar	50
//    public string IFSCCode { get; set; } //	varchar	20
//    public string IsActive { get; set; } //	char	1

//    public string IsDifferentlyAbled { get; set; } //	char	1
//    public string IsWomen { get; set; } //	char	1
//    public string IsMinority { get; set; } //	char	1

//    public string Addressofunit { get; set; } //	varchar	500
//    public string manadalid { get; set; } //	int	4
//    public string villageid { get; set; } //	int	4
//    public string sector { get; set; } //	int	4
//    public string NatureofBussiness { get; set; } //	varchar	500
//    public string IsOneTimeIncentive { get; set; } //	int	4
//    public bool IsGHMCandOtherMuncpOrp { get; set; } //	char	1
//    public bool isVehicleIncentive { get; set; } //	char	1
//    public string DCP { get; set; } //	datetime	8
//    public string VehicleNumber { get; set; } //	varchar	15
//    public string IsMeeSevaApplication { get; set; } //	char	1
//    public string MeeSevaUserID { get; set; } //	varchar	40
//    public string sMeeSevaPayDone { get; set; } //	char	1
//    public string MeeSevaTransactionNo { get; set; } //	varchar	40
//    public string WhetherPower { get; set; } //	varchar	12
//    public string RequesttoDept { get; set; } //	varchar	450
//    public string TinNO { get; set; } //	varchar	20
//    public string PanNo { get; set; } //	varchar	100
//    public string UnitDIst { get; set; } //	int	4
//    public string UnitMandal { get; set; } //	int	4
//    public string UnitVill { get; set; } //	int	4
//    public string UnitSyNO { get; set; } //	varchar	-1
//    public string UnitHNO { get; set; } //	varchar	100
//    public string UnitStreet { get; set; } //	varchar	-1

//    public string UnitEmail { get; set; } //		varchar	200
//    public string UnitMObileNo { get; set; } //	varchar	12  

//    public string OffcDIst { get; set; } //	int	4
//    public string OffcMandal { get; set; } //	int	4
//    public string OffcVil { get; set; } //l	int	4
//    public string OffcStreet { get; set; } //	varchar	-1
//    public string OffcHNO { get; set; } //	varchar	-1

//    public string OffcEmail { get; set; } //	varchar	200
//    public string OffcMobileNO { get; set; } //		varchar	12

//    public string OrgType { get; set; } //	varchar	10
//    public string IdsustryStatus { get; set; } //	varchar	100
//    public string ExistingEnterpriseLOA { get; set; } //	varchar	50
//    public string ExistingInstalledCapacityinEnter { get; set; } //	varchar	10
//    public string ExistingPercentageincreaseunderExpansionORDiversification { get; set; } //	int	4
//    public string ExpansionDiversificationLOA { get; set; } //	varchar	50
//    public string ExpanORDiversInstalledCapacityinEnter { get; set; } //	varchar	10
//    public string ExpanORDiversPercentIncreaseunderExpansionORDiversification { get; set; } //	int	4
//    public string ExistEnterpriseLand { get; set; } //	varchar	20
//    public string ExistEnterpriseBuilding { get; set; } //	varchar	20
//    public string ExistEnterprisePlantMachinery { get; set; } //	varchar	20
//    public string ExpansionDiversificationLand { get; set; } //	varchar	20
//    public string ExpDiversBuilding { get; set; } //	varchar	20
//    public string ExpDiversPlantMachinery { get; set; } //varchar	20
//    public string LandFixedCapitalInvestPercentage { get; set; } //varchar	10
//    public string BuildingFixedCapitalInvestPercentage { get; set; } //varchar	10
//    public string PlantMachFixedCapitalInvestPercentage { get; set; } //varchar	10
//    public string SocialStatus { get; set; } //varchar	10

//    public string NewPowerReleaseDate { get; set; } //		date	3
//    public string NewConnectedLoad { get; set; } //	varchar	20
//    public string NewContractedLoad { get; set; } //		varchar	10
//    public string ServiceConnectionNO { get; set; } //		varchar	30

//    public string ExistingPowerReleaseDate { get; set; } //		date	3
//    public string ExistingConnectedLoad { get; set; } //	varchar	20
//    public string ExistingContractedLoad { get; set; } //		varchar	10
//    public string ExistingServiceConnectionNO { get; set; } //		varchar	30

//    public string ExpanDiverPowerReleaseDate { get; set; } //		date	3
//    public string ExpanDiverConnectedLoad { get; set; } //	varchar	20
//    public string ExpanDiverContractedLoad { get; set; } //	varchar	10
//    public string ExpanDiverServiceConnectionNO { get; set; } //	varchar	30

//    public int ManagementStaffMale { get; set; } //int	4
//    public int ManagementStaffFemale { get; set; } //int	4
//    public int SupervisoryMale { get; set; } //int	4
//    public int SupervisoryFemale { get; set; } //int	4


//    public int SkilledWorkersMale { get; set; } //	int	4
//    public int SkilledWorkersFemale { get; set; } //	int	4
//    public int SemiSkilledWorkersMale { get; set; } //		int	4
//    public int SemiSkilledWorkersFemale { get; set; } //	int	4

//    public string ProjectFinance { get; set; } //decimal	9
//    public string TermLoanApplDate { get; set; } //date	3
//    public string InstitutionName { get; set; } //varchar	100
//    public string TermLoanSancRefNo { get; set; } //varchar	50

//    //public string AvailedSubsidyEarlier { get; set; } //char	1
//    //public string TotalSubsidyAlreadyAvailedScheme { get; set; } //decimal	9
//    //public string TotalSubsidyAlreadyAvailedAmount { get; set; } //decimal	9

//    public string SecondHandMachVal { get; set; } //decimal	9
//    public string NewMachVal { get; set; } //decimal	9
//    public string Newand2ndlMachTotVal { get; set; } //decimal	9
//    public string PercentageSHMValinTotMachVal { get; set; } //decimal	9
//    public string MachValPrchasedfromAPIDCorAPSFCBank { get; set; } //decimal	9
//    public string TotalMachVal { get; set; } //decimal	9

//    //public string InvestimentSubsidy { get; set; } //decimal	9
//    //public string AdditionalInvSubsidyForWomen { get; set; } //decimal	9
//    //public string AdditionalInvSubsidyForSCORST { get; set; } //decimal	9
//    //public string AdditionalInvSubsidyForWomenInScheduledAreas { get; set; } //decimal	9
//    //public string TotalAppliedIncetives { get; set; } //decimal	9

//    public string CfeQuid { get; set; } //int	4
//    public string CfoQuid { get; set; } //int	4
//    public string intStatusid { get; set; } //int	4
//    public string Createdby { get; set; } //int	4
//    public string Created_dt { get; set; } //datetime	8
//    public string Modifiedby { get; set; } //int	4
//    public string Modified_dt { get; set; } //datetime	8
//    public string InvSubsidyFlg { get; set; } //varchar	1
//    public string PowerSubsidyFlg { get; set; } //varchar	1
//    public string VATSubsidyFlg { get; set; } //varchar	1
//    public string PavlaVaddiFlg { get; set; } //varchar	1
//    public string StampDutyFlg { get; set; } //varchar	1
//    public string AdvSubsidyFlg { get; set; } //varchar	1
//    public string QualityFlg { get; set; } //varchar	1
//    public string DateOfComm { get; set; } //varchar	1

//    public string Vatno { get; set; } //varchar	1
//    public string Cstno { get; set; } //varchar	1

//    public string CSTRegDate { get; set; } //	varchar	15
//    public string CSTRegAuthority { get; set; } //	varchar	-1
//    public string CSTRegAuthAddress { get; set; } //	varchar	-1
//    public string PowerStatus { get; set; } //	varchar	-1


//    // 06/06/2017
//    public string isSecondHandMachVal { get; set; } //decimal	9  added on 05/06/2017
//    public string TermLoanSanDate { get; set; } //date	3
//    public string eepinscapUnit { get; set; } //decimal	9  added on 05/06/2017
//    public string edpinscapUnit { get; set; } //decimal	9  added on 05/06/2017

//    public string UnitState { get; set; }
//    public string OffcState { get; set; }
//    public string OffcOtherDist { get; set; }
//    public string OffcOtherMandal { get; set; }
//    public string OffcOtherVillage { get; set; }
//    public string EMPart { get; set; }

//    public string SubCaste { get; set; } //	Varchar	20 
//    public string GSTNO { get; set; } //	Varchar	50

//    public string GSTDate { get; set; } //	Varchar	20 
//    public string IndustryExpansionType { get; set; } //	Varchar	20

//    public string PowNewConnectUnit { get; set; } //	Varchar	20 
//    public string PowNewContractUnit { get; set; } //	Varchar	20
//    public string PowExistConnectUnit { get; set; } //	Varchar	20 
//    public string PowExistContractUnit { get; set; } //	Varchar	20
//    public string PowDiversConnectUnit { get; set; } //	Varchar	20 
//    public string PowDiversContractUnit { get; set; } //	Varchar	20
//    public string IsPowerApplicable { get; set; } //	Varchar	20

//    // DIPC Entry Screen VOs
//    public string incentiveTypeID { get; set; } //    Varchar    20
//    public string incentiveTypename { get; set; } //    Varchar    20
//    public string recommendedAnount { get; set; } //    Varchar    20
//    public string sanctionAmount { get; set; } //    Varchar    20
//    public string sanctionDate { get; set; } //    Varchar    20
//    public string DIPCNO { get; set; } //    Varchar    20
//    public string DIPCDate { get; set; } //    Varchar    20

//    public string SLCNO { get; set; } //    Varchar    20
//    public string SLCDate { get; set; } //    Varchar    20
//    public string SCHEMEName { get; set; } //    Varchar    20
//    public string Committee { get; set; } //    Varchar    20
//    public string Status { get; set; } //    Varchar    20
//    public string Remarks { get; set; } //    Varchar    20

//    // 29072017
//    public string Sector { get; set; } //    Varchar    20
//    public string IndsCategory { get; set; } //    Varchar    20
//    public string TypeOfAccount { get; set; } //    Varchar    20

//}

//public class IncentiveVosA
//{
//    public string User_id { get; set; } //	int	4
//    public string Incentive_id { get; set; } //	varchar	20
//    public string CfeQuid { get; set; } //	int	4
//    public string CfoQuid { get; set; } //	int	4
//    public string LandApprovedProjectCost { get; set; } //	decimal	9
//    public string LandLoanSactioned { get; set; } //	decimal	9
//    public string LandPromotersEquity { get; set; } //	decimal	9
//    public string LandLoanAmountReleased { get; set; } //	decimal	9
//    public string LandAssetsValuebyFinInstitution { get; set; } //	decimal	9
//    public string LandAssetsValuebyCA { get; set; } //	decimal	9
//    public string BuildingApprovedProjectCost { get; set; } //	decimal	9
//    public string BuildingLoanSactioned { get; set; } //	decimal	9
//    public string BuildingPromotersEquity { get; set; } //	decimal	9
//    public string BuildingLoanAmountReleased { get; set; } //	decimal	9
//    public string BuildingAssetsValuebyFinInstitution { get; set; } //	decimal	9
//    public string BuildingAssetsValuebyCA { get; set; } //	decimal	9
//    public string PlantMachineryApprovedProjectCost { get; set; } //	decimal	9
//    public string PlantMachineryLoanSactioned { get; set; } //	decimal	9
//    public string PlantMachineryPromotersEquity { get; set; } //	decimal	9
//    public string PlantMachineryLoanAmountReleased { get; set; } //	decimal	9
//    public string PlantMachineryAssetsValuebyFinInstitution { get; set; } //	decimal	9
//    public string PlantMachineryAssetsValuebyCA { get; set; } //	decimal	9
//    public string MachineryContingenciesApprovedProjectCost { get; set; } //	decimal	9
//    public string MachineryContingenciesLoanSactioned { get; set; } //	decimal	9
//    public string MachineryContingenciesPromotersEquity { get; set; } //	decimal	9
//    public string MachineryContingenciesLoanAmountReleased { get; set; } //	decimal	9
//    public string MachineryContingenciesAssetsValuebyFinInstitution { get; set; } //	decimal	9
//    public string MachineryContingenciesAssetsValuebyCA { get; set; } //	decimal	9
//    public string ErectionApprovedProjectCost { get; set; } //	decimal	9
//    public string ErectionLoanSactioned { get; set; } //	decimal	9
//    public string ErectionLoanAmountReleased { get; set; } //	decimal	9
//    public string ErectionPromotersEquity { get; set; } //	decimal	9
//    public string ErectionAssetsValuebyFinInstitution { get; set; } //	decimal	9
//    public string ErectionAssetsValuebyCA { get; set; } //	decimal	9
//    public string TechnicalfeasibilityApprovedProjectCost { get; set; } //	decimal	9
//    public string TechnicalfeasibilityLoanSactioned { get; set; } //	decimal	9
//    public string TechnicalfeasibilityPromotersEquity { get; set; } //	decimal	9
//    public string TechnicalfeasibilityLoanAmountReleased { get; set; } //	decimal	9
//    public string TechnicalfeasibilityAssetsValuebyFinInstitution { get; set; } //	decimal	9
//    public string TechnicalfeasibilityAssetsValuebyCA { get; set; } //	decimal	9
//    public string WorkingCapitalApprovedProjectCost { get; set; } //	decimal	9
//    public string WorkingCapitalLoanSactioned { get; set; } //	decimal	9
//    public string WorkingCapitalPromotersEquity { get; set; } //	decimal	9
//    public string WorkingCapitalLoanAmountReleased { get; set; } //	decimal	9
//    public string WorkingCapitalAssetsValuebyFinInstitution { get; set; } //	decimal	9
//    public string WorkingCapitalAssetsValuebyCA { get; set; } //	decimal	9
//    public string created_by { get; set; } //	int	4
//    public string created_dt { get; set; } //	datetime	8
//    public string Modified_by { get; set; } //	int	4
//    public string Modified_dt { get; set; } //	datetime	8

//}

//public class IncentiveVosIncetForms
//{
//    //Is
//    public string IncentveID { get; set; } //int
//    public string AvldSubsidyScheme { get; set; } //	varchar
//    public string AvldSubsidyAmt { get; set; } //	varchar
//    public string SchemeEligible { get; set; } //varchar
//    public string AppldInvestSubsidy { get; set; } //varchar
//    public string AppldAddlAmtWomen { get; set; } //varchar
//    public string AppldTotInvestSubsidy { get; set; } //varchar
//    public string Created_by { get; set; } //int
//    public string Created_dt { get; set; } //datetime
//    public string status { get; set; } //	int
//    public string Modified_by { get; set; } //int
//    public string Modified_dt { get; set; } //datetime

//    // added on 17.06.2017  
//    public string ISubsidySCSCT { get; set; } //varchar(100)
//    public string ISubsidyScheduledAreas { get; set; } //varchar(100)

//    // stamp Duty

//    public string AreaRegdSaledeed { get; set; } // varchar	100
//    public string PlnthAreaBuild { get; set; } // varchar	50
//    public string FivePlnthAreaBuild { get; set; } // varchar	50
//    public string AreaReqdAppraisal { get; set; } // varchar	50
//    public string AreaReqdTSPCB { get; set; } // varchar	50
//    public string NatureofTrans { get; set; } // varchar	50
//    public string SubRegOffc { get; set; } // varchar	-1
//    public string RegdDeedNo { get; set; } // varchar	50
//    public DateTime RegnDate { get; set; } // datetime	8
//    public string StampTranfrDutyAP { get; set; } // varchar	50
//    public string MortgageHypothDutyAP { get; set; } // varchar	50
//    public string LandConvrChrgAP { get; set; } // 	50
//    public string LandCostIeIdaIpAP { get; set; } // varchar	50
//    public string StampTranfrDutyAC { get; set; } // varchar	50
//    public string MortgageHypothDutyAC { get; set; } // varchar	50
//    public string LandConvrChrgAC { get; set; } // varchar	50
//    public string LandCostIeIdaIpAC { get; set; } // varchar	50

//    // Advanced Subsidy for SC/ST
//    public string TotalEquity { get; set; } // varchar	50
//    public string OwnCapital { get; set; } // varchar	50
//    public string Borrowed { get; set; } // varchar	50
//    public string AdvSubClaimed { get; set; } // varchar	50


//    // IID FUND

//    public string UnitLocatedinIndustArea { get; set; } // 	char	1
//    public string JustLocation { get; set; } // 	-1
//    public string FinanceSource { get; set; } // 	varchar	500
//    public string ReqdInfraFacilities { get; set; } // varchar	-1
//    public string ProposedInfraCritical { get; set; } // varchar	-1
//    public string EstimatesInfra { get; set; } // varchar	100
//    public string CAName { get; set; } // varchar	500
//    public string ProjDuration { get; set; } // varchar	50
//    //public string MeasuresProposed { get; set; } // varchar	500
//    public string MaintanCostAnnum { get; set; } // varchar	50 
//    public string AmtClaimed { get; set; } // varchar	50

//    // Check Slip

//    public string CSIncentiveId { get; set; } // 	int	4
//    public string CSEntprId { get; set; } // 	int	4
//    public string CSCreatedBy { get; set; } // 	int	4
//    public string CSbillsofinstitutfinancedEnterpriseindustries { get; set; } // 	char	1
//    public string CSbillandpymtproofrespectofselffinancedEnterprisesindustries { get; set; } // 	char	1
//    public string CasteCertificatesSCST { get; set; } // 	char	1
//    public string CSEntrepreneurAadhar { get; set; } // 	char	1
//    public string CSEntrepreneurPANCard { get; set; } // 	char	1
//    public string CSCertificateofCA { get; set; } // 	char	1
//    public string CSRegdPartnershipDeedArticles { get; set; } // 	char	1
//    public string CSApprovalDirectorFactories { get; set; } // 	char	1
//    public string CSBoilersCertificate { get; set; } // 	char	1
//    public string CSApprovalDirectorTownCountryPlanningUDA { get; set; } // 	char	1
//    public string CSRegularbuildingplansapprovalofMunicipalityGramPanchayat { get; set; } // 	char	1
//    public string CSOperationTSPCBAcknowledgementGM { get; set; } // 	char	1
//    public string CSPowerreleaseCertificatefrmTSTRANSCODISCOM { get; set; } // 	char	1
//    public string CSEnvironmentalclearance { get; set; } // 	char	1
//    public string CSOtherstatutoryapprovalsspecif { get; set; } // 	char	1
//    public string CSEMPartIfullsetIEMIL { get; set; } // 	char	1
//    public string CSEMPartIIfullsetIEMIL { get; set; } // 	char	1
//    public string CSUdyogAadhar { get; set; } // 	char	1
//    public string CSProjectReport { get; set; } // 	char	1
//    public string CSTermloansanctionletters { get; set; } // 	char	1
//    public string CSBoardResolutionauthorizing { get; set; } // 	char	1
//    public string CSRegisteredlandSaledeedPremisesLeasedeed { get; set; } // 	char	1
//    public string CSCACECertificateregarding2handplantmachinery { get; set; } // 	char	1
//    public string CSCECertificateSelffabricatedmachinery { get; set; } // 	char	1
//    public string CSBISCertificate { get; set; } // 	char	1
//    public string CSDrugLicense { get; set; } // 	char	1
//    public string CSExplosiveLicense { get; set; } // 	char	1
//    public string CSVATCSTSGSTCertificate { get; set; } // 	char	1
//    public string CSFormA { get; set; } // 	char	1
//    public string CSFormB { get; set; } // 	char	1
//    public string Status { get; set; } // 	char	1

//}
// incentive New  End

// Incentive New addition



public class DistrictReform
{
    public string IncentveID { get; set; }
    public string sector { get; set; }
    public string UdyogAadharType { get; set; }
    public string EMiUdyogAadhar { get; set; }
    public string UdyogAadharRegdDate { get; set; }
    public string UnitName { get; set; }
    public string ApplciantName { get; set; }
    public string TinNO { get; set; }
    public string PanNo { get; set; }
    public string IsDifferentlyAbled { get; set; }
    public string IsMinority { get; set; }
    public string DateOfComm { get; set; }
    public string Gender { get; set; }
    public string SocialStatus { get; set; }
    public string SubCaste { get; set; }
    public bool isVehicleIncentive { get; set; }
    public string VehicleNumber { get; set; }
    public string User_Id { get; set; }
    public string UnitState { get; set; }
    public string UnitDIst { get; set; }
    public string UnitMandal { get; set; }
    public string UnitVill { get; set; }
    public string UnitStreet { get; set; }
    public string UnitHNO { get; set; }
    public string UnitMObileNo { get; set; }
    public string UnitEmail { get; set; }
    public string OffcState { get; set; }
    public string OffcOtherDist { get; set; }
    public string OffcOtherMandal { get; set; }
    public string OffcOtherVillage { get; set; }
    public string OffcDIst { get; set; } //	int	4
    public string OffcMandal { get; set; } //	int	4
    public string OffcVil { get; set; } //l	int	4
    public string OffcHNO { get; set; }
    public string OffcStreet { get; set; }
    public string OffcEmail { get; set; }
    public string OffcMobileNO { get; set; }
    public string TypeofOrg { get; set; }
    public bool IsGHMCandOtherMuncpOrp { get; set; }
    public string isIALA { get; set; }
    public int IndusParkList { get; set; }
    public string natureOfAct { get; set; }
    public string NatureofBussiness { get; set; }
    public string AppsLevel { get; set; }


}



public class IncentivesVOs
{
    //added by shiva 03/03/2022///
    public string ServiceLineofactivity { get; set; }
    public string Othersactivty { get; set; }
    public string Islocalemp { get; set; }
    public string semiskilledmaletotal { get; set; }
    public string semiskilledfemaletotal { get; set; }
    public string semiskilledmaletotal_local { get; set; }
    public string semiskilledfemaletotal_local { get; set; }
    public string skilledmaletotal { get; set; }
    public string skilledfemaletotal { get; set; }
    public string skilledmaletotal_local { get; set; }
    public string skilledfemaletotal_local { get; set; }
    // end of added by shiva 03/03/2022///


    public string IpAddress { get; set; }

    public string MSMENO { get; set; }

    public string FOODPROCFLAG { get; set; }
    public string FOODPROCDESCRIPTION { get; set; }

    public string CFEUidno { get; set; }
    public string CFOUidno { get; set; }
    public string applyAgain { get; set; }

    public string AuthorisedSignatory { get; set; }
    public string UnitDIstId { get; set; }
    public string UnitMandalId { get; set; }
    public string UnitVillId { get; set; }

    public string IncentveID { get; set; } //	int	4
    public string User_Id { get; set; } //	varchar	10
    public string EMiUdyogAadhar { get; set; } //	varchar	30
    public string UnitName { get; set; } //	varchar	100
    public string ApplciantName { get; set; } //	varchar	150
    public string Gender { get; set; } //	varchar	1
    public string Caste { get; set; } //	int	4
    public string EmailID { get; set; } //	varchar	100
    public string MobileNo { get; set; } //	varchar	10
    public string natureOfAct { get; set; } //	int	4
    public string Category { get; set; } //	int	4
    public string Landvalue { get; set; } //	decimal	9
    public string BuildingValue { get; set; } //	decimal	9
    public string PlantMachineryValue { get; set; } //	decimal	9
    public string EquipmentValue { get; set; } //	decimal	9
    public string Total { get; set; } //	decimal	9
    public string landstatus { get; set; } //	varchar	20
    public string BuildingStatus { get; set; } //	varchar	20
    public string District { get; set; } //	int	4
    public string TypeofOrg { get; set; } //	int	4
    public string TotalEmployment { get; set; } //	int	4
    public string BankName { get; set; } //	varchar	50
    public string NBFCName { get; set; } //	varchar	50
    public string AccNo { get; set; } //	varchar	50
    public string BranchName { get; set; } //	varchar	50
    public string IFSCCode { get; set; } //	varchar	20
    public string IsActive { get; set; } //	char	1

    public string IsDifferentlyAbled { get; set; } //	char	1
    public string IsWomen { get; set; } //	char	1
    public string IsMinority { get; set; } //	char	1

    public string Addressofunit { get; set; } //	varchar	500
    public string manadalid { get; set; } //	int	4
    public string villageid { get; set; } //	int	4
    public string sector { get; set; } //	int	4
    public string NatureofBussiness { get; set; } //	varchar	500
    public string IsOneTimeIncentive { get; set; } //	int	4
    public bool IsGHMCandOtherMuncpOrp { get; set; } //	char	1
    public bool isVehicleIncentive { get; set; } //	char	1
    public string DCP { get; set; } //	datetime	8
    public string VehicleNumber { get; set; } //	varchar	15
    public string IsMeeSevaApplication { get; set; } //	char	1
    public string MeeSevaUserID { get; set; } //	varchar	40
    public string sMeeSevaPayDone { get; set; } //	char	1
    public string MeeSevaTransactionNo { get; set; } //	varchar	40
    public string WhetherPower { get; set; } //	varchar	12
    public string RequesttoDept { get; set; } //	varchar	450
    public string TinNO { get; set; } //	varchar	20
    public string PanNo { get; set; } //	varchar	100
    public string UnitDIst { get; set; } //	int	4
    public string UnitMandal { get; set; } //	int	4
    public string UnitVill { get; set; } //	int	4
    public string UnitSyNO { get; set; } //	varchar	-1
    public string UnitHNO { get; set; } //	varchar	100
    public string UnitStreet { get; set; } //	varchar	-1

    public string UnitEmail { get; set; } //		varchar	200
    public string UnitMObileNo { get; set; } //	varchar	12  

    public string OffcDIst { get; set; } //	int	4
    public string OffcMandal { get; set; } //	int	4
    public string OffcVil { get; set; } //l	int	4
    public string OffcStreet { get; set; } //	varchar	-1
    public string OffcHNO { get; set; } //	varchar	-1

    public string OffcEmail { get; set; } //	varchar	200
    public string OffcMobileNO { get; set; } //		varchar	12

    public string OrgType { get; set; } //	varchar	10
    public string IdsustryStatus { get; set; } //	varchar	100
    public string ExistingEnterpriseLOA { get; set; } //	varchar	50
    public string ExistingInstalledCapacityinEnter { get; set; } //	varchar	10
    public string ExistingPercentageincreaseunderExpansionORDiversification { get; set; } //	int	4
    public string ExpansionDiversificationLOA { get; set; } //	varchar	50
    public string ExpanORDiversInstalledCapacityinEnter { get; set; } //	varchar	10
    public string ExpanORDiversPercentIncreaseunderExpansionORDiversification { get; set; } //	int	4
    public string ExistEnterpriseLand { get; set; } //	varchar	20
    public string ExistEnterpriseBuilding { get; set; } //	varchar	20
    public string ExistEnterprisePlantMachinery { get; set; } //	varchar	20
    public string ExpansionDiversificationLand { get; set; } //	varchar	20
    public string ExpDiversBuilding { get; set; } //	varchar	20
    public string ExpDiversPlantMachinery { get; set; } //varchar	20
    public string LandFixedCapitalInvestPercentage { get; set; } //varchar	10
    public string BuildingFixedCapitalInvestPercentage { get; set; } //varchar	10
    public string PlantMachFixedCapitalInvestPercentage { get; set; } //varchar	10
    public string SocialStatus { get; set; } //varchar	10

    public string NewPowerReleaseDate { get; set; } //		date	3
    public string NewConnectedLoad { get; set; } //	varchar	20
    public string NewContractedLoad { get; set; } //		varchar	10
    public string ServiceConnectionNO { get; set; } //		varchar	30

    public string ExistingPowerReleaseDate { get; set; } //		date	3
    public string ExistingConnectedLoad { get; set; } //	varchar	20
    public string ExistingContractedLoad { get; set; } //		varchar	10
    public string ExistingServiceConnectionNO { get; set; } //		varchar	30

    public string ExpanDiverPowerReleaseDate { get; set; } //		date	3
    public string ExpanDiverConnectedLoad { get; set; } //	varchar	20
    public string ExpanDiverContractedLoad { get; set; } //	varchar	10
    public string ExpanDiverServiceConnectionNO { get; set; } //	varchar	30

    public int ManagementStaffMale { get; set; } //int	4
    public int ManagementStaffFemale { get; set; } //int	4
    public int SupervisoryMale { get; set; } //int	4
    public int SupervisoryFemale { get; set; } //int	4


    public int SkilledWorkersMale { get; set; } //	int	4
    public int SkilledWorkersFemale { get; set; } //	int	4
    public int SemiSkilledWorkersMale { get; set; } //		int	4
    public int SemiSkilledWorkersFemale { get; set; } //	int	4

    public string ProjectFinance { get; set; } //decimal	9
    public string TermLoanApplDate { get; set; } //date	3
    public string InstitutionName { get; set; } //varchar	100
    public string TermLoanSancRefNo { get; set; } //varchar	50

    //public string AvailedSubsidyEarlier { get; set; } //char	1
    //public string TotalSubsidyAlreadyAvailedScheme { get; set; } //decimal	9
    //public string TotalSubsidyAlreadyAvailedAmount { get; set; } //decimal	9

    public string SecondHandMachVal { get; set; } //decimal	9
    public string NewMachVal { get; set; } //decimal	9
    public string Newand2ndlMachTotVal { get; set; } //decimal	9
    public string PercentageSHMValinTotMachVal { get; set; } //decimal	9
    public string MachValPrchasedfromAPIDCorAPSFCBank { get; set; } //decimal	9
    public string TotalMachVal { get; set; } //decimal	9

    //public string InvestimentSubsidy { get; set; } //decimal	9
    //public string AdditionalInvSubsidyForWomen { get; set; } //decimal	9
    //public string AdditionalInvSubsidyForSCORST { get; set; } //decimal	9
    //public string AdditionalInvSubsidyForWomenInScheduledAreas { get; set; } //decimal	9
    //public string TotalAppliedIncetives { get; set; } //decimal	9

    public string CfeQuid { get; set; } //int	4
    public string CfoQuid { get; set; } //int	4
    public string intStatusid { get; set; } //int	4
    public string Createdby { get; set; } //int	4
    public string Created_dt { get; set; } //datetime	8
    public string Modifiedby { get; set; } //int	4
    public string Modified_dt { get; set; } //datetime	8
    public string InvSubsidyFlg { get; set; } //varchar	1
    public string PowerSubsidyFlg { get; set; } //varchar	1
    public string VATSubsidyFlg { get; set; } //varchar	1
    public string PavlaVaddiFlg { get; set; } //varchar	1
    public string StampDutyFlg { get; set; } //varchar	1
    public string AdvSubsidyFlg { get; set; } //varchar	1
    public string QualityFlg { get; set; } //varchar	1
    public string DateOfComm { get; set; } //varchar	1

    public string Vatno { get; set; } //varchar	1
    public string Cstno { get; set; } //varchar	1

    public string CSTRegDate { get; set; } //	varchar	15
    public string CSTRegAuthority { get; set; } //	varchar	-1
    public string CSTRegAuthAddress { get; set; } //	varchar	-1
    public string PowerStatus { get; set; } //	varchar	-1


    // 06/06/2017
    public string isSecondHandMachVal { get; set; } //decimal	9  added on 05/06/2017
    public string isSecondHandMachValValue { get; set; }
    public string TermLoanSanDate { get; set; } //date	3
    public string eepinscapUnit { get; set; } //decimal	9  added on 05/06/2017
    public string edpinscapUnit { get; set; } //decimal	9  added on 05/06/2017

    public string UnitState { get; set; }
    public string OffcState { get; set; }
    public string OffcOtherDist { get; set; }
    public string OffcOtherMandal { get; set; }
    public string OffcOtherVillage { get; set; }
    public string EMPart { get; set; }

    public string SubCaste { get; set; } //	Varchar	20 
    public string GSTNO { get; set; } //	Varchar	50

    public string GSTDate { get; set; } //	Varchar	20 
    public string IndustryExpansionType { get; set; } //	Varchar	20

    //public string PowNewConnectUnit { get; set; } //	Varchar	20 
    //public string PowNewContractUnit { get; set; } //	Varchar	20
    //public string PowExistConnectUnit { get; set; } //	Varchar	20 
    //public string PowExistContractUnit { get; set; } //	Varchar	20
    //public string PowDiversConnectUnit { get; set; } //	Varchar	20 
    //public string PowDiversContractUnit { get; set; } //	Varchar	20
    //public string IsPowerApplicable { get; set; } //	Varchar	20
    //public string IsPowerApplicableValues { get; set; } //	Varchar	20

    public string PowNewConnectUnit { get; set; } //	Varchar	20 
    public string PowNewConnectUnitValue { get; set; } //	Varchar	20 
    public string PowNewContractUnit { get; set; } //	Varchar	20
    public string PowNewContractUnitValue { get; set; } //	Varchar	20

    public string PowExistConnectUnit { get; set; } //	Varchar	20 
    public string PowExistConnectUnitValue { get; set; } //	Varchar	20 
    public string PowExistContractUnit { get; set; } //	Varchar	20
    public string PowExistContractUnitValue { get; set; } //	Varchar	20
    public string PowDiversConnectUnit { get; set; } //	Varchar	20 
    public string PowDiversConnectUnitValue { get; set; } //	Varchar	20 
    public string PowDiversContractUnit { get; set; } //	Varchar	20
    public string PowDiversContractUnitValue { get; set; } //	Varchar	20
    public string IsPowerApplicable { get; set; } //	Varchar	20
    public string IsPowerApplicableValues { get; set; } //	Varchar	20

    public string UdyogAadharType { get; set; } //	Varchar	20
    public string UdyogAadharRegdDate { get; set; } //	Varchar	20

    public string IsTermLoanAvailed { get; set; } //	Varchar	20
    public string BankAccType { get; set; } //	Varchar	20
    public string BankAccName { get; set; } //	Varchar	20

    // DIPC Entry Screen VOs
    public string incentiveTypeID { get; set; } //    Varchar    20
    public string incentiveTypename { get; set; } //    Varchar    20

    public decimal recommendedAnount { get; set; } //    Varchar    20
    public decimal sanctionAmount { get; set; } //    Varchar    20


    public string sanctionDate { get; set; } //    Varchar    20
    public string DIPCNO { get; set; } //    Varchar    20
    public string DIPCDate { get; set; } //    Varchar    20

    public string SLCNO { get; set; } //    Varchar    20
    public string SLCDate { get; set; } //    Varchar    20
    public string SCHEMEName { get; set; } //    Varchar    20
    public string Committee { get; set; } //    Varchar    20
    public string Status { get; set; } //    Varchar    20
    public string Remarks { get; set; } //    Varchar    20

    // 29072017
    public string Sector { get; set; } //    Varchar    20
    public string IndsCategory { get; set; } //    Varchar    20
    public string TypeOfAccount { get; set; } //    Varchar    20
    public string financialyear { get; set; } //    Varchar    20
    public string SeriatumNo { get; set; } //    Varchar    20 UnitStateId
    public string UnitStateId { get; set; } //    Varchar    20 
    public string FinHalfYear { get; set; } //    Varchar    20 

    public string Pride { get; set; } //    Varchar    20 
    public string UidNoInc { get; set; } //    Varchar    20 

    public string AuthorisedSignatoryDesignation { get; set; }
    public string AuthorisedSignatoryDesignationValue { get; set; }
    public string isIALA { get; set; } //    Varchar    20 
    public int IndusParkList { get; set; } //    Varchar    20 
    public string AppsLevel { get; set; } //    Varchar    20 

}


public class UnitLatest
{

    public string IncentiveId { get; set; }
    public string MstIncentiveID { get; set; }
    public string BankChange_Flag { get; set; }
    public string ManageChange_Flag { get; set; }
    public string Break_Flag { get; set; }
    public string Sick_Flag { get; set; }
    public string LocChange_Flag { get; set; }
    public string LOAChange_Flag { get; set; }
    public string OthersChange_Flag { get; set; }
    public string Bank_Name { get; set; }
    public string Branch_Name { get; set; }
    public string AccountNo { get; set; }
    public string IFSC_Cd { get; set; }
    public string Account_Type { get; set; }
    public string Bank_Remarks { get; set; }
    public string ManageChange { get; set; }
    public string Break_FromDt { get; set; }
    public string Break_ToDt { get; set; }
    public string Sickness { get; set; }
    public string Distrctcd { get; set; }
    public string MandalCd { get; set; }
    public string VillageCd { get; set; }
    public string LOA { get; set; }
    public string Other_remarks { get; set; }
    public string CrtdUser { get; set; }
    public string AgreementBond { get; set; }
    public string AssignmentLetter { get; set; }
    public string directorDropped { get; set; }
    public string directorAdded { get; set; }

}

public class IncentiveVosA
{
    public string User_id { get; set; } //	int	4
    public string Incentive_id { get; set; } //	varchar	20
    public string CfeQuid { get; set; } //	int	4
    public string CfoQuid { get; set; } //	int	4
    public string LandApprovedProjectCost { get; set; } //	decimal	9
    public string LandLoanSactioned { get; set; } //	decimal	9
    public string LandPromotersEquity { get; set; } //	decimal	9
    public string LandLoanAmountReleased { get; set; } //	decimal	9
    public string LandAssetsValuebyFinInstitution { get; set; } //	decimal	9
    public string LandAssetsValuebyCA { get; set; } //	decimal	9
    public string BuildingApprovedProjectCost { get; set; } //	decimal	9
    public string BuildingLoanSactioned { get; set; } //	decimal	9
    public string BuildingPromotersEquity { get; set; } //	decimal	9
    public string BuildingLoanAmountReleased { get; set; } //	decimal	9
    public string BuildingAssetsValuebyFinInstitution { get; set; } //	decimal	9
    public string BuildingAssetsValuebyCA { get; set; } //	decimal	9
    public string PlantMachineryApprovedProjectCost { get; set; } //	decimal	9
    public string PlantMachineryLoanSactioned { get; set; } //	decimal	9
    public string PlantMachineryPromotersEquity { get; set; } //	decimal	9
    public string PlantMachineryLoanAmountReleased { get; set; } //	decimal	9
    public string PlantMachineryAssetsValuebyFinInstitution { get; set; } //	decimal	9
    public string PlantMachineryAssetsValuebyCA { get; set; } //	decimal	9
    public string MachineryContingenciesApprovedProjectCost { get; set; } //	decimal	9
    public string MachineryContingenciesLoanSactioned { get; set; } //	decimal	9
    public string MachineryContingenciesPromotersEquity { get; set; } //	decimal	9
    public string MachineryContingenciesLoanAmountReleased { get; set; } //	decimal	9
    public string MachineryContingenciesAssetsValuebyFinInstitution { get; set; } //	decimal	9
    public string MachineryContingenciesAssetsValuebyCA { get; set; } //	decimal	9
    public string ErectionApprovedProjectCost { get; set; } //	decimal	9
    public string ErectionLoanSactioned { get; set; } //	decimal	9
    public string ErectionLoanAmountReleased { get; set; } //	decimal	9
    public string ErectionPromotersEquity { get; set; } //	decimal	9
    public string ErectionAssetsValuebyFinInstitution { get; set; } //	decimal	9
    public string ErectionAssetsValuebyCA { get; set; } //	decimal	9
    public string TechnicalfeasibilityApprovedProjectCost { get; set; } //	decimal	9
    public string TechnicalfeasibilityLoanSactioned { get; set; } //	decimal	9
    public string TechnicalfeasibilityPromotersEquity { get; set; } //	decimal	9
    public string TechnicalfeasibilityLoanAmountReleased { get; set; } //	decimal	9
    public string TechnicalfeasibilityAssetsValuebyFinInstitution { get; set; } //	decimal	9
    public string TechnicalfeasibilityAssetsValuebyCA { get; set; } //	decimal	9
    public string WorkingCapitalApprovedProjectCost { get; set; } //	decimal	9
    public string WorkingCapitalLoanSactioned { get; set; } //	decimal	9
    public string WorkingCapitalPromotersEquity { get; set; } //	decimal	9
    public string WorkingCapitalLoanAmountReleased { get; set; } //	decimal	9
    public string WorkingCapitalAssetsValuebyFinInstitution { get; set; } //	decimal	9
    public string WorkingCapitalAssetsValuebyCA { get; set; } //	decimal	9
    public string created_by { get; set; } //	int	4
    public string created_dt { get; set; } //	datetime	8
    public string Modified_by { get; set; } //	int	4
    public string Modified_dt { get; set; } //	datetime	8

}

public class IncentiveVosIncetForms
{
    //Is
    public string IncentveID { get; set; } //int
    public string AvldSubsidyScheme { get; set; } //	varchar
    public string AvldSubsidyAmt { get; set; } //	varchar
    public string SchemeEligible { get; set; } //varchar
    public string AppldInvestSubsidy { get; set; } //varchar
    public string AppldAddlAmtWomen { get; set; } //varchar
    public string AppldTotInvestSubsidy { get; set; } //varchar
    public string Created_by { get; set; } //int
    public string Created_dt { get; set; } //datetime
    public string status { get; set; } //	int
    public string Modified_by { get; set; } //int
    public string Modified_dt { get; set; } //datetime

    // added on 17.06.2017  
    public string ISubsidySCSCT { get; set; } //varchar(100)
    public string ISubsidyScheduledAreas { get; set; } //varchar(100)

    // stamp Duty

    public string AreaRegdSaledeed { get; set; } // varchar	100
    public string PlnthAreaBuild { get; set; } // varchar	50
    public string FivePlnthAreaBuild { get; set; } // varchar	50
    public string AreaReqdAppraisal { get; set; } // varchar	50
    public string AreaReqdTSPCB { get; set; } // varchar	50
    public string NatureofTrans { get; set; } // varchar	50
    public string SubRegOffc { get; set; } // varchar	-1
    public string RegdDeedNo { get; set; } // varchar	50
    public DateTime RegnDate { get; set; } // datetime	8
    public string StampTranfrDutyAP { get; set; } // varchar	50
    public string MortgageHypothDutyAP { get; set; } // varchar	50
    public string LandConvrChrgAP { get; set; } // 	50
    public string LandCostIeIdaIpAP { get; set; } // varchar	50
    public string StampTranfrDutyAC { get; set; } // varchar	50
    public string MortgageHypothDutyAC { get; set; } // varchar	50
    public string LandConvrChrgAC { get; set; } // varchar	50
    public string LandCostIeIdaIpAC { get; set; } // varchar	50

    // Advanced Subsidy for SC/ST
    public string TotalEquity { get; set; } // varchar	50
    public string OwnCapital { get; set; } // varchar	50
    public string Borrowed { get; set; } // varchar	50
    public string AdvSubClaimed { get; set; } // varchar	50


    // IID FUND

    public string UnitLocatedinIndustArea { get; set; } // 	char	1
    public string JustLocation { get; set; } // 	-1
    public string FinanceSource { get; set; } // 	varchar	500
    public string ReqdInfraFacilities { get; set; } // varchar	-1
    public string ProposedInfraCritical { get; set; } // varchar	-1
    public string EstimatesInfra { get; set; } // varchar	100
    public string CAName { get; set; } // varchar	500
    public string ProjDuration { get; set; } // varchar	50
    //public string MeasuresProposed { get; set; } // varchar	500
    public string MaintanCostAnnum { get; set; } // varchar	50 
    public string AmtClaimed { get; set; } // varchar	50

    // Check Slip

    public string addlocalemp1 { get; set; }
    public string addlocalemp2 { get; set; }
    public string CSIncentiveId { get; set; } // 	int	4
    public string CSEntprId { get; set; } // 	int	4
    public string CSCreatedBy { get; set; } // 	int	4
    public string CSbillsofinstitutfinancedEnterpriseindustries { get; set; } // 	char	1
    public string CSbillandpymtproofrespectofselffinancedEnterprisesindustries { get; set; } // 	char	1
    public string CasteCertificatesSCST { get; set; } // 	char	1
    public string CSEntrepreneurAadhar { get; set; } // 	char	1
    public string CSEntrepreneurPANCard { get; set; } // 	char	1
    public string CSCertificateofCA { get; set; } // 	char	1
    public string CSRegdPartnershipDeedArticles { get; set; } // 	char	1
    public string CSApprovalDirectorFactories { get; set; } // 	char	1
    public string CSBoilersCertificate { get; set; } // 	char	1
    public string CSApprovalDirectorTownCountryPlanningUDA { get; set; } // 	char	1
    public string CSRegularbuildingplansapprovalofMunicipalityGramPanchayat { get; set; } // 	char	1
    public string CSOperationTSPCBAcknowledgementGM { get; set; } // 	char	1
    public string CSPowerreleaseCertificatefrmTSTRANSCODISCOM { get; set; } // 	char	1
    public string CSEnvironmentalclearance { get; set; } // 	char	1
    public string CSOtherstatutoryapprovalsspecif { get; set; } // 	char	1
    public string CSEMPartIfullsetIEMIL { get; set; } // 	char	1
    public string CSEMPartIIfullsetIEMIL { get; set; } // 	char	1
    public string CSUdyogAadhar { get; set; } // 	char	1
    public string CSProjectReport { get; set; } // 	char	1
    public string CSTermloansanctionletters { get; set; } // 	char	1
    public string CSBoardResolutionauthorizing { get; set; } // 	char	1
    public string CSRegisteredlandSaledeedPremisesLeasedeed { get; set; } // 	char	1
    public string CSCACECertificateregarding2handplantmachinery { get; set; } // 	char	1
    public string CSCECertificateSelffabricatedmachinery { get; set; } // 	char	1
    public string CSBISCertificate { get; set; } // 	char	1
    public string CSDrugLicense { get; set; } // 	char	1
    public string CSExplosiveLicense { get; set; } // 	char	1
    public string CSVATCSTSGSTCertificate { get; set; } // 	char	1
    public string CSFormA { get; set; } // 	char	1
    public string CSFormB { get; set; } // 	char	1
    public string Status { get; set; } // 	char	1

    public string CSProductionParticulars3Years { get; set; } // 	char	1   
    public string CSRTACertificate { get; set; } // 	char	1   
    public string CSPHCertificate { get; set; } // 	char	1   
    public string CSUndertakingForm { get; set; } // 	char	1  

    public string ApplicantVehPhoto { get; set; } // 	char	1 
    public string firstsalebill { get; set; } // 	char	1
    public string COBORROWER { get; set; } // 	char	1 

    public string BLAStatementBrw { get; set; } // 	char	1 
    public string CCCoBorrwers { get; set; } // 	char	1 
    public string FacLicenses { get; set; } // 	char	1 
    public string TMCStar { get; set; } // 	char	1 
}
public class TsipassFeedbackFormVONews
{
    public string Que1 { get; set; }
    public string Que2 { get; set; }
    public string Que3 { get; set; }
    public string Que4 { get; set; }
    public string Que5 { get; set; }
    public string Que6 { get; set; }
    public string Que7 { get; set; }
    public string Que8 { get; set; }
    public string Que9 { get; set; }
    public string Que10 { get; set; }
    public string Feedbackfrom { get; set; }
    public string Created_by { get; set; }
    public string Ip { get; set; }
}
//public class TsipassFeedbackFormVOs
//{
//    //Post Application
//    public int PAoverallqltyrate { get; set; } //int
//    public string PAoverallqltyrateissues { get; set; } //	varchar(max)
//    public int PAinforateeaseoffinding { get; set; } //	int
//    public int PAinforateqltycomplt { get; set; } //int
//    public string PAinforateissues { get; set; } //varchar(max)
//    public int PAisupportsufficient { get; set; } //int
//    public string PAissupportsufficientissues { get; set; } //varchar(max)
//    public string PAawaretimeines { get; set; } //char(1)
//    public string PAawaretimeinesissues { get; set; } //varchar(max)
//    public string PAabletodoapplnonline { get; set; } //	char(1)
//    public string PAabletodoapplnonlineissues { get; set; } //varchar(max)
//    public string PAawaretsipassact { get; set; } //char(1)   
//    public string PAawaretsipassactisses { get; set; } //varchar(max)   
//    public string PAawaresinglewindow { get; set; } //char(1)
//    public string PAawaresinglewindowissues { get; set; } //char(1)

//    //Post Download Certificate
//    public string PDgivenlicensewithintimelines { get; set; } //char(1)  
//    public string PDgivenlicensewithintimelinesissues { get; set; } // //varchar(max) 
//    public string PDtrackapplnstatus { get; set; } // char(1)  
//    public string PDtrackapplnstatusissues { get; set; } // //varchar(max)
//    public string PDaskedOfflineinfodocs { get; set; } //char(1)  
//    public string PDaskedOfflineinfodocsissues { get; set; } // varchar(max)
//    public int PDInspectionpremisesfeedback { get; set; } // int
//    public string PDInspectionpremisesfeedbackissues { get; set; } // varchar(max)
//    public string PDfinalqltyofexp { get; set; } // // char(1)  
//    public string PDFfnalqltyofexpissues { get; set; } // varchar(max)
//    public int createdby { get; set; } // int

//}
// end of incentive addition

public class TsipassFeedbackFormVOs
{
    //Post Application
    public int PAoverallqltyrate { get; set; } //int
    public string PAoverallqltyrateissues { get; set; } //	varchar(max)
    public int PAinforateeaseoffinding { get; set; } //	int
    public int PAinforateqltycomplt { get; set; } //int
    public string PAinforateissues { get; set; } //varchar(max)
    public int PAisupportsufficient { get; set; } //int
    public string PAissupportsufficientissues { get; set; } //varchar(max)
    public string PAawaretimeines { get; set; } //char(1)
    public string PAawaretimeinesissues { get; set; } //varchar(max)
    public string PAabletodoapplnonline { get; set; } //	char(1)
    public string PAabletodoapplnonlineissues { get; set; } //varchar(max)
    public string PAawaretsipassact { get; set; } //char(1)   
    public string PAawaretsipassactisses { get; set; } //varchar(max)   
    public string PAawaresinglewindow { get; set; } //char(1)
    public string PAawaresinglewindowissues { get; set; } //char(1)

    //Post Download Certificate
    public string PDgivenlicensewithintimelines { get; set; } //char(1)  
    public string PDgivenlicensewithintimelinesissues { get; set; } // //varchar(max) 
    public string PDtrackapplnstatus { get; set; } // char(1)  
    public string PDtrackapplnstatusissues { get; set; } // //varchar(max)
    public string PDaskedOfflineinfodocs { get; set; } //char(1)  
    public string PDaskedOfflineinfodocsissues { get; set; } // varchar(max)
    public int PDInspectionpremisesfeedback { get; set; } // int
    public string PDInspectionpremisesfeedbackissues { get; set; } // varchar(max)
    public string PDfinalqltyofexp { get; set; } // // char(1)  
    public string PDFfnalqltyofexpissues { get; set; } // varchar(max)
    public int createdby { get; set; } // int

}

public static class ExtensionMethods
{
    public static bool IsBlankOrNull(this string value)
    {
        return value == null || value.Trim() == "";
    }

    public static bool IsZeroOrNull(this string value)
    {
        return value == null || value == "0";
    }

}


// IS Inspection Report New VO's

public class WaltaApplDetails
{
    public string ApplicationType_IndusorAgri { get; set; }
    public string ApplicantName { get; set; }
    public string DistrictID { get; set; }
    public string MandalId { get; set; }
    public string VillageId { get; set; }
    public string Street { get; set; }

    public string HouseNo { get; set; }
    public string LocationOfWell { get; set; }
    public string TypeofWell { get; set; }
    public string TypeOfDrwngWater { get; set; }

    public string SpecifactioncnOFPump { get; set; }
    public string DistanceFromExistWell { get; set; }
    public string Createdby { get; set; }
    public string ChkAcceptence { get; set; }

}

//public class InspectionReportVOs
//{
//    public string inctiveID { get; set; }
//    public string User_Code { get; set; }
//    public string nameofIND { get; set; }

//    public string isMobileUnit { get; set; }
//    public string udyogAdhar { get; set; }
//    public string IPOName { get; set; }
//    public string IPODesignation { get; set; }
//    public string InpectedDate { get; set; }
//    public string UnitCons { get; set; }
//    public string PersonIndustry { get; set; }
//    public string indStat { get; set; }
//    public string VerifyCert { get; set; }
//    public string ApplClm { get; set; }
//    public string DCP { get; set; }
//    public string DateShrtfall { get; set; }
//    public string DtShrtFallRcvd { get; set; }
//    public string Extent { get; set; }
//    public string BuiltupAra { get; set; }
//    public string TtimesBltup { get; set; }
//    public string ExtentElgble { get; set; }
//    public string YesNoClaimSubmn { get; set; }
//    public string ClmApplRmbrLandCst { get; set; }
//    public string Clm25PBldgCvl { get; set; }
//    public string LndCst25Prcny { get; set; }
//    public string RegnFee25Prcnt { get; set; }
//    public string Total25Prcnt { get; set; }
//    public string AprdPjCst25Prcnt { get; set; }
//    public string Proprtn25Prcnt { get; set; }
//    public string Computedcost { get; set; }
//    public string ValofItems { get; set; }
//    public string PlnthArea { get; set; }
//    public string TSSFC { get; set; }
//    public string AprvPJVal { get; set; }
//    public string AppJTot { get; set; }
//    public string TotVal1 { get; set; }
//    public string TotVal2 { get; set; }
//    public string TotVal3 { get; set; }
//    public string TotVal4 { get; set; }
//    public string TotVal100 { get; set; }
//    public string GrndTotVal { get; set; }
//    public string AsperApprPjCostPM { get; set; }
//    public string AsperCivilEngr { get; set; }
//    public string ComptdGm { get; set; }
//    public string Comptedcst { get; set; }
//    public string AsprAppPjCostPM { get; set; }
//    public string AsperListPM { get; set; }
//    public string TechKnowPM { get; set; }
//    public string MachPM { get; set; }
//    public string Prcnt2ndMach { get; set; }
//    public string Total2ndHandMach { get; set; }
//    public string Tot2ndMach { get; set; }
//    public string totCstCmptdLand { get; set; }
//    public string TotCstCmptdBldg { get; set; }
//    public string TotCstCmptdPlntMach { get; set; }
//    public string TotCstCmptdTotal { get; set; }
//    public string InvSubsidyVal { get; set; }
//    public string AddnInvSubsdyWmn { get; set; }
//    public string InvSubsdySCS { get; set; }
//    public string AddnInvSbsdySc10Prcnt { get; set; }
//    public string TotalInv { get; set; }
//    public string empval1 { get; set; }
//    public string empval2 { get; set; }
//    public string empval3 { get; set; }
//    public string empval4 { get; set; }
//    public string empval5 { get; set; }
//    public string empval6 { get; set; }
//    public string empval7 { get; set; }
//    public string empval8 { get; set; }
//    public string empval9999 { get; set; }
//    public string empval999 { get; set; }
//    public string empval99 { get; set; }
//    public string mstincentiveid { get; set; }
//    public string txtremarks { get; set; }
//    public string CreatedBy { get; set; }
//    public string LandExistEnterprise { get; set; }
//    public string LandExpanDiversification { get; set; }
//    public string LandExpanDiversificationPercentage { get; set; }
//    public string BuildingExistEnterprise { get; set; }
//    public string BuildingExpanDiversification { get; set; }
//    public string BuildingExpanDiversificationPercentage { get; set; }
//    public string PlantMachExistEnterprise { get; set; }
//    public string PlantMachExpanDiversification { get; set; }
//    public string PlantMachExpanDiversificationPercentage { get; set; }
//    public string RcptAppln { get; set; }
//    public string BuildingApprovedPrjtCost { get; set; }

//    //added by chinna
//    public string IsDlcOrSlc { get; set; }

//}
public class InspectionReportVOs
{
    public string inctiveID { get; set; }
    public string User_Code { get; set; }
    public string nameofIND { get; set; }

    public string isMobileUnit { get; set; }
    public string udyogAdhar { get; set; }
    public string IPOName { get; set; }
    public string IPODesignation { get; set; }
    public string InpectedDate { get; set; }
    public string UnitCons { get; set; }
    public string PersonIndustry { get; set; }
    public string indStat { get; set; }
    public string VerifyCert { get; set; }
    public string ApplClm { get; set; }
    public string DCP { get; set; }
    public string DateShrtfall { get; set; }
    public string DtShrtFallRcvd { get; set; }
    public string Extent { get; set; }
    public string BuiltupAra { get; set; }
    public string TtimesBltup { get; set; }
    public string ExtentElgble { get; set; }
    public string YesNoClaimSubmn { get; set; }
    public string ClmApplRmbrLandCst { get; set; }
    public string Clm25PBldgCvl { get; set; }
    public string LndCst25Prcny { get; set; }
    public string RegnFee25Prcnt { get; set; }
    public string Total25Prcnt { get; set; }
    public string AprdPjCst25Prcnt { get; set; }
    public string Proprtn25Prcnt { get; set; }
    public string Computedcost { get; set; }
    public string ValofItems { get; set; }
    public string PlnthArea { get; set; }
    public string TSSFC { get; set; }
    public string AprvPJVal { get; set; }
    public string AppJTot { get; set; }
    public string TotVal1 { get; set; }
    public string TotVal2 { get; set; }
    public string TotVal3 { get; set; }
    public string TotVal4 { get; set; }
    public string TotVal100 { get; set; }
    public string GrndTotVal { get; set; }
    public string AsperApprPjCostPM { get; set; }
    public string AsperCivilEngr { get; set; }
    public string ComptdGm { get; set; }
    public string Comptedcst { get; set; }
    public string AsprAppPjCostPM { get; set; }
    public string AsperListPM { get; set; }
    public string TechKnowPM { get; set; }
    public string MachPM { get; set; }
    public string Prcnt2ndMach { get; set; }
    public string Total2ndHandMach { get; set; }
    public string Tot2ndMach { get; set; }
    public string totCstCmptdLand { get; set; }
    public string TotCstCmptdBldg { get; set; }
    public string TotCstCmptdPlntMach { get; set; }
    public string TotCstCmptdTotal { get; set; }
    public string InvSubsidyVal { get; set; }
    public string AddnInvSubsdyWmn { get; set; }
    public string InvSubsdySCS { get; set; }
    public string AddnInvSbsdySc10Prcnt { get; set; }
    public string TotalInv { get; set; }
    public string empval1 { get; set; }
    public string empval2 { get; set; }
    public string empval3 { get; set; }
    public string empval4 { get; set; }
    public string empval5 { get; set; }
    public string empval6 { get; set; }
    public string empval7 { get; set; }
    public string empval8 { get; set; }
    public string empval9999 { get; set; }
    public string empval999 { get; set; }
    public string empval99 { get; set; }
    public string mstincentiveid { get; set; }
    public string txtremarks { get; set; }
    public string CreatedBy { get; set; }
    public string LandExistEnterprise { get; set; }
    public string LandExpanDiversification { get; set; }
    public string LandExpanDiversificationPercentage { get; set; }
    public string BuildingExistEnterprise { get; set; }
    public string BuildingExpanDiversification { get; set; }
    public string BuildingExpanDiversificationPercentage { get; set; }
    public string PlantMachExistEnterprise { get; set; }
    public string PlantMachExpanDiversification { get; set; }
    public string PlantMachExpanDiversificationPercentage { get; set; }
    public string RcptAppln { get; set; }
    public string BuildingApprovedPrjtCost { get; set; }

    //added by chinna
    public string IsDlcOrSlc { get; set; }
    public string caste_IR { get; set; }
    public string gender_IR { get; set; }
    public string category_IR { get; set; }
    public string enterprisetype_IR { get; set; }
    public string sector_IR { get; set; }
    public string servicetype_IR { get; set; }

    public string transNonTrans_IR { get; set; }


    public string txtLOActivityExpan { get; set; }
    public string txtinstalledccapExpan { get; set; }
    public string ddlquantityinExpan { get; set; }
    public string txtunitExpan { get; set; }
    public string txtvalueExpan { get; set; }
    public string TXTLANDVALUE_EXISTING { get; set; }
    public string TXTBUILDINGVALE_EXISTING { get; set; }
    public string TXTPLANTANDMACHINAERVALUE_EXISTING { get; set; }
    public string TXTLANDVALUE_EXPANSION { get; set; }
    public string TXTBUILDINGVALUE_EXPANSION { get; set; }
    public string TXTPLANTANDMACHINERYVALUE_EXPANSION { get; set; }
    public string TXTINCPERCENTAGE_LAND { get; set; }
    public string TXTINCRPERCEN_BUILDINGVALUE { get; set; }
    public string TXTINCPERCEN_PLANTANDMACHINERY { get; set; }

}
public class InpectionGrid422Vos
{
    public string InspectionID { get; set; }
    public string IncentiveID { get; set; }
    public string UserCode { get; set; }
    public string guideline422 { get; set; }
    public string Plintharea422 { get; set; }
    public string TSSFCnorms422 { get; set; }
    public string value422 { get; set; }
    public string CreatedBy { get; set; }
}

public class InpectionGrid423Vos
{
    public string InspectionID { get; set; }
    public string IncentiveID { get; set; }
    public string UserCode { get; set; }
    public string guideline423 { get; set; }
    public string Plintharea423 { get; set; }
    public string TSSFCnorms423 { get; set; }
    public string value423 { get; set; }
    public string CreatedBy { get; set; }
}

public class InpectionGridLOAVos
{
    public string InspectionID { get; set; }
    public string IncentiveID { get; set; }
    public string UserCode { get; set; }
    public string LineofActivity { get; set; }
    public string InstalledCapacity { get; set; }
    public string Value { get; set; }
    public string Unit { get; set; }
    public string LOAType { get; set; }
    public string CreatedBy { get; set; }
}

public class InpectionGridExpVos
{
    public string InspectionID { get; set; }
    public string IncentiveID { get; set; }
    public string UserCode { get; set; }
    public string LineofActivity { get; set; }
    public string InstalledCapacity { get; set; }
    public string Value { get; set; }
    public string Unit { get; set; }
    public string LOAType { get; set; }
    public string CreatedBy { get; set; }
}

public class IndustryLineofActivities
{
    public string slno { get; set; }
    public string LineOfActivity { get; set; }
    public string InstalledCapacity { get; set; }
    public string Unit { get; set; }
    public string ValueRs { get; set; }
    public string Created_by { get; set; }
    public string IncentiveId { get; set; }
    public string LOAType { get; set; }

}

public class IndustryPartnerDtls
{
    public string Slno { get; set; }
    public string Name { get; set; }
    public string Share { get; set; }
    public string Community { get; set; }
    public string Gender { get; set; }
    public string Designation { get; set; }
    public string Created_by { get; set; }
    public string IncentiveId { get; set; }
}
public class IndustryTermLoanDtls
{
    public string Slno { get; set; }
    public string TermLoanNo { get; set; }
    public string TermLoanApplDate { get; set; }
    public string InstitutionName { get; set; }
    public string TermloanSandate { get; set; }
    public string TermLoanSancRefNo { get; set; }
    public string TermLoanReleaseddate { get; set; }
    public string Created_by { get; set; }
    public string IncentiveId { get; set; }
}

public class proffecionaltaxBankDetails
{
    public string BankName { get; set; } //	varchar	50
    public string AccNo { get; set; } //	varchar	50
    public string BranchName { get; set; } //	varchar	50
    public string IFSCCode { get; set; } //	varchar	20
    public string ESTimatedannualturnover { get; set; } //	varchar	50
    public string panofindustrial { get; set; }
    public int CreatedBy { get; set; }
    public int Intenterprenuerid { get; set; }
    public int QuestionnaireId { get; set; }
    public int modified { get; set; }
    public string professiontype { get; set; }
}

public class Professiontaxpromoterdetails
{
    public string Name { get; set; }
    public string dob { get; set; }
    public string patnertype { get; set; }
    public string gender { get; set; }
    public string Doorno { get; set; }
    public string pan { get; set; }
    public string road { get; set; }
    public string country { get; set; }
    public string state { get; set; }
    public string district { get; set; }
    public string city { get; set; }
    public string pin { get; set; }
    public int CreatedBy { get; set; }
    public int Intenterprenuerid { get; set; }
    public int QuestionnaireId { get; set; }
    public int modified { get; set; }
    public string Districts { get; set; }

    public string Email { get; set; }
    public string MobileNo { get; set; }
    public string AadharNo { get; set; }
}
public class Professiontaxaddressdetails
{
    public string Doorno { get; set; }
    public string road { get; set; }
    public string locality { get; set; }
    public string mandal { get; set; }
    public string state { get; set; }//--
    public string district { get; set; }//--
    public string city { get; set; }
    public string pin { get; set; }
    public int CreatedBy { get; set; }
    public int Intenterprenuerid { get; set; }
    public int QuestionnaireId { get; set; }
    public int modified { get; set; }

}

public class TSLOANINDUSTRY
{
    public string Name_of_Enterprenur { get; set; }
    public string Name_of_unit { get; set; }
    public string aadhar_number { get; set; }
    public string mobile_numnber { get; set; }
    public string district { get; set; }
    public string Mandal { get; set; }
    public string bank_name { get; set; }
    public string branch_name { get; set; }
    public string loan_application_date { get; set; }
    public string created_by { get; set; }
    public string TypeofLoan { get; set; }
    public string Loan_Amount { get; set; }
    public string Approved_by { get; set; }
    public string Approved_dt { get; set; }
    public string Remarks { get; set; }
    public string OTP { get; set; }
    public string LoanNumber { get; set; }
}

public class BANKINDUSTRYSTATUS
{
    public string loan_application_date { get; set; }
    public string Loan_Amount { get; set; }
    public string NAME_OF_THE_UNIT { get; set; }
    public string LINE_OF_ACTIVITY { get; set; }
    public string DISTRICT_ID { get; set; }
    public string MANDAL_ID { get; set; }
    public string CONTACT_NO { get; set; }
    public string GMAIL_ID { get; set; }
    public string DATE { get; set; }
    public string TYPE { get; set; }
    public string CREATED_BY { get; set; }
    public string MODEFIED_BY { get; set; }
    public string MODEFIED_DT { get; set; }
    public string APPROVED_BY { get; set; }
    public string APPROVED_DT { get; set; }
    public string REMARKS { get; set; }
    public string IndustrySick { get; set; }
}

public class MSMEUNITDETAILS
{
    public string UNITS_IE_OR_NOT { get; set; }
    public string CATEGOERY_ID { get; set; }
    public string DISTRICT_ID { get; set; }
    public string MANDAL_ID { get; set; }
    public string UNIT_NAME { get; set; }
    public string EMPLOYMENT { get; set; }
    public string NAME_OF_ENTREPRENEUR { get; set; }
    public string MOBILE_NO { get; set; }
    public string EMAIL_ID { get; set; }
    public string UAM_ID { get; set; }
    public string LINE_OF_ACTIVITY { get; set; }
    public string PRODUCT_SPEC { get; set; }
    public string CreatedBy { get; set; }
    public string Date { get; set; }
    public string presentstatus { get; set; }
    public string otherpresentstatus { get; set; }
    public string TYPEOFINDUSTRY { get; set; }
    public string DATEOFCOMMENCEMENT { get; set; }
    public string EXPORT { get; set; }
    public string EXPORTCOUNTRY { get; set; }
    public string TYPEOFCONNECTION { get; set; }
    public string PCBCATEGORY { get; set; }
    public string SOCAILSTATUS { get; set; }
    public string PROMOTERWOMEN { get; set; }
    public string PROMOTERDISABLED { get; set; }
    public string SECTOR { get; set; }
    public string RAWMATERIALPROCURED { get; set; }
    public string RAWMATERIALDISTRICT { get; set; }
    public string RAWMATERIALSTATE { get; set; }
    public string RAWMATERIALCOUNTRY { get; set; }
    public string Completeaddress { get; set; }
    public string investment { get; set; }
    public string MSMENO { get; set; }
    public string REMARKS { get; set; }
    public int VillageID { get; set; }
    public string HouseNo { get; set; }
    public string Locality { get; set; }
    public string Street { get; set; }
    public string LandMark { get; set; }
    public string IndustrialParkID { get; set; }
    public string uploaddetailslistofmachinery { get; set; }
    public string tsipassuidno { get; set; }
    public string intcfeid { get; set; }
    public string noofempgivenesipf { get; set; }
    public string noofempnotgivenesipf { get; set; }
    public string noofemplocal { get; set; }
    public string noofempnonlocal { get; set; }
    public string Migrantworkman { get; set; }
    public string noofempdirect { get; set; }
    public string noofempindirect { get; set; }
    public string noofempoutsourcig { get; set; }
    public string noofempContract { get; set; }

    public string skilledcontract { get; set; }
    public string skilledoutsourcing { get; set; }
    public string skilledtotal { get; set; }

    public string semiskilledcontract { get; set; }
    public string semiskilledoutsourcing { get; set; }
    public string semiskilledtotal { get; set; }

    public string unskilledcontract { get; set; }
    public string unskilledoutsourcing { get; set; }
    public string unskilledtotal { get; set; }

    public string managerialcontract { get; set; }
    public string managerialoutsourcing { get; set; }
    public string managerialtotal { get; set; }

    public string noofMenemp { get; set; }
    public string noofWomenemp { get; set; }

   

    public string totalEmployement { get; set; }

    public string latitude { get; set; }
    public string longitude { get; set; }
    //-----newly added after survey --------- survey done in June 2024///
    public string isUnitRegistered { get; set; }
    public string CorrAdr_HouseNo { get; set; }
    public string CorrAdr_StreetName { get; set; }
    public string CorrAdr_Locality { get; set; }
    public string CorrAdr_LandMark { get; set; }
    public string CorrAdr_DistrictId { get; set; }
    public string CorrAdr_MandalId { get; set; }
    public string CorrAdr_VillageId { get; set; }
    public string MSMEOwnerGeneration { get; set; }
    public string AvailedLoanScheme { get; set; }
    public string OtherLoanScheme { get; set; }
    public string LoanStatus { get; set; }
    public string LoanBankName { get; set; }
    public string LoanNBFCName { get; set; }
    public string CapitalInvestment { get; set; }
    public string Turnover { get; set; }
    public string ProfitorLoss { get; set; }
    public string ProfitAmount { get; set; }
    public string LossAmount { get; set; }
    public string EmpWithinDistrict { get; set; }
    public string AltMobileNo { get; set; }
    public string IsDuplorNEorNA { get; set; }
    public string DuplMaptoMSMEID { get; set; }
    public string DuplMaptoMSMEUnitname { get; set; }
    public string ConfrmDonethrough { get; set; }
    public string OtherConfrmation { get; set; }
    public string ConfrmDoneby { get; set; }
    public string ClosingMainReason { get; set; }
    public string ClosingSubReason { get; set; }
    //-----newly added after survey --------- survey done in June 2024///
}



public class MSMELineOfManfGrid1DETAILS
{
    public String MSMEID { get; set; }
    public String Item { get; set; }
    public String QuantityPerAnnum { get; set; }
    public string ProductionInUnits { get; set; }
    public string CreatedBy { get; set; }
    public string OtherRawUnits { get; set; }
    public String RMDID { get; set; }
    //public String MSMEID { get; set; }

}

public class MSMELineOfManfGrid2DETAILS
{
    public String MSMEID { get; set; }
    public String Item { get; set; }
    public String QuantityPerAnnum { get; set; }
    public string ProductionInUnits { get; set; }
    public string Attachment { get; set; }
    public string CreatedBy { get; set; }
    public string ManufOtherUnits { get; set; }
    public string OthersSpecify { get; set; }
    //public String MSMEID { get; set; }
    public string prodmanf_ID { get; set; }
}



public class DraftQuestionnaireTourismPerformanceLicense
{
    public string TypeofEventValue { set; get; }
    public string structureTypeValue { set; get; }
    public string FabricationValue { set; get; }
    public string ExpectedstrengthValue { set; get; }

    public string EventManagement_Address { set; get; }
    public string VIP_Visited { set; get; }
    public string VIP_Visited_Name { set; get; }
    public string Foreigner_Expected { set; get; }
    public string Foreigner_Expected_Remarks { set; get; }
    public string Exits_Width { set; get; }
    public string NOofGangways { set; get; }
    public string Police_NOC { set; get; }
    public string ClassificationofEvent_Value { set; get; }
    public string Location_Width { set; get; }

    public int TourismPerformanceLicenseID { set; get; }
    public string TypeofEvent { set; get; }
    public string ClassificationofEvent { set; get; }
    public string NameofTheApplicant { set; get; }
    public string FatherName { set; get; }
    public string AadharNumber { set; get; }
    public string PanNumber { set; get; }
    public string AddressWithContact { set; get; }
    public string NameAddEventManagement { set; get; }
    public string AddressofEventManagement { set; get; }
    public string GSTNumber { set; get; }
    public string NameLocPerformance { set; get; }
    public string structureType { set; get; }
    public string NoofStalls { set; get; }
    public string Size { set; get; }
    public string Fabrication { set; get; }
    public string clearspace { set; get; }
    public string TemporaryStructure { set; get; }
    public string WorkingtimingsFrm { set; get; }
    public string WorkingtimingsTo { set; get; }
    public string Performancetimingsfrm { set; get; }
    public string PerformancetimingsTo { set; get; }
    public DateTime StartDate { set; get; }
    public DateTime EndDate { set; get; }
    public string Expectedstrength { set; get; }
    public string ProductRelated { set; get; }
    public string FoodBeverages { set; get; }
    public string GamesEntertainment { set; get; }
    public string Others { set; get; }
    public string FreeEntryInvitation { set; get; }
    public string FreeEntryWithoutInvitation { set; get; }
    public string TicketShow { set; get; }
    public string TicketShowDetails { set; get; }
    public string AdultTicket { set; get; }
    public string ChildrensTicket { set; get; }
    public string NoOfTicketCounters { set; get; }
    public string ParkingSpace { set; get; }
    public string NoOfSecurityVehicleChecking { set; get; }
    public string SecurityArrangements { set; get; }
    public string ProposedNoOfCCTV { set; get; }
    public string ProposedNoOfDFMD { set; get; }
    public string NoOfSecurityAndVolunteers { set; get; }
    public string NoOfExitsWithWidth { set; get; }
    public string WidthOfGangways { set; get; }
    public string CO2Cylinders { set; get; }
    public string FoamCylinders { set; get; }
    public string NoOfBuckets { set; get; }
    public string NoOfWaterStorageTanks { set; get; }
    public string NoOfSandBags { set; get; }
    public string StandbyFireService { set; get; }
    public string FirstAidFacility { set; get; }
    public string MedicalAttender { set; get; }
    public string SatndbyAmbulanceFacility { set; get; }
    public DataTable FileUploadPaths { get; set; }
    public int CreatedBy { get; set; }
    public string PoliceNOC { set; get; }
    public string MobileNoApplicant { set; get; }
    public string Email { set; get; }

    public string District { set; get; }
    public string Mandal { set; get; }
    public string Village { set; get; }
    public string Pincode { set; get; }

    public string CompanyDistrict { set; get; }
    public string CompanyMandal { set; get; }
    public string CompanyVillage { set; get; }
    public string CompanyPincode { set; get; }

    public string VehicleStandByCategoryMaster { set; get; }

}

public class DraftQuestionnaireTravelAgent
{
    public int TravelAgentID { get; set; }
    public string NameoftheAgency { get; set; }
    public string NameoftheOwner { get; set; }
    public string MobileNo { get; set; }
    public string EmailID { get; set; }
    public string AadhaarNo { get; set; }
    public string Appliedfor { get; set; }
    public string Agencyarrangementsoftickets { get; set; }
    public string Agencyarrangementstransport { get; set; }
    public string AgencyAdventureTourism { get; set; }
    public string Agencyprovidingtouristtransport { get; set; }
    public string Applyingfor { get; set; }
    public DateTime DateofCommencementoftheBusiness { get; set; }
    public string ConstitutionoftheAgency { get; set; }
    public string Whetherthepremisesis { get; set; }
    public string OfficeSpace { get; set; }
    public string ReceptionArea { get; set; }
    public string LocationArea { get; set; }
    public string Address { get; set; }
    public string District { get; set; }

    public string Mandal { get; set; }
    public string Village { get; set; }

    public string PINCode { get; set; }
    public string PhoneNo { get; set; }
    public string FAXNo { get; set; }
    public string MobileNoOffice { get; set; }
    public string EmailIDOffice { get; set; }
    public string Website { get; set; }
    public string NoofqualifiedStaff { get; set; }
    public string NoofexperiencedStaff { get; set; }
    public string TotalNoofStaffEmployed { get; set; }
    public string Paidupcapital { get; set; }
    public string PreviousTurnover { get; set; }
    public string PANNoFinancial { get; set; }
    public string PreviousYearITReturns { get; set; }
    public string GSTNoFinancial { get; set; }
    public string BankAccountDetails { get; set; }
    public string Branchname { get; set; }
    public string Accountnumber { get; set; }
    public string IFSC { get; set; }
    public string MICR { get; set; }
    public string EnclosereferenceletterfromBank { get; set; }
    public string DoyourequireTradeLicense { get; set; }
    public string DoyourequireShopsEstablishmentLicense { get; set; }
    public string WhetherregisteredwithanyTourismDepartment { get; set; }
    public string NoofTouristVehicles { get; set; }
    public int CreatedBy { get; set; }
    public DataTable FileUploadPaths { get; set; }
}


public struct Response
{
    public bool ResponseVal;
    public string Reason;
    public Response(bool boolResponse = false)
    {
        this.ResponseVal = boolResponse;
        this.Reason = "Error";
    }
}















